/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the VIPInstancesResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VIPInstancesResp{}

// VIPInstancesResp struct for VIPInstancesResp
type VIPInstancesResp struct {
	VipInstances []VIPInstance `json:"vip_instances,omitempty"`
}

// NewVIPInstancesResp instantiates a new VIPInstancesResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVIPInstancesResp() *VIPInstancesResp {
	this := VIPInstancesResp{}
	return &this
}

// NewVIPInstancesRespWithDefaults instantiates a new VIPInstancesResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVIPInstancesRespWithDefaults() *VIPInstancesResp {
	this := VIPInstancesResp{}
	return &this
}

// GetVipInstances returns the VipInstances field value if set, zero value otherwise.
func (o *VIPInstancesResp) GetVipInstances() []VIPInstance {
	if o == nil || IsNil(o.VipInstances) {
		var ret []VIPInstance
		return ret
	}
	return o.VipInstances
}

// GetVipInstancesOk returns a tuple with the VipInstances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VIPInstancesResp) GetVipInstancesOk() ([]VIPInstance, bool) {
	if o == nil || IsNil(o.VipInstances) {
		return nil, false
	}
	return o.VipInstances, true
}

// HasVipInstances returns a boolean if a field has been set.
func (o *VIPInstancesResp) HasVipInstances() bool {
	if o != nil && !IsNil(o.VipInstances) {
		return true
	}

	return false
}

// SetVipInstances gets a reference to the given []VIPInstance and assigns it to the VipInstances field.
func (o *VIPInstancesResp) SetVipInstances(v []VIPInstance) {
	o.VipInstances = v
}

func (o VIPInstancesResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VIPInstancesResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.VipInstances) {
		toSerialize["vip_instances"] = o.VipInstances
	}
	return toSerialize, nil
}

type NullableVIPInstancesResp struct {
	value *VIPInstancesResp
	isSet bool
}

func (v NullableVIPInstancesResp) Get() *VIPInstancesResp {
	return v.value
}

func (v *NullableVIPInstancesResp) Set(val *VIPInstancesResp) {
	v.value = val
	v.isSet = true
}

func (v NullableVIPInstancesResp) IsSet() bool {
	return v.isSet
}

func (v *NullableVIPInstancesResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVIPInstancesResp(val *VIPInstancesResp) *NullableVIPInstancesResp {
	return &NullableVIPInstancesResp{value: val, isSet: true}
}

func (v NullableVIPInstancesResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVIPInstancesResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


