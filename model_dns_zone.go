/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the DNSZone type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DNSZone{}

// DNSZone DNSZone model. +X:model:generate;check_get +X:benchmark:
type DNSZone struct {
	ActionStatus *string `json:"action_status,omitempty"`
	Create *time.Time `json:"create,omitempty"`
	DnsGatewayGroup *DNSGatewayGroupNestview `json:"dns_gateway_group,omitempty"`
	Id *int64 `json:"id,omitempty"`
	Origin *string `json:"origin,omitempty"`
	Status *string `json:"status,omitempty"`
	Ttl *int64 `json:"ttl,omitempty"`
	Update *time.Time `json:"update,omitempty"`
}

// NewDNSZone instantiates a new DNSZone object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDNSZone() *DNSZone {
	this := DNSZone{}
	return &this
}

// NewDNSZoneWithDefaults instantiates a new DNSZone object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDNSZoneWithDefaults() *DNSZone {
	this := DNSZone{}
	return &this
}

// GetActionStatus returns the ActionStatus field value if set, zero value otherwise.
func (o *DNSZone) GetActionStatus() string {
	if o == nil || IsNil(o.ActionStatus) {
		var ret string
		return ret
	}
	return *o.ActionStatus
}

// GetActionStatusOk returns a tuple with the ActionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSZone) GetActionStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ActionStatus) {
		return nil, false
	}
	return o.ActionStatus, true
}

// HasActionStatus returns a boolean if a field has been set.
func (o *DNSZone) HasActionStatus() bool {
	if o != nil && !IsNil(o.ActionStatus) {
		return true
	}

	return false
}

// SetActionStatus gets a reference to the given string and assigns it to the ActionStatus field.
func (o *DNSZone) SetActionStatus(v string) {
	o.ActionStatus = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *DNSZone) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSZone) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *DNSZone) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *DNSZone) SetCreate(v time.Time) {
	o.Create = &v
}

// GetDnsGatewayGroup returns the DnsGatewayGroup field value if set, zero value otherwise.
func (o *DNSZone) GetDnsGatewayGroup() DNSGatewayGroupNestview {
	if o == nil || IsNil(o.DnsGatewayGroup) {
		var ret DNSGatewayGroupNestview
		return ret
	}
	return *o.DnsGatewayGroup
}

// GetDnsGatewayGroupOk returns a tuple with the DnsGatewayGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSZone) GetDnsGatewayGroupOk() (*DNSGatewayGroupNestview, bool) {
	if o == nil || IsNil(o.DnsGatewayGroup) {
		return nil, false
	}
	return o.DnsGatewayGroup, true
}

// HasDnsGatewayGroup returns a boolean if a field has been set.
func (o *DNSZone) HasDnsGatewayGroup() bool {
	if o != nil && !IsNil(o.DnsGatewayGroup) {
		return true
	}

	return false
}

// SetDnsGatewayGroup gets a reference to the given DNSGatewayGroupNestview and assigns it to the DnsGatewayGroup field.
func (o *DNSZone) SetDnsGatewayGroup(v DNSGatewayGroupNestview) {
	o.DnsGatewayGroup = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DNSZone) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSZone) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DNSZone) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *DNSZone) SetId(v int64) {
	o.Id = &v
}

// GetOrigin returns the Origin field value if set, zero value otherwise.
func (o *DNSZone) GetOrigin() string {
	if o == nil || IsNil(o.Origin) {
		var ret string
		return ret
	}
	return *o.Origin
}

// GetOriginOk returns a tuple with the Origin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSZone) GetOriginOk() (*string, bool) {
	if o == nil || IsNil(o.Origin) {
		return nil, false
	}
	return o.Origin, true
}

// HasOrigin returns a boolean if a field has been set.
func (o *DNSZone) HasOrigin() bool {
	if o != nil && !IsNil(o.Origin) {
		return true
	}

	return false
}

// SetOrigin gets a reference to the given string and assigns it to the Origin field.
func (o *DNSZone) SetOrigin(v string) {
	o.Origin = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DNSZone) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSZone) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DNSZone) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *DNSZone) SetStatus(v string) {
	o.Status = &v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *DNSZone) GetTtl() int64 {
	if o == nil || IsNil(o.Ttl) {
		var ret int64
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSZone) GetTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.Ttl) {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *DNSZone) HasTtl() bool {
	if o != nil && !IsNil(o.Ttl) {
		return true
	}

	return false
}

// SetTtl gets a reference to the given int64 and assigns it to the Ttl field.
func (o *DNSZone) SetTtl(v int64) {
	o.Ttl = &v
}

// GetUpdate returns the Update field value if set, zero value otherwise.
func (o *DNSZone) GetUpdate() time.Time {
	if o == nil || IsNil(o.Update) {
		var ret time.Time
		return ret
	}
	return *o.Update
}

// GetUpdateOk returns a tuple with the Update field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSZone) GetUpdateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Update) {
		return nil, false
	}
	return o.Update, true
}

// HasUpdate returns a boolean if a field has been set.
func (o *DNSZone) HasUpdate() bool {
	if o != nil && !IsNil(o.Update) {
		return true
	}

	return false
}

// SetUpdate gets a reference to the given time.Time and assigns it to the Update field.
func (o *DNSZone) SetUpdate(v time.Time) {
	o.Update = &v
}

func (o DNSZone) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DNSZone) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActionStatus) {
		toSerialize["action_status"] = o.ActionStatus
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.DnsGatewayGroup) {
		toSerialize["dns_gateway_group"] = o.DnsGatewayGroup
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Origin) {
		toSerialize["origin"] = o.Origin
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Ttl) {
		toSerialize["ttl"] = o.Ttl
	}
	if !IsNil(o.Update) {
		toSerialize["update"] = o.Update
	}
	return toSerialize, nil
}

type NullableDNSZone struct {
	value *DNSZone
	isSet bool
}

func (v NullableDNSZone) Get() *DNSZone {
	return v.value
}

func (v *NullableDNSZone) Set(val *DNSZone) {
	v.value = val
	v.isSet = true
}

func (v NullableDNSZone) IsSet() bool {
	return v.isSet
}

func (v *NullableDNSZone) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDNSZone(val *DNSZone) *NullableDNSZone {
	return &NullableDNSZone{value: val, isSet: true}
}

func (v NullableDNSZone) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDNSZone) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


