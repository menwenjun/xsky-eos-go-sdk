/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EmailConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailConfig{}

// EmailConfig EmailConfig define email config
type EmailConfig struct {
	Enabled *bool `json:"enabled,omitempty"`
	SmtpAuthEnabled *bool `json:"smtp_auth_enabled,omitempty"`
	SmtpEmailFrom *string `json:"smtp_email_from,omitempty"`
	SmtpEnableSsl *bool `json:"smtp_enable_ssl,omitempty"`
	SmtpHost *string `json:"smtp_host,omitempty"`
	SmtpPassword *string `json:"smtp_password,omitempty"`
	SmtpPort *int64 `json:"smtp_port,omitempty"`
	SmtpRsaKeyId *string `json:"smtp_rsa_key_id,omitempty"`
	SmtpSkipTlsCertVerify *bool `json:"smtp_skip_tls_cert_verify,omitempty"`
	SmtpSslMode *string `json:"smtp_ssl_mode,omitempty"`
	SmtpUser *string `json:"smtp_user,omitempty"`
	Subject *string `json:"subject,omitempty"`
}

// NewEmailConfig instantiates a new EmailConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailConfig() *EmailConfig {
	this := EmailConfig{}
	return &this
}

// NewEmailConfigWithDefaults instantiates a new EmailConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailConfigWithDefaults() *EmailConfig {
	this := EmailConfig{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *EmailConfig) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailConfig) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *EmailConfig) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *EmailConfig) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetSmtpAuthEnabled returns the SmtpAuthEnabled field value if set, zero value otherwise.
func (o *EmailConfig) GetSmtpAuthEnabled() bool {
	if o == nil || IsNil(o.SmtpAuthEnabled) {
		var ret bool
		return ret
	}
	return *o.SmtpAuthEnabled
}

// GetSmtpAuthEnabledOk returns a tuple with the SmtpAuthEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailConfig) GetSmtpAuthEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.SmtpAuthEnabled) {
		return nil, false
	}
	return o.SmtpAuthEnabled, true
}

// HasSmtpAuthEnabled returns a boolean if a field has been set.
func (o *EmailConfig) HasSmtpAuthEnabled() bool {
	if o != nil && !IsNil(o.SmtpAuthEnabled) {
		return true
	}

	return false
}

// SetSmtpAuthEnabled gets a reference to the given bool and assigns it to the SmtpAuthEnabled field.
func (o *EmailConfig) SetSmtpAuthEnabled(v bool) {
	o.SmtpAuthEnabled = &v
}

// GetSmtpEmailFrom returns the SmtpEmailFrom field value if set, zero value otherwise.
func (o *EmailConfig) GetSmtpEmailFrom() string {
	if o == nil || IsNil(o.SmtpEmailFrom) {
		var ret string
		return ret
	}
	return *o.SmtpEmailFrom
}

// GetSmtpEmailFromOk returns a tuple with the SmtpEmailFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailConfig) GetSmtpEmailFromOk() (*string, bool) {
	if o == nil || IsNil(o.SmtpEmailFrom) {
		return nil, false
	}
	return o.SmtpEmailFrom, true
}

// HasSmtpEmailFrom returns a boolean if a field has been set.
func (o *EmailConfig) HasSmtpEmailFrom() bool {
	if o != nil && !IsNil(o.SmtpEmailFrom) {
		return true
	}

	return false
}

// SetSmtpEmailFrom gets a reference to the given string and assigns it to the SmtpEmailFrom field.
func (o *EmailConfig) SetSmtpEmailFrom(v string) {
	o.SmtpEmailFrom = &v
}

// GetSmtpEnableSsl returns the SmtpEnableSsl field value if set, zero value otherwise.
func (o *EmailConfig) GetSmtpEnableSsl() bool {
	if o == nil || IsNil(o.SmtpEnableSsl) {
		var ret bool
		return ret
	}
	return *o.SmtpEnableSsl
}

// GetSmtpEnableSslOk returns a tuple with the SmtpEnableSsl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailConfig) GetSmtpEnableSslOk() (*bool, bool) {
	if o == nil || IsNil(o.SmtpEnableSsl) {
		return nil, false
	}
	return o.SmtpEnableSsl, true
}

// HasSmtpEnableSsl returns a boolean if a field has been set.
func (o *EmailConfig) HasSmtpEnableSsl() bool {
	if o != nil && !IsNil(o.SmtpEnableSsl) {
		return true
	}

	return false
}

// SetSmtpEnableSsl gets a reference to the given bool and assigns it to the SmtpEnableSsl field.
func (o *EmailConfig) SetSmtpEnableSsl(v bool) {
	o.SmtpEnableSsl = &v
}

// GetSmtpHost returns the SmtpHost field value if set, zero value otherwise.
func (o *EmailConfig) GetSmtpHost() string {
	if o == nil || IsNil(o.SmtpHost) {
		var ret string
		return ret
	}
	return *o.SmtpHost
}

// GetSmtpHostOk returns a tuple with the SmtpHost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailConfig) GetSmtpHostOk() (*string, bool) {
	if o == nil || IsNil(o.SmtpHost) {
		return nil, false
	}
	return o.SmtpHost, true
}

// HasSmtpHost returns a boolean if a field has been set.
func (o *EmailConfig) HasSmtpHost() bool {
	if o != nil && !IsNil(o.SmtpHost) {
		return true
	}

	return false
}

// SetSmtpHost gets a reference to the given string and assigns it to the SmtpHost field.
func (o *EmailConfig) SetSmtpHost(v string) {
	o.SmtpHost = &v
}

// GetSmtpPassword returns the SmtpPassword field value if set, zero value otherwise.
func (o *EmailConfig) GetSmtpPassword() string {
	if o == nil || IsNil(o.SmtpPassword) {
		var ret string
		return ret
	}
	return *o.SmtpPassword
}

// GetSmtpPasswordOk returns a tuple with the SmtpPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailConfig) GetSmtpPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.SmtpPassword) {
		return nil, false
	}
	return o.SmtpPassword, true
}

// HasSmtpPassword returns a boolean if a field has been set.
func (o *EmailConfig) HasSmtpPassword() bool {
	if o != nil && !IsNil(o.SmtpPassword) {
		return true
	}

	return false
}

// SetSmtpPassword gets a reference to the given string and assigns it to the SmtpPassword field.
func (o *EmailConfig) SetSmtpPassword(v string) {
	o.SmtpPassword = &v
}

// GetSmtpPort returns the SmtpPort field value if set, zero value otherwise.
func (o *EmailConfig) GetSmtpPort() int64 {
	if o == nil || IsNil(o.SmtpPort) {
		var ret int64
		return ret
	}
	return *o.SmtpPort
}

// GetSmtpPortOk returns a tuple with the SmtpPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailConfig) GetSmtpPortOk() (*int64, bool) {
	if o == nil || IsNil(o.SmtpPort) {
		return nil, false
	}
	return o.SmtpPort, true
}

// HasSmtpPort returns a boolean if a field has been set.
func (o *EmailConfig) HasSmtpPort() bool {
	if o != nil && !IsNil(o.SmtpPort) {
		return true
	}

	return false
}

// SetSmtpPort gets a reference to the given int64 and assigns it to the SmtpPort field.
func (o *EmailConfig) SetSmtpPort(v int64) {
	o.SmtpPort = &v
}

// GetSmtpRsaKeyId returns the SmtpRsaKeyId field value if set, zero value otherwise.
func (o *EmailConfig) GetSmtpRsaKeyId() string {
	if o == nil || IsNil(o.SmtpRsaKeyId) {
		var ret string
		return ret
	}
	return *o.SmtpRsaKeyId
}

// GetSmtpRsaKeyIdOk returns a tuple with the SmtpRsaKeyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailConfig) GetSmtpRsaKeyIdOk() (*string, bool) {
	if o == nil || IsNil(o.SmtpRsaKeyId) {
		return nil, false
	}
	return o.SmtpRsaKeyId, true
}

// HasSmtpRsaKeyId returns a boolean if a field has been set.
func (o *EmailConfig) HasSmtpRsaKeyId() bool {
	if o != nil && !IsNil(o.SmtpRsaKeyId) {
		return true
	}

	return false
}

// SetSmtpRsaKeyId gets a reference to the given string and assigns it to the SmtpRsaKeyId field.
func (o *EmailConfig) SetSmtpRsaKeyId(v string) {
	o.SmtpRsaKeyId = &v
}

// GetSmtpSkipTlsCertVerify returns the SmtpSkipTlsCertVerify field value if set, zero value otherwise.
func (o *EmailConfig) GetSmtpSkipTlsCertVerify() bool {
	if o == nil || IsNil(o.SmtpSkipTlsCertVerify) {
		var ret bool
		return ret
	}
	return *o.SmtpSkipTlsCertVerify
}

// GetSmtpSkipTlsCertVerifyOk returns a tuple with the SmtpSkipTlsCertVerify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailConfig) GetSmtpSkipTlsCertVerifyOk() (*bool, bool) {
	if o == nil || IsNil(o.SmtpSkipTlsCertVerify) {
		return nil, false
	}
	return o.SmtpSkipTlsCertVerify, true
}

// HasSmtpSkipTlsCertVerify returns a boolean if a field has been set.
func (o *EmailConfig) HasSmtpSkipTlsCertVerify() bool {
	if o != nil && !IsNil(o.SmtpSkipTlsCertVerify) {
		return true
	}

	return false
}

// SetSmtpSkipTlsCertVerify gets a reference to the given bool and assigns it to the SmtpSkipTlsCertVerify field.
func (o *EmailConfig) SetSmtpSkipTlsCertVerify(v bool) {
	o.SmtpSkipTlsCertVerify = &v
}

// GetSmtpSslMode returns the SmtpSslMode field value if set, zero value otherwise.
func (o *EmailConfig) GetSmtpSslMode() string {
	if o == nil || IsNil(o.SmtpSslMode) {
		var ret string
		return ret
	}
	return *o.SmtpSslMode
}

// GetSmtpSslModeOk returns a tuple with the SmtpSslMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailConfig) GetSmtpSslModeOk() (*string, bool) {
	if o == nil || IsNil(o.SmtpSslMode) {
		return nil, false
	}
	return o.SmtpSslMode, true
}

// HasSmtpSslMode returns a boolean if a field has been set.
func (o *EmailConfig) HasSmtpSslMode() bool {
	if o != nil && !IsNil(o.SmtpSslMode) {
		return true
	}

	return false
}

// SetSmtpSslMode gets a reference to the given string and assigns it to the SmtpSslMode field.
func (o *EmailConfig) SetSmtpSslMode(v string) {
	o.SmtpSslMode = &v
}

// GetSmtpUser returns the SmtpUser field value if set, zero value otherwise.
func (o *EmailConfig) GetSmtpUser() string {
	if o == nil || IsNil(o.SmtpUser) {
		var ret string
		return ret
	}
	return *o.SmtpUser
}

// GetSmtpUserOk returns a tuple with the SmtpUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailConfig) GetSmtpUserOk() (*string, bool) {
	if o == nil || IsNil(o.SmtpUser) {
		return nil, false
	}
	return o.SmtpUser, true
}

// HasSmtpUser returns a boolean if a field has been set.
func (o *EmailConfig) HasSmtpUser() bool {
	if o != nil && !IsNil(o.SmtpUser) {
		return true
	}

	return false
}

// SetSmtpUser gets a reference to the given string and assigns it to the SmtpUser field.
func (o *EmailConfig) SetSmtpUser(v string) {
	o.SmtpUser = &v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *EmailConfig) GetSubject() string {
	if o == nil || IsNil(o.Subject) {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailConfig) GetSubjectOk() (*string, bool) {
	if o == nil || IsNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *EmailConfig) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *EmailConfig) SetSubject(v string) {
	o.Subject = &v
}

func (o EmailConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.SmtpAuthEnabled) {
		toSerialize["smtp_auth_enabled"] = o.SmtpAuthEnabled
	}
	if !IsNil(o.SmtpEmailFrom) {
		toSerialize["smtp_email_from"] = o.SmtpEmailFrom
	}
	if !IsNil(o.SmtpEnableSsl) {
		toSerialize["smtp_enable_ssl"] = o.SmtpEnableSsl
	}
	if !IsNil(o.SmtpHost) {
		toSerialize["smtp_host"] = o.SmtpHost
	}
	if !IsNil(o.SmtpPassword) {
		toSerialize["smtp_password"] = o.SmtpPassword
	}
	if !IsNil(o.SmtpPort) {
		toSerialize["smtp_port"] = o.SmtpPort
	}
	if !IsNil(o.SmtpRsaKeyId) {
		toSerialize["smtp_rsa_key_id"] = o.SmtpRsaKeyId
	}
	if !IsNil(o.SmtpSkipTlsCertVerify) {
		toSerialize["smtp_skip_tls_cert_verify"] = o.SmtpSkipTlsCertVerify
	}
	if !IsNil(o.SmtpSslMode) {
		toSerialize["smtp_ssl_mode"] = o.SmtpSslMode
	}
	if !IsNil(o.SmtpUser) {
		toSerialize["smtp_user"] = o.SmtpUser
	}
	if !IsNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	return toSerialize, nil
}

type NullableEmailConfig struct {
	value *EmailConfig
	isSet bool
}

func (v NullableEmailConfig) Get() *EmailConfig {
	return v.value
}

func (v *NullableEmailConfig) Set(val *EmailConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailConfig(val *EmailConfig) *NullableEmailConfig {
	return &NullableEmailConfig{value: val, isSet: true}
}

func (v NullableEmailConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


