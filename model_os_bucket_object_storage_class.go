/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OSBucketObjectStorageClass type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OSBucketObjectStorageClass{}

// OSBucketObjectStorageClass OSBucketObjectStorageClass defines object storage class info of os bucket
type OSBucketObjectStorageClass struct {
	MatchingInfo *RuleMatchingInfo `json:"matching_info,omitempty"`
	Type *string `json:"type,omitempty"`
	XAmzStorageClassEnabled *bool `json:"x_amz_storage_class_enabled,omitempty"`
}

// NewOSBucketObjectStorageClass instantiates a new OSBucketObjectStorageClass object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOSBucketObjectStorageClass() *OSBucketObjectStorageClass {
	this := OSBucketObjectStorageClass{}
	return &this
}

// NewOSBucketObjectStorageClassWithDefaults instantiates a new OSBucketObjectStorageClass object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOSBucketObjectStorageClassWithDefaults() *OSBucketObjectStorageClass {
	this := OSBucketObjectStorageClass{}
	return &this
}

// GetMatchingInfo returns the MatchingInfo field value if set, zero value otherwise.
func (o *OSBucketObjectStorageClass) GetMatchingInfo() RuleMatchingInfo {
	if o == nil || IsNil(o.MatchingInfo) {
		var ret RuleMatchingInfo
		return ret
	}
	return *o.MatchingInfo
}

// GetMatchingInfoOk returns a tuple with the MatchingInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSBucketObjectStorageClass) GetMatchingInfoOk() (*RuleMatchingInfo, bool) {
	if o == nil || IsNil(o.MatchingInfo) {
		return nil, false
	}
	return o.MatchingInfo, true
}

// HasMatchingInfo returns a boolean if a field has been set.
func (o *OSBucketObjectStorageClass) HasMatchingInfo() bool {
	if o != nil && !IsNil(o.MatchingInfo) {
		return true
	}

	return false
}

// SetMatchingInfo gets a reference to the given RuleMatchingInfo and assigns it to the MatchingInfo field.
func (o *OSBucketObjectStorageClass) SetMatchingInfo(v RuleMatchingInfo) {
	o.MatchingInfo = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *OSBucketObjectStorageClass) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSBucketObjectStorageClass) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *OSBucketObjectStorageClass) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *OSBucketObjectStorageClass) SetType(v string) {
	o.Type = &v
}

// GetXAmzStorageClassEnabled returns the XAmzStorageClassEnabled field value if set, zero value otherwise.
func (o *OSBucketObjectStorageClass) GetXAmzStorageClassEnabled() bool {
	if o == nil || IsNil(o.XAmzStorageClassEnabled) {
		var ret bool
		return ret
	}
	return *o.XAmzStorageClassEnabled
}

// GetXAmzStorageClassEnabledOk returns a tuple with the XAmzStorageClassEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSBucketObjectStorageClass) GetXAmzStorageClassEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.XAmzStorageClassEnabled) {
		return nil, false
	}
	return o.XAmzStorageClassEnabled, true
}

// HasXAmzStorageClassEnabled returns a boolean if a field has been set.
func (o *OSBucketObjectStorageClass) HasXAmzStorageClassEnabled() bool {
	if o != nil && !IsNil(o.XAmzStorageClassEnabled) {
		return true
	}

	return false
}

// SetXAmzStorageClassEnabled gets a reference to the given bool and assigns it to the XAmzStorageClassEnabled field.
func (o *OSBucketObjectStorageClass) SetXAmzStorageClassEnabled(v bool) {
	o.XAmzStorageClassEnabled = &v
}

func (o OSBucketObjectStorageClass) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OSBucketObjectStorageClass) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MatchingInfo) {
		toSerialize["matching_info"] = o.MatchingInfo
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.XAmzStorageClassEnabled) {
		toSerialize["x_amz_storage_class_enabled"] = o.XAmzStorageClassEnabled
	}
	return toSerialize, nil
}

type NullableOSBucketObjectStorageClass struct {
	value *OSBucketObjectStorageClass
	isSet bool
}

func (v NullableOSBucketObjectStorageClass) Get() *OSBucketObjectStorageClass {
	return v.value
}

func (v *NullableOSBucketObjectStorageClass) Set(val *OSBucketObjectStorageClass) {
	v.value = val
	v.isSet = true
}

func (v NullableOSBucketObjectStorageClass) IsSet() bool {
	return v.isSet
}

func (v *NullableOSBucketObjectStorageClass) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOSBucketObjectStorageClass(val *OSBucketObjectStorageClass) *NullableOSBucketObjectStorageClass {
	return &NullableOSBucketObjectStorageClass{value: val, isSet: true}
}

func (v NullableOSBucketObjectStorageClass) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOSBucketObjectStorageClass) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


