/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DNSDomainNameResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DNSDomainNameResp{}

// DNSDomainNameResp struct for DNSDomainNameResp
type DNSDomainNameResp struct {
	DnsDomainName *DNSDomainName `json:"dns_domain_name,omitempty"`
}

// NewDNSDomainNameResp instantiates a new DNSDomainNameResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDNSDomainNameResp() *DNSDomainNameResp {
	this := DNSDomainNameResp{}
	return &this
}

// NewDNSDomainNameRespWithDefaults instantiates a new DNSDomainNameResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDNSDomainNameRespWithDefaults() *DNSDomainNameResp {
	this := DNSDomainNameResp{}
	return &this
}

// GetDnsDomainName returns the DnsDomainName field value if set, zero value otherwise.
func (o *DNSDomainNameResp) GetDnsDomainName() DNSDomainName {
	if o == nil || IsNil(o.DnsDomainName) {
		var ret DNSDomainName
		return ret
	}
	return *o.DnsDomainName
}

// GetDnsDomainNameOk returns a tuple with the DnsDomainName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSDomainNameResp) GetDnsDomainNameOk() (*DNSDomainName, bool) {
	if o == nil || IsNil(o.DnsDomainName) {
		return nil, false
	}
	return o.DnsDomainName, true
}

// HasDnsDomainName returns a boolean if a field has been set.
func (o *DNSDomainNameResp) HasDnsDomainName() bool {
	if o != nil && !IsNil(o.DnsDomainName) {
		return true
	}

	return false
}

// SetDnsDomainName gets a reference to the given DNSDomainName and assigns it to the DnsDomainName field.
func (o *DNSDomainNameResp) SetDnsDomainName(v DNSDomainName) {
	o.DnsDomainName = &v
}

func (o DNSDomainNameResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DNSDomainNameResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DnsDomainName) {
		toSerialize["dns_domain_name"] = o.DnsDomainName
	}
	return toSerialize, nil
}

type NullableDNSDomainNameResp struct {
	value *DNSDomainNameResp
	isSet bool
}

func (v NullableDNSDomainNameResp) Get() *DNSDomainNameResp {
	return v.value
}

func (v *NullableDNSDomainNameResp) Set(val *DNSDomainNameResp) {
	v.value = val
	v.isSet = true
}

func (v NullableDNSDomainNameResp) IsSet() bool {
	return v.isSet
}

func (v *NullableDNSDomainNameResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDNSDomainNameResp(val *DNSDomainNameResp) *NullableDNSDomainNameResp {
	return &NullableDNSDomainNameResp{value: val, isSet: true}
}

func (v NullableDNSDomainNameResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDNSDomainNameResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


