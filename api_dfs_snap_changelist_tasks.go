/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DfsSnapChangelistTasksAPIService DfsSnapChangelistTasksAPI service
type DfsSnapChangelistTasksAPIService service

type ApiCreateDfsSnapChangelistTaskRequest struct {
	ctx context.Context
	ApiService *DfsSnapChangelistTasksAPIService
	body *DfsSnapChangelistTaskCreateReq
}

// task info
func (r ApiCreateDfsSnapChangelistTaskRequest) Body(body DfsSnapChangelistTaskCreateReq) ApiCreateDfsSnapChangelistTaskRequest {
	r.body = &body
	return r
}

func (r ApiCreateDfsSnapChangelistTaskRequest) Execute() (*DfsSnapChangelistTaskResp, *http.Response, error) {
	return r.ApiService.CreateDfsSnapChangelistTaskExecute(r)
}

/*
CreateDfsSnapChangelistTask Method for CreateDfsSnapChangelistTask

Create dfs snap change list task

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateDfsSnapChangelistTaskRequest
*/
func (a *DfsSnapChangelistTasksAPIService) CreateDfsSnapChangelistTask(ctx context.Context) ApiCreateDfsSnapChangelistTaskRequest {
	return ApiCreateDfsSnapChangelistTaskRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DfsSnapChangelistTaskResp
func (a *DfsSnapChangelistTasksAPIService) CreateDfsSnapChangelistTaskExecute(r ApiCreateDfsSnapChangelistTaskRequest) (*DfsSnapChangelistTaskResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsSnapChangelistTaskResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsSnapChangelistTasksAPIService.CreateDfsSnapChangelistTask")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-snap-changelist-tasks/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteDfsSnapChangelistTaskRequest struct {
	ctx context.Context
	ApiService *DfsSnapChangelistTasksAPIService
	dfsSnapChangelistTaskId int64
}

func (r ApiDeleteDfsSnapChangelistTaskRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteDfsSnapChangelistTaskExecute(r)
}

/*
DeleteDfsSnapChangelistTask Method for DeleteDfsSnapChangelistTask

delete dfs snap change list task

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dfsSnapChangelistTaskId task id
 @return ApiDeleteDfsSnapChangelistTaskRequest
*/
func (a *DfsSnapChangelistTasksAPIService) DeleteDfsSnapChangelistTask(ctx context.Context, dfsSnapChangelistTaskId int64) ApiDeleteDfsSnapChangelistTaskRequest {
	return ApiDeleteDfsSnapChangelistTaskRequest{
		ApiService: a,
		ctx: ctx,
		dfsSnapChangelistTaskId: dfsSnapChangelistTaskId,
	}
}

// Execute executes the request
func (a *DfsSnapChangelistTasksAPIService) DeleteDfsSnapChangelistTaskExecute(r ApiDeleteDfsSnapChangelistTaskRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsSnapChangelistTasksAPIService.DeleteDfsSnapChangelistTask")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-snap-changelist-tasks/{dfs_snap_changelist_task_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"dfs_snap_changelist_task_id"+"}", url.PathEscape(parameterValueToString(r.dfsSnapChangelistTaskId, "dfsSnapChangelistTaskId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetDfsSnapChangelistTaskRequest struct {
	ctx context.Context
	ApiService *DfsSnapChangelistTasksAPIService
	dfsSnapChangelistTaskId int64
}

func (r ApiGetDfsSnapChangelistTaskRequest) Execute() (*DfsSnapChangelistTaskResp, *http.Response, error) {
	return r.ApiService.GetDfsSnapChangelistTaskExecute(r)
}

/*
GetDfsSnapChangelistTask Method for GetDfsSnapChangelistTask

get dfs snap change list task

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dfsSnapChangelistTaskId the dfs snap change list task id
 @return ApiGetDfsSnapChangelistTaskRequest
*/
func (a *DfsSnapChangelistTasksAPIService) GetDfsSnapChangelistTask(ctx context.Context, dfsSnapChangelistTaskId int64) ApiGetDfsSnapChangelistTaskRequest {
	return ApiGetDfsSnapChangelistTaskRequest{
		ApiService: a,
		ctx: ctx,
		dfsSnapChangelistTaskId: dfsSnapChangelistTaskId,
	}
}

// Execute executes the request
//  @return DfsSnapChangelistTaskResp
func (a *DfsSnapChangelistTasksAPIService) GetDfsSnapChangelistTaskExecute(r ApiGetDfsSnapChangelistTaskRequest) (*DfsSnapChangelistTaskResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsSnapChangelistTaskResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsSnapChangelistTasksAPIService.GetDfsSnapChangelistTask")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-snap-changelist-tasks/{dfs_snap_changelist_task_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"dfs_snap_changelist_task_id"+"}", url.PathEscape(parameterValueToString(r.dfsSnapChangelistTaskId, "dfsSnapChangelistTaskId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListDfsSnapChangelistTasksRequest struct {
	ctx context.Context
	ApiService *DfsSnapChangelistTasksAPIService
	clusterId *string
	path *string
	limit *int64
	offset *int64
	q *string
	sort *string
}

// cluster id
func (r ApiListDfsSnapChangelistTasksRequest) ClusterId(clusterId string) ApiListDfsSnapChangelistTasksRequest {
	r.clusterId = &clusterId
	return r
}

// related dfs path
func (r ApiListDfsSnapChangelistTasksRequest) Path(path string) ApiListDfsSnapChangelistTasksRequest {
	r.path = &path
	return r
}

// paging param
func (r ApiListDfsSnapChangelistTasksRequest) Limit(limit int64) ApiListDfsSnapChangelistTasksRequest {
	r.limit = &limit
	return r
}

// paging param
func (r ApiListDfsSnapChangelistTasksRequest) Offset(offset int64) ApiListDfsSnapChangelistTasksRequest {
	r.offset = &offset
	return r
}

// query param of search
func (r ApiListDfsSnapChangelistTasksRequest) Q(q string) ApiListDfsSnapChangelistTasksRequest {
	r.q = &q
	return r
}

// sort param of search
func (r ApiListDfsSnapChangelistTasksRequest) Sort(sort string) ApiListDfsSnapChangelistTasksRequest {
	r.sort = &sort
	return r
}

func (r ApiListDfsSnapChangelistTasksRequest) Execute() (*DfsSnapChangelistTasksResp, *http.Response, error) {
	return r.ApiService.ListDfsSnapChangelistTasksExecute(r)
}

/*
ListDfsSnapChangelistTasks Method for ListDfsSnapChangelistTasks

List dfs snap change list tasks

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListDfsSnapChangelistTasksRequest
*/
func (a *DfsSnapChangelistTasksAPIService) ListDfsSnapChangelistTasks(ctx context.Context) ApiListDfsSnapChangelistTasksRequest {
	return ApiListDfsSnapChangelistTasksRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DfsSnapChangelistTasksResp
func (a *DfsSnapChangelistTasksAPIService) ListDfsSnapChangelistTasksExecute(r ApiListDfsSnapChangelistTasksRequest) (*DfsSnapChangelistTasksResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsSnapChangelistTasksResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsSnapChangelistTasksAPIService.ListDfsSnapChangelistTasks")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-snap-changelist-tasks/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.clusterId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_id", r.clusterId, "form", "")
	}
	if r.path != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "path", r.path, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
