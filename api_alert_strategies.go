/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AlertStrategiesAPIService AlertStrategiesAPI service
type AlertStrategiesAPIService service

type ApiCreateAlertStrategyRequest struct {
	ctx context.Context
	ApiService *AlertStrategiesAPIService
	body *AlertStrategyReq
}

// alert strategy
func (r ApiCreateAlertStrategyRequest) Body(body AlertStrategyReq) ApiCreateAlertStrategyRequest {
	r.body = &body
	return r
}

func (r ApiCreateAlertStrategyRequest) Execute() (*AlertStrategyReq, *http.Response, error) {
	return r.ApiService.CreateAlertStrategyExecute(r)
}

/*
CreateAlertStrategy Method for CreateAlertStrategy

create strategy of alert

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateAlertStrategyRequest
*/
func (a *AlertStrategiesAPIService) CreateAlertStrategy(ctx context.Context) ApiCreateAlertStrategyRequest {
	return ApiCreateAlertStrategyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AlertStrategyReq
func (a *AlertStrategiesAPIService) CreateAlertStrategyExecute(r ApiCreateAlertStrategyRequest) (*AlertStrategyReq, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AlertStrategyReq
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertStrategiesAPIService.CreateAlertStrategy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/alert-strategies/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteAlertStrategyRequest struct {
	ctx context.Context
	ApiService *AlertStrategiesAPIService
	alertStrategyId int64
}

func (r ApiDeleteAlertStrategyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteAlertStrategyExecute(r)
}

/*
DeleteAlertStrategy Method for DeleteAlertStrategy

Delete alert strategy

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param alertStrategyId alert strategy id
 @return ApiDeleteAlertStrategyRequest
*/
func (a *AlertStrategiesAPIService) DeleteAlertStrategy(ctx context.Context, alertStrategyId int64) ApiDeleteAlertStrategyRequest {
	return ApiDeleteAlertStrategyRequest{
		ApiService: a,
		ctx: ctx,
		alertStrategyId: alertStrategyId,
	}
}

// Execute executes the request
func (a *AlertStrategiesAPIService) DeleteAlertStrategyExecute(r ApiDeleteAlertStrategyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertStrategiesAPIService.DeleteAlertStrategy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/alert-strategies/{alert_strategy_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"alert_strategy_id"+"}", url.PathEscape(parameterValueToString(r.alertStrategyId, "alertStrategyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetAlertStrategyRequest struct {
	ctx context.Context
	ApiService *AlertStrategiesAPIService
	alertStrategyId int64
}

func (r ApiGetAlertStrategyRequest) Execute() (*AlertStrategyResp, *http.Response, error) {
	return r.ApiService.GetAlertStrategyExecute(r)
}

/*
GetAlertStrategy Method for GetAlertStrategy

get a alert strategy

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param alertStrategyId alert strategy id
 @return ApiGetAlertStrategyRequest
*/
func (a *AlertStrategiesAPIService) GetAlertStrategy(ctx context.Context, alertStrategyId int64) ApiGetAlertStrategyRequest {
	return ApiGetAlertStrategyRequest{
		ApiService: a,
		ctx: ctx,
		alertStrategyId: alertStrategyId,
	}
}

// Execute executes the request
//  @return AlertStrategyResp
func (a *AlertStrategiesAPIService) GetAlertStrategyExecute(r ApiGetAlertStrategyRequest) (*AlertStrategyResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AlertStrategyResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertStrategiesAPIService.GetAlertStrategy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/alert-strategies/{alert_strategy_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"alert_strategy_id"+"}", url.PathEscape(parameterValueToString(r.alertStrategyId, "alertStrategyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListAlertStrategiesRequest struct {
	ctx context.Context
	ApiService *AlertStrategiesAPIService
	limit *int64
	offset *int64
	name *string
	durationBegin *string
	durationEnd *string
	durationLimit *int64
	durationOffset *int64
	q *string
	sort *string
}

// paging param
func (r ApiListAlertStrategiesRequest) Limit(limit int64) ApiListAlertStrategiesRequest {
	r.limit = &limit
	return r
}

// paging param
func (r ApiListAlertStrategiesRequest) Offset(offset int64) ApiListAlertStrategiesRequest {
	r.offset = &offset
	return r
}

// name of alert contact
func (r ApiListAlertStrategiesRequest) Name(name string) ApiListAlertStrategiesRequest {
	r.name = &name
	return r
}

// duration begin timestamp
func (r ApiListAlertStrategiesRequest) DurationBegin(durationBegin string) ApiListAlertStrategiesRequest {
	r.durationBegin = &durationBegin
	return r
}

// duration end timestamp
func (r ApiListAlertStrategiesRequest) DurationEnd(durationEnd string) ApiListAlertStrategiesRequest {
	r.durationEnd = &durationEnd
	return r
}

// duration limit param
func (r ApiListAlertStrategiesRequest) DurationLimit(durationLimit int64) ApiListAlertStrategiesRequest {
	r.durationLimit = &durationLimit
	return r
}

// duration offset param
func (r ApiListAlertStrategiesRequest) DurationOffset(durationOffset int64) ApiListAlertStrategiesRequest {
	r.durationOffset = &durationOffset
	return r
}

// query param of search
func (r ApiListAlertStrategiesRequest) Q(q string) ApiListAlertStrategiesRequest {
	r.q = &q
	return r
}

// sort param of search
func (r ApiListAlertStrategiesRequest) Sort(sort string) ApiListAlertStrategiesRequest {
	r.sort = &sort
	return r
}

func (r ApiListAlertStrategiesRequest) Execute() (*AlertContactsResp, *http.Response, error) {
	return r.ApiService.ListAlertStrategiesExecute(r)
}

/*
ListAlertStrategies Method for ListAlertStrategies

List all alert contacts

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListAlertStrategiesRequest
*/
func (a *AlertStrategiesAPIService) ListAlertStrategies(ctx context.Context) ApiListAlertStrategiesRequest {
	return ApiListAlertStrategiesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AlertContactsResp
func (a *AlertStrategiesAPIService) ListAlertStrategiesExecute(r ApiListAlertStrategiesRequest) (*AlertContactsResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AlertContactsResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertStrategiesAPIService.ListAlertStrategies")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/alert-strategies/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.durationBegin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration_begin", r.durationBegin, "form", "")
	}
	if r.durationEnd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration_end", r.durationEnd, "form", "")
	}
	if r.durationLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration_limit", r.durationLimit, "form", "")
	}
	if r.durationOffset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration_offset", r.durationOffset, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateUpdateAlertStrategyAlertContactRequest struct {
	ctx context.Context
	ApiService *AlertStrategiesAPIService
	alertStrategyId int64
	alert *AlertStrategyReq
}

// strategy update request
func (r ApiUpdateUpdateAlertStrategyAlertContactRequest) Alert(alert AlertStrategyReq) ApiUpdateUpdateAlertStrategyAlertContactRequest {
	r.alert = &alert
	return r
}

func (r ApiUpdateUpdateAlertStrategyAlertContactRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateUpdateAlertStrategyAlertContactExecute(r)
}

/*
UpdateUpdateAlertStrategyAlertContact Method for UpdateUpdateAlertStrategyAlertContact

update alert strategy

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param alertStrategyId alert strategy id
 @return ApiUpdateUpdateAlertStrategyAlertContactRequest
*/
func (a *AlertStrategiesAPIService) UpdateUpdateAlertStrategyAlertContact(ctx context.Context, alertStrategyId int64) ApiUpdateUpdateAlertStrategyAlertContactRequest {
	return ApiUpdateUpdateAlertStrategyAlertContactRequest{
		ApiService: a,
		ctx: ctx,
		alertStrategyId: alertStrategyId,
	}
}

// Execute executes the request
func (a *AlertStrategiesAPIService) UpdateUpdateAlertStrategyAlertContactExecute(r ApiUpdateUpdateAlertStrategyAlertContactRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertStrategiesAPIService.UpdateUpdateAlertStrategyAlertContact")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/alert-strategies/{alert_strategy_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"alert_strategy_id"+"}", url.PathEscape(parameterValueToString(r.alertStrategyId, "alertStrategyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.alert == nil {
		return nil, reportError("alert is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.alert
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
