/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DfsAuditLogUpdateReqAuditLog type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsAuditLogUpdateReqAuditLog{}

// DfsAuditLogUpdateReqAuditLog struct for DfsAuditLogUpdateReqAuditLog
type DfsAuditLogUpdateReqAuditLog struct {
	// actions need to audit
	Actions []string `json:"actions,omitempty"`
	// rootfs id
	DfsRootfsId int64 `json:"dfs_rootfs_id"`
	// audit log path
	LogPath *string `json:"log_path,omitempty"`
	// max size of audit log
	Size *int64 `json:"size,omitempty"`
}

type _DfsAuditLogUpdateReqAuditLog DfsAuditLogUpdateReqAuditLog

// NewDfsAuditLogUpdateReqAuditLog instantiates a new DfsAuditLogUpdateReqAuditLog object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsAuditLogUpdateReqAuditLog(dfsRootfsId int64) *DfsAuditLogUpdateReqAuditLog {
	this := DfsAuditLogUpdateReqAuditLog{}
	this.DfsRootfsId = dfsRootfsId
	return &this
}

// NewDfsAuditLogUpdateReqAuditLogWithDefaults instantiates a new DfsAuditLogUpdateReqAuditLog object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsAuditLogUpdateReqAuditLogWithDefaults() *DfsAuditLogUpdateReqAuditLog {
	this := DfsAuditLogUpdateReqAuditLog{}
	return &this
}

// GetActions returns the Actions field value if set, zero value otherwise.
func (o *DfsAuditLogUpdateReqAuditLog) GetActions() []string {
	if o == nil || IsNil(o.Actions) {
		var ret []string
		return ret
	}
	return o.Actions
}

// GetActionsOk returns a tuple with the Actions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsAuditLogUpdateReqAuditLog) GetActionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Actions) {
		return nil, false
	}
	return o.Actions, true
}

// HasActions returns a boolean if a field has been set.
func (o *DfsAuditLogUpdateReqAuditLog) HasActions() bool {
	if o != nil && !IsNil(o.Actions) {
		return true
	}

	return false
}

// SetActions gets a reference to the given []string and assigns it to the Actions field.
func (o *DfsAuditLogUpdateReqAuditLog) SetActions(v []string) {
	o.Actions = v
}

// GetDfsRootfsId returns the DfsRootfsId field value
func (o *DfsAuditLogUpdateReqAuditLog) GetDfsRootfsId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DfsRootfsId
}

// GetDfsRootfsIdOk returns a tuple with the DfsRootfsId field value
// and a boolean to check if the value has been set.
func (o *DfsAuditLogUpdateReqAuditLog) GetDfsRootfsIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DfsRootfsId, true
}

// SetDfsRootfsId sets field value
func (o *DfsAuditLogUpdateReqAuditLog) SetDfsRootfsId(v int64) {
	o.DfsRootfsId = v
}

// GetLogPath returns the LogPath field value if set, zero value otherwise.
func (o *DfsAuditLogUpdateReqAuditLog) GetLogPath() string {
	if o == nil || IsNil(o.LogPath) {
		var ret string
		return ret
	}
	return *o.LogPath
}

// GetLogPathOk returns a tuple with the LogPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsAuditLogUpdateReqAuditLog) GetLogPathOk() (*string, bool) {
	if o == nil || IsNil(o.LogPath) {
		return nil, false
	}
	return o.LogPath, true
}

// HasLogPath returns a boolean if a field has been set.
func (o *DfsAuditLogUpdateReqAuditLog) HasLogPath() bool {
	if o != nil && !IsNil(o.LogPath) {
		return true
	}

	return false
}

// SetLogPath gets a reference to the given string and assigns it to the LogPath field.
func (o *DfsAuditLogUpdateReqAuditLog) SetLogPath(v string) {
	o.LogPath = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *DfsAuditLogUpdateReqAuditLog) GetSize() int64 {
	if o == nil || IsNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsAuditLogUpdateReqAuditLog) GetSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *DfsAuditLogUpdateReqAuditLog) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *DfsAuditLogUpdateReqAuditLog) SetSize(v int64) {
	o.Size = &v
}

func (o DfsAuditLogUpdateReqAuditLog) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsAuditLogUpdateReqAuditLog) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Actions) {
		toSerialize["actions"] = o.Actions
	}
	toSerialize["dfs_rootfs_id"] = o.DfsRootfsId
	if !IsNil(o.LogPath) {
		toSerialize["log_path"] = o.LogPath
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	return toSerialize, nil
}

func (o *DfsAuditLogUpdateReqAuditLog) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dfs_rootfs_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDfsAuditLogUpdateReqAuditLog := _DfsAuditLogUpdateReqAuditLog{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDfsAuditLogUpdateReqAuditLog)

	if err != nil {
		return err
	}

	*o = DfsAuditLogUpdateReqAuditLog(varDfsAuditLogUpdateReqAuditLog)

	return err
}

type NullableDfsAuditLogUpdateReqAuditLog struct {
	value *DfsAuditLogUpdateReqAuditLog
	isSet bool
}

func (v NullableDfsAuditLogUpdateReqAuditLog) Get() *DfsAuditLogUpdateReqAuditLog {
	return v.value
}

func (v *NullableDfsAuditLogUpdateReqAuditLog) Set(val *DfsAuditLogUpdateReqAuditLog) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsAuditLogUpdateReqAuditLog) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsAuditLogUpdateReqAuditLog) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsAuditLogUpdateReqAuditLog(val *DfsAuditLogUpdateReqAuditLog) *NullableDfsAuditLogUpdateReqAuditLog {
	return &NullableDfsAuditLogUpdateReqAuditLog{value: val, isSet: true}
}

func (v NullableDfsAuditLogUpdateReqAuditLog) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsAuditLogUpdateReqAuditLog) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


