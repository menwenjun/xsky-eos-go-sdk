/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the License type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &License{}

// License License is used to manage backend license
type License struct {
	Active *bool `json:"active,omitempty"`
	Cluster *Cluster `json:"cluster,omitempty"`
	ClusterType *string `json:"cluster_type,omitempty"`
	Create *time.Time `json:"create,omitempty"`
	Customer *string `json:"customer,omitempty"`
	ExpiredTime *time.Time `json:"expired_time,omitempty"`
	Features []string `json:"features,omitempty"`
	FsId *string `json:"fs_id,omitempty"`
	Id *int64 `json:"id,omitempty"`
	// ProductLimits defines product limits
	Limits *map[string]string `json:"limits,omitempty"`
	MinorVersion *string `json:"minor_version,omitempty"`
	Name *string `json:"name,omitempty"`
	NameCn *string `json:"name_cn,omitempty"`
	ProductInfo *ProductInfo `json:"product_info,omitempty"`
	Protocols []string `json:"protocols,omitempty"`
	Registered *bool `json:"registered,omitempty"`
	Services []ProductService `json:"services,omitempty"`
	SignedTime *time.Time `json:"signed_time,omitempty"`
	Status *string `json:"status,omitempty"`
	// Type is Result type
	Type *string `json:"type,omitempty"`
	Uuid *string `json:"uuid,omitempty"`
	// load from license info
	Version *string `json:"version,omitempty"`
}

// NewLicense instantiates a new License object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicense() *License {
	this := License{}
	return &this
}

// NewLicenseWithDefaults instantiates a new License object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicenseWithDefaults() *License {
	this := License{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *License) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *License) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *License) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *License) SetActive(v bool) {
	o.Active = &v
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *License) GetCluster() Cluster {
	if o == nil || IsNil(o.Cluster) {
		var ret Cluster
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *License) GetClusterOk() (*Cluster, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *License) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given Cluster and assigns it to the Cluster field.
func (o *License) SetCluster(v Cluster) {
	o.Cluster = &v
}

// GetClusterType returns the ClusterType field value if set, zero value otherwise.
func (o *License) GetClusterType() string {
	if o == nil || IsNil(o.ClusterType) {
		var ret string
		return ret
	}
	return *o.ClusterType
}

// GetClusterTypeOk returns a tuple with the ClusterType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *License) GetClusterTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ClusterType) {
		return nil, false
	}
	return o.ClusterType, true
}

// HasClusterType returns a boolean if a field has been set.
func (o *License) HasClusterType() bool {
	if o != nil && !IsNil(o.ClusterType) {
		return true
	}

	return false
}

// SetClusterType gets a reference to the given string and assigns it to the ClusterType field.
func (o *License) SetClusterType(v string) {
	o.ClusterType = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *License) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *License) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *License) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *License) SetCreate(v time.Time) {
	o.Create = &v
}

// GetCustomer returns the Customer field value if set, zero value otherwise.
func (o *License) GetCustomer() string {
	if o == nil || IsNil(o.Customer) {
		var ret string
		return ret
	}
	return *o.Customer
}

// GetCustomerOk returns a tuple with the Customer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *License) GetCustomerOk() (*string, bool) {
	if o == nil || IsNil(o.Customer) {
		return nil, false
	}
	return o.Customer, true
}

// HasCustomer returns a boolean if a field has been set.
func (o *License) HasCustomer() bool {
	if o != nil && !IsNil(o.Customer) {
		return true
	}

	return false
}

// SetCustomer gets a reference to the given string and assigns it to the Customer field.
func (o *License) SetCustomer(v string) {
	o.Customer = &v
}

// GetExpiredTime returns the ExpiredTime field value if set, zero value otherwise.
func (o *License) GetExpiredTime() time.Time {
	if o == nil || IsNil(o.ExpiredTime) {
		var ret time.Time
		return ret
	}
	return *o.ExpiredTime
}

// GetExpiredTimeOk returns a tuple with the ExpiredTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *License) GetExpiredTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpiredTime) {
		return nil, false
	}
	return o.ExpiredTime, true
}

// HasExpiredTime returns a boolean if a field has been set.
func (o *License) HasExpiredTime() bool {
	if o != nil && !IsNil(o.ExpiredTime) {
		return true
	}

	return false
}

// SetExpiredTime gets a reference to the given time.Time and assigns it to the ExpiredTime field.
func (o *License) SetExpiredTime(v time.Time) {
	o.ExpiredTime = &v
}

// GetFeatures returns the Features field value if set, zero value otherwise.
func (o *License) GetFeatures() []string {
	if o == nil || IsNil(o.Features) {
		var ret []string
		return ret
	}
	return o.Features
}

// GetFeaturesOk returns a tuple with the Features field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *License) GetFeaturesOk() ([]string, bool) {
	if o == nil || IsNil(o.Features) {
		return nil, false
	}
	return o.Features, true
}

// HasFeatures returns a boolean if a field has been set.
func (o *License) HasFeatures() bool {
	if o != nil && !IsNil(o.Features) {
		return true
	}

	return false
}

// SetFeatures gets a reference to the given []string and assigns it to the Features field.
func (o *License) SetFeatures(v []string) {
	o.Features = v
}

// GetFsId returns the FsId field value if set, zero value otherwise.
func (o *License) GetFsId() string {
	if o == nil || IsNil(o.FsId) {
		var ret string
		return ret
	}
	return *o.FsId
}

// GetFsIdOk returns a tuple with the FsId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *License) GetFsIdOk() (*string, bool) {
	if o == nil || IsNil(o.FsId) {
		return nil, false
	}
	return o.FsId, true
}

// HasFsId returns a boolean if a field has been set.
func (o *License) HasFsId() bool {
	if o != nil && !IsNil(o.FsId) {
		return true
	}

	return false
}

// SetFsId gets a reference to the given string and assigns it to the FsId field.
func (o *License) SetFsId(v string) {
	o.FsId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *License) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *License) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *License) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *License) SetId(v int64) {
	o.Id = &v
}

// GetLimits returns the Limits field value if set, zero value otherwise.
func (o *License) GetLimits() map[string]string {
	if o == nil || IsNil(o.Limits) {
		var ret map[string]string
		return ret
	}
	return *o.Limits
}

// GetLimitsOk returns a tuple with the Limits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *License) GetLimitsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Limits) {
		return nil, false
	}
	return o.Limits, true
}

// HasLimits returns a boolean if a field has been set.
func (o *License) HasLimits() bool {
	if o != nil && !IsNil(o.Limits) {
		return true
	}

	return false
}

// SetLimits gets a reference to the given map[string]string and assigns it to the Limits field.
func (o *License) SetLimits(v map[string]string) {
	o.Limits = &v
}

// GetMinorVersion returns the MinorVersion field value if set, zero value otherwise.
func (o *License) GetMinorVersion() string {
	if o == nil || IsNil(o.MinorVersion) {
		var ret string
		return ret
	}
	return *o.MinorVersion
}

// GetMinorVersionOk returns a tuple with the MinorVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *License) GetMinorVersionOk() (*string, bool) {
	if o == nil || IsNil(o.MinorVersion) {
		return nil, false
	}
	return o.MinorVersion, true
}

// HasMinorVersion returns a boolean if a field has been set.
func (o *License) HasMinorVersion() bool {
	if o != nil && !IsNil(o.MinorVersion) {
		return true
	}

	return false
}

// SetMinorVersion gets a reference to the given string and assigns it to the MinorVersion field.
func (o *License) SetMinorVersion(v string) {
	o.MinorVersion = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *License) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *License) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *License) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *License) SetName(v string) {
	o.Name = &v
}

// GetNameCn returns the NameCn field value if set, zero value otherwise.
func (o *License) GetNameCn() string {
	if o == nil || IsNil(o.NameCn) {
		var ret string
		return ret
	}
	return *o.NameCn
}

// GetNameCnOk returns a tuple with the NameCn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *License) GetNameCnOk() (*string, bool) {
	if o == nil || IsNil(o.NameCn) {
		return nil, false
	}
	return o.NameCn, true
}

// HasNameCn returns a boolean if a field has been set.
func (o *License) HasNameCn() bool {
	if o != nil && !IsNil(o.NameCn) {
		return true
	}

	return false
}

// SetNameCn gets a reference to the given string and assigns it to the NameCn field.
func (o *License) SetNameCn(v string) {
	o.NameCn = &v
}

// GetProductInfo returns the ProductInfo field value if set, zero value otherwise.
func (o *License) GetProductInfo() ProductInfo {
	if o == nil || IsNil(o.ProductInfo) {
		var ret ProductInfo
		return ret
	}
	return *o.ProductInfo
}

// GetProductInfoOk returns a tuple with the ProductInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *License) GetProductInfoOk() (*ProductInfo, bool) {
	if o == nil || IsNil(o.ProductInfo) {
		return nil, false
	}
	return o.ProductInfo, true
}

// HasProductInfo returns a boolean if a field has been set.
func (o *License) HasProductInfo() bool {
	if o != nil && !IsNil(o.ProductInfo) {
		return true
	}

	return false
}

// SetProductInfo gets a reference to the given ProductInfo and assigns it to the ProductInfo field.
func (o *License) SetProductInfo(v ProductInfo) {
	o.ProductInfo = &v
}

// GetProtocols returns the Protocols field value if set, zero value otherwise.
func (o *License) GetProtocols() []string {
	if o == nil || IsNil(o.Protocols) {
		var ret []string
		return ret
	}
	return o.Protocols
}

// GetProtocolsOk returns a tuple with the Protocols field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *License) GetProtocolsOk() ([]string, bool) {
	if o == nil || IsNil(o.Protocols) {
		return nil, false
	}
	return o.Protocols, true
}

// HasProtocols returns a boolean if a field has been set.
func (o *License) HasProtocols() bool {
	if o != nil && !IsNil(o.Protocols) {
		return true
	}

	return false
}

// SetProtocols gets a reference to the given []string and assigns it to the Protocols field.
func (o *License) SetProtocols(v []string) {
	o.Protocols = v
}

// GetRegistered returns the Registered field value if set, zero value otherwise.
func (o *License) GetRegistered() bool {
	if o == nil || IsNil(o.Registered) {
		var ret bool
		return ret
	}
	return *o.Registered
}

// GetRegisteredOk returns a tuple with the Registered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *License) GetRegisteredOk() (*bool, bool) {
	if o == nil || IsNil(o.Registered) {
		return nil, false
	}
	return o.Registered, true
}

// HasRegistered returns a boolean if a field has been set.
func (o *License) HasRegistered() bool {
	if o != nil && !IsNil(o.Registered) {
		return true
	}

	return false
}

// SetRegistered gets a reference to the given bool and assigns it to the Registered field.
func (o *License) SetRegistered(v bool) {
	o.Registered = &v
}

// GetServices returns the Services field value if set, zero value otherwise.
func (o *License) GetServices() []ProductService {
	if o == nil || IsNil(o.Services) {
		var ret []ProductService
		return ret
	}
	return o.Services
}

// GetServicesOk returns a tuple with the Services field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *License) GetServicesOk() ([]ProductService, bool) {
	if o == nil || IsNil(o.Services) {
		return nil, false
	}
	return o.Services, true
}

// HasServices returns a boolean if a field has been set.
func (o *License) HasServices() bool {
	if o != nil && !IsNil(o.Services) {
		return true
	}

	return false
}

// SetServices gets a reference to the given []ProductService and assigns it to the Services field.
func (o *License) SetServices(v []ProductService) {
	o.Services = v
}

// GetSignedTime returns the SignedTime field value if set, zero value otherwise.
func (o *License) GetSignedTime() time.Time {
	if o == nil || IsNil(o.SignedTime) {
		var ret time.Time
		return ret
	}
	return *o.SignedTime
}

// GetSignedTimeOk returns a tuple with the SignedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *License) GetSignedTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.SignedTime) {
		return nil, false
	}
	return o.SignedTime, true
}

// HasSignedTime returns a boolean if a field has been set.
func (o *License) HasSignedTime() bool {
	if o != nil && !IsNil(o.SignedTime) {
		return true
	}

	return false
}

// SetSignedTime gets a reference to the given time.Time and assigns it to the SignedTime field.
func (o *License) SetSignedTime(v time.Time) {
	o.SignedTime = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *License) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *License) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *License) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *License) SetStatus(v string) {
	o.Status = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *License) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *License) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *License) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *License) SetType(v string) {
	o.Type = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *License) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *License) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *License) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *License) SetUuid(v string) {
	o.Uuid = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *License) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *License) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *License) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *License) SetVersion(v string) {
	o.Version = &v
}

func (o License) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o License) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !IsNil(o.ClusterType) {
		toSerialize["cluster_type"] = o.ClusterType
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.Customer) {
		toSerialize["customer"] = o.Customer
	}
	if !IsNil(o.ExpiredTime) {
		toSerialize["expired_time"] = o.ExpiredTime
	}
	if !IsNil(o.Features) {
		toSerialize["features"] = o.Features
	}
	if !IsNil(o.FsId) {
		toSerialize["fs_id"] = o.FsId
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Limits) {
		toSerialize["limits"] = o.Limits
	}
	if !IsNil(o.MinorVersion) {
		toSerialize["minor_version"] = o.MinorVersion
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NameCn) {
		toSerialize["name_cn"] = o.NameCn
	}
	if !IsNil(o.ProductInfo) {
		toSerialize["product_info"] = o.ProductInfo
	}
	if !IsNil(o.Protocols) {
		toSerialize["protocols"] = o.Protocols
	}
	if !IsNil(o.Registered) {
		toSerialize["registered"] = o.Registered
	}
	if !IsNil(o.Services) {
		toSerialize["services"] = o.Services
	}
	if !IsNil(o.SignedTime) {
		toSerialize["signed_time"] = o.SignedTime
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableLicense struct {
	value *License
	isSet bool
}

func (v NullableLicense) Get() *License {
	return v.value
}

func (v *NullableLicense) Set(val *License) {
	v.value = val
	v.isSet = true
}

func (v NullableLicense) IsSet() bool {
	return v.isSet
}

func (v *NullableLicense) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicense(val *License) *NullableLicense {
	return &NullableLicense{value: val, isSet: true}
}

func (v NullableLicense) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicense) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


