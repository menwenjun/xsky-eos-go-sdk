/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OSZoneLockCreateReqLock type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OSZoneLockCreateReqLock{}

// OSZoneLockCreateReqLock struct for OSZoneLockCreateReqLock
type OSZoneLockCreateReqLock struct {
	// key of lock, for example name of os bucket
	Key string `json:"key"`
	// resource type of lock, including os_bucket
	ResourceType string `json:"resource_type"`
	// value of lock, for example action of os bucket
	Value string `json:"value"`
}

type _OSZoneLockCreateReqLock OSZoneLockCreateReqLock

// NewOSZoneLockCreateReqLock instantiates a new OSZoneLockCreateReqLock object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOSZoneLockCreateReqLock(key string, resourceType string, value string) *OSZoneLockCreateReqLock {
	this := OSZoneLockCreateReqLock{}
	this.Key = key
	this.ResourceType = resourceType
	this.Value = value
	return &this
}

// NewOSZoneLockCreateReqLockWithDefaults instantiates a new OSZoneLockCreateReqLock object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOSZoneLockCreateReqLockWithDefaults() *OSZoneLockCreateReqLock {
	this := OSZoneLockCreateReqLock{}
	return &this
}

// GetKey returns the Key field value
func (o *OSZoneLockCreateReqLock) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *OSZoneLockCreateReqLock) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *OSZoneLockCreateReqLock) SetKey(v string) {
	o.Key = v
}

// GetResourceType returns the ResourceType field value
func (o *OSZoneLockCreateReqLock) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *OSZoneLockCreateReqLock) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *OSZoneLockCreateReqLock) SetResourceType(v string) {
	o.ResourceType = v
}

// GetValue returns the Value field value
func (o *OSZoneLockCreateReqLock) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *OSZoneLockCreateReqLock) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *OSZoneLockCreateReqLock) SetValue(v string) {
	o.Value = v
}

func (o OSZoneLockCreateReqLock) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OSZoneLockCreateReqLock) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	toSerialize["resource_type"] = o.ResourceType
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

func (o *OSZoneLockCreateReqLock) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key",
		"resource_type",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOSZoneLockCreateReqLock := _OSZoneLockCreateReqLock{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOSZoneLockCreateReqLock)

	if err != nil {
		return err
	}

	*o = OSZoneLockCreateReqLock(varOSZoneLockCreateReqLock)

	return err
}

type NullableOSZoneLockCreateReqLock struct {
	value *OSZoneLockCreateReqLock
	isSet bool
}

func (v NullableOSZoneLockCreateReqLock) Get() *OSZoneLockCreateReqLock {
	return v.value
}

func (v *NullableOSZoneLockCreateReqLock) Set(val *OSZoneLockCreateReqLock) {
	v.value = val
	v.isSet = true
}

func (v NullableOSZoneLockCreateReqLock) IsSet() bool {
	return v.isSet
}

func (v *NullableOSZoneLockCreateReqLock) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOSZoneLockCreateReqLock(val *OSZoneLockCreateReqLock) *NullableOSZoneLockCreateReqLock {
	return &NullableOSZoneLockCreateReqLock{value: val, isSet: true}
}

func (v NullableOSZoneLockCreateReqLock) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOSZoneLockCreateReqLock) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


