/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the WindowsACLPermission type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WindowsACLPermission{}

// WindowsACLPermission WindowsACLPermission windows acl permission info
type WindowsACLPermission struct {
	Message *string `json:"message,omitempty"`
	PermissionId *string `json:"permission_id,omitempty"`
}

// NewWindowsACLPermission instantiates a new WindowsACLPermission object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWindowsACLPermission() *WindowsACLPermission {
	this := WindowsACLPermission{}
	return &this
}

// NewWindowsACLPermissionWithDefaults instantiates a new WindowsACLPermission object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWindowsACLPermissionWithDefaults() *WindowsACLPermission {
	this := WindowsACLPermission{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *WindowsACLPermission) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WindowsACLPermission) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *WindowsACLPermission) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *WindowsACLPermission) SetMessage(v string) {
	o.Message = &v
}

// GetPermissionId returns the PermissionId field value if set, zero value otherwise.
func (o *WindowsACLPermission) GetPermissionId() string {
	if o == nil || IsNil(o.PermissionId) {
		var ret string
		return ret
	}
	return *o.PermissionId
}

// GetPermissionIdOk returns a tuple with the PermissionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WindowsACLPermission) GetPermissionIdOk() (*string, bool) {
	if o == nil || IsNil(o.PermissionId) {
		return nil, false
	}
	return o.PermissionId, true
}

// HasPermissionId returns a boolean if a field has been set.
func (o *WindowsACLPermission) HasPermissionId() bool {
	if o != nil && !IsNil(o.PermissionId) {
		return true
	}

	return false
}

// SetPermissionId gets a reference to the given string and assigns it to the PermissionId field.
func (o *WindowsACLPermission) SetPermissionId(v string) {
	o.PermissionId = &v
}

func (o WindowsACLPermission) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WindowsACLPermission) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.PermissionId) {
		toSerialize["permission_id"] = o.PermissionId
	}
	return toSerialize, nil
}

type NullableWindowsACLPermission struct {
	value *WindowsACLPermission
	isSet bool
}

func (v NullableWindowsACLPermission) Get() *WindowsACLPermission {
	return v.value
}

func (v *NullableWindowsACLPermission) Set(val *WindowsACLPermission) {
	v.value = val
	v.isSet = true
}

func (v NullableWindowsACLPermission) IsSet() bool {
	return v.isSet
}

func (v *NullableWindowsACLPermission) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWindowsACLPermission(val *WindowsACLPermission) *NullableWindowsACLPermission {
	return &NullableWindowsACLPermission{value: val, isSet: true}
}

func (v NullableWindowsACLPermission) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWindowsACLPermission) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


