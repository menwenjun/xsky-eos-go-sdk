/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DfsQosCreateReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsQosCreateReq{}

// DfsQosCreateReq struct for DfsQosCreateReq
type DfsQosCreateReq struct {
	DfsQos DfsQosCreateReqQos `json:"dfs_qos"`
}

type _DfsQosCreateReq DfsQosCreateReq

// NewDfsQosCreateReq instantiates a new DfsQosCreateReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsQosCreateReq(dfsQos DfsQosCreateReqQos) *DfsQosCreateReq {
	this := DfsQosCreateReq{}
	this.DfsQos = dfsQos
	return &this
}

// NewDfsQosCreateReqWithDefaults instantiates a new DfsQosCreateReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsQosCreateReqWithDefaults() *DfsQosCreateReq {
	this := DfsQosCreateReq{}
	return &this
}

// GetDfsQos returns the DfsQos field value
func (o *DfsQosCreateReq) GetDfsQos() DfsQosCreateReqQos {
	if o == nil {
		var ret DfsQosCreateReqQos
		return ret
	}

	return o.DfsQos
}

// GetDfsQosOk returns a tuple with the DfsQos field value
// and a boolean to check if the value has been set.
func (o *DfsQosCreateReq) GetDfsQosOk() (*DfsQosCreateReqQos, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DfsQos, true
}

// SetDfsQos sets field value
func (o *DfsQosCreateReq) SetDfsQos(v DfsQosCreateReqQos) {
	o.DfsQos = v
}

func (o DfsQosCreateReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsQosCreateReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dfs_qos"] = o.DfsQos
	return toSerialize, nil
}

func (o *DfsQosCreateReq) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dfs_qos",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDfsQosCreateReq := _DfsQosCreateReq{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDfsQosCreateReq)

	if err != nil {
		return err
	}

	*o = DfsQosCreateReq(varDfsQosCreateReq)

	return err
}

type NullableDfsQosCreateReq struct {
	value *DfsQosCreateReq
	isSet bool
}

func (v NullableDfsQosCreateReq) Get() *DfsQosCreateReq {
	return v.value
}

func (v *NullableDfsQosCreateReq) Set(val *DfsQosCreateReq) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsQosCreateReq) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsQosCreateReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsQosCreateReq(val *DfsQosCreateReq) *NullableDfsQosCreateReq {
	return &NullableDfsQosCreateReq{value: val, isSet: true}
}

func (v NullableDfsQosCreateReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsQosCreateReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


