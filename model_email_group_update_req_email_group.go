/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EmailGroupUpdateReqEmailGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailGroupUpdateReqEmailGroup{}

// EmailGroupUpdateReqEmailGroup struct for EmailGroupUpdateReqEmailGroup
type EmailGroupUpdateReqEmailGroup struct {
	Emails []string `json:"emails"`
	Name string `json:"name"`
}

type _EmailGroupUpdateReqEmailGroup EmailGroupUpdateReqEmailGroup

// NewEmailGroupUpdateReqEmailGroup instantiates a new EmailGroupUpdateReqEmailGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailGroupUpdateReqEmailGroup(emails []string, name string) *EmailGroupUpdateReqEmailGroup {
	this := EmailGroupUpdateReqEmailGroup{}
	this.Emails = emails
	this.Name = name
	return &this
}

// NewEmailGroupUpdateReqEmailGroupWithDefaults instantiates a new EmailGroupUpdateReqEmailGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailGroupUpdateReqEmailGroupWithDefaults() *EmailGroupUpdateReqEmailGroup {
	this := EmailGroupUpdateReqEmailGroup{}
	return &this
}

// GetEmails returns the Emails field value
func (o *EmailGroupUpdateReqEmailGroup) GetEmails() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Emails
}

// GetEmailsOk returns a tuple with the Emails field value
// and a boolean to check if the value has been set.
func (o *EmailGroupUpdateReqEmailGroup) GetEmailsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Emails, true
}

// SetEmails sets field value
func (o *EmailGroupUpdateReqEmailGroup) SetEmails(v []string) {
	o.Emails = v
}

// GetName returns the Name field value
func (o *EmailGroupUpdateReqEmailGroup) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EmailGroupUpdateReqEmailGroup) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EmailGroupUpdateReqEmailGroup) SetName(v string) {
	o.Name = v
}

func (o EmailGroupUpdateReqEmailGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailGroupUpdateReqEmailGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["emails"] = o.Emails
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

func (o *EmailGroupUpdateReqEmailGroup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"emails",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEmailGroupUpdateReqEmailGroup := _EmailGroupUpdateReqEmailGroup{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEmailGroupUpdateReqEmailGroup)

	if err != nil {
		return err
	}

	*o = EmailGroupUpdateReqEmailGroup(varEmailGroupUpdateReqEmailGroup)

	return err
}

type NullableEmailGroupUpdateReqEmailGroup struct {
	value *EmailGroupUpdateReqEmailGroup
	isSet bool
}

func (v NullableEmailGroupUpdateReqEmailGroup) Get() *EmailGroupUpdateReqEmailGroup {
	return v.value
}

func (v *NullableEmailGroupUpdateReqEmailGroup) Set(val *EmailGroupUpdateReqEmailGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailGroupUpdateReqEmailGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailGroupUpdateReqEmailGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailGroupUpdateReqEmailGroup(val *EmailGroupUpdateReqEmailGroup) *NullableEmailGroupUpdateReqEmailGroup {
	return &NullableEmailGroupUpdateReqEmailGroup{value: val, isSet: true}
}

func (v NullableEmailGroupUpdateReqEmailGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailGroupUpdateReqEmailGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


