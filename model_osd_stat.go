/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the OsdStat type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OsdStat{}

// OsdStat OsdStat defines the basic info of a OsdStat
type OsdStat struct {
	AvgQueueLen *float64 `json:"avg_queue_len,omitempty"`
	Create *time.Time `json:"create,omitempty"`
	IoUtil *float64 `json:"io_util,omitempty"`
	KbytePerIo *float64 `json:"kbyte_per_io,omitempty"`
	ReadBandwidthKbyte *float64 `json:"read_bandwidth_kbyte,omitempty"`
	ReadIops *float64 `json:"read_iops,omitempty"`
	ReadMergedPs *float64 `json:"read_merged_ps,omitempty"`
	ReadWaitUs *float64 `json:"read_wait_us,omitempty"`
	TotalBandwidthKbyte *float64 `json:"total_bandwidth_kbyte,omitempty"`
	TotalIoWaitUs *float64 `json:"total_io_wait_us,omitempty"`
	TotalIops *float64 `json:"total_iops,omitempty"`
	TotalKbyte *int64 `json:"total_kbyte,omitempty"`
	UsedKbyte *int64 `json:"used_kbyte,omitempty"`
	UsedPercent *float64 `json:"used_percent,omitempty"`
	WriteBandwidthKbyte *float64 `json:"write_bandwidth_kbyte,omitempty"`
	WriteIops *float64 `json:"write_iops,omitempty"`
	WriteMergedPs *float64 `json:"write_merged_ps,omitempty"`
	WriteWaitUs *float64 `json:"write_wait_us,omitempty"`
	ActualKbyte *int64 `json:"actual_kbyte,omitempty"`
	CompressedByte *int64 `json:"compressed_byte,omitempty"`
	CompressedOriginByte *int64 `json:"compressed_origin_byte,omitempty"`
	DataKbyte *int64 `json:"data_kbyte,omitempty"`
	DegradedPercent *float64 `json:"degraded_percent,omitempty"`
	HealthyPercent *float64 `json:"healthy_percent,omitempty"`
	OmapTotalKbyte *float64 `json:"omap_total_kbyte,omitempty"`
	OmapUsedKbyte *float64 `json:"omap_used_kbyte,omitempty"`
	OmapUsedPercent *float64 `json:"omap_used_percent,omitempty"`
	Partition *PartitionStat `json:"partition,omitempty"`
	PgCreatingNum *int64 `json:"pg_creating_num,omitempty"`
	PgDegradedNum *int64 `json:"pg_degraded_num,omitempty"`
	PgHealthyNum *int64 `json:"pg_healthy_num,omitempty"`
	PgRecoveryNum *int64 `json:"pg_recovery_num,omitempty"`
	PgTotalNum *int64 `json:"pg_total_num,omitempty"`
	PgUnavailableNum *int64 `json:"pg_unavailable_num,omitempty"`
	RecoveryPercent *float64 `json:"recovery_percent,omitempty"`
	UnavailablePercent *float64 `json:"unavailable_percent,omitempty"`
	WaterLevel *float64 `json:"water_level,omitempty"`
}

// NewOsdStat instantiates a new OsdStat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOsdStat() *OsdStat {
	this := OsdStat{}
	return &this
}

// NewOsdStatWithDefaults instantiates a new OsdStat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOsdStatWithDefaults() *OsdStat {
	this := OsdStat{}
	return &this
}

// GetAvgQueueLen returns the AvgQueueLen field value if set, zero value otherwise.
func (o *OsdStat) GetAvgQueueLen() float64 {
	if o == nil || IsNil(o.AvgQueueLen) {
		var ret float64
		return ret
	}
	return *o.AvgQueueLen
}

// GetAvgQueueLenOk returns a tuple with the AvgQueueLen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsdStat) GetAvgQueueLenOk() (*float64, bool) {
	if o == nil || IsNil(o.AvgQueueLen) {
		return nil, false
	}
	return o.AvgQueueLen, true
}

// HasAvgQueueLen returns a boolean if a field has been set.
func (o *OsdStat) HasAvgQueueLen() bool {
	if o != nil && !IsNil(o.AvgQueueLen) {
		return true
	}

	return false
}

// SetAvgQueueLen gets a reference to the given float64 and assigns it to the AvgQueueLen field.
func (o *OsdStat) SetAvgQueueLen(v float64) {
	o.AvgQueueLen = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *OsdStat) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsdStat) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *OsdStat) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *OsdStat) SetCreate(v time.Time) {
	o.Create = &v
}

// GetIoUtil returns the IoUtil field value if set, zero value otherwise.
func (o *OsdStat) GetIoUtil() float64 {
	if o == nil || IsNil(o.IoUtil) {
		var ret float64
		return ret
	}
	return *o.IoUtil
}

// GetIoUtilOk returns a tuple with the IoUtil field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsdStat) GetIoUtilOk() (*float64, bool) {
	if o == nil || IsNil(o.IoUtil) {
		return nil, false
	}
	return o.IoUtil, true
}

// HasIoUtil returns a boolean if a field has been set.
func (o *OsdStat) HasIoUtil() bool {
	if o != nil && !IsNil(o.IoUtil) {
		return true
	}

	return false
}

// SetIoUtil gets a reference to the given float64 and assigns it to the IoUtil field.
func (o *OsdStat) SetIoUtil(v float64) {
	o.IoUtil = &v
}

// GetKbytePerIo returns the KbytePerIo field value if set, zero value otherwise.
func (o *OsdStat) GetKbytePerIo() float64 {
	if o == nil || IsNil(o.KbytePerIo) {
		var ret float64
		return ret
	}
	return *o.KbytePerIo
}

// GetKbytePerIoOk returns a tuple with the KbytePerIo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsdStat) GetKbytePerIoOk() (*float64, bool) {
	if o == nil || IsNil(o.KbytePerIo) {
		return nil, false
	}
	return o.KbytePerIo, true
}

// HasKbytePerIo returns a boolean if a field has been set.
func (o *OsdStat) HasKbytePerIo() bool {
	if o != nil && !IsNil(o.KbytePerIo) {
		return true
	}

	return false
}

// SetKbytePerIo gets a reference to the given float64 and assigns it to the KbytePerIo field.
func (o *OsdStat) SetKbytePerIo(v float64) {
	o.KbytePerIo = &v
}

// GetReadBandwidthKbyte returns the ReadBandwidthKbyte field value if set, zero value otherwise.
func (o *OsdStat) GetReadBandwidthKbyte() float64 {
	if o == nil || IsNil(o.ReadBandwidthKbyte) {
		var ret float64
		return ret
	}
	return *o.ReadBandwidthKbyte
}

// GetReadBandwidthKbyteOk returns a tuple with the ReadBandwidthKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsdStat) GetReadBandwidthKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.ReadBandwidthKbyte) {
		return nil, false
	}
	return o.ReadBandwidthKbyte, true
}

// HasReadBandwidthKbyte returns a boolean if a field has been set.
func (o *OsdStat) HasReadBandwidthKbyte() bool {
	if o != nil && !IsNil(o.ReadBandwidthKbyte) {
		return true
	}

	return false
}

// SetReadBandwidthKbyte gets a reference to the given float64 and assigns it to the ReadBandwidthKbyte field.
func (o *OsdStat) SetReadBandwidthKbyte(v float64) {
	o.ReadBandwidthKbyte = &v
}

// GetReadIops returns the ReadIops field value if set, zero value otherwise.
func (o *OsdStat) GetReadIops() float64 {
	if o == nil || IsNil(o.ReadIops) {
		var ret float64
		return ret
	}
	return *o.ReadIops
}

// GetReadIopsOk returns a tuple with the ReadIops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsdStat) GetReadIopsOk() (*float64, bool) {
	if o == nil || IsNil(o.ReadIops) {
		return nil, false
	}
	return o.ReadIops, true
}

// HasReadIops returns a boolean if a field has been set.
func (o *OsdStat) HasReadIops() bool {
	if o != nil && !IsNil(o.ReadIops) {
		return true
	}

	return false
}

// SetReadIops gets a reference to the given float64 and assigns it to the ReadIops field.
func (o *OsdStat) SetReadIops(v float64) {
	o.ReadIops = &v
}

// GetReadMergedPs returns the ReadMergedPs field value if set, zero value otherwise.
func (o *OsdStat) GetReadMergedPs() float64 {
	if o == nil || IsNil(o.ReadMergedPs) {
		var ret float64
		return ret
	}
	return *o.ReadMergedPs
}

// GetReadMergedPsOk returns a tuple with the ReadMergedPs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsdStat) GetReadMergedPsOk() (*float64, bool) {
	if o == nil || IsNil(o.ReadMergedPs) {
		return nil, false
	}
	return o.ReadMergedPs, true
}

// HasReadMergedPs returns a boolean if a field has been set.
func (o *OsdStat) HasReadMergedPs() bool {
	if o != nil && !IsNil(o.ReadMergedPs) {
		return true
	}

	return false
}

// SetReadMergedPs gets a reference to the given float64 and assigns it to the ReadMergedPs field.
func (o *OsdStat) SetReadMergedPs(v float64) {
	o.ReadMergedPs = &v
}

// GetReadWaitUs returns the ReadWaitUs field value if set, zero value otherwise.
func (o *OsdStat) GetReadWaitUs() float64 {
	if o == nil || IsNil(o.ReadWaitUs) {
		var ret float64
		return ret
	}
	return *o.ReadWaitUs
}

// GetReadWaitUsOk returns a tuple with the ReadWaitUs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsdStat) GetReadWaitUsOk() (*float64, bool) {
	if o == nil || IsNil(o.ReadWaitUs) {
		return nil, false
	}
	return o.ReadWaitUs, true
}

// HasReadWaitUs returns a boolean if a field has been set.
func (o *OsdStat) HasReadWaitUs() bool {
	if o != nil && !IsNil(o.ReadWaitUs) {
		return true
	}

	return false
}

// SetReadWaitUs gets a reference to the given float64 and assigns it to the ReadWaitUs field.
func (o *OsdStat) SetReadWaitUs(v float64) {
	o.ReadWaitUs = &v
}

// GetTotalBandwidthKbyte returns the TotalBandwidthKbyte field value if set, zero value otherwise.
func (o *OsdStat) GetTotalBandwidthKbyte() float64 {
	if o == nil || IsNil(o.TotalBandwidthKbyte) {
		var ret float64
		return ret
	}
	return *o.TotalBandwidthKbyte
}

// GetTotalBandwidthKbyteOk returns a tuple with the TotalBandwidthKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsdStat) GetTotalBandwidthKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.TotalBandwidthKbyte) {
		return nil, false
	}
	return o.TotalBandwidthKbyte, true
}

// HasTotalBandwidthKbyte returns a boolean if a field has been set.
func (o *OsdStat) HasTotalBandwidthKbyte() bool {
	if o != nil && !IsNil(o.TotalBandwidthKbyte) {
		return true
	}

	return false
}

// SetTotalBandwidthKbyte gets a reference to the given float64 and assigns it to the TotalBandwidthKbyte field.
func (o *OsdStat) SetTotalBandwidthKbyte(v float64) {
	o.TotalBandwidthKbyte = &v
}

// GetTotalIoWaitUs returns the TotalIoWaitUs field value if set, zero value otherwise.
func (o *OsdStat) GetTotalIoWaitUs() float64 {
	if o == nil || IsNil(o.TotalIoWaitUs) {
		var ret float64
		return ret
	}
	return *o.TotalIoWaitUs
}

// GetTotalIoWaitUsOk returns a tuple with the TotalIoWaitUs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsdStat) GetTotalIoWaitUsOk() (*float64, bool) {
	if o == nil || IsNil(o.TotalIoWaitUs) {
		return nil, false
	}
	return o.TotalIoWaitUs, true
}

// HasTotalIoWaitUs returns a boolean if a field has been set.
func (o *OsdStat) HasTotalIoWaitUs() bool {
	if o != nil && !IsNil(o.TotalIoWaitUs) {
		return true
	}

	return false
}

// SetTotalIoWaitUs gets a reference to the given float64 and assigns it to the TotalIoWaitUs field.
func (o *OsdStat) SetTotalIoWaitUs(v float64) {
	o.TotalIoWaitUs = &v
}

// GetTotalIops returns the TotalIops field value if set, zero value otherwise.
func (o *OsdStat) GetTotalIops() float64 {
	if o == nil || IsNil(o.TotalIops) {
		var ret float64
		return ret
	}
	return *o.TotalIops
}

// GetTotalIopsOk returns a tuple with the TotalIops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsdStat) GetTotalIopsOk() (*float64, bool) {
	if o == nil || IsNil(o.TotalIops) {
		return nil, false
	}
	return o.TotalIops, true
}

// HasTotalIops returns a boolean if a field has been set.
func (o *OsdStat) HasTotalIops() bool {
	if o != nil && !IsNil(o.TotalIops) {
		return true
	}

	return false
}

// SetTotalIops gets a reference to the given float64 and assigns it to the TotalIops field.
func (o *OsdStat) SetTotalIops(v float64) {
	o.TotalIops = &v
}

// GetTotalKbyte returns the TotalKbyte field value if set, zero value otherwise.
func (o *OsdStat) GetTotalKbyte() int64 {
	if o == nil || IsNil(o.TotalKbyte) {
		var ret int64
		return ret
	}
	return *o.TotalKbyte
}

// GetTotalKbyteOk returns a tuple with the TotalKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsdStat) GetTotalKbyteOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalKbyte) {
		return nil, false
	}
	return o.TotalKbyte, true
}

// HasTotalKbyte returns a boolean if a field has been set.
func (o *OsdStat) HasTotalKbyte() bool {
	if o != nil && !IsNil(o.TotalKbyte) {
		return true
	}

	return false
}

// SetTotalKbyte gets a reference to the given int64 and assigns it to the TotalKbyte field.
func (o *OsdStat) SetTotalKbyte(v int64) {
	o.TotalKbyte = &v
}

// GetUsedKbyte returns the UsedKbyte field value if set, zero value otherwise.
func (o *OsdStat) GetUsedKbyte() int64 {
	if o == nil || IsNil(o.UsedKbyte) {
		var ret int64
		return ret
	}
	return *o.UsedKbyte
}

// GetUsedKbyteOk returns a tuple with the UsedKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsdStat) GetUsedKbyteOk() (*int64, bool) {
	if o == nil || IsNil(o.UsedKbyte) {
		return nil, false
	}
	return o.UsedKbyte, true
}

// HasUsedKbyte returns a boolean if a field has been set.
func (o *OsdStat) HasUsedKbyte() bool {
	if o != nil && !IsNil(o.UsedKbyte) {
		return true
	}

	return false
}

// SetUsedKbyte gets a reference to the given int64 and assigns it to the UsedKbyte field.
func (o *OsdStat) SetUsedKbyte(v int64) {
	o.UsedKbyte = &v
}

// GetUsedPercent returns the UsedPercent field value if set, zero value otherwise.
func (o *OsdStat) GetUsedPercent() float64 {
	if o == nil || IsNil(o.UsedPercent) {
		var ret float64
		return ret
	}
	return *o.UsedPercent
}

// GetUsedPercentOk returns a tuple with the UsedPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsdStat) GetUsedPercentOk() (*float64, bool) {
	if o == nil || IsNil(o.UsedPercent) {
		return nil, false
	}
	return o.UsedPercent, true
}

// HasUsedPercent returns a boolean if a field has been set.
func (o *OsdStat) HasUsedPercent() bool {
	if o != nil && !IsNil(o.UsedPercent) {
		return true
	}

	return false
}

// SetUsedPercent gets a reference to the given float64 and assigns it to the UsedPercent field.
func (o *OsdStat) SetUsedPercent(v float64) {
	o.UsedPercent = &v
}

// GetWriteBandwidthKbyte returns the WriteBandwidthKbyte field value if set, zero value otherwise.
func (o *OsdStat) GetWriteBandwidthKbyte() float64 {
	if o == nil || IsNil(o.WriteBandwidthKbyte) {
		var ret float64
		return ret
	}
	return *o.WriteBandwidthKbyte
}

// GetWriteBandwidthKbyteOk returns a tuple with the WriteBandwidthKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsdStat) GetWriteBandwidthKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.WriteBandwidthKbyte) {
		return nil, false
	}
	return o.WriteBandwidthKbyte, true
}

// HasWriteBandwidthKbyte returns a boolean if a field has been set.
func (o *OsdStat) HasWriteBandwidthKbyte() bool {
	if o != nil && !IsNil(o.WriteBandwidthKbyte) {
		return true
	}

	return false
}

// SetWriteBandwidthKbyte gets a reference to the given float64 and assigns it to the WriteBandwidthKbyte field.
func (o *OsdStat) SetWriteBandwidthKbyte(v float64) {
	o.WriteBandwidthKbyte = &v
}

// GetWriteIops returns the WriteIops field value if set, zero value otherwise.
func (o *OsdStat) GetWriteIops() float64 {
	if o == nil || IsNil(o.WriteIops) {
		var ret float64
		return ret
	}
	return *o.WriteIops
}

// GetWriteIopsOk returns a tuple with the WriteIops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsdStat) GetWriteIopsOk() (*float64, bool) {
	if o == nil || IsNil(o.WriteIops) {
		return nil, false
	}
	return o.WriteIops, true
}

// HasWriteIops returns a boolean if a field has been set.
func (o *OsdStat) HasWriteIops() bool {
	if o != nil && !IsNil(o.WriteIops) {
		return true
	}

	return false
}

// SetWriteIops gets a reference to the given float64 and assigns it to the WriteIops field.
func (o *OsdStat) SetWriteIops(v float64) {
	o.WriteIops = &v
}

// GetWriteMergedPs returns the WriteMergedPs field value if set, zero value otherwise.
func (o *OsdStat) GetWriteMergedPs() float64 {
	if o == nil || IsNil(o.WriteMergedPs) {
		var ret float64
		return ret
	}
	return *o.WriteMergedPs
}

// GetWriteMergedPsOk returns a tuple with the WriteMergedPs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsdStat) GetWriteMergedPsOk() (*float64, bool) {
	if o == nil || IsNil(o.WriteMergedPs) {
		return nil, false
	}
	return o.WriteMergedPs, true
}

// HasWriteMergedPs returns a boolean if a field has been set.
func (o *OsdStat) HasWriteMergedPs() bool {
	if o != nil && !IsNil(o.WriteMergedPs) {
		return true
	}

	return false
}

// SetWriteMergedPs gets a reference to the given float64 and assigns it to the WriteMergedPs field.
func (o *OsdStat) SetWriteMergedPs(v float64) {
	o.WriteMergedPs = &v
}

// GetWriteWaitUs returns the WriteWaitUs field value if set, zero value otherwise.
func (o *OsdStat) GetWriteWaitUs() float64 {
	if o == nil || IsNil(o.WriteWaitUs) {
		var ret float64
		return ret
	}
	return *o.WriteWaitUs
}

// GetWriteWaitUsOk returns a tuple with the WriteWaitUs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsdStat) GetWriteWaitUsOk() (*float64, bool) {
	if o == nil || IsNil(o.WriteWaitUs) {
		return nil, false
	}
	return o.WriteWaitUs, true
}

// HasWriteWaitUs returns a boolean if a field has been set.
func (o *OsdStat) HasWriteWaitUs() bool {
	if o != nil && !IsNil(o.WriteWaitUs) {
		return true
	}

	return false
}

// SetWriteWaitUs gets a reference to the given float64 and assigns it to the WriteWaitUs field.
func (o *OsdStat) SetWriteWaitUs(v float64) {
	o.WriteWaitUs = &v
}

// GetActualKbyte returns the ActualKbyte field value if set, zero value otherwise.
func (o *OsdStat) GetActualKbyte() int64 {
	if o == nil || IsNil(o.ActualKbyte) {
		var ret int64
		return ret
	}
	return *o.ActualKbyte
}

// GetActualKbyteOk returns a tuple with the ActualKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsdStat) GetActualKbyteOk() (*int64, bool) {
	if o == nil || IsNil(o.ActualKbyte) {
		return nil, false
	}
	return o.ActualKbyte, true
}

// HasActualKbyte returns a boolean if a field has been set.
func (o *OsdStat) HasActualKbyte() bool {
	if o != nil && !IsNil(o.ActualKbyte) {
		return true
	}

	return false
}

// SetActualKbyte gets a reference to the given int64 and assigns it to the ActualKbyte field.
func (o *OsdStat) SetActualKbyte(v int64) {
	o.ActualKbyte = &v
}

// GetCompressedByte returns the CompressedByte field value if set, zero value otherwise.
func (o *OsdStat) GetCompressedByte() int64 {
	if o == nil || IsNil(o.CompressedByte) {
		var ret int64
		return ret
	}
	return *o.CompressedByte
}

// GetCompressedByteOk returns a tuple with the CompressedByte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsdStat) GetCompressedByteOk() (*int64, bool) {
	if o == nil || IsNil(o.CompressedByte) {
		return nil, false
	}
	return o.CompressedByte, true
}

// HasCompressedByte returns a boolean if a field has been set.
func (o *OsdStat) HasCompressedByte() bool {
	if o != nil && !IsNil(o.CompressedByte) {
		return true
	}

	return false
}

// SetCompressedByte gets a reference to the given int64 and assigns it to the CompressedByte field.
func (o *OsdStat) SetCompressedByte(v int64) {
	o.CompressedByte = &v
}

// GetCompressedOriginByte returns the CompressedOriginByte field value if set, zero value otherwise.
func (o *OsdStat) GetCompressedOriginByte() int64 {
	if o == nil || IsNil(o.CompressedOriginByte) {
		var ret int64
		return ret
	}
	return *o.CompressedOriginByte
}

// GetCompressedOriginByteOk returns a tuple with the CompressedOriginByte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsdStat) GetCompressedOriginByteOk() (*int64, bool) {
	if o == nil || IsNil(o.CompressedOriginByte) {
		return nil, false
	}
	return o.CompressedOriginByte, true
}

// HasCompressedOriginByte returns a boolean if a field has been set.
func (o *OsdStat) HasCompressedOriginByte() bool {
	if o != nil && !IsNil(o.CompressedOriginByte) {
		return true
	}

	return false
}

// SetCompressedOriginByte gets a reference to the given int64 and assigns it to the CompressedOriginByte field.
func (o *OsdStat) SetCompressedOriginByte(v int64) {
	o.CompressedOriginByte = &v
}

// GetDataKbyte returns the DataKbyte field value if set, zero value otherwise.
func (o *OsdStat) GetDataKbyte() int64 {
	if o == nil || IsNil(o.DataKbyte) {
		var ret int64
		return ret
	}
	return *o.DataKbyte
}

// GetDataKbyteOk returns a tuple with the DataKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsdStat) GetDataKbyteOk() (*int64, bool) {
	if o == nil || IsNil(o.DataKbyte) {
		return nil, false
	}
	return o.DataKbyte, true
}

// HasDataKbyte returns a boolean if a field has been set.
func (o *OsdStat) HasDataKbyte() bool {
	if o != nil && !IsNil(o.DataKbyte) {
		return true
	}

	return false
}

// SetDataKbyte gets a reference to the given int64 and assigns it to the DataKbyte field.
func (o *OsdStat) SetDataKbyte(v int64) {
	o.DataKbyte = &v
}

// GetDegradedPercent returns the DegradedPercent field value if set, zero value otherwise.
func (o *OsdStat) GetDegradedPercent() float64 {
	if o == nil || IsNil(o.DegradedPercent) {
		var ret float64
		return ret
	}
	return *o.DegradedPercent
}

// GetDegradedPercentOk returns a tuple with the DegradedPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsdStat) GetDegradedPercentOk() (*float64, bool) {
	if o == nil || IsNil(o.DegradedPercent) {
		return nil, false
	}
	return o.DegradedPercent, true
}

// HasDegradedPercent returns a boolean if a field has been set.
func (o *OsdStat) HasDegradedPercent() bool {
	if o != nil && !IsNil(o.DegradedPercent) {
		return true
	}

	return false
}

// SetDegradedPercent gets a reference to the given float64 and assigns it to the DegradedPercent field.
func (o *OsdStat) SetDegradedPercent(v float64) {
	o.DegradedPercent = &v
}

// GetHealthyPercent returns the HealthyPercent field value if set, zero value otherwise.
func (o *OsdStat) GetHealthyPercent() float64 {
	if o == nil || IsNil(o.HealthyPercent) {
		var ret float64
		return ret
	}
	return *o.HealthyPercent
}

// GetHealthyPercentOk returns a tuple with the HealthyPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsdStat) GetHealthyPercentOk() (*float64, bool) {
	if o == nil || IsNil(o.HealthyPercent) {
		return nil, false
	}
	return o.HealthyPercent, true
}

// HasHealthyPercent returns a boolean if a field has been set.
func (o *OsdStat) HasHealthyPercent() bool {
	if o != nil && !IsNil(o.HealthyPercent) {
		return true
	}

	return false
}

// SetHealthyPercent gets a reference to the given float64 and assigns it to the HealthyPercent field.
func (o *OsdStat) SetHealthyPercent(v float64) {
	o.HealthyPercent = &v
}

// GetOmapTotalKbyte returns the OmapTotalKbyte field value if set, zero value otherwise.
func (o *OsdStat) GetOmapTotalKbyte() float64 {
	if o == nil || IsNil(o.OmapTotalKbyte) {
		var ret float64
		return ret
	}
	return *o.OmapTotalKbyte
}

// GetOmapTotalKbyteOk returns a tuple with the OmapTotalKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsdStat) GetOmapTotalKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.OmapTotalKbyte) {
		return nil, false
	}
	return o.OmapTotalKbyte, true
}

// HasOmapTotalKbyte returns a boolean if a field has been set.
func (o *OsdStat) HasOmapTotalKbyte() bool {
	if o != nil && !IsNil(o.OmapTotalKbyte) {
		return true
	}

	return false
}

// SetOmapTotalKbyte gets a reference to the given float64 and assigns it to the OmapTotalKbyte field.
func (o *OsdStat) SetOmapTotalKbyte(v float64) {
	o.OmapTotalKbyte = &v
}

// GetOmapUsedKbyte returns the OmapUsedKbyte field value if set, zero value otherwise.
func (o *OsdStat) GetOmapUsedKbyte() float64 {
	if o == nil || IsNil(o.OmapUsedKbyte) {
		var ret float64
		return ret
	}
	return *o.OmapUsedKbyte
}

// GetOmapUsedKbyteOk returns a tuple with the OmapUsedKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsdStat) GetOmapUsedKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.OmapUsedKbyte) {
		return nil, false
	}
	return o.OmapUsedKbyte, true
}

// HasOmapUsedKbyte returns a boolean if a field has been set.
func (o *OsdStat) HasOmapUsedKbyte() bool {
	if o != nil && !IsNil(o.OmapUsedKbyte) {
		return true
	}

	return false
}

// SetOmapUsedKbyte gets a reference to the given float64 and assigns it to the OmapUsedKbyte field.
func (o *OsdStat) SetOmapUsedKbyte(v float64) {
	o.OmapUsedKbyte = &v
}

// GetOmapUsedPercent returns the OmapUsedPercent field value if set, zero value otherwise.
func (o *OsdStat) GetOmapUsedPercent() float64 {
	if o == nil || IsNil(o.OmapUsedPercent) {
		var ret float64
		return ret
	}
	return *o.OmapUsedPercent
}

// GetOmapUsedPercentOk returns a tuple with the OmapUsedPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsdStat) GetOmapUsedPercentOk() (*float64, bool) {
	if o == nil || IsNil(o.OmapUsedPercent) {
		return nil, false
	}
	return o.OmapUsedPercent, true
}

// HasOmapUsedPercent returns a boolean if a field has been set.
func (o *OsdStat) HasOmapUsedPercent() bool {
	if o != nil && !IsNil(o.OmapUsedPercent) {
		return true
	}

	return false
}

// SetOmapUsedPercent gets a reference to the given float64 and assigns it to the OmapUsedPercent field.
func (o *OsdStat) SetOmapUsedPercent(v float64) {
	o.OmapUsedPercent = &v
}

// GetPartition returns the Partition field value if set, zero value otherwise.
func (o *OsdStat) GetPartition() PartitionStat {
	if o == nil || IsNil(o.Partition) {
		var ret PartitionStat
		return ret
	}
	return *o.Partition
}

// GetPartitionOk returns a tuple with the Partition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsdStat) GetPartitionOk() (*PartitionStat, bool) {
	if o == nil || IsNil(o.Partition) {
		return nil, false
	}
	return o.Partition, true
}

// HasPartition returns a boolean if a field has been set.
func (o *OsdStat) HasPartition() bool {
	if o != nil && !IsNil(o.Partition) {
		return true
	}

	return false
}

// SetPartition gets a reference to the given PartitionStat and assigns it to the Partition field.
func (o *OsdStat) SetPartition(v PartitionStat) {
	o.Partition = &v
}

// GetPgCreatingNum returns the PgCreatingNum field value if set, zero value otherwise.
func (o *OsdStat) GetPgCreatingNum() int64 {
	if o == nil || IsNil(o.PgCreatingNum) {
		var ret int64
		return ret
	}
	return *o.PgCreatingNum
}

// GetPgCreatingNumOk returns a tuple with the PgCreatingNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsdStat) GetPgCreatingNumOk() (*int64, bool) {
	if o == nil || IsNil(o.PgCreatingNum) {
		return nil, false
	}
	return o.PgCreatingNum, true
}

// HasPgCreatingNum returns a boolean if a field has been set.
func (o *OsdStat) HasPgCreatingNum() bool {
	if o != nil && !IsNil(o.PgCreatingNum) {
		return true
	}

	return false
}

// SetPgCreatingNum gets a reference to the given int64 and assigns it to the PgCreatingNum field.
func (o *OsdStat) SetPgCreatingNum(v int64) {
	o.PgCreatingNum = &v
}

// GetPgDegradedNum returns the PgDegradedNum field value if set, zero value otherwise.
func (o *OsdStat) GetPgDegradedNum() int64 {
	if o == nil || IsNil(o.PgDegradedNum) {
		var ret int64
		return ret
	}
	return *o.PgDegradedNum
}

// GetPgDegradedNumOk returns a tuple with the PgDegradedNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsdStat) GetPgDegradedNumOk() (*int64, bool) {
	if o == nil || IsNil(o.PgDegradedNum) {
		return nil, false
	}
	return o.PgDegradedNum, true
}

// HasPgDegradedNum returns a boolean if a field has been set.
func (o *OsdStat) HasPgDegradedNum() bool {
	if o != nil && !IsNil(o.PgDegradedNum) {
		return true
	}

	return false
}

// SetPgDegradedNum gets a reference to the given int64 and assigns it to the PgDegradedNum field.
func (o *OsdStat) SetPgDegradedNum(v int64) {
	o.PgDegradedNum = &v
}

// GetPgHealthyNum returns the PgHealthyNum field value if set, zero value otherwise.
func (o *OsdStat) GetPgHealthyNum() int64 {
	if o == nil || IsNil(o.PgHealthyNum) {
		var ret int64
		return ret
	}
	return *o.PgHealthyNum
}

// GetPgHealthyNumOk returns a tuple with the PgHealthyNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsdStat) GetPgHealthyNumOk() (*int64, bool) {
	if o == nil || IsNil(o.PgHealthyNum) {
		return nil, false
	}
	return o.PgHealthyNum, true
}

// HasPgHealthyNum returns a boolean if a field has been set.
func (o *OsdStat) HasPgHealthyNum() bool {
	if o != nil && !IsNil(o.PgHealthyNum) {
		return true
	}

	return false
}

// SetPgHealthyNum gets a reference to the given int64 and assigns it to the PgHealthyNum field.
func (o *OsdStat) SetPgHealthyNum(v int64) {
	o.PgHealthyNum = &v
}

// GetPgRecoveryNum returns the PgRecoveryNum field value if set, zero value otherwise.
func (o *OsdStat) GetPgRecoveryNum() int64 {
	if o == nil || IsNil(o.PgRecoveryNum) {
		var ret int64
		return ret
	}
	return *o.PgRecoveryNum
}

// GetPgRecoveryNumOk returns a tuple with the PgRecoveryNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsdStat) GetPgRecoveryNumOk() (*int64, bool) {
	if o == nil || IsNil(o.PgRecoveryNum) {
		return nil, false
	}
	return o.PgRecoveryNum, true
}

// HasPgRecoveryNum returns a boolean if a field has been set.
func (o *OsdStat) HasPgRecoveryNum() bool {
	if o != nil && !IsNil(o.PgRecoveryNum) {
		return true
	}

	return false
}

// SetPgRecoveryNum gets a reference to the given int64 and assigns it to the PgRecoveryNum field.
func (o *OsdStat) SetPgRecoveryNum(v int64) {
	o.PgRecoveryNum = &v
}

// GetPgTotalNum returns the PgTotalNum field value if set, zero value otherwise.
func (o *OsdStat) GetPgTotalNum() int64 {
	if o == nil || IsNil(o.PgTotalNum) {
		var ret int64
		return ret
	}
	return *o.PgTotalNum
}

// GetPgTotalNumOk returns a tuple with the PgTotalNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsdStat) GetPgTotalNumOk() (*int64, bool) {
	if o == nil || IsNil(o.PgTotalNum) {
		return nil, false
	}
	return o.PgTotalNum, true
}

// HasPgTotalNum returns a boolean if a field has been set.
func (o *OsdStat) HasPgTotalNum() bool {
	if o != nil && !IsNil(o.PgTotalNum) {
		return true
	}

	return false
}

// SetPgTotalNum gets a reference to the given int64 and assigns it to the PgTotalNum field.
func (o *OsdStat) SetPgTotalNum(v int64) {
	o.PgTotalNum = &v
}

// GetPgUnavailableNum returns the PgUnavailableNum field value if set, zero value otherwise.
func (o *OsdStat) GetPgUnavailableNum() int64 {
	if o == nil || IsNil(o.PgUnavailableNum) {
		var ret int64
		return ret
	}
	return *o.PgUnavailableNum
}

// GetPgUnavailableNumOk returns a tuple with the PgUnavailableNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsdStat) GetPgUnavailableNumOk() (*int64, bool) {
	if o == nil || IsNil(o.PgUnavailableNum) {
		return nil, false
	}
	return o.PgUnavailableNum, true
}

// HasPgUnavailableNum returns a boolean if a field has been set.
func (o *OsdStat) HasPgUnavailableNum() bool {
	if o != nil && !IsNil(o.PgUnavailableNum) {
		return true
	}

	return false
}

// SetPgUnavailableNum gets a reference to the given int64 and assigns it to the PgUnavailableNum field.
func (o *OsdStat) SetPgUnavailableNum(v int64) {
	o.PgUnavailableNum = &v
}

// GetRecoveryPercent returns the RecoveryPercent field value if set, zero value otherwise.
func (o *OsdStat) GetRecoveryPercent() float64 {
	if o == nil || IsNil(o.RecoveryPercent) {
		var ret float64
		return ret
	}
	return *o.RecoveryPercent
}

// GetRecoveryPercentOk returns a tuple with the RecoveryPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsdStat) GetRecoveryPercentOk() (*float64, bool) {
	if o == nil || IsNil(o.RecoveryPercent) {
		return nil, false
	}
	return o.RecoveryPercent, true
}

// HasRecoveryPercent returns a boolean if a field has been set.
func (o *OsdStat) HasRecoveryPercent() bool {
	if o != nil && !IsNil(o.RecoveryPercent) {
		return true
	}

	return false
}

// SetRecoveryPercent gets a reference to the given float64 and assigns it to the RecoveryPercent field.
func (o *OsdStat) SetRecoveryPercent(v float64) {
	o.RecoveryPercent = &v
}

// GetUnavailablePercent returns the UnavailablePercent field value if set, zero value otherwise.
func (o *OsdStat) GetUnavailablePercent() float64 {
	if o == nil || IsNil(o.UnavailablePercent) {
		var ret float64
		return ret
	}
	return *o.UnavailablePercent
}

// GetUnavailablePercentOk returns a tuple with the UnavailablePercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsdStat) GetUnavailablePercentOk() (*float64, bool) {
	if o == nil || IsNil(o.UnavailablePercent) {
		return nil, false
	}
	return o.UnavailablePercent, true
}

// HasUnavailablePercent returns a boolean if a field has been set.
func (o *OsdStat) HasUnavailablePercent() bool {
	if o != nil && !IsNil(o.UnavailablePercent) {
		return true
	}

	return false
}

// SetUnavailablePercent gets a reference to the given float64 and assigns it to the UnavailablePercent field.
func (o *OsdStat) SetUnavailablePercent(v float64) {
	o.UnavailablePercent = &v
}

// GetWaterLevel returns the WaterLevel field value if set, zero value otherwise.
func (o *OsdStat) GetWaterLevel() float64 {
	if o == nil || IsNil(o.WaterLevel) {
		var ret float64
		return ret
	}
	return *o.WaterLevel
}

// GetWaterLevelOk returns a tuple with the WaterLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsdStat) GetWaterLevelOk() (*float64, bool) {
	if o == nil || IsNil(o.WaterLevel) {
		return nil, false
	}
	return o.WaterLevel, true
}

// HasWaterLevel returns a boolean if a field has been set.
func (o *OsdStat) HasWaterLevel() bool {
	if o != nil && !IsNil(o.WaterLevel) {
		return true
	}

	return false
}

// SetWaterLevel gets a reference to the given float64 and assigns it to the WaterLevel field.
func (o *OsdStat) SetWaterLevel(v float64) {
	o.WaterLevel = &v
}

func (o OsdStat) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OsdStat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AvgQueueLen) {
		toSerialize["avg_queue_len"] = o.AvgQueueLen
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.IoUtil) {
		toSerialize["io_util"] = o.IoUtil
	}
	if !IsNil(o.KbytePerIo) {
		toSerialize["kbyte_per_io"] = o.KbytePerIo
	}
	if !IsNil(o.ReadBandwidthKbyte) {
		toSerialize["read_bandwidth_kbyte"] = o.ReadBandwidthKbyte
	}
	if !IsNil(o.ReadIops) {
		toSerialize["read_iops"] = o.ReadIops
	}
	if !IsNil(o.ReadMergedPs) {
		toSerialize["read_merged_ps"] = o.ReadMergedPs
	}
	if !IsNil(o.ReadWaitUs) {
		toSerialize["read_wait_us"] = o.ReadWaitUs
	}
	if !IsNil(o.TotalBandwidthKbyte) {
		toSerialize["total_bandwidth_kbyte"] = o.TotalBandwidthKbyte
	}
	if !IsNil(o.TotalIoWaitUs) {
		toSerialize["total_io_wait_us"] = o.TotalIoWaitUs
	}
	if !IsNil(o.TotalIops) {
		toSerialize["total_iops"] = o.TotalIops
	}
	if !IsNil(o.TotalKbyte) {
		toSerialize["total_kbyte"] = o.TotalKbyte
	}
	if !IsNil(o.UsedKbyte) {
		toSerialize["used_kbyte"] = o.UsedKbyte
	}
	if !IsNil(o.UsedPercent) {
		toSerialize["used_percent"] = o.UsedPercent
	}
	if !IsNil(o.WriteBandwidthKbyte) {
		toSerialize["write_bandwidth_kbyte"] = o.WriteBandwidthKbyte
	}
	if !IsNil(o.WriteIops) {
		toSerialize["write_iops"] = o.WriteIops
	}
	if !IsNil(o.WriteMergedPs) {
		toSerialize["write_merged_ps"] = o.WriteMergedPs
	}
	if !IsNil(o.WriteWaitUs) {
		toSerialize["write_wait_us"] = o.WriteWaitUs
	}
	if !IsNil(o.ActualKbyte) {
		toSerialize["actual_kbyte"] = o.ActualKbyte
	}
	if !IsNil(o.CompressedByte) {
		toSerialize["compressed_byte"] = o.CompressedByte
	}
	if !IsNil(o.CompressedOriginByte) {
		toSerialize["compressed_origin_byte"] = o.CompressedOriginByte
	}
	if !IsNil(o.DataKbyte) {
		toSerialize["data_kbyte"] = o.DataKbyte
	}
	if !IsNil(o.DegradedPercent) {
		toSerialize["degraded_percent"] = o.DegradedPercent
	}
	if !IsNil(o.HealthyPercent) {
		toSerialize["healthy_percent"] = o.HealthyPercent
	}
	if !IsNil(o.OmapTotalKbyte) {
		toSerialize["omap_total_kbyte"] = o.OmapTotalKbyte
	}
	if !IsNil(o.OmapUsedKbyte) {
		toSerialize["omap_used_kbyte"] = o.OmapUsedKbyte
	}
	if !IsNil(o.OmapUsedPercent) {
		toSerialize["omap_used_percent"] = o.OmapUsedPercent
	}
	if !IsNil(o.Partition) {
		toSerialize["partition"] = o.Partition
	}
	if !IsNil(o.PgCreatingNum) {
		toSerialize["pg_creating_num"] = o.PgCreatingNum
	}
	if !IsNil(o.PgDegradedNum) {
		toSerialize["pg_degraded_num"] = o.PgDegradedNum
	}
	if !IsNil(o.PgHealthyNum) {
		toSerialize["pg_healthy_num"] = o.PgHealthyNum
	}
	if !IsNil(o.PgRecoveryNum) {
		toSerialize["pg_recovery_num"] = o.PgRecoveryNum
	}
	if !IsNil(o.PgTotalNum) {
		toSerialize["pg_total_num"] = o.PgTotalNum
	}
	if !IsNil(o.PgUnavailableNum) {
		toSerialize["pg_unavailable_num"] = o.PgUnavailableNum
	}
	if !IsNil(o.RecoveryPercent) {
		toSerialize["recovery_percent"] = o.RecoveryPercent
	}
	if !IsNil(o.UnavailablePercent) {
		toSerialize["unavailable_percent"] = o.UnavailablePercent
	}
	if !IsNil(o.WaterLevel) {
		toSerialize["water_level"] = o.WaterLevel
	}
	return toSerialize, nil
}

type NullableOsdStat struct {
	value *OsdStat
	isSet bool
}

func (v NullableOsdStat) Get() *OsdStat {
	return v.value
}

func (v *NullableOsdStat) Set(val *OsdStat) {
	v.value = val
	v.isSet = true
}

func (v NullableOsdStat) IsSet() bool {
	return v.isSet
}

func (v *NullableOsdStat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOsdStat(val *OsdStat) *NullableOsdStat {
	return &NullableOsdStat{value: val, isSet: true}
}

func (v NullableOsdStat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOsdStat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


