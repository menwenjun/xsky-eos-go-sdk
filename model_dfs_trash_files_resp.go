/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DfsTrashFilesResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsTrashFilesResp{}

// DfsTrashFilesResp struct for DfsTrashFilesResp
type DfsTrashFilesResp struct {
	// files in dfs trash
	DfsTrashFiles []DfsTrashFile `json:"dfs_trash_files,omitempty"`
	// for ls directory, set to true when reach end
	Eof *bool `json:"eof,omitempty"`
}

// NewDfsTrashFilesResp instantiates a new DfsTrashFilesResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsTrashFilesResp() *DfsTrashFilesResp {
	this := DfsTrashFilesResp{}
	return &this
}

// NewDfsTrashFilesRespWithDefaults instantiates a new DfsTrashFilesResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsTrashFilesRespWithDefaults() *DfsTrashFilesResp {
	this := DfsTrashFilesResp{}
	return &this
}

// GetDfsTrashFiles returns the DfsTrashFiles field value if set, zero value otherwise.
func (o *DfsTrashFilesResp) GetDfsTrashFiles() []DfsTrashFile {
	if o == nil || IsNil(o.DfsTrashFiles) {
		var ret []DfsTrashFile
		return ret
	}
	return o.DfsTrashFiles
}

// GetDfsTrashFilesOk returns a tuple with the DfsTrashFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTrashFilesResp) GetDfsTrashFilesOk() ([]DfsTrashFile, bool) {
	if o == nil || IsNil(o.DfsTrashFiles) {
		return nil, false
	}
	return o.DfsTrashFiles, true
}

// HasDfsTrashFiles returns a boolean if a field has been set.
func (o *DfsTrashFilesResp) HasDfsTrashFiles() bool {
	if o != nil && !IsNil(o.DfsTrashFiles) {
		return true
	}

	return false
}

// SetDfsTrashFiles gets a reference to the given []DfsTrashFile and assigns it to the DfsTrashFiles field.
func (o *DfsTrashFilesResp) SetDfsTrashFiles(v []DfsTrashFile) {
	o.DfsTrashFiles = v
}

// GetEof returns the Eof field value if set, zero value otherwise.
func (o *DfsTrashFilesResp) GetEof() bool {
	if o == nil || IsNil(o.Eof) {
		var ret bool
		return ret
	}
	return *o.Eof
}

// GetEofOk returns a tuple with the Eof field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTrashFilesResp) GetEofOk() (*bool, bool) {
	if o == nil || IsNil(o.Eof) {
		return nil, false
	}
	return o.Eof, true
}

// HasEof returns a boolean if a field has been set.
func (o *DfsTrashFilesResp) HasEof() bool {
	if o != nil && !IsNil(o.Eof) {
		return true
	}

	return false
}

// SetEof gets a reference to the given bool and assigns it to the Eof field.
func (o *DfsTrashFilesResp) SetEof(v bool) {
	o.Eof = &v
}

func (o DfsTrashFilesResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsTrashFilesResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DfsTrashFiles) {
		toSerialize["dfs_trash_files"] = o.DfsTrashFiles
	}
	if !IsNil(o.Eof) {
		toSerialize["eof"] = o.Eof
	}
	return toSerialize, nil
}

type NullableDfsTrashFilesResp struct {
	value *DfsTrashFilesResp
	isSet bool
}

func (v NullableDfsTrashFilesResp) Get() *DfsTrashFilesResp {
	return v.value
}

func (v *NullableDfsTrashFilesResp) Set(val *DfsTrashFilesResp) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsTrashFilesResp) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsTrashFilesResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsTrashFilesResp(val *DfsTrashFilesResp) *NullableDfsTrashFilesResp {
	return &NullableDfsTrashFilesResp{value: val, isSet: true}
}

func (v NullableDfsTrashFilesResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsTrashFilesResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


