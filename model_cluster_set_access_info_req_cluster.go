/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ClusterSetAccessInfoReqCluster type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterSetAccessInfoReqCluster{}

// ClusterSetAccessInfoReqCluster struct for ClusterSetAccessInfoReqCluster
type ClusterSetAccessInfoReqCluster struct {
	// access token
	AccessTokenId int64 `json:"access_token_id"`
	// access url
	AccessUrl string `json:"access_url"`
}

type _ClusterSetAccessInfoReqCluster ClusterSetAccessInfoReqCluster

// NewClusterSetAccessInfoReqCluster instantiates a new ClusterSetAccessInfoReqCluster object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterSetAccessInfoReqCluster(accessTokenId int64, accessUrl string) *ClusterSetAccessInfoReqCluster {
	this := ClusterSetAccessInfoReqCluster{}
	this.AccessTokenId = accessTokenId
	this.AccessUrl = accessUrl
	return &this
}

// NewClusterSetAccessInfoReqClusterWithDefaults instantiates a new ClusterSetAccessInfoReqCluster object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterSetAccessInfoReqClusterWithDefaults() *ClusterSetAccessInfoReqCluster {
	this := ClusterSetAccessInfoReqCluster{}
	return &this
}

// GetAccessTokenId returns the AccessTokenId field value
func (o *ClusterSetAccessInfoReqCluster) GetAccessTokenId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.AccessTokenId
}

// GetAccessTokenIdOk returns a tuple with the AccessTokenId field value
// and a boolean to check if the value has been set.
func (o *ClusterSetAccessInfoReqCluster) GetAccessTokenIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessTokenId, true
}

// SetAccessTokenId sets field value
func (o *ClusterSetAccessInfoReqCluster) SetAccessTokenId(v int64) {
	o.AccessTokenId = v
}

// GetAccessUrl returns the AccessUrl field value
func (o *ClusterSetAccessInfoReqCluster) GetAccessUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccessUrl
}

// GetAccessUrlOk returns a tuple with the AccessUrl field value
// and a boolean to check if the value has been set.
func (o *ClusterSetAccessInfoReqCluster) GetAccessUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessUrl, true
}

// SetAccessUrl sets field value
func (o *ClusterSetAccessInfoReqCluster) SetAccessUrl(v string) {
	o.AccessUrl = v
}

func (o ClusterSetAccessInfoReqCluster) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterSetAccessInfoReqCluster) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["access_token_id"] = o.AccessTokenId
	toSerialize["access_url"] = o.AccessUrl
	return toSerialize, nil
}

func (o *ClusterSetAccessInfoReqCluster) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"access_token_id",
		"access_url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClusterSetAccessInfoReqCluster := _ClusterSetAccessInfoReqCluster{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varClusterSetAccessInfoReqCluster)

	if err != nil {
		return err
	}

	*o = ClusterSetAccessInfoReqCluster(varClusterSetAccessInfoReqCluster)

	return err
}

type NullableClusterSetAccessInfoReqCluster struct {
	value *ClusterSetAccessInfoReqCluster
	isSet bool
}

func (v NullableClusterSetAccessInfoReqCluster) Get() *ClusterSetAccessInfoReqCluster {
	return v.value
}

func (v *NullableClusterSetAccessInfoReqCluster) Set(val *ClusterSetAccessInfoReqCluster) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterSetAccessInfoReqCluster) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterSetAccessInfoReqCluster) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterSetAccessInfoReqCluster(val *ClusterSetAccessInfoReqCluster) *NullableClusterSetAccessInfoReqCluster {
	return &NullableClusterSetAccessInfoReqCluster{value: val, isSet: true}
}

func (v NullableClusterSetAccessInfoReqCluster) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterSetAccessInfoReqCluster) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


