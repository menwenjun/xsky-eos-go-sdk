/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DfsSnapshotCreateReqDfsSnapshot type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsSnapshotCreateReqDfsSnapshot{}

// DfsSnapshotCreateReqDfsSnapshot struct for DfsSnapshotCreateReqDfsSnapshot
type DfsSnapshotCreateReqDfsSnapshot struct {
	// description
	Description string `json:"description"`
	// lock snapshot or not
	Lock *bool `json:"lock,omitempty"`
	// snapshot name
	Name string `json:"name"`
	// path
	Path string `json:"path"`
	// retention time
	Retention string `json:"retention"`
	// id of dfs rootfs
	RootfsId int64 `json:"rootfs_id"`
}

type _DfsSnapshotCreateReqDfsSnapshot DfsSnapshotCreateReqDfsSnapshot

// NewDfsSnapshotCreateReqDfsSnapshot instantiates a new DfsSnapshotCreateReqDfsSnapshot object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsSnapshotCreateReqDfsSnapshot(description string, name string, path string, retention string, rootfsId int64) *DfsSnapshotCreateReqDfsSnapshot {
	this := DfsSnapshotCreateReqDfsSnapshot{}
	this.Description = description
	this.Name = name
	this.Path = path
	this.Retention = retention
	this.RootfsId = rootfsId
	return &this
}

// NewDfsSnapshotCreateReqDfsSnapshotWithDefaults instantiates a new DfsSnapshotCreateReqDfsSnapshot object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsSnapshotCreateReqDfsSnapshotWithDefaults() *DfsSnapshotCreateReqDfsSnapshot {
	this := DfsSnapshotCreateReqDfsSnapshot{}
	return &this
}

// GetDescription returns the Description field value
func (o *DfsSnapshotCreateReqDfsSnapshot) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *DfsSnapshotCreateReqDfsSnapshot) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *DfsSnapshotCreateReqDfsSnapshot) SetDescription(v string) {
	o.Description = v
}

// GetLock returns the Lock field value if set, zero value otherwise.
func (o *DfsSnapshotCreateReqDfsSnapshot) GetLock() bool {
	if o == nil || IsNil(o.Lock) {
		var ret bool
		return ret
	}
	return *o.Lock
}

// GetLockOk returns a tuple with the Lock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSnapshotCreateReqDfsSnapshot) GetLockOk() (*bool, bool) {
	if o == nil || IsNil(o.Lock) {
		return nil, false
	}
	return o.Lock, true
}

// HasLock returns a boolean if a field has been set.
func (o *DfsSnapshotCreateReqDfsSnapshot) HasLock() bool {
	if o != nil && !IsNil(o.Lock) {
		return true
	}

	return false
}

// SetLock gets a reference to the given bool and assigns it to the Lock field.
func (o *DfsSnapshotCreateReqDfsSnapshot) SetLock(v bool) {
	o.Lock = &v
}

// GetName returns the Name field value
func (o *DfsSnapshotCreateReqDfsSnapshot) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DfsSnapshotCreateReqDfsSnapshot) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DfsSnapshotCreateReqDfsSnapshot) SetName(v string) {
	o.Name = v
}

// GetPath returns the Path field value
func (o *DfsSnapshotCreateReqDfsSnapshot) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *DfsSnapshotCreateReqDfsSnapshot) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *DfsSnapshotCreateReqDfsSnapshot) SetPath(v string) {
	o.Path = v
}

// GetRetention returns the Retention field value
func (o *DfsSnapshotCreateReqDfsSnapshot) GetRetention() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Retention
}

// GetRetentionOk returns a tuple with the Retention field value
// and a boolean to check if the value has been set.
func (o *DfsSnapshotCreateReqDfsSnapshot) GetRetentionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Retention, true
}

// SetRetention sets field value
func (o *DfsSnapshotCreateReqDfsSnapshot) SetRetention(v string) {
	o.Retention = v
}

// GetRootfsId returns the RootfsId field value
func (o *DfsSnapshotCreateReqDfsSnapshot) GetRootfsId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.RootfsId
}

// GetRootfsIdOk returns a tuple with the RootfsId field value
// and a boolean to check if the value has been set.
func (o *DfsSnapshotCreateReqDfsSnapshot) GetRootfsIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RootfsId, true
}

// SetRootfsId sets field value
func (o *DfsSnapshotCreateReqDfsSnapshot) SetRootfsId(v int64) {
	o.RootfsId = v
}

func (o DfsSnapshotCreateReqDfsSnapshot) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsSnapshotCreateReqDfsSnapshot) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["description"] = o.Description
	if !IsNil(o.Lock) {
		toSerialize["lock"] = o.Lock
	}
	toSerialize["name"] = o.Name
	toSerialize["path"] = o.Path
	toSerialize["retention"] = o.Retention
	toSerialize["rootfs_id"] = o.RootfsId
	return toSerialize, nil
}

func (o *DfsSnapshotCreateReqDfsSnapshot) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"description",
		"name",
		"path",
		"retention",
		"rootfs_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDfsSnapshotCreateReqDfsSnapshot := _DfsSnapshotCreateReqDfsSnapshot{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDfsSnapshotCreateReqDfsSnapshot)

	if err != nil {
		return err
	}

	*o = DfsSnapshotCreateReqDfsSnapshot(varDfsSnapshotCreateReqDfsSnapshot)

	return err
}

type NullableDfsSnapshotCreateReqDfsSnapshot struct {
	value *DfsSnapshotCreateReqDfsSnapshot
	isSet bool
}

func (v NullableDfsSnapshotCreateReqDfsSnapshot) Get() *DfsSnapshotCreateReqDfsSnapshot {
	return v.value
}

func (v *NullableDfsSnapshotCreateReqDfsSnapshot) Set(val *DfsSnapshotCreateReqDfsSnapshot) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsSnapshotCreateReqDfsSnapshot) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsSnapshotCreateReqDfsSnapshot) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsSnapshotCreateReqDfsSnapshot(val *DfsSnapshotCreateReqDfsSnapshot) *NullableDfsSnapshotCreateReqDfsSnapshot {
	return &NullableDfsSnapshotCreateReqDfsSnapshot{value: val, isSet: true}
}

func (v NullableDfsSnapshotCreateReqDfsSnapshot) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsSnapshotCreateReqDfsSnapshot) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


