/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RemoteClusterResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RemoteClusterResp{}

// RemoteClusterResp struct for RemoteClusterResp
type RemoteClusterResp struct {
	RemoteCluster *RemoteCluster `json:"remote_cluster,omitempty"`
}

// NewRemoteClusterResp instantiates a new RemoteClusterResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoteClusterResp() *RemoteClusterResp {
	this := RemoteClusterResp{}
	return &this
}

// NewRemoteClusterRespWithDefaults instantiates a new RemoteClusterResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoteClusterRespWithDefaults() *RemoteClusterResp {
	this := RemoteClusterResp{}
	return &this
}

// GetRemoteCluster returns the RemoteCluster field value if set, zero value otherwise.
func (o *RemoteClusterResp) GetRemoteCluster() RemoteCluster {
	if o == nil || IsNil(o.RemoteCluster) {
		var ret RemoteCluster
		return ret
	}
	return *o.RemoteCluster
}

// GetRemoteClusterOk returns a tuple with the RemoteCluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteClusterResp) GetRemoteClusterOk() (*RemoteCluster, bool) {
	if o == nil || IsNil(o.RemoteCluster) {
		return nil, false
	}
	return o.RemoteCluster, true
}

// HasRemoteCluster returns a boolean if a field has been set.
func (o *RemoteClusterResp) HasRemoteCluster() bool {
	if o != nil && !IsNil(o.RemoteCluster) {
		return true
	}

	return false
}

// SetRemoteCluster gets a reference to the given RemoteCluster and assigns it to the RemoteCluster field.
func (o *RemoteClusterResp) SetRemoteCluster(v RemoteCluster) {
	o.RemoteCluster = &v
}

func (o RemoteClusterResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RemoteClusterResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RemoteCluster) {
		toSerialize["remote_cluster"] = o.RemoteCluster
	}
	return toSerialize, nil
}

type NullableRemoteClusterResp struct {
	value *RemoteClusterResp
	isSet bool
}

func (v NullableRemoteClusterResp) Get() *RemoteClusterResp {
	return v.value
}

func (v *NullableRemoteClusterResp) Set(val *RemoteClusterResp) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoteClusterResp) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoteClusterResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoteClusterResp(val *RemoteClusterResp) *NullableRemoteClusterResp {
	return &NullableRemoteClusterResp{value: val, isSet: true}
}

func (v NullableRemoteClusterResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoteClusterResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


