/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TrashResourceResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrashResourceResp{}

// TrashResourceResp struct for TrashResourceResp
type TrashResourceResp struct {
	TrashResource TrashResource `json:"trash_resource"`
}

type _TrashResourceResp TrashResourceResp

// NewTrashResourceResp instantiates a new TrashResourceResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrashResourceResp(trashResource TrashResource) *TrashResourceResp {
	this := TrashResourceResp{}
	this.TrashResource = trashResource
	return &this
}

// NewTrashResourceRespWithDefaults instantiates a new TrashResourceResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrashResourceRespWithDefaults() *TrashResourceResp {
	this := TrashResourceResp{}
	return &this
}

// GetTrashResource returns the TrashResource field value
func (o *TrashResourceResp) GetTrashResource() TrashResource {
	if o == nil {
		var ret TrashResource
		return ret
	}

	return o.TrashResource
}

// GetTrashResourceOk returns a tuple with the TrashResource field value
// and a boolean to check if the value has been set.
func (o *TrashResourceResp) GetTrashResourceOk() (*TrashResource, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TrashResource, true
}

// SetTrashResource sets field value
func (o *TrashResourceResp) SetTrashResource(v TrashResource) {
	o.TrashResource = v
}

func (o TrashResourceResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrashResourceResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["trash_resource"] = o.TrashResource
	return toSerialize, nil
}

func (o *TrashResourceResp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"trash_resource",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTrashResourceResp := _TrashResourceResp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTrashResourceResp)

	if err != nil {
		return err
	}

	*o = TrashResourceResp(varTrashResourceResp)

	return err
}

type NullableTrashResourceResp struct {
	value *TrashResourceResp
	isSet bool
}

func (v NullableTrashResourceResp) Get() *TrashResourceResp {
	return v.value
}

func (v *NullableTrashResourceResp) Set(val *TrashResourceResp) {
	v.value = val
	v.isSet = true
}

func (v NullableTrashResourceResp) IsSet() bool {
	return v.isSet
}

func (v *NullableTrashResourceResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrashResourceResp(val *TrashResourceResp) *NullableTrashResourceResp {
	return &NullableTrashResourceResp{value: val, isSet: true}
}

func (v NullableTrashResourceResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrashResourceResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


