/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the DfsS3BucketRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsS3BucketRecord{}

// DfsS3BucketRecord DfsS3BucketRecord is used to combine DfsS3Bucket and DfsS3BucketStat
type DfsS3BucketRecord struct {
	ActionStatus *string `json:"action_status,omitempty"`
	AllUserPermission *string `json:"all_user_permission,omitempty"`
	AuthUserPermission *string `json:"auth_user_permission,omitempty"`
	BucketPolicy *string `json:"bucket_policy,omitempty"`
	Cluster *ClusterNestview `json:"cluster,omitempty"`
	Create *time.Time `json:"create,omitempty"`
	DataVerify *bool `json:"data_verify,omitempty"`
	Description *string `json:"description,omitempty"`
	DfsGatewayGroup *DfsGatewayGroupNestview `json:"dfs_gateway_group,omitempty"`
	DfsRootfs *DfsRootfsNestview `json:"dfs_rootfs,omitempty"`
	EnableEtag *bool `json:"enable_etag,omitempty"`
	Id *int64 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Owner *FSUserNestview `json:"owner,omitempty"`
	OwnerPermission *string `json:"owner_permission,omitempty"`
	Path *DfsPathNestview `json:"path,omitempty"`
	Status *string `json:"status,omitempty"`
	Update *time.Time `json:"update,omitempty"`
	Samples []DfsS3BucketStat `json:"samples,omitempty"`
}

// NewDfsS3BucketRecord instantiates a new DfsS3BucketRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsS3BucketRecord() *DfsS3BucketRecord {
	this := DfsS3BucketRecord{}
	return &this
}

// NewDfsS3BucketRecordWithDefaults instantiates a new DfsS3BucketRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsS3BucketRecordWithDefaults() *DfsS3BucketRecord {
	this := DfsS3BucketRecord{}
	return &this
}

// GetActionStatus returns the ActionStatus field value if set, zero value otherwise.
func (o *DfsS3BucketRecord) GetActionStatus() string {
	if o == nil || IsNil(o.ActionStatus) {
		var ret string
		return ret
	}
	return *o.ActionStatus
}

// GetActionStatusOk returns a tuple with the ActionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsS3BucketRecord) GetActionStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ActionStatus) {
		return nil, false
	}
	return o.ActionStatus, true
}

// HasActionStatus returns a boolean if a field has been set.
func (o *DfsS3BucketRecord) HasActionStatus() bool {
	if o != nil && !IsNil(o.ActionStatus) {
		return true
	}

	return false
}

// SetActionStatus gets a reference to the given string and assigns it to the ActionStatus field.
func (o *DfsS3BucketRecord) SetActionStatus(v string) {
	o.ActionStatus = &v
}

// GetAllUserPermission returns the AllUserPermission field value if set, zero value otherwise.
func (o *DfsS3BucketRecord) GetAllUserPermission() string {
	if o == nil || IsNil(o.AllUserPermission) {
		var ret string
		return ret
	}
	return *o.AllUserPermission
}

// GetAllUserPermissionOk returns a tuple with the AllUserPermission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsS3BucketRecord) GetAllUserPermissionOk() (*string, bool) {
	if o == nil || IsNil(o.AllUserPermission) {
		return nil, false
	}
	return o.AllUserPermission, true
}

// HasAllUserPermission returns a boolean if a field has been set.
func (o *DfsS3BucketRecord) HasAllUserPermission() bool {
	if o != nil && !IsNil(o.AllUserPermission) {
		return true
	}

	return false
}

// SetAllUserPermission gets a reference to the given string and assigns it to the AllUserPermission field.
func (o *DfsS3BucketRecord) SetAllUserPermission(v string) {
	o.AllUserPermission = &v
}

// GetAuthUserPermission returns the AuthUserPermission field value if set, zero value otherwise.
func (o *DfsS3BucketRecord) GetAuthUserPermission() string {
	if o == nil || IsNil(o.AuthUserPermission) {
		var ret string
		return ret
	}
	return *o.AuthUserPermission
}

// GetAuthUserPermissionOk returns a tuple with the AuthUserPermission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsS3BucketRecord) GetAuthUserPermissionOk() (*string, bool) {
	if o == nil || IsNil(o.AuthUserPermission) {
		return nil, false
	}
	return o.AuthUserPermission, true
}

// HasAuthUserPermission returns a boolean if a field has been set.
func (o *DfsS3BucketRecord) HasAuthUserPermission() bool {
	if o != nil && !IsNil(o.AuthUserPermission) {
		return true
	}

	return false
}

// SetAuthUserPermission gets a reference to the given string and assigns it to the AuthUserPermission field.
func (o *DfsS3BucketRecord) SetAuthUserPermission(v string) {
	o.AuthUserPermission = &v
}

// GetBucketPolicy returns the BucketPolicy field value if set, zero value otherwise.
func (o *DfsS3BucketRecord) GetBucketPolicy() string {
	if o == nil || IsNil(o.BucketPolicy) {
		var ret string
		return ret
	}
	return *o.BucketPolicy
}

// GetBucketPolicyOk returns a tuple with the BucketPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsS3BucketRecord) GetBucketPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.BucketPolicy) {
		return nil, false
	}
	return o.BucketPolicy, true
}

// HasBucketPolicy returns a boolean if a field has been set.
func (o *DfsS3BucketRecord) HasBucketPolicy() bool {
	if o != nil && !IsNil(o.BucketPolicy) {
		return true
	}

	return false
}

// SetBucketPolicy gets a reference to the given string and assigns it to the BucketPolicy field.
func (o *DfsS3BucketRecord) SetBucketPolicy(v string) {
	o.BucketPolicy = &v
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *DfsS3BucketRecord) GetCluster() ClusterNestview {
	if o == nil || IsNil(o.Cluster) {
		var ret ClusterNestview
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsS3BucketRecord) GetClusterOk() (*ClusterNestview, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *DfsS3BucketRecord) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given ClusterNestview and assigns it to the Cluster field.
func (o *DfsS3BucketRecord) SetCluster(v ClusterNestview) {
	o.Cluster = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *DfsS3BucketRecord) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsS3BucketRecord) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *DfsS3BucketRecord) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *DfsS3BucketRecord) SetCreate(v time.Time) {
	o.Create = &v
}

// GetDataVerify returns the DataVerify field value if set, zero value otherwise.
func (o *DfsS3BucketRecord) GetDataVerify() bool {
	if o == nil || IsNil(o.DataVerify) {
		var ret bool
		return ret
	}
	return *o.DataVerify
}

// GetDataVerifyOk returns a tuple with the DataVerify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsS3BucketRecord) GetDataVerifyOk() (*bool, bool) {
	if o == nil || IsNil(o.DataVerify) {
		return nil, false
	}
	return o.DataVerify, true
}

// HasDataVerify returns a boolean if a field has been set.
func (o *DfsS3BucketRecord) HasDataVerify() bool {
	if o != nil && !IsNil(o.DataVerify) {
		return true
	}

	return false
}

// SetDataVerify gets a reference to the given bool and assigns it to the DataVerify field.
func (o *DfsS3BucketRecord) SetDataVerify(v bool) {
	o.DataVerify = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DfsS3BucketRecord) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsS3BucketRecord) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DfsS3BucketRecord) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DfsS3BucketRecord) SetDescription(v string) {
	o.Description = &v
}

// GetDfsGatewayGroup returns the DfsGatewayGroup field value if set, zero value otherwise.
func (o *DfsS3BucketRecord) GetDfsGatewayGroup() DfsGatewayGroupNestview {
	if o == nil || IsNil(o.DfsGatewayGroup) {
		var ret DfsGatewayGroupNestview
		return ret
	}
	return *o.DfsGatewayGroup
}

// GetDfsGatewayGroupOk returns a tuple with the DfsGatewayGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsS3BucketRecord) GetDfsGatewayGroupOk() (*DfsGatewayGroupNestview, bool) {
	if o == nil || IsNil(o.DfsGatewayGroup) {
		return nil, false
	}
	return o.DfsGatewayGroup, true
}

// HasDfsGatewayGroup returns a boolean if a field has been set.
func (o *DfsS3BucketRecord) HasDfsGatewayGroup() bool {
	if o != nil && !IsNil(o.DfsGatewayGroup) {
		return true
	}

	return false
}

// SetDfsGatewayGroup gets a reference to the given DfsGatewayGroupNestview and assigns it to the DfsGatewayGroup field.
func (o *DfsS3BucketRecord) SetDfsGatewayGroup(v DfsGatewayGroupNestview) {
	o.DfsGatewayGroup = &v
}

// GetDfsRootfs returns the DfsRootfs field value if set, zero value otherwise.
func (o *DfsS3BucketRecord) GetDfsRootfs() DfsRootfsNestview {
	if o == nil || IsNil(o.DfsRootfs) {
		var ret DfsRootfsNestview
		return ret
	}
	return *o.DfsRootfs
}

// GetDfsRootfsOk returns a tuple with the DfsRootfs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsS3BucketRecord) GetDfsRootfsOk() (*DfsRootfsNestview, bool) {
	if o == nil || IsNil(o.DfsRootfs) {
		return nil, false
	}
	return o.DfsRootfs, true
}

// HasDfsRootfs returns a boolean if a field has been set.
func (o *DfsS3BucketRecord) HasDfsRootfs() bool {
	if o != nil && !IsNil(o.DfsRootfs) {
		return true
	}

	return false
}

// SetDfsRootfs gets a reference to the given DfsRootfsNestview and assigns it to the DfsRootfs field.
func (o *DfsS3BucketRecord) SetDfsRootfs(v DfsRootfsNestview) {
	o.DfsRootfs = &v
}

// GetEnableEtag returns the EnableEtag field value if set, zero value otherwise.
func (o *DfsS3BucketRecord) GetEnableEtag() bool {
	if o == nil || IsNil(o.EnableEtag) {
		var ret bool
		return ret
	}
	return *o.EnableEtag
}

// GetEnableEtagOk returns a tuple with the EnableEtag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsS3BucketRecord) GetEnableEtagOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableEtag) {
		return nil, false
	}
	return o.EnableEtag, true
}

// HasEnableEtag returns a boolean if a field has been set.
func (o *DfsS3BucketRecord) HasEnableEtag() bool {
	if o != nil && !IsNil(o.EnableEtag) {
		return true
	}

	return false
}

// SetEnableEtag gets a reference to the given bool and assigns it to the EnableEtag field.
func (o *DfsS3BucketRecord) SetEnableEtag(v bool) {
	o.EnableEtag = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DfsS3BucketRecord) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsS3BucketRecord) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DfsS3BucketRecord) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *DfsS3BucketRecord) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DfsS3BucketRecord) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsS3BucketRecord) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DfsS3BucketRecord) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DfsS3BucketRecord) SetName(v string) {
	o.Name = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *DfsS3BucketRecord) GetOwner() FSUserNestview {
	if o == nil || IsNil(o.Owner) {
		var ret FSUserNestview
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsS3BucketRecord) GetOwnerOk() (*FSUserNestview, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *DfsS3BucketRecord) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given FSUserNestview and assigns it to the Owner field.
func (o *DfsS3BucketRecord) SetOwner(v FSUserNestview) {
	o.Owner = &v
}

// GetOwnerPermission returns the OwnerPermission field value if set, zero value otherwise.
func (o *DfsS3BucketRecord) GetOwnerPermission() string {
	if o == nil || IsNil(o.OwnerPermission) {
		var ret string
		return ret
	}
	return *o.OwnerPermission
}

// GetOwnerPermissionOk returns a tuple with the OwnerPermission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsS3BucketRecord) GetOwnerPermissionOk() (*string, bool) {
	if o == nil || IsNil(o.OwnerPermission) {
		return nil, false
	}
	return o.OwnerPermission, true
}

// HasOwnerPermission returns a boolean if a field has been set.
func (o *DfsS3BucketRecord) HasOwnerPermission() bool {
	if o != nil && !IsNil(o.OwnerPermission) {
		return true
	}

	return false
}

// SetOwnerPermission gets a reference to the given string and assigns it to the OwnerPermission field.
func (o *DfsS3BucketRecord) SetOwnerPermission(v string) {
	o.OwnerPermission = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *DfsS3BucketRecord) GetPath() DfsPathNestview {
	if o == nil || IsNil(o.Path) {
		var ret DfsPathNestview
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsS3BucketRecord) GetPathOk() (*DfsPathNestview, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *DfsS3BucketRecord) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given DfsPathNestview and assigns it to the Path field.
func (o *DfsS3BucketRecord) SetPath(v DfsPathNestview) {
	o.Path = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DfsS3BucketRecord) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsS3BucketRecord) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DfsS3BucketRecord) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *DfsS3BucketRecord) SetStatus(v string) {
	o.Status = &v
}

// GetUpdate returns the Update field value if set, zero value otherwise.
func (o *DfsS3BucketRecord) GetUpdate() time.Time {
	if o == nil || IsNil(o.Update) {
		var ret time.Time
		return ret
	}
	return *o.Update
}

// GetUpdateOk returns a tuple with the Update field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsS3BucketRecord) GetUpdateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Update) {
		return nil, false
	}
	return o.Update, true
}

// HasUpdate returns a boolean if a field has been set.
func (o *DfsS3BucketRecord) HasUpdate() bool {
	if o != nil && !IsNil(o.Update) {
		return true
	}

	return false
}

// SetUpdate gets a reference to the given time.Time and assigns it to the Update field.
func (o *DfsS3BucketRecord) SetUpdate(v time.Time) {
	o.Update = &v
}

// GetSamples returns the Samples field value if set, zero value otherwise.
func (o *DfsS3BucketRecord) GetSamples() []DfsS3BucketStat {
	if o == nil || IsNil(o.Samples) {
		var ret []DfsS3BucketStat
		return ret
	}
	return o.Samples
}

// GetSamplesOk returns a tuple with the Samples field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsS3BucketRecord) GetSamplesOk() ([]DfsS3BucketStat, bool) {
	if o == nil || IsNil(o.Samples) {
		return nil, false
	}
	return o.Samples, true
}

// HasSamples returns a boolean if a field has been set.
func (o *DfsS3BucketRecord) HasSamples() bool {
	if o != nil && !IsNil(o.Samples) {
		return true
	}

	return false
}

// SetSamples gets a reference to the given []DfsS3BucketStat and assigns it to the Samples field.
func (o *DfsS3BucketRecord) SetSamples(v []DfsS3BucketStat) {
	o.Samples = v
}

func (o DfsS3BucketRecord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsS3BucketRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActionStatus) {
		toSerialize["action_status"] = o.ActionStatus
	}
	if !IsNil(o.AllUserPermission) {
		toSerialize["all_user_permission"] = o.AllUserPermission
	}
	if !IsNil(o.AuthUserPermission) {
		toSerialize["auth_user_permission"] = o.AuthUserPermission
	}
	if !IsNil(o.BucketPolicy) {
		toSerialize["bucket_policy"] = o.BucketPolicy
	}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.DataVerify) {
		toSerialize["data_verify"] = o.DataVerify
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DfsGatewayGroup) {
		toSerialize["dfs_gateway_group"] = o.DfsGatewayGroup
	}
	if !IsNil(o.DfsRootfs) {
		toSerialize["dfs_rootfs"] = o.DfsRootfs
	}
	if !IsNil(o.EnableEtag) {
		toSerialize["enable_etag"] = o.EnableEtag
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !IsNil(o.OwnerPermission) {
		toSerialize["owner_permission"] = o.OwnerPermission
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Update) {
		toSerialize["update"] = o.Update
	}
	if !IsNil(o.Samples) {
		toSerialize["samples"] = o.Samples
	}
	return toSerialize, nil
}

type NullableDfsS3BucketRecord struct {
	value *DfsS3BucketRecord
	isSet bool
}

func (v NullableDfsS3BucketRecord) Get() *DfsS3BucketRecord {
	return v.value
}

func (v *NullableDfsS3BucketRecord) Set(val *DfsS3BucketRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsS3BucketRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsS3BucketRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsS3BucketRecord(val *DfsS3BucketRecord) *NullableDfsS3BucketRecord {
	return &NullableDfsS3BucketRecord{value: val, isSet: true}
}

func (v NullableDfsS3BucketRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsS3BucketRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


