/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DfsDirectoriesCheckResourcesReqDirectories type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsDirectoriesCheckResourcesReqDirectories{}

// DfsDirectoriesCheckResourcesReqDirectories struct for DfsDirectoriesCheckResourcesReqDirectories
type DfsDirectoriesCheckResourcesReqDirectories struct {
	// check cur dir
	CheckCur *bool `json:"check_cur,omitempty"`
	// check parent dir
	CheckParent *bool `json:"check_parent,omitempty"`
	// check sub dir
	CheckSub *bool `json:"check_sub,omitempty"`
	// dfs rootfs id
	DfsRootfsId int64 `json:"dfs_rootfs_id"`
	Directories []string `json:"directories"`
	// check resources
	Resources []string `json:"resources,omitempty"`
}

type _DfsDirectoriesCheckResourcesReqDirectories DfsDirectoriesCheckResourcesReqDirectories

// NewDfsDirectoriesCheckResourcesReqDirectories instantiates a new DfsDirectoriesCheckResourcesReqDirectories object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsDirectoriesCheckResourcesReqDirectories(dfsRootfsId int64, directories []string) *DfsDirectoriesCheckResourcesReqDirectories {
	this := DfsDirectoriesCheckResourcesReqDirectories{}
	this.DfsRootfsId = dfsRootfsId
	this.Directories = directories
	return &this
}

// NewDfsDirectoriesCheckResourcesReqDirectoriesWithDefaults instantiates a new DfsDirectoriesCheckResourcesReqDirectories object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsDirectoriesCheckResourcesReqDirectoriesWithDefaults() *DfsDirectoriesCheckResourcesReqDirectories {
	this := DfsDirectoriesCheckResourcesReqDirectories{}
	return &this
}

// GetCheckCur returns the CheckCur field value if set, zero value otherwise.
func (o *DfsDirectoriesCheckResourcesReqDirectories) GetCheckCur() bool {
	if o == nil || IsNil(o.CheckCur) {
		var ret bool
		return ret
	}
	return *o.CheckCur
}

// GetCheckCurOk returns a tuple with the CheckCur field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsDirectoriesCheckResourcesReqDirectories) GetCheckCurOk() (*bool, bool) {
	if o == nil || IsNil(o.CheckCur) {
		return nil, false
	}
	return o.CheckCur, true
}

// HasCheckCur returns a boolean if a field has been set.
func (o *DfsDirectoriesCheckResourcesReqDirectories) HasCheckCur() bool {
	if o != nil && !IsNil(o.CheckCur) {
		return true
	}

	return false
}

// SetCheckCur gets a reference to the given bool and assigns it to the CheckCur field.
func (o *DfsDirectoriesCheckResourcesReqDirectories) SetCheckCur(v bool) {
	o.CheckCur = &v
}

// GetCheckParent returns the CheckParent field value if set, zero value otherwise.
func (o *DfsDirectoriesCheckResourcesReqDirectories) GetCheckParent() bool {
	if o == nil || IsNil(o.CheckParent) {
		var ret bool
		return ret
	}
	return *o.CheckParent
}

// GetCheckParentOk returns a tuple with the CheckParent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsDirectoriesCheckResourcesReqDirectories) GetCheckParentOk() (*bool, bool) {
	if o == nil || IsNil(o.CheckParent) {
		return nil, false
	}
	return o.CheckParent, true
}

// HasCheckParent returns a boolean if a field has been set.
func (o *DfsDirectoriesCheckResourcesReqDirectories) HasCheckParent() bool {
	if o != nil && !IsNil(o.CheckParent) {
		return true
	}

	return false
}

// SetCheckParent gets a reference to the given bool and assigns it to the CheckParent field.
func (o *DfsDirectoriesCheckResourcesReqDirectories) SetCheckParent(v bool) {
	o.CheckParent = &v
}

// GetCheckSub returns the CheckSub field value if set, zero value otherwise.
func (o *DfsDirectoriesCheckResourcesReqDirectories) GetCheckSub() bool {
	if o == nil || IsNil(o.CheckSub) {
		var ret bool
		return ret
	}
	return *o.CheckSub
}

// GetCheckSubOk returns a tuple with the CheckSub field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsDirectoriesCheckResourcesReqDirectories) GetCheckSubOk() (*bool, bool) {
	if o == nil || IsNil(o.CheckSub) {
		return nil, false
	}
	return o.CheckSub, true
}

// HasCheckSub returns a boolean if a field has been set.
func (o *DfsDirectoriesCheckResourcesReqDirectories) HasCheckSub() bool {
	if o != nil && !IsNil(o.CheckSub) {
		return true
	}

	return false
}

// SetCheckSub gets a reference to the given bool and assigns it to the CheckSub field.
func (o *DfsDirectoriesCheckResourcesReqDirectories) SetCheckSub(v bool) {
	o.CheckSub = &v
}

// GetDfsRootfsId returns the DfsRootfsId field value
func (o *DfsDirectoriesCheckResourcesReqDirectories) GetDfsRootfsId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DfsRootfsId
}

// GetDfsRootfsIdOk returns a tuple with the DfsRootfsId field value
// and a boolean to check if the value has been set.
func (o *DfsDirectoriesCheckResourcesReqDirectories) GetDfsRootfsIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DfsRootfsId, true
}

// SetDfsRootfsId sets field value
func (o *DfsDirectoriesCheckResourcesReqDirectories) SetDfsRootfsId(v int64) {
	o.DfsRootfsId = v
}

// GetDirectories returns the Directories field value
func (o *DfsDirectoriesCheckResourcesReqDirectories) GetDirectories() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Directories
}

// GetDirectoriesOk returns a tuple with the Directories field value
// and a boolean to check if the value has been set.
func (o *DfsDirectoriesCheckResourcesReqDirectories) GetDirectoriesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Directories, true
}

// SetDirectories sets field value
func (o *DfsDirectoriesCheckResourcesReqDirectories) SetDirectories(v []string) {
	o.Directories = v
}

// GetResources returns the Resources field value if set, zero value otherwise.
func (o *DfsDirectoriesCheckResourcesReqDirectories) GetResources() []string {
	if o == nil || IsNil(o.Resources) {
		var ret []string
		return ret
	}
	return o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsDirectoriesCheckResourcesReqDirectories) GetResourcesOk() ([]string, bool) {
	if o == nil || IsNil(o.Resources) {
		return nil, false
	}
	return o.Resources, true
}

// HasResources returns a boolean if a field has been set.
func (o *DfsDirectoriesCheckResourcesReqDirectories) HasResources() bool {
	if o != nil && !IsNil(o.Resources) {
		return true
	}

	return false
}

// SetResources gets a reference to the given []string and assigns it to the Resources field.
func (o *DfsDirectoriesCheckResourcesReqDirectories) SetResources(v []string) {
	o.Resources = v
}

func (o DfsDirectoriesCheckResourcesReqDirectories) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsDirectoriesCheckResourcesReqDirectories) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CheckCur) {
		toSerialize["check_cur"] = o.CheckCur
	}
	if !IsNil(o.CheckParent) {
		toSerialize["check_parent"] = o.CheckParent
	}
	if !IsNil(o.CheckSub) {
		toSerialize["check_sub"] = o.CheckSub
	}
	toSerialize["dfs_rootfs_id"] = o.DfsRootfsId
	toSerialize["directories"] = o.Directories
	if !IsNil(o.Resources) {
		toSerialize["resources"] = o.Resources
	}
	return toSerialize, nil
}

func (o *DfsDirectoriesCheckResourcesReqDirectories) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dfs_rootfs_id",
		"directories",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDfsDirectoriesCheckResourcesReqDirectories := _DfsDirectoriesCheckResourcesReqDirectories{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDfsDirectoriesCheckResourcesReqDirectories)

	if err != nil {
		return err
	}

	*o = DfsDirectoriesCheckResourcesReqDirectories(varDfsDirectoriesCheckResourcesReqDirectories)

	return err
}

type NullableDfsDirectoriesCheckResourcesReqDirectories struct {
	value *DfsDirectoriesCheckResourcesReqDirectories
	isSet bool
}

func (v NullableDfsDirectoriesCheckResourcesReqDirectories) Get() *DfsDirectoriesCheckResourcesReqDirectories {
	return v.value
}

func (v *NullableDfsDirectoriesCheckResourcesReqDirectories) Set(val *DfsDirectoriesCheckResourcesReqDirectories) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsDirectoriesCheckResourcesReqDirectories) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsDirectoriesCheckResourcesReqDirectories) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsDirectoriesCheckResourcesReqDirectories(val *DfsDirectoriesCheckResourcesReqDirectories) *NullableDfsDirectoriesCheckResourcesReqDirectories {
	return &NullableDfsDirectoriesCheckResourcesReqDirectories{value: val, isSet: true}
}

func (v NullableDfsDirectoriesCheckResourcesReqDirectories) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsDirectoriesCheckResourcesReqDirectories) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


