/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FSUserGroupsResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FSUserGroupsResp{}

// FSUserGroupsResp struct for FSUserGroupsResp
type FSUserGroupsResp struct {
	// file storage user groups
	FsUserGroups []FSUserGroup `json:"fs_user_groups"`
}

type _FSUserGroupsResp FSUserGroupsResp

// NewFSUserGroupsResp instantiates a new FSUserGroupsResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFSUserGroupsResp(fsUserGroups []FSUserGroup) *FSUserGroupsResp {
	this := FSUserGroupsResp{}
	this.FsUserGroups = fsUserGroups
	return &this
}

// NewFSUserGroupsRespWithDefaults instantiates a new FSUserGroupsResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFSUserGroupsRespWithDefaults() *FSUserGroupsResp {
	this := FSUserGroupsResp{}
	return &this
}

// GetFsUserGroups returns the FsUserGroups field value
func (o *FSUserGroupsResp) GetFsUserGroups() []FSUserGroup {
	if o == nil {
		var ret []FSUserGroup
		return ret
	}

	return o.FsUserGroups
}

// GetFsUserGroupsOk returns a tuple with the FsUserGroups field value
// and a boolean to check if the value has been set.
func (o *FSUserGroupsResp) GetFsUserGroupsOk() ([]FSUserGroup, bool) {
	if o == nil {
		return nil, false
	}
	return o.FsUserGroups, true
}

// SetFsUserGroups sets field value
func (o *FSUserGroupsResp) SetFsUserGroups(v []FSUserGroup) {
	o.FsUserGroups = v
}

func (o FSUserGroupsResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FSUserGroupsResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fs_user_groups"] = o.FsUserGroups
	return toSerialize, nil
}

func (o *FSUserGroupsResp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fs_user_groups",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFSUserGroupsResp := _FSUserGroupsResp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFSUserGroupsResp)

	if err != nil {
		return err
	}

	*o = FSUserGroupsResp(varFSUserGroupsResp)

	return err
}

type NullableFSUserGroupsResp struct {
	value *FSUserGroupsResp
	isSet bool
}

func (v NullableFSUserGroupsResp) Get() *FSUserGroupsResp {
	return v.value
}

func (v *NullableFSUserGroupsResp) Set(val *FSUserGroupsResp) {
	v.value = val
	v.isSet = true
}

func (v NullableFSUserGroupsResp) IsSet() bool {
	return v.isSet
}

func (v *NullableFSUserGroupsResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFSUserGroupsResp(val *FSUserGroupsResp) *NullableFSUserGroupsResp {
	return &NullableFSUserGroupsResp{value: val, isSet: true}
}

func (v NullableFSUserGroupsResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFSUserGroupsResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


