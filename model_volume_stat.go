/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the VolumeStat type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VolumeStat{}

// VolumeStat VolumeStat records volume stat info
type VolumeStat struct {
	FailedTask *VolumeFailedTask `json:"FailedTask,omitempty"`
	Create *time.Time `json:"create,omitempty"`
	IoSize *VolumeIOSize `json:"io_size,omitempty"`
	IoSizeLat *VolumeIOLatency `json:"io_size_lat,omitempty"`
	MigrateWriteBandwidthKbyte *float64 `json:"migrate_write_bandwidth_kbyte,omitempty"`
	MigrateWriteIops *float64 `json:"migrate_write_iops,omitempty"`
	MigrateWriteLatencyUs *float64 `json:"migrate_write_latency_us,omitempty"`
	NonIoTask *VolumeNonIOTask `json:"non_io_task,omitempty"`
	QueueDepth *float64 `json:"queue_depth,omitempty"`
	ReadBandwidthKbyte *float64 `json:"read_bandwidth_kbyte,omitempty"`
	ReadIops *float64 `json:"read_iops,omitempty"`
	ReadLatencyUs *float64 `json:"read_latency_us,omitempty"`
	TotalBandwidthKbyte *float64 `json:"total_bandwidth_kbyte,omitempty"`
	TotalIops *float64 `json:"total_iops,omitempty"`
	WriteBandwidthKbyte *float64 `json:"write_bandwidth_kbyte,omitempty"`
	WriteIops *float64 `json:"write_iops,omitempty"`
	WriteLatencyUs *float64 `json:"write_latency_us,omitempty"`
}

// NewVolumeStat instantiates a new VolumeStat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumeStat() *VolumeStat {
	this := VolumeStat{}
	return &this
}

// NewVolumeStatWithDefaults instantiates a new VolumeStat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeStatWithDefaults() *VolumeStat {
	this := VolumeStat{}
	return &this
}

// GetFailedTask returns the FailedTask field value if set, zero value otherwise.
func (o *VolumeStat) GetFailedTask() VolumeFailedTask {
	if o == nil || IsNil(o.FailedTask) {
		var ret VolumeFailedTask
		return ret
	}
	return *o.FailedTask
}

// GetFailedTaskOk returns a tuple with the FailedTask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeStat) GetFailedTaskOk() (*VolumeFailedTask, bool) {
	if o == nil || IsNil(o.FailedTask) {
		return nil, false
	}
	return o.FailedTask, true
}

// HasFailedTask returns a boolean if a field has been set.
func (o *VolumeStat) HasFailedTask() bool {
	if o != nil && !IsNil(o.FailedTask) {
		return true
	}

	return false
}

// SetFailedTask gets a reference to the given VolumeFailedTask and assigns it to the FailedTask field.
func (o *VolumeStat) SetFailedTask(v VolumeFailedTask) {
	o.FailedTask = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *VolumeStat) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeStat) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *VolumeStat) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *VolumeStat) SetCreate(v time.Time) {
	o.Create = &v
}

// GetIoSize returns the IoSize field value if set, zero value otherwise.
func (o *VolumeStat) GetIoSize() VolumeIOSize {
	if o == nil || IsNil(o.IoSize) {
		var ret VolumeIOSize
		return ret
	}
	return *o.IoSize
}

// GetIoSizeOk returns a tuple with the IoSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeStat) GetIoSizeOk() (*VolumeIOSize, bool) {
	if o == nil || IsNil(o.IoSize) {
		return nil, false
	}
	return o.IoSize, true
}

// HasIoSize returns a boolean if a field has been set.
func (o *VolumeStat) HasIoSize() bool {
	if o != nil && !IsNil(o.IoSize) {
		return true
	}

	return false
}

// SetIoSize gets a reference to the given VolumeIOSize and assigns it to the IoSize field.
func (o *VolumeStat) SetIoSize(v VolumeIOSize) {
	o.IoSize = &v
}

// GetIoSizeLat returns the IoSizeLat field value if set, zero value otherwise.
func (o *VolumeStat) GetIoSizeLat() VolumeIOLatency {
	if o == nil || IsNil(o.IoSizeLat) {
		var ret VolumeIOLatency
		return ret
	}
	return *o.IoSizeLat
}

// GetIoSizeLatOk returns a tuple with the IoSizeLat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeStat) GetIoSizeLatOk() (*VolumeIOLatency, bool) {
	if o == nil || IsNil(o.IoSizeLat) {
		return nil, false
	}
	return o.IoSizeLat, true
}

// HasIoSizeLat returns a boolean if a field has been set.
func (o *VolumeStat) HasIoSizeLat() bool {
	if o != nil && !IsNil(o.IoSizeLat) {
		return true
	}

	return false
}

// SetIoSizeLat gets a reference to the given VolumeIOLatency and assigns it to the IoSizeLat field.
func (o *VolumeStat) SetIoSizeLat(v VolumeIOLatency) {
	o.IoSizeLat = &v
}

// GetMigrateWriteBandwidthKbyte returns the MigrateWriteBandwidthKbyte field value if set, zero value otherwise.
func (o *VolumeStat) GetMigrateWriteBandwidthKbyte() float64 {
	if o == nil || IsNil(o.MigrateWriteBandwidthKbyte) {
		var ret float64
		return ret
	}
	return *o.MigrateWriteBandwidthKbyte
}

// GetMigrateWriteBandwidthKbyteOk returns a tuple with the MigrateWriteBandwidthKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeStat) GetMigrateWriteBandwidthKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.MigrateWriteBandwidthKbyte) {
		return nil, false
	}
	return o.MigrateWriteBandwidthKbyte, true
}

// HasMigrateWriteBandwidthKbyte returns a boolean if a field has been set.
func (o *VolumeStat) HasMigrateWriteBandwidthKbyte() bool {
	if o != nil && !IsNil(o.MigrateWriteBandwidthKbyte) {
		return true
	}

	return false
}

// SetMigrateWriteBandwidthKbyte gets a reference to the given float64 and assigns it to the MigrateWriteBandwidthKbyte field.
func (o *VolumeStat) SetMigrateWriteBandwidthKbyte(v float64) {
	o.MigrateWriteBandwidthKbyte = &v
}

// GetMigrateWriteIops returns the MigrateWriteIops field value if set, zero value otherwise.
func (o *VolumeStat) GetMigrateWriteIops() float64 {
	if o == nil || IsNil(o.MigrateWriteIops) {
		var ret float64
		return ret
	}
	return *o.MigrateWriteIops
}

// GetMigrateWriteIopsOk returns a tuple with the MigrateWriteIops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeStat) GetMigrateWriteIopsOk() (*float64, bool) {
	if o == nil || IsNil(o.MigrateWriteIops) {
		return nil, false
	}
	return o.MigrateWriteIops, true
}

// HasMigrateWriteIops returns a boolean if a field has been set.
func (o *VolumeStat) HasMigrateWriteIops() bool {
	if o != nil && !IsNil(o.MigrateWriteIops) {
		return true
	}

	return false
}

// SetMigrateWriteIops gets a reference to the given float64 and assigns it to the MigrateWriteIops field.
func (o *VolumeStat) SetMigrateWriteIops(v float64) {
	o.MigrateWriteIops = &v
}

// GetMigrateWriteLatencyUs returns the MigrateWriteLatencyUs field value if set, zero value otherwise.
func (o *VolumeStat) GetMigrateWriteLatencyUs() float64 {
	if o == nil || IsNil(o.MigrateWriteLatencyUs) {
		var ret float64
		return ret
	}
	return *o.MigrateWriteLatencyUs
}

// GetMigrateWriteLatencyUsOk returns a tuple with the MigrateWriteLatencyUs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeStat) GetMigrateWriteLatencyUsOk() (*float64, bool) {
	if o == nil || IsNil(o.MigrateWriteLatencyUs) {
		return nil, false
	}
	return o.MigrateWriteLatencyUs, true
}

// HasMigrateWriteLatencyUs returns a boolean if a field has been set.
func (o *VolumeStat) HasMigrateWriteLatencyUs() bool {
	if o != nil && !IsNil(o.MigrateWriteLatencyUs) {
		return true
	}

	return false
}

// SetMigrateWriteLatencyUs gets a reference to the given float64 and assigns it to the MigrateWriteLatencyUs field.
func (o *VolumeStat) SetMigrateWriteLatencyUs(v float64) {
	o.MigrateWriteLatencyUs = &v
}

// GetNonIoTask returns the NonIoTask field value if set, zero value otherwise.
func (o *VolumeStat) GetNonIoTask() VolumeNonIOTask {
	if o == nil || IsNil(o.NonIoTask) {
		var ret VolumeNonIOTask
		return ret
	}
	return *o.NonIoTask
}

// GetNonIoTaskOk returns a tuple with the NonIoTask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeStat) GetNonIoTaskOk() (*VolumeNonIOTask, bool) {
	if o == nil || IsNil(o.NonIoTask) {
		return nil, false
	}
	return o.NonIoTask, true
}

// HasNonIoTask returns a boolean if a field has been set.
func (o *VolumeStat) HasNonIoTask() bool {
	if o != nil && !IsNil(o.NonIoTask) {
		return true
	}

	return false
}

// SetNonIoTask gets a reference to the given VolumeNonIOTask and assigns it to the NonIoTask field.
func (o *VolumeStat) SetNonIoTask(v VolumeNonIOTask) {
	o.NonIoTask = &v
}

// GetQueueDepth returns the QueueDepth field value if set, zero value otherwise.
func (o *VolumeStat) GetQueueDepth() float64 {
	if o == nil || IsNil(o.QueueDepth) {
		var ret float64
		return ret
	}
	return *o.QueueDepth
}

// GetQueueDepthOk returns a tuple with the QueueDepth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeStat) GetQueueDepthOk() (*float64, bool) {
	if o == nil || IsNil(o.QueueDepth) {
		return nil, false
	}
	return o.QueueDepth, true
}

// HasQueueDepth returns a boolean if a field has been set.
func (o *VolumeStat) HasQueueDepth() bool {
	if o != nil && !IsNil(o.QueueDepth) {
		return true
	}

	return false
}

// SetQueueDepth gets a reference to the given float64 and assigns it to the QueueDepth field.
func (o *VolumeStat) SetQueueDepth(v float64) {
	o.QueueDepth = &v
}

// GetReadBandwidthKbyte returns the ReadBandwidthKbyte field value if set, zero value otherwise.
func (o *VolumeStat) GetReadBandwidthKbyte() float64 {
	if o == nil || IsNil(o.ReadBandwidthKbyte) {
		var ret float64
		return ret
	}
	return *o.ReadBandwidthKbyte
}

// GetReadBandwidthKbyteOk returns a tuple with the ReadBandwidthKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeStat) GetReadBandwidthKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.ReadBandwidthKbyte) {
		return nil, false
	}
	return o.ReadBandwidthKbyte, true
}

// HasReadBandwidthKbyte returns a boolean if a field has been set.
func (o *VolumeStat) HasReadBandwidthKbyte() bool {
	if o != nil && !IsNil(o.ReadBandwidthKbyte) {
		return true
	}

	return false
}

// SetReadBandwidthKbyte gets a reference to the given float64 and assigns it to the ReadBandwidthKbyte field.
func (o *VolumeStat) SetReadBandwidthKbyte(v float64) {
	o.ReadBandwidthKbyte = &v
}

// GetReadIops returns the ReadIops field value if set, zero value otherwise.
func (o *VolumeStat) GetReadIops() float64 {
	if o == nil || IsNil(o.ReadIops) {
		var ret float64
		return ret
	}
	return *o.ReadIops
}

// GetReadIopsOk returns a tuple with the ReadIops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeStat) GetReadIopsOk() (*float64, bool) {
	if o == nil || IsNil(o.ReadIops) {
		return nil, false
	}
	return o.ReadIops, true
}

// HasReadIops returns a boolean if a field has been set.
func (o *VolumeStat) HasReadIops() bool {
	if o != nil && !IsNil(o.ReadIops) {
		return true
	}

	return false
}

// SetReadIops gets a reference to the given float64 and assigns it to the ReadIops field.
func (o *VolumeStat) SetReadIops(v float64) {
	o.ReadIops = &v
}

// GetReadLatencyUs returns the ReadLatencyUs field value if set, zero value otherwise.
func (o *VolumeStat) GetReadLatencyUs() float64 {
	if o == nil || IsNil(o.ReadLatencyUs) {
		var ret float64
		return ret
	}
	return *o.ReadLatencyUs
}

// GetReadLatencyUsOk returns a tuple with the ReadLatencyUs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeStat) GetReadLatencyUsOk() (*float64, bool) {
	if o == nil || IsNil(o.ReadLatencyUs) {
		return nil, false
	}
	return o.ReadLatencyUs, true
}

// HasReadLatencyUs returns a boolean if a field has been set.
func (o *VolumeStat) HasReadLatencyUs() bool {
	if o != nil && !IsNil(o.ReadLatencyUs) {
		return true
	}

	return false
}

// SetReadLatencyUs gets a reference to the given float64 and assigns it to the ReadLatencyUs field.
func (o *VolumeStat) SetReadLatencyUs(v float64) {
	o.ReadLatencyUs = &v
}

// GetTotalBandwidthKbyte returns the TotalBandwidthKbyte field value if set, zero value otherwise.
func (o *VolumeStat) GetTotalBandwidthKbyte() float64 {
	if o == nil || IsNil(o.TotalBandwidthKbyte) {
		var ret float64
		return ret
	}
	return *o.TotalBandwidthKbyte
}

// GetTotalBandwidthKbyteOk returns a tuple with the TotalBandwidthKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeStat) GetTotalBandwidthKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.TotalBandwidthKbyte) {
		return nil, false
	}
	return o.TotalBandwidthKbyte, true
}

// HasTotalBandwidthKbyte returns a boolean if a field has been set.
func (o *VolumeStat) HasTotalBandwidthKbyte() bool {
	if o != nil && !IsNil(o.TotalBandwidthKbyte) {
		return true
	}

	return false
}

// SetTotalBandwidthKbyte gets a reference to the given float64 and assigns it to the TotalBandwidthKbyte field.
func (o *VolumeStat) SetTotalBandwidthKbyte(v float64) {
	o.TotalBandwidthKbyte = &v
}

// GetTotalIops returns the TotalIops field value if set, zero value otherwise.
func (o *VolumeStat) GetTotalIops() float64 {
	if o == nil || IsNil(o.TotalIops) {
		var ret float64
		return ret
	}
	return *o.TotalIops
}

// GetTotalIopsOk returns a tuple with the TotalIops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeStat) GetTotalIopsOk() (*float64, bool) {
	if o == nil || IsNil(o.TotalIops) {
		return nil, false
	}
	return o.TotalIops, true
}

// HasTotalIops returns a boolean if a field has been set.
func (o *VolumeStat) HasTotalIops() bool {
	if o != nil && !IsNil(o.TotalIops) {
		return true
	}

	return false
}

// SetTotalIops gets a reference to the given float64 and assigns it to the TotalIops field.
func (o *VolumeStat) SetTotalIops(v float64) {
	o.TotalIops = &v
}

// GetWriteBandwidthKbyte returns the WriteBandwidthKbyte field value if set, zero value otherwise.
func (o *VolumeStat) GetWriteBandwidthKbyte() float64 {
	if o == nil || IsNil(o.WriteBandwidthKbyte) {
		var ret float64
		return ret
	}
	return *o.WriteBandwidthKbyte
}

// GetWriteBandwidthKbyteOk returns a tuple with the WriteBandwidthKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeStat) GetWriteBandwidthKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.WriteBandwidthKbyte) {
		return nil, false
	}
	return o.WriteBandwidthKbyte, true
}

// HasWriteBandwidthKbyte returns a boolean if a field has been set.
func (o *VolumeStat) HasWriteBandwidthKbyte() bool {
	if o != nil && !IsNil(o.WriteBandwidthKbyte) {
		return true
	}

	return false
}

// SetWriteBandwidthKbyte gets a reference to the given float64 and assigns it to the WriteBandwidthKbyte field.
func (o *VolumeStat) SetWriteBandwidthKbyte(v float64) {
	o.WriteBandwidthKbyte = &v
}

// GetWriteIops returns the WriteIops field value if set, zero value otherwise.
func (o *VolumeStat) GetWriteIops() float64 {
	if o == nil || IsNil(o.WriteIops) {
		var ret float64
		return ret
	}
	return *o.WriteIops
}

// GetWriteIopsOk returns a tuple with the WriteIops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeStat) GetWriteIopsOk() (*float64, bool) {
	if o == nil || IsNil(o.WriteIops) {
		return nil, false
	}
	return o.WriteIops, true
}

// HasWriteIops returns a boolean if a field has been set.
func (o *VolumeStat) HasWriteIops() bool {
	if o != nil && !IsNil(o.WriteIops) {
		return true
	}

	return false
}

// SetWriteIops gets a reference to the given float64 and assigns it to the WriteIops field.
func (o *VolumeStat) SetWriteIops(v float64) {
	o.WriteIops = &v
}

// GetWriteLatencyUs returns the WriteLatencyUs field value if set, zero value otherwise.
func (o *VolumeStat) GetWriteLatencyUs() float64 {
	if o == nil || IsNil(o.WriteLatencyUs) {
		var ret float64
		return ret
	}
	return *o.WriteLatencyUs
}

// GetWriteLatencyUsOk returns a tuple with the WriteLatencyUs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeStat) GetWriteLatencyUsOk() (*float64, bool) {
	if o == nil || IsNil(o.WriteLatencyUs) {
		return nil, false
	}
	return o.WriteLatencyUs, true
}

// HasWriteLatencyUs returns a boolean if a field has been set.
func (o *VolumeStat) HasWriteLatencyUs() bool {
	if o != nil && !IsNil(o.WriteLatencyUs) {
		return true
	}

	return false
}

// SetWriteLatencyUs gets a reference to the given float64 and assigns it to the WriteLatencyUs field.
func (o *VolumeStat) SetWriteLatencyUs(v float64) {
	o.WriteLatencyUs = &v
}

func (o VolumeStat) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VolumeStat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FailedTask) {
		toSerialize["FailedTask"] = o.FailedTask
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.IoSize) {
		toSerialize["io_size"] = o.IoSize
	}
	if !IsNil(o.IoSizeLat) {
		toSerialize["io_size_lat"] = o.IoSizeLat
	}
	if !IsNil(o.MigrateWriteBandwidthKbyte) {
		toSerialize["migrate_write_bandwidth_kbyte"] = o.MigrateWriteBandwidthKbyte
	}
	if !IsNil(o.MigrateWriteIops) {
		toSerialize["migrate_write_iops"] = o.MigrateWriteIops
	}
	if !IsNil(o.MigrateWriteLatencyUs) {
		toSerialize["migrate_write_latency_us"] = o.MigrateWriteLatencyUs
	}
	if !IsNil(o.NonIoTask) {
		toSerialize["non_io_task"] = o.NonIoTask
	}
	if !IsNil(o.QueueDepth) {
		toSerialize["queue_depth"] = o.QueueDepth
	}
	if !IsNil(o.ReadBandwidthKbyte) {
		toSerialize["read_bandwidth_kbyte"] = o.ReadBandwidthKbyte
	}
	if !IsNil(o.ReadIops) {
		toSerialize["read_iops"] = o.ReadIops
	}
	if !IsNil(o.ReadLatencyUs) {
		toSerialize["read_latency_us"] = o.ReadLatencyUs
	}
	if !IsNil(o.TotalBandwidthKbyte) {
		toSerialize["total_bandwidth_kbyte"] = o.TotalBandwidthKbyte
	}
	if !IsNil(o.TotalIops) {
		toSerialize["total_iops"] = o.TotalIops
	}
	if !IsNil(o.WriteBandwidthKbyte) {
		toSerialize["write_bandwidth_kbyte"] = o.WriteBandwidthKbyte
	}
	if !IsNil(o.WriteIops) {
		toSerialize["write_iops"] = o.WriteIops
	}
	if !IsNil(o.WriteLatencyUs) {
		toSerialize["write_latency_us"] = o.WriteLatencyUs
	}
	return toSerialize, nil
}

type NullableVolumeStat struct {
	value *VolumeStat
	isSet bool
}

func (v NullableVolumeStat) Get() *VolumeStat {
	return v.value
}

func (v *NullableVolumeStat) Set(val *VolumeStat) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeStat) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeStat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeStat(val *VolumeStat) *NullableVolumeStat {
	return &NullableVolumeStat{value: val, isSet: true}
}

func (v NullableVolumeStat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeStat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


