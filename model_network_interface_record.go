/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the NetworkInterfaceRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkInterfaceRecord{}

// NetworkInterfaceRecord NetworkInterfaceRecord combine NetworkInterface and NetworkInterfaceStat as API response
type NetworkInterfaceRecord struct {
	BondingMode *string `json:"bonding_mode,omitempty"`
	Cluster *Cluster `json:"cluster,omitempty"`
	Create *time.Time `json:"create,omitempty"`
	Host *HostNestview `json:"host,omitempty"`
	Id *int64 `json:"id,omitempty"`
	LinkDetected *bool `json:"link_detected,omitempty"`
	MacAddress *string `json:"mac_address,omitempty"`
	MasterNetworkInterface *NetworkInterfaceNestview `json:"master_network_interface,omitempty"`
	Megabits *int64 `json:"megabits,omitempty"`
	Name *string `json:"name,omitempty"`
	Operstate *string `json:"operstate,omitempty"`
	OspCluster *Cluster `json:"osp_cluster,omitempty"`
	// ethernet or bond
	Type *string `json:"type,omitempty"`
	Update *time.Time `json:"update,omitempty"`
	VfNum *int64 `json:"vf_num,omitempty"`
	Samples []NetworkInterfaceStat `json:"samples,omitempty"`
}

// NewNetworkInterfaceRecord instantiates a new NetworkInterfaceRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkInterfaceRecord() *NetworkInterfaceRecord {
	this := NetworkInterfaceRecord{}
	return &this
}

// NewNetworkInterfaceRecordWithDefaults instantiates a new NetworkInterfaceRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkInterfaceRecordWithDefaults() *NetworkInterfaceRecord {
	this := NetworkInterfaceRecord{}
	return &this
}

// GetBondingMode returns the BondingMode field value if set, zero value otherwise.
func (o *NetworkInterfaceRecord) GetBondingMode() string {
	if o == nil || IsNil(o.BondingMode) {
		var ret string
		return ret
	}
	return *o.BondingMode
}

// GetBondingModeOk returns a tuple with the BondingMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInterfaceRecord) GetBondingModeOk() (*string, bool) {
	if o == nil || IsNil(o.BondingMode) {
		return nil, false
	}
	return o.BondingMode, true
}

// HasBondingMode returns a boolean if a field has been set.
func (o *NetworkInterfaceRecord) HasBondingMode() bool {
	if o != nil && !IsNil(o.BondingMode) {
		return true
	}

	return false
}

// SetBondingMode gets a reference to the given string and assigns it to the BondingMode field.
func (o *NetworkInterfaceRecord) SetBondingMode(v string) {
	o.BondingMode = &v
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *NetworkInterfaceRecord) GetCluster() Cluster {
	if o == nil || IsNil(o.Cluster) {
		var ret Cluster
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInterfaceRecord) GetClusterOk() (*Cluster, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *NetworkInterfaceRecord) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given Cluster and assigns it to the Cluster field.
func (o *NetworkInterfaceRecord) SetCluster(v Cluster) {
	o.Cluster = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *NetworkInterfaceRecord) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInterfaceRecord) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *NetworkInterfaceRecord) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *NetworkInterfaceRecord) SetCreate(v time.Time) {
	o.Create = &v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *NetworkInterfaceRecord) GetHost() HostNestview {
	if o == nil || IsNil(o.Host) {
		var ret HostNestview
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInterfaceRecord) GetHostOk() (*HostNestview, bool) {
	if o == nil || IsNil(o.Host) {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *NetworkInterfaceRecord) HasHost() bool {
	if o != nil && !IsNil(o.Host) {
		return true
	}

	return false
}

// SetHost gets a reference to the given HostNestview and assigns it to the Host field.
func (o *NetworkInterfaceRecord) SetHost(v HostNestview) {
	o.Host = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NetworkInterfaceRecord) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInterfaceRecord) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *NetworkInterfaceRecord) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *NetworkInterfaceRecord) SetId(v int64) {
	o.Id = &v
}

// GetLinkDetected returns the LinkDetected field value if set, zero value otherwise.
func (o *NetworkInterfaceRecord) GetLinkDetected() bool {
	if o == nil || IsNil(o.LinkDetected) {
		var ret bool
		return ret
	}
	return *o.LinkDetected
}

// GetLinkDetectedOk returns a tuple with the LinkDetected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInterfaceRecord) GetLinkDetectedOk() (*bool, bool) {
	if o == nil || IsNil(o.LinkDetected) {
		return nil, false
	}
	return o.LinkDetected, true
}

// HasLinkDetected returns a boolean if a field has been set.
func (o *NetworkInterfaceRecord) HasLinkDetected() bool {
	if o != nil && !IsNil(o.LinkDetected) {
		return true
	}

	return false
}

// SetLinkDetected gets a reference to the given bool and assigns it to the LinkDetected field.
func (o *NetworkInterfaceRecord) SetLinkDetected(v bool) {
	o.LinkDetected = &v
}

// GetMacAddress returns the MacAddress field value if set, zero value otherwise.
func (o *NetworkInterfaceRecord) GetMacAddress() string {
	if o == nil || IsNil(o.MacAddress) {
		var ret string
		return ret
	}
	return *o.MacAddress
}

// GetMacAddressOk returns a tuple with the MacAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInterfaceRecord) GetMacAddressOk() (*string, bool) {
	if o == nil || IsNil(o.MacAddress) {
		return nil, false
	}
	return o.MacAddress, true
}

// HasMacAddress returns a boolean if a field has been set.
func (o *NetworkInterfaceRecord) HasMacAddress() bool {
	if o != nil && !IsNil(o.MacAddress) {
		return true
	}

	return false
}

// SetMacAddress gets a reference to the given string and assigns it to the MacAddress field.
func (o *NetworkInterfaceRecord) SetMacAddress(v string) {
	o.MacAddress = &v
}

// GetMasterNetworkInterface returns the MasterNetworkInterface field value if set, zero value otherwise.
func (o *NetworkInterfaceRecord) GetMasterNetworkInterface() NetworkInterfaceNestview {
	if o == nil || IsNil(o.MasterNetworkInterface) {
		var ret NetworkInterfaceNestview
		return ret
	}
	return *o.MasterNetworkInterface
}

// GetMasterNetworkInterfaceOk returns a tuple with the MasterNetworkInterface field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInterfaceRecord) GetMasterNetworkInterfaceOk() (*NetworkInterfaceNestview, bool) {
	if o == nil || IsNil(o.MasterNetworkInterface) {
		return nil, false
	}
	return o.MasterNetworkInterface, true
}

// HasMasterNetworkInterface returns a boolean if a field has been set.
func (o *NetworkInterfaceRecord) HasMasterNetworkInterface() bool {
	if o != nil && !IsNil(o.MasterNetworkInterface) {
		return true
	}

	return false
}

// SetMasterNetworkInterface gets a reference to the given NetworkInterfaceNestview and assigns it to the MasterNetworkInterface field.
func (o *NetworkInterfaceRecord) SetMasterNetworkInterface(v NetworkInterfaceNestview) {
	o.MasterNetworkInterface = &v
}

// GetMegabits returns the Megabits field value if set, zero value otherwise.
func (o *NetworkInterfaceRecord) GetMegabits() int64 {
	if o == nil || IsNil(o.Megabits) {
		var ret int64
		return ret
	}
	return *o.Megabits
}

// GetMegabitsOk returns a tuple with the Megabits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInterfaceRecord) GetMegabitsOk() (*int64, bool) {
	if o == nil || IsNil(o.Megabits) {
		return nil, false
	}
	return o.Megabits, true
}

// HasMegabits returns a boolean if a field has been set.
func (o *NetworkInterfaceRecord) HasMegabits() bool {
	if o != nil && !IsNil(o.Megabits) {
		return true
	}

	return false
}

// SetMegabits gets a reference to the given int64 and assigns it to the Megabits field.
func (o *NetworkInterfaceRecord) SetMegabits(v int64) {
	o.Megabits = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NetworkInterfaceRecord) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInterfaceRecord) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *NetworkInterfaceRecord) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NetworkInterfaceRecord) SetName(v string) {
	o.Name = &v
}

// GetOperstate returns the Operstate field value if set, zero value otherwise.
func (o *NetworkInterfaceRecord) GetOperstate() string {
	if o == nil || IsNil(o.Operstate) {
		var ret string
		return ret
	}
	return *o.Operstate
}

// GetOperstateOk returns a tuple with the Operstate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInterfaceRecord) GetOperstateOk() (*string, bool) {
	if o == nil || IsNil(o.Operstate) {
		return nil, false
	}
	return o.Operstate, true
}

// HasOperstate returns a boolean if a field has been set.
func (o *NetworkInterfaceRecord) HasOperstate() bool {
	if o != nil && !IsNil(o.Operstate) {
		return true
	}

	return false
}

// SetOperstate gets a reference to the given string and assigns it to the Operstate field.
func (o *NetworkInterfaceRecord) SetOperstate(v string) {
	o.Operstate = &v
}

// GetOspCluster returns the OspCluster field value if set, zero value otherwise.
func (o *NetworkInterfaceRecord) GetOspCluster() Cluster {
	if o == nil || IsNil(o.OspCluster) {
		var ret Cluster
		return ret
	}
	return *o.OspCluster
}

// GetOspClusterOk returns a tuple with the OspCluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInterfaceRecord) GetOspClusterOk() (*Cluster, bool) {
	if o == nil || IsNil(o.OspCluster) {
		return nil, false
	}
	return o.OspCluster, true
}

// HasOspCluster returns a boolean if a field has been set.
func (o *NetworkInterfaceRecord) HasOspCluster() bool {
	if o != nil && !IsNil(o.OspCluster) {
		return true
	}

	return false
}

// SetOspCluster gets a reference to the given Cluster and assigns it to the OspCluster field.
func (o *NetworkInterfaceRecord) SetOspCluster(v Cluster) {
	o.OspCluster = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *NetworkInterfaceRecord) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInterfaceRecord) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *NetworkInterfaceRecord) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *NetworkInterfaceRecord) SetType(v string) {
	o.Type = &v
}

// GetUpdate returns the Update field value if set, zero value otherwise.
func (o *NetworkInterfaceRecord) GetUpdate() time.Time {
	if o == nil || IsNil(o.Update) {
		var ret time.Time
		return ret
	}
	return *o.Update
}

// GetUpdateOk returns a tuple with the Update field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInterfaceRecord) GetUpdateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Update) {
		return nil, false
	}
	return o.Update, true
}

// HasUpdate returns a boolean if a field has been set.
func (o *NetworkInterfaceRecord) HasUpdate() bool {
	if o != nil && !IsNil(o.Update) {
		return true
	}

	return false
}

// SetUpdate gets a reference to the given time.Time and assigns it to the Update field.
func (o *NetworkInterfaceRecord) SetUpdate(v time.Time) {
	o.Update = &v
}

// GetVfNum returns the VfNum field value if set, zero value otherwise.
func (o *NetworkInterfaceRecord) GetVfNum() int64 {
	if o == nil || IsNil(o.VfNum) {
		var ret int64
		return ret
	}
	return *o.VfNum
}

// GetVfNumOk returns a tuple with the VfNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInterfaceRecord) GetVfNumOk() (*int64, bool) {
	if o == nil || IsNil(o.VfNum) {
		return nil, false
	}
	return o.VfNum, true
}

// HasVfNum returns a boolean if a field has been set.
func (o *NetworkInterfaceRecord) HasVfNum() bool {
	if o != nil && !IsNil(o.VfNum) {
		return true
	}

	return false
}

// SetVfNum gets a reference to the given int64 and assigns it to the VfNum field.
func (o *NetworkInterfaceRecord) SetVfNum(v int64) {
	o.VfNum = &v
}

// GetSamples returns the Samples field value if set, zero value otherwise.
func (o *NetworkInterfaceRecord) GetSamples() []NetworkInterfaceStat {
	if o == nil || IsNil(o.Samples) {
		var ret []NetworkInterfaceStat
		return ret
	}
	return o.Samples
}

// GetSamplesOk returns a tuple with the Samples field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInterfaceRecord) GetSamplesOk() ([]NetworkInterfaceStat, bool) {
	if o == nil || IsNil(o.Samples) {
		return nil, false
	}
	return o.Samples, true
}

// HasSamples returns a boolean if a field has been set.
func (o *NetworkInterfaceRecord) HasSamples() bool {
	if o != nil && !IsNil(o.Samples) {
		return true
	}

	return false
}

// SetSamples gets a reference to the given []NetworkInterfaceStat and assigns it to the Samples field.
func (o *NetworkInterfaceRecord) SetSamples(v []NetworkInterfaceStat) {
	o.Samples = v
}

func (o NetworkInterfaceRecord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkInterfaceRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BondingMode) {
		toSerialize["bonding_mode"] = o.BondingMode
	}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.Host) {
		toSerialize["host"] = o.Host
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LinkDetected) {
		toSerialize["link_detected"] = o.LinkDetected
	}
	if !IsNil(o.MacAddress) {
		toSerialize["mac_address"] = o.MacAddress
	}
	if !IsNil(o.MasterNetworkInterface) {
		toSerialize["master_network_interface"] = o.MasterNetworkInterface
	}
	if !IsNil(o.Megabits) {
		toSerialize["megabits"] = o.Megabits
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Operstate) {
		toSerialize["operstate"] = o.Operstate
	}
	if !IsNil(o.OspCluster) {
		toSerialize["osp_cluster"] = o.OspCluster
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Update) {
		toSerialize["update"] = o.Update
	}
	if !IsNil(o.VfNum) {
		toSerialize["vf_num"] = o.VfNum
	}
	if !IsNil(o.Samples) {
		toSerialize["samples"] = o.Samples
	}
	return toSerialize, nil
}

type NullableNetworkInterfaceRecord struct {
	value *NetworkInterfaceRecord
	isSet bool
}

func (v NullableNetworkInterfaceRecord) Get() *NetworkInterfaceRecord {
	return v.value
}

func (v *NullableNetworkInterfaceRecord) Set(val *NetworkInterfaceRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkInterfaceRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkInterfaceRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkInterfaceRecord(val *NetworkInterfaceRecord) *NullableNetworkInterfaceRecord {
	return &NullableNetworkInterfaceRecord{value: val, isSet: true}
}

func (v NullableNetworkInterfaceRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkInterfaceRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


