/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VIPGroupResps type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VIPGroupResps{}

// VIPGroupResps struct for VIPGroupResps
type VIPGroupResps struct {
	VipGroups []VIPGroup `json:"vip_groups"`
}

type _VIPGroupResps VIPGroupResps

// NewVIPGroupResps instantiates a new VIPGroupResps object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVIPGroupResps(vipGroups []VIPGroup) *VIPGroupResps {
	this := VIPGroupResps{}
	this.VipGroups = vipGroups
	return &this
}

// NewVIPGroupRespsWithDefaults instantiates a new VIPGroupResps object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVIPGroupRespsWithDefaults() *VIPGroupResps {
	this := VIPGroupResps{}
	return &this
}

// GetVipGroups returns the VipGroups field value
func (o *VIPGroupResps) GetVipGroups() []VIPGroup {
	if o == nil {
		var ret []VIPGroup
		return ret
	}

	return o.VipGroups
}

// GetVipGroupsOk returns a tuple with the VipGroups field value
// and a boolean to check if the value has been set.
func (o *VIPGroupResps) GetVipGroupsOk() ([]VIPGroup, bool) {
	if o == nil {
		return nil, false
	}
	return o.VipGroups, true
}

// SetVipGroups sets field value
func (o *VIPGroupResps) SetVipGroups(v []VIPGroup) {
	o.VipGroups = v
}

func (o VIPGroupResps) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VIPGroupResps) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["vip_groups"] = o.VipGroups
	return toSerialize, nil
}

func (o *VIPGroupResps) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"vip_groups",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVIPGroupResps := _VIPGroupResps{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVIPGroupResps)

	if err != nil {
		return err
	}

	*o = VIPGroupResps(varVIPGroupResps)

	return err
}

type NullableVIPGroupResps struct {
	value *VIPGroupResps
	isSet bool
}

func (v NullableVIPGroupResps) Get() *VIPGroupResps {
	return v.value
}

func (v *NullableVIPGroupResps) Set(val *VIPGroupResps) {
	v.value = val
	v.isSet = true
}

func (v NullableVIPGroupResps) IsSet() bool {
	return v.isSet
}

func (v *NullableVIPGroupResps) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVIPGroupResps(val *VIPGroupResps) *NullableVIPGroupResps {
	return &NullableVIPGroupResps{value: val, isSet: true}
}

func (v NullableVIPGroupResps) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVIPGroupResps) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


