/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the DpBlockAsyncReplicationJob type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DpBlockAsyncReplicationJob{}

// DpBlockAsyncReplicationJob DpBlockAsyncReplicationJob is one execution of a dp block replication protection
type DpBlockAsyncReplicationJob struct {
	Cluster *Cluster `json:"cluster,omitempty"`
	DiffType *string `json:"diff_type,omitempty"`
	DpBlockAsyncReplicationPair *DpBlockAsyncReplicationPairNestview `json:"dp_block_async_replication_pair,omitempty"`
	DpVolumeGroupSnapshotReplicationJob *DpVolumeGroupSnapshotReplicationJobNestview `json:"dp_volume_group_snapshot_replication_job,omitempty"`
	FinishedAt *time.Time `json:"finished_at,omitempty"`
	Id *int64 `json:"id,omitempty"`
	MaxRetryTimes *int64 `json:"max_retry_times,omitempty"`
	Progress *float64 `json:"progress,omitempty"`
	Size *int64 `json:"size,omitempty"`
	Snapshot *SnapshotNestview `json:"snapshot,omitempty"`
	StartedAt *time.Time `json:"started_at,omitempty"`
	Status *string `json:"status,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	VolumeName *string `json:"volume_name,omitempty"`
}

// NewDpBlockAsyncReplicationJob instantiates a new DpBlockAsyncReplicationJob object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDpBlockAsyncReplicationJob() *DpBlockAsyncReplicationJob {
	this := DpBlockAsyncReplicationJob{}
	return &this
}

// NewDpBlockAsyncReplicationJobWithDefaults instantiates a new DpBlockAsyncReplicationJob object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDpBlockAsyncReplicationJobWithDefaults() *DpBlockAsyncReplicationJob {
	this := DpBlockAsyncReplicationJob{}
	return &this
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *DpBlockAsyncReplicationJob) GetCluster() Cluster {
	if o == nil || IsNil(o.Cluster) {
		var ret Cluster
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockAsyncReplicationJob) GetClusterOk() (*Cluster, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *DpBlockAsyncReplicationJob) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given Cluster and assigns it to the Cluster field.
func (o *DpBlockAsyncReplicationJob) SetCluster(v Cluster) {
	o.Cluster = &v
}

// GetDiffType returns the DiffType field value if set, zero value otherwise.
func (o *DpBlockAsyncReplicationJob) GetDiffType() string {
	if o == nil || IsNil(o.DiffType) {
		var ret string
		return ret
	}
	return *o.DiffType
}

// GetDiffTypeOk returns a tuple with the DiffType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockAsyncReplicationJob) GetDiffTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DiffType) {
		return nil, false
	}
	return o.DiffType, true
}

// HasDiffType returns a boolean if a field has been set.
func (o *DpBlockAsyncReplicationJob) HasDiffType() bool {
	if o != nil && !IsNil(o.DiffType) {
		return true
	}

	return false
}

// SetDiffType gets a reference to the given string and assigns it to the DiffType field.
func (o *DpBlockAsyncReplicationJob) SetDiffType(v string) {
	o.DiffType = &v
}

// GetDpBlockAsyncReplicationPair returns the DpBlockAsyncReplicationPair field value if set, zero value otherwise.
func (o *DpBlockAsyncReplicationJob) GetDpBlockAsyncReplicationPair() DpBlockAsyncReplicationPairNestview {
	if o == nil || IsNil(o.DpBlockAsyncReplicationPair) {
		var ret DpBlockAsyncReplicationPairNestview
		return ret
	}
	return *o.DpBlockAsyncReplicationPair
}

// GetDpBlockAsyncReplicationPairOk returns a tuple with the DpBlockAsyncReplicationPair field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockAsyncReplicationJob) GetDpBlockAsyncReplicationPairOk() (*DpBlockAsyncReplicationPairNestview, bool) {
	if o == nil || IsNil(o.DpBlockAsyncReplicationPair) {
		return nil, false
	}
	return o.DpBlockAsyncReplicationPair, true
}

// HasDpBlockAsyncReplicationPair returns a boolean if a field has been set.
func (o *DpBlockAsyncReplicationJob) HasDpBlockAsyncReplicationPair() bool {
	if o != nil && !IsNil(o.DpBlockAsyncReplicationPair) {
		return true
	}

	return false
}

// SetDpBlockAsyncReplicationPair gets a reference to the given DpBlockAsyncReplicationPairNestview and assigns it to the DpBlockAsyncReplicationPair field.
func (o *DpBlockAsyncReplicationJob) SetDpBlockAsyncReplicationPair(v DpBlockAsyncReplicationPairNestview) {
	o.DpBlockAsyncReplicationPair = &v
}

// GetDpVolumeGroupSnapshotReplicationJob returns the DpVolumeGroupSnapshotReplicationJob field value if set, zero value otherwise.
func (o *DpBlockAsyncReplicationJob) GetDpVolumeGroupSnapshotReplicationJob() DpVolumeGroupSnapshotReplicationJobNestview {
	if o == nil || IsNil(o.DpVolumeGroupSnapshotReplicationJob) {
		var ret DpVolumeGroupSnapshotReplicationJobNestview
		return ret
	}
	return *o.DpVolumeGroupSnapshotReplicationJob
}

// GetDpVolumeGroupSnapshotReplicationJobOk returns a tuple with the DpVolumeGroupSnapshotReplicationJob field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockAsyncReplicationJob) GetDpVolumeGroupSnapshotReplicationJobOk() (*DpVolumeGroupSnapshotReplicationJobNestview, bool) {
	if o == nil || IsNil(o.DpVolumeGroupSnapshotReplicationJob) {
		return nil, false
	}
	return o.DpVolumeGroupSnapshotReplicationJob, true
}

// HasDpVolumeGroupSnapshotReplicationJob returns a boolean if a field has been set.
func (o *DpBlockAsyncReplicationJob) HasDpVolumeGroupSnapshotReplicationJob() bool {
	if o != nil && !IsNil(o.DpVolumeGroupSnapshotReplicationJob) {
		return true
	}

	return false
}

// SetDpVolumeGroupSnapshotReplicationJob gets a reference to the given DpVolumeGroupSnapshotReplicationJobNestview and assigns it to the DpVolumeGroupSnapshotReplicationJob field.
func (o *DpBlockAsyncReplicationJob) SetDpVolumeGroupSnapshotReplicationJob(v DpVolumeGroupSnapshotReplicationJobNestview) {
	o.DpVolumeGroupSnapshotReplicationJob = &v
}

// GetFinishedAt returns the FinishedAt field value if set, zero value otherwise.
func (o *DpBlockAsyncReplicationJob) GetFinishedAt() time.Time {
	if o == nil || IsNil(o.FinishedAt) {
		var ret time.Time
		return ret
	}
	return *o.FinishedAt
}

// GetFinishedAtOk returns a tuple with the FinishedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockAsyncReplicationJob) GetFinishedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.FinishedAt) {
		return nil, false
	}
	return o.FinishedAt, true
}

// HasFinishedAt returns a boolean if a field has been set.
func (o *DpBlockAsyncReplicationJob) HasFinishedAt() bool {
	if o != nil && !IsNil(o.FinishedAt) {
		return true
	}

	return false
}

// SetFinishedAt gets a reference to the given time.Time and assigns it to the FinishedAt field.
func (o *DpBlockAsyncReplicationJob) SetFinishedAt(v time.Time) {
	o.FinishedAt = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DpBlockAsyncReplicationJob) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockAsyncReplicationJob) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DpBlockAsyncReplicationJob) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *DpBlockAsyncReplicationJob) SetId(v int64) {
	o.Id = &v
}

// GetMaxRetryTimes returns the MaxRetryTimes field value if set, zero value otherwise.
func (o *DpBlockAsyncReplicationJob) GetMaxRetryTimes() int64 {
	if o == nil || IsNil(o.MaxRetryTimes) {
		var ret int64
		return ret
	}
	return *o.MaxRetryTimes
}

// GetMaxRetryTimesOk returns a tuple with the MaxRetryTimes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockAsyncReplicationJob) GetMaxRetryTimesOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxRetryTimes) {
		return nil, false
	}
	return o.MaxRetryTimes, true
}

// HasMaxRetryTimes returns a boolean if a field has been set.
func (o *DpBlockAsyncReplicationJob) HasMaxRetryTimes() bool {
	if o != nil && !IsNil(o.MaxRetryTimes) {
		return true
	}

	return false
}

// SetMaxRetryTimes gets a reference to the given int64 and assigns it to the MaxRetryTimes field.
func (o *DpBlockAsyncReplicationJob) SetMaxRetryTimes(v int64) {
	o.MaxRetryTimes = &v
}

// GetProgress returns the Progress field value if set, zero value otherwise.
func (o *DpBlockAsyncReplicationJob) GetProgress() float64 {
	if o == nil || IsNil(o.Progress) {
		var ret float64
		return ret
	}
	return *o.Progress
}

// GetProgressOk returns a tuple with the Progress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockAsyncReplicationJob) GetProgressOk() (*float64, bool) {
	if o == nil || IsNil(o.Progress) {
		return nil, false
	}
	return o.Progress, true
}

// HasProgress returns a boolean if a field has been set.
func (o *DpBlockAsyncReplicationJob) HasProgress() bool {
	if o != nil && !IsNil(o.Progress) {
		return true
	}

	return false
}

// SetProgress gets a reference to the given float64 and assigns it to the Progress field.
func (o *DpBlockAsyncReplicationJob) SetProgress(v float64) {
	o.Progress = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *DpBlockAsyncReplicationJob) GetSize() int64 {
	if o == nil || IsNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockAsyncReplicationJob) GetSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *DpBlockAsyncReplicationJob) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *DpBlockAsyncReplicationJob) SetSize(v int64) {
	o.Size = &v
}

// GetSnapshot returns the Snapshot field value if set, zero value otherwise.
func (o *DpBlockAsyncReplicationJob) GetSnapshot() SnapshotNestview {
	if o == nil || IsNil(o.Snapshot) {
		var ret SnapshotNestview
		return ret
	}
	return *o.Snapshot
}

// GetSnapshotOk returns a tuple with the Snapshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockAsyncReplicationJob) GetSnapshotOk() (*SnapshotNestview, bool) {
	if o == nil || IsNil(o.Snapshot) {
		return nil, false
	}
	return o.Snapshot, true
}

// HasSnapshot returns a boolean if a field has been set.
func (o *DpBlockAsyncReplicationJob) HasSnapshot() bool {
	if o != nil && !IsNil(o.Snapshot) {
		return true
	}

	return false
}

// SetSnapshot gets a reference to the given SnapshotNestview and assigns it to the Snapshot field.
func (o *DpBlockAsyncReplicationJob) SetSnapshot(v SnapshotNestview) {
	o.Snapshot = &v
}

// GetStartedAt returns the StartedAt field value if set, zero value otherwise.
func (o *DpBlockAsyncReplicationJob) GetStartedAt() time.Time {
	if o == nil || IsNil(o.StartedAt) {
		var ret time.Time
		return ret
	}
	return *o.StartedAt
}

// GetStartedAtOk returns a tuple with the StartedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockAsyncReplicationJob) GetStartedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartedAt) {
		return nil, false
	}
	return o.StartedAt, true
}

// HasStartedAt returns a boolean if a field has been set.
func (o *DpBlockAsyncReplicationJob) HasStartedAt() bool {
	if o != nil && !IsNil(o.StartedAt) {
		return true
	}

	return false
}

// SetStartedAt gets a reference to the given time.Time and assigns it to the StartedAt field.
func (o *DpBlockAsyncReplicationJob) SetStartedAt(v time.Time) {
	o.StartedAt = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DpBlockAsyncReplicationJob) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockAsyncReplicationJob) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DpBlockAsyncReplicationJob) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *DpBlockAsyncReplicationJob) SetStatus(v string) {
	o.Status = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *DpBlockAsyncReplicationJob) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockAsyncReplicationJob) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *DpBlockAsyncReplicationJob) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *DpBlockAsyncReplicationJob) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetVolumeName returns the VolumeName field value if set, zero value otherwise.
func (o *DpBlockAsyncReplicationJob) GetVolumeName() string {
	if o == nil || IsNil(o.VolumeName) {
		var ret string
		return ret
	}
	return *o.VolumeName
}

// GetVolumeNameOk returns a tuple with the VolumeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockAsyncReplicationJob) GetVolumeNameOk() (*string, bool) {
	if o == nil || IsNil(o.VolumeName) {
		return nil, false
	}
	return o.VolumeName, true
}

// HasVolumeName returns a boolean if a field has been set.
func (o *DpBlockAsyncReplicationJob) HasVolumeName() bool {
	if o != nil && !IsNil(o.VolumeName) {
		return true
	}

	return false
}

// SetVolumeName gets a reference to the given string and assigns it to the VolumeName field.
func (o *DpBlockAsyncReplicationJob) SetVolumeName(v string) {
	o.VolumeName = &v
}

func (o DpBlockAsyncReplicationJob) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DpBlockAsyncReplicationJob) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !IsNil(o.DiffType) {
		toSerialize["diff_type"] = o.DiffType
	}
	if !IsNil(o.DpBlockAsyncReplicationPair) {
		toSerialize["dp_block_async_replication_pair"] = o.DpBlockAsyncReplicationPair
	}
	if !IsNil(o.DpVolumeGroupSnapshotReplicationJob) {
		toSerialize["dp_volume_group_snapshot_replication_job"] = o.DpVolumeGroupSnapshotReplicationJob
	}
	if !IsNil(o.FinishedAt) {
		toSerialize["finished_at"] = o.FinishedAt
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.MaxRetryTimes) {
		toSerialize["max_retry_times"] = o.MaxRetryTimes
	}
	if !IsNil(o.Progress) {
		toSerialize["progress"] = o.Progress
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.Snapshot) {
		toSerialize["snapshot"] = o.Snapshot
	}
	if !IsNil(o.StartedAt) {
		toSerialize["started_at"] = o.StartedAt
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.VolumeName) {
		toSerialize["volume_name"] = o.VolumeName
	}
	return toSerialize, nil
}

type NullableDpBlockAsyncReplicationJob struct {
	value *DpBlockAsyncReplicationJob
	isSet bool
}

func (v NullableDpBlockAsyncReplicationJob) Get() *DpBlockAsyncReplicationJob {
	return v.value
}

func (v *NullableDpBlockAsyncReplicationJob) Set(val *DpBlockAsyncReplicationJob) {
	v.value = val
	v.isSet = true
}

func (v NullableDpBlockAsyncReplicationJob) IsSet() bool {
	return v.isSet
}

func (v *NullableDpBlockAsyncReplicationJob) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDpBlockAsyncReplicationJob(val *DpBlockAsyncReplicationJob) *NullableDpBlockAsyncReplicationJob {
	return &NullableDpBlockAsyncReplicationJob{value: val, isSet: true}
}

func (v NullableDpBlockAsyncReplicationJob) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDpBlockAsyncReplicationJob) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


