/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DfsHdfsUpdateACLsReqHdfsACLsElt type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsHdfsUpdateACLsReqHdfsACLsElt{}

// DfsHdfsUpdateACLsReqHdfsACLsElt struct for DfsHdfsUpdateACLsReqHdfsACLsElt
type DfsHdfsUpdateACLsReqHdfsACLsElt struct {
	// acl id
	Id int64 `json:"id"`
	// acl permission
	Permission string `json:"permission"`
}

type _DfsHdfsUpdateACLsReqHdfsACLsElt DfsHdfsUpdateACLsReqHdfsACLsElt

// NewDfsHdfsUpdateACLsReqHdfsACLsElt instantiates a new DfsHdfsUpdateACLsReqHdfsACLsElt object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsHdfsUpdateACLsReqHdfsACLsElt(id int64, permission string) *DfsHdfsUpdateACLsReqHdfsACLsElt {
	this := DfsHdfsUpdateACLsReqHdfsACLsElt{}
	this.Id = id
	this.Permission = permission
	return &this
}

// NewDfsHdfsUpdateACLsReqHdfsACLsEltWithDefaults instantiates a new DfsHdfsUpdateACLsReqHdfsACLsElt object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsHdfsUpdateACLsReqHdfsACLsEltWithDefaults() *DfsHdfsUpdateACLsReqHdfsACLsElt {
	this := DfsHdfsUpdateACLsReqHdfsACLsElt{}
	return &this
}

// GetId returns the Id field value
func (o *DfsHdfsUpdateACLsReqHdfsACLsElt) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DfsHdfsUpdateACLsReqHdfsACLsElt) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DfsHdfsUpdateACLsReqHdfsACLsElt) SetId(v int64) {
	o.Id = v
}

// GetPermission returns the Permission field value
func (o *DfsHdfsUpdateACLsReqHdfsACLsElt) GetPermission() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Permission
}

// GetPermissionOk returns a tuple with the Permission field value
// and a boolean to check if the value has been set.
func (o *DfsHdfsUpdateACLsReqHdfsACLsElt) GetPermissionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Permission, true
}

// SetPermission sets field value
func (o *DfsHdfsUpdateACLsReqHdfsACLsElt) SetPermission(v string) {
	o.Permission = v
}

func (o DfsHdfsUpdateACLsReqHdfsACLsElt) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsHdfsUpdateACLsReqHdfsACLsElt) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["permission"] = o.Permission
	return toSerialize, nil
}

func (o *DfsHdfsUpdateACLsReqHdfsACLsElt) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"permission",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDfsHdfsUpdateACLsReqHdfsACLsElt := _DfsHdfsUpdateACLsReqHdfsACLsElt{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDfsHdfsUpdateACLsReqHdfsACLsElt)

	if err != nil {
		return err
	}

	*o = DfsHdfsUpdateACLsReqHdfsACLsElt(varDfsHdfsUpdateACLsReqHdfsACLsElt)

	return err
}

type NullableDfsHdfsUpdateACLsReqHdfsACLsElt struct {
	value *DfsHdfsUpdateACLsReqHdfsACLsElt
	isSet bool
}

func (v NullableDfsHdfsUpdateACLsReqHdfsACLsElt) Get() *DfsHdfsUpdateACLsReqHdfsACLsElt {
	return v.value
}

func (v *NullableDfsHdfsUpdateACLsReqHdfsACLsElt) Set(val *DfsHdfsUpdateACLsReqHdfsACLsElt) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsHdfsUpdateACLsReqHdfsACLsElt) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsHdfsUpdateACLsReqHdfsACLsElt) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsHdfsUpdateACLsReqHdfsACLsElt(val *DfsHdfsUpdateACLsReqHdfsACLsElt) *NullableDfsHdfsUpdateACLsReqHdfsACLsElt {
	return &NullableDfsHdfsUpdateACLsReqHdfsACLsElt{value: val, isSet: true}
}

func (v NullableDfsHdfsUpdateACLsReqHdfsACLsElt) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsHdfsUpdateACLsReqHdfsACLsElt) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


