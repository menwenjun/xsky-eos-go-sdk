/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DomainUsersResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DomainUsersResp{}

// DomainUsersResp struct for DomainUsersResp
type DomainUsersResp struct {
	DomainUsers []DomainUser `json:"domain_users,omitempty"`
}

// NewDomainUsersResp instantiates a new DomainUsersResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDomainUsersResp() *DomainUsersResp {
	this := DomainUsersResp{}
	return &this
}

// NewDomainUsersRespWithDefaults instantiates a new DomainUsersResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDomainUsersRespWithDefaults() *DomainUsersResp {
	this := DomainUsersResp{}
	return &this
}

// GetDomainUsers returns the DomainUsers field value if set, zero value otherwise.
func (o *DomainUsersResp) GetDomainUsers() []DomainUser {
	if o == nil || IsNil(o.DomainUsers) {
		var ret []DomainUser
		return ret
	}
	return o.DomainUsers
}

// GetDomainUsersOk returns a tuple with the DomainUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainUsersResp) GetDomainUsersOk() ([]DomainUser, bool) {
	if o == nil || IsNil(o.DomainUsers) {
		return nil, false
	}
	return o.DomainUsers, true
}

// HasDomainUsers returns a boolean if a field has been set.
func (o *DomainUsersResp) HasDomainUsers() bool {
	if o != nil && !IsNil(o.DomainUsers) {
		return true
	}

	return false
}

// SetDomainUsers gets a reference to the given []DomainUser and assigns it to the DomainUsers field.
func (o *DomainUsersResp) SetDomainUsers(v []DomainUser) {
	o.DomainUsers = v
}

func (o DomainUsersResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DomainUsersResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DomainUsers) {
		toSerialize["domain_users"] = o.DomainUsers
	}
	return toSerialize, nil
}

type NullableDomainUsersResp struct {
	value *DomainUsersResp
	isSet bool
}

func (v NullableDomainUsersResp) Get() *DomainUsersResp {
	return v.value
}

func (v *NullableDomainUsersResp) Set(val *DomainUsersResp) {
	v.value = val
	v.isSet = true
}

func (v NullableDomainUsersResp) IsSet() bool {
	return v.isSet
}

func (v *NullableDomainUsersResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDomainUsersResp(val *DomainUsersResp) *NullableDomainUsersResp {
	return &NullableDomainUsersResp{value: val, isSet: true}
}

func (v NullableDomainUsersResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDomainUsersResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


