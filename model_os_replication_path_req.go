/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OSReplicationPathReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OSReplicationPathReq{}

// OSReplicationPathReq struct for OSReplicationPathReq
type OSReplicationPathReq struct {
	OsZoneUuids []string `json:"os_zone_uuids"`
}

type _OSReplicationPathReq OSReplicationPathReq

// NewOSReplicationPathReq instantiates a new OSReplicationPathReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOSReplicationPathReq(osZoneUuids []string) *OSReplicationPathReq {
	this := OSReplicationPathReq{}
	this.OsZoneUuids = osZoneUuids
	return &this
}

// NewOSReplicationPathReqWithDefaults instantiates a new OSReplicationPathReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOSReplicationPathReqWithDefaults() *OSReplicationPathReq {
	this := OSReplicationPathReq{}
	return &this
}

// GetOsZoneUuids returns the OsZoneUuids field value
func (o *OSReplicationPathReq) GetOsZoneUuids() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.OsZoneUuids
}

// GetOsZoneUuidsOk returns a tuple with the OsZoneUuids field value
// and a boolean to check if the value has been set.
func (o *OSReplicationPathReq) GetOsZoneUuidsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OsZoneUuids, true
}

// SetOsZoneUuids sets field value
func (o *OSReplicationPathReq) SetOsZoneUuids(v []string) {
	o.OsZoneUuids = v
}

func (o OSReplicationPathReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OSReplicationPathReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["os_zone_uuids"] = o.OsZoneUuids
	return toSerialize, nil
}

func (o *OSReplicationPathReq) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"os_zone_uuids",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOSReplicationPathReq := _OSReplicationPathReq{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOSReplicationPathReq)

	if err != nil {
		return err
	}

	*o = OSReplicationPathReq(varOSReplicationPathReq)

	return err
}

type NullableOSReplicationPathReq struct {
	value *OSReplicationPathReq
	isSet bool
}

func (v NullableOSReplicationPathReq) Get() *OSReplicationPathReq {
	return v.value
}

func (v *NullableOSReplicationPathReq) Set(val *OSReplicationPathReq) {
	v.value = val
	v.isSet = true
}

func (v NullableOSReplicationPathReq) IsSet() bool {
	return v.isSet
}

func (v *NullableOSReplicationPathReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOSReplicationPathReq(val *OSReplicationPathReq) *NullableOSReplicationPathReq {
	return &NullableOSReplicationPathReq{value: val, isSet: true}
}

func (v NullableOSReplicationPathReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOSReplicationPathReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


