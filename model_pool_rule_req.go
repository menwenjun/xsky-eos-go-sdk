/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PoolRuleReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PoolRuleReq{}

// PoolRuleReq struct for PoolRuleReq
type PoolRuleReq struct {
	PlacementNodeId *int64 `json:"placement_node_id,omitempty"`
	ReplicateNum *int64 `json:"replicate_num,omitempty"`
}

// NewPoolRuleReq instantiates a new PoolRuleReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPoolRuleReq() *PoolRuleReq {
	this := PoolRuleReq{}
	return &this
}

// NewPoolRuleReqWithDefaults instantiates a new PoolRuleReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPoolRuleReqWithDefaults() *PoolRuleReq {
	this := PoolRuleReq{}
	return &this
}

// GetPlacementNodeId returns the PlacementNodeId field value if set, zero value otherwise.
func (o *PoolRuleReq) GetPlacementNodeId() int64 {
	if o == nil || IsNil(o.PlacementNodeId) {
		var ret int64
		return ret
	}
	return *o.PlacementNodeId
}

// GetPlacementNodeIdOk returns a tuple with the PlacementNodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRuleReq) GetPlacementNodeIdOk() (*int64, bool) {
	if o == nil || IsNil(o.PlacementNodeId) {
		return nil, false
	}
	return o.PlacementNodeId, true
}

// HasPlacementNodeId returns a boolean if a field has been set.
func (o *PoolRuleReq) HasPlacementNodeId() bool {
	if o != nil && !IsNil(o.PlacementNodeId) {
		return true
	}

	return false
}

// SetPlacementNodeId gets a reference to the given int64 and assigns it to the PlacementNodeId field.
func (o *PoolRuleReq) SetPlacementNodeId(v int64) {
	o.PlacementNodeId = &v
}

// GetReplicateNum returns the ReplicateNum field value if set, zero value otherwise.
func (o *PoolRuleReq) GetReplicateNum() int64 {
	if o == nil || IsNil(o.ReplicateNum) {
		var ret int64
		return ret
	}
	return *o.ReplicateNum
}

// GetReplicateNumOk returns a tuple with the ReplicateNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRuleReq) GetReplicateNumOk() (*int64, bool) {
	if o == nil || IsNil(o.ReplicateNum) {
		return nil, false
	}
	return o.ReplicateNum, true
}

// HasReplicateNum returns a boolean if a field has been set.
func (o *PoolRuleReq) HasReplicateNum() bool {
	if o != nil && !IsNil(o.ReplicateNum) {
		return true
	}

	return false
}

// SetReplicateNum gets a reference to the given int64 and assigns it to the ReplicateNum field.
func (o *PoolRuleReq) SetReplicateNum(v int64) {
	o.ReplicateNum = &v
}

func (o PoolRuleReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PoolRuleReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PlacementNodeId) {
		toSerialize["placement_node_id"] = o.PlacementNodeId
	}
	if !IsNil(o.ReplicateNum) {
		toSerialize["replicate_num"] = o.ReplicateNum
	}
	return toSerialize, nil
}

type NullablePoolRuleReq struct {
	value *PoolRuleReq
	isSet bool
}

func (v NullablePoolRuleReq) Get() *PoolRuleReq {
	return v.value
}

func (v *NullablePoolRuleReq) Set(val *PoolRuleReq) {
	v.value = val
	v.isSet = true
}

func (v NullablePoolRuleReq) IsSet() bool {
	return v.isSet
}

func (v *NullablePoolRuleReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePoolRuleReq(val *PoolRuleReq) *NullablePoolRuleReq {
	return &NullablePoolRuleReq{value: val, isSet: true}
}

func (v NullablePoolRuleReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePoolRuleReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


