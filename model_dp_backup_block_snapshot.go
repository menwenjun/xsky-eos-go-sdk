/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the DpBackupBlockSnapshot type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DpBackupBlockSnapshot{}

// DpBackupBlockSnapshot DpBackupBlockSnapshot is a block snapshot stored on a site
type DpBackupBlockSnapshot struct {
	BackupType *string `json:"backup_type,omitempty"`
	Create *time.Time `json:"create,omitempty"`
	Size *int64 `json:"size,omitempty"`
	VolumeSize *int64 `json:"volume_size,omitempty"`
}

// NewDpBackupBlockSnapshot instantiates a new DpBackupBlockSnapshot object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDpBackupBlockSnapshot() *DpBackupBlockSnapshot {
	this := DpBackupBlockSnapshot{}
	return &this
}

// NewDpBackupBlockSnapshotWithDefaults instantiates a new DpBackupBlockSnapshot object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDpBackupBlockSnapshotWithDefaults() *DpBackupBlockSnapshot {
	this := DpBackupBlockSnapshot{}
	return &this
}

// GetBackupType returns the BackupType field value if set, zero value otherwise.
func (o *DpBackupBlockSnapshot) GetBackupType() string {
	if o == nil || IsNil(o.BackupType) {
		var ret string
		return ret
	}
	return *o.BackupType
}

// GetBackupTypeOk returns a tuple with the BackupType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBackupBlockSnapshot) GetBackupTypeOk() (*string, bool) {
	if o == nil || IsNil(o.BackupType) {
		return nil, false
	}
	return o.BackupType, true
}

// HasBackupType returns a boolean if a field has been set.
func (o *DpBackupBlockSnapshot) HasBackupType() bool {
	if o != nil && !IsNil(o.BackupType) {
		return true
	}

	return false
}

// SetBackupType gets a reference to the given string and assigns it to the BackupType field.
func (o *DpBackupBlockSnapshot) SetBackupType(v string) {
	o.BackupType = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *DpBackupBlockSnapshot) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBackupBlockSnapshot) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *DpBackupBlockSnapshot) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *DpBackupBlockSnapshot) SetCreate(v time.Time) {
	o.Create = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *DpBackupBlockSnapshot) GetSize() int64 {
	if o == nil || IsNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBackupBlockSnapshot) GetSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *DpBackupBlockSnapshot) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *DpBackupBlockSnapshot) SetSize(v int64) {
	o.Size = &v
}

// GetVolumeSize returns the VolumeSize field value if set, zero value otherwise.
func (o *DpBackupBlockSnapshot) GetVolumeSize() int64 {
	if o == nil || IsNil(o.VolumeSize) {
		var ret int64
		return ret
	}
	return *o.VolumeSize
}

// GetVolumeSizeOk returns a tuple with the VolumeSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBackupBlockSnapshot) GetVolumeSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.VolumeSize) {
		return nil, false
	}
	return o.VolumeSize, true
}

// HasVolumeSize returns a boolean if a field has been set.
func (o *DpBackupBlockSnapshot) HasVolumeSize() bool {
	if o != nil && !IsNil(o.VolumeSize) {
		return true
	}

	return false
}

// SetVolumeSize gets a reference to the given int64 and assigns it to the VolumeSize field.
func (o *DpBackupBlockSnapshot) SetVolumeSize(v int64) {
	o.VolumeSize = &v
}

func (o DpBackupBlockSnapshot) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DpBackupBlockSnapshot) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BackupType) {
		toSerialize["backup_type"] = o.BackupType
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.VolumeSize) {
		toSerialize["volume_size"] = o.VolumeSize
	}
	return toSerialize, nil
}

type NullableDpBackupBlockSnapshot struct {
	value *DpBackupBlockSnapshot
	isSet bool
}

func (v NullableDpBackupBlockSnapshot) Get() *DpBackupBlockSnapshot {
	return v.value
}

func (v *NullableDpBackupBlockSnapshot) Set(val *DpBackupBlockSnapshot) {
	v.value = val
	v.isSet = true
}

func (v NullableDpBackupBlockSnapshot) IsSet() bool {
	return v.isSet
}

func (v *NullableDpBackupBlockSnapshot) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDpBackupBlockSnapshot(val *DpBackupBlockSnapshot) *NullableDpBackupBlockSnapshot {
	return &NullableDpBackupBlockSnapshot{value: val, isSet: true}
}

func (v NullableDpBackupBlockSnapshot) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDpBackupBlockSnapshot) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


