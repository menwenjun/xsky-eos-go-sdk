/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the S3LoadBalancersRemoveReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &S3LoadBalancersRemoveReq{}

// S3LoadBalancersRemoveReq struct for S3LoadBalancersRemoveReq
type S3LoadBalancersRemoveReq struct {
	S3LoadBalancerIds []int64 `json:"s3_load_balancer_ids,omitempty"`
	S3LoadBalancerKeepalivedIds []int64 `json:"s3_load_balancer_keepalived_ids,omitempty"`
	S3LoadBalancerKeepalivedVips []string `json:"s3_load_balancer_keepalived_vips,omitempty"`
}

// NewS3LoadBalancersRemoveReq instantiates a new S3LoadBalancersRemoveReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewS3LoadBalancersRemoveReq() *S3LoadBalancersRemoveReq {
	this := S3LoadBalancersRemoveReq{}
	return &this
}

// NewS3LoadBalancersRemoveReqWithDefaults instantiates a new S3LoadBalancersRemoveReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewS3LoadBalancersRemoveReqWithDefaults() *S3LoadBalancersRemoveReq {
	this := S3LoadBalancersRemoveReq{}
	return &this
}

// GetS3LoadBalancerIds returns the S3LoadBalancerIds field value if set, zero value otherwise.
func (o *S3LoadBalancersRemoveReq) GetS3LoadBalancerIds() []int64 {
	if o == nil || IsNil(o.S3LoadBalancerIds) {
		var ret []int64
		return ret
	}
	return o.S3LoadBalancerIds
}

// GetS3LoadBalancerIdsOk returns a tuple with the S3LoadBalancerIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3LoadBalancersRemoveReq) GetS3LoadBalancerIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.S3LoadBalancerIds) {
		return nil, false
	}
	return o.S3LoadBalancerIds, true
}

// HasS3LoadBalancerIds returns a boolean if a field has been set.
func (o *S3LoadBalancersRemoveReq) HasS3LoadBalancerIds() bool {
	if o != nil && !IsNil(o.S3LoadBalancerIds) {
		return true
	}

	return false
}

// SetS3LoadBalancerIds gets a reference to the given []int64 and assigns it to the S3LoadBalancerIds field.
func (o *S3LoadBalancersRemoveReq) SetS3LoadBalancerIds(v []int64) {
	o.S3LoadBalancerIds = v
}

// GetS3LoadBalancerKeepalivedIds returns the S3LoadBalancerKeepalivedIds field value if set, zero value otherwise.
func (o *S3LoadBalancersRemoveReq) GetS3LoadBalancerKeepalivedIds() []int64 {
	if o == nil || IsNil(o.S3LoadBalancerKeepalivedIds) {
		var ret []int64
		return ret
	}
	return o.S3LoadBalancerKeepalivedIds
}

// GetS3LoadBalancerKeepalivedIdsOk returns a tuple with the S3LoadBalancerKeepalivedIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3LoadBalancersRemoveReq) GetS3LoadBalancerKeepalivedIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.S3LoadBalancerKeepalivedIds) {
		return nil, false
	}
	return o.S3LoadBalancerKeepalivedIds, true
}

// HasS3LoadBalancerKeepalivedIds returns a boolean if a field has been set.
func (o *S3LoadBalancersRemoveReq) HasS3LoadBalancerKeepalivedIds() bool {
	if o != nil && !IsNil(o.S3LoadBalancerKeepalivedIds) {
		return true
	}

	return false
}

// SetS3LoadBalancerKeepalivedIds gets a reference to the given []int64 and assigns it to the S3LoadBalancerKeepalivedIds field.
func (o *S3LoadBalancersRemoveReq) SetS3LoadBalancerKeepalivedIds(v []int64) {
	o.S3LoadBalancerKeepalivedIds = v
}

// GetS3LoadBalancerKeepalivedVips returns the S3LoadBalancerKeepalivedVips field value if set, zero value otherwise.
func (o *S3LoadBalancersRemoveReq) GetS3LoadBalancerKeepalivedVips() []string {
	if o == nil || IsNil(o.S3LoadBalancerKeepalivedVips) {
		var ret []string
		return ret
	}
	return o.S3LoadBalancerKeepalivedVips
}

// GetS3LoadBalancerKeepalivedVipsOk returns a tuple with the S3LoadBalancerKeepalivedVips field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3LoadBalancersRemoveReq) GetS3LoadBalancerKeepalivedVipsOk() ([]string, bool) {
	if o == nil || IsNil(o.S3LoadBalancerKeepalivedVips) {
		return nil, false
	}
	return o.S3LoadBalancerKeepalivedVips, true
}

// HasS3LoadBalancerKeepalivedVips returns a boolean if a field has been set.
func (o *S3LoadBalancersRemoveReq) HasS3LoadBalancerKeepalivedVips() bool {
	if o != nil && !IsNil(o.S3LoadBalancerKeepalivedVips) {
		return true
	}

	return false
}

// SetS3LoadBalancerKeepalivedVips gets a reference to the given []string and assigns it to the S3LoadBalancerKeepalivedVips field.
func (o *S3LoadBalancersRemoveReq) SetS3LoadBalancerKeepalivedVips(v []string) {
	o.S3LoadBalancerKeepalivedVips = v
}

func (o S3LoadBalancersRemoveReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o S3LoadBalancersRemoveReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.S3LoadBalancerIds) {
		toSerialize["s3_load_balancer_ids"] = o.S3LoadBalancerIds
	}
	if !IsNil(o.S3LoadBalancerKeepalivedIds) {
		toSerialize["s3_load_balancer_keepalived_ids"] = o.S3LoadBalancerKeepalivedIds
	}
	if !IsNil(o.S3LoadBalancerKeepalivedVips) {
		toSerialize["s3_load_balancer_keepalived_vips"] = o.S3LoadBalancerKeepalivedVips
	}
	return toSerialize, nil
}

type NullableS3LoadBalancersRemoveReq struct {
	value *S3LoadBalancersRemoveReq
	isSet bool
}

func (v NullableS3LoadBalancersRemoveReq) Get() *S3LoadBalancersRemoveReq {
	return v.value
}

func (v *NullableS3LoadBalancersRemoveReq) Set(val *S3LoadBalancersRemoveReq) {
	v.value = val
	v.isSet = true
}

func (v NullableS3LoadBalancersRemoveReq) IsSet() bool {
	return v.isSet
}

func (v *NullableS3LoadBalancersRemoveReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableS3LoadBalancersRemoveReq(val *S3LoadBalancersRemoveReq) *NullableS3LoadBalancersRemoveReq {
	return &NullableS3LoadBalancersRemoveReq{value: val, isSet: true}
}

func (v NullableS3LoadBalancersRemoveReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableS3LoadBalancersRemoveReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


