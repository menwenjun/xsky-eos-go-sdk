/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BlockVolumeUpdateMigrationReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockVolumeUpdateMigrationReq{}

// BlockVolumeUpdateMigrationReq struct for BlockVolumeUpdateMigrationReq
type BlockVolumeUpdateMigrationReq struct {
	VolumeMigrationJob *BlockVolumeUpdateMigrationReqVolumeMigrationJob `json:"volume_migration_job,omitempty"`
}

// NewBlockVolumeUpdateMigrationReq instantiates a new BlockVolumeUpdateMigrationReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockVolumeUpdateMigrationReq() *BlockVolumeUpdateMigrationReq {
	this := BlockVolumeUpdateMigrationReq{}
	return &this
}

// NewBlockVolumeUpdateMigrationReqWithDefaults instantiates a new BlockVolumeUpdateMigrationReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockVolumeUpdateMigrationReqWithDefaults() *BlockVolumeUpdateMigrationReq {
	this := BlockVolumeUpdateMigrationReq{}
	return &this
}

// GetVolumeMigrationJob returns the VolumeMigrationJob field value if set, zero value otherwise.
func (o *BlockVolumeUpdateMigrationReq) GetVolumeMigrationJob() BlockVolumeUpdateMigrationReqVolumeMigrationJob {
	if o == nil || IsNil(o.VolumeMigrationJob) {
		var ret BlockVolumeUpdateMigrationReqVolumeMigrationJob
		return ret
	}
	return *o.VolumeMigrationJob
}

// GetVolumeMigrationJobOk returns a tuple with the VolumeMigrationJob field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockVolumeUpdateMigrationReq) GetVolumeMigrationJobOk() (*BlockVolumeUpdateMigrationReqVolumeMigrationJob, bool) {
	if o == nil || IsNil(o.VolumeMigrationJob) {
		return nil, false
	}
	return o.VolumeMigrationJob, true
}

// HasVolumeMigrationJob returns a boolean if a field has been set.
func (o *BlockVolumeUpdateMigrationReq) HasVolumeMigrationJob() bool {
	if o != nil && !IsNil(o.VolumeMigrationJob) {
		return true
	}

	return false
}

// SetVolumeMigrationJob gets a reference to the given BlockVolumeUpdateMigrationReqVolumeMigrationJob and assigns it to the VolumeMigrationJob field.
func (o *BlockVolumeUpdateMigrationReq) SetVolumeMigrationJob(v BlockVolumeUpdateMigrationReqVolumeMigrationJob) {
	o.VolumeMigrationJob = &v
}

func (o BlockVolumeUpdateMigrationReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockVolumeUpdateMigrationReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.VolumeMigrationJob) {
		toSerialize["volume_migration_job"] = o.VolumeMigrationJob
	}
	return toSerialize, nil
}

type NullableBlockVolumeUpdateMigrationReq struct {
	value *BlockVolumeUpdateMigrationReq
	isSet bool
}

func (v NullableBlockVolumeUpdateMigrationReq) Get() *BlockVolumeUpdateMigrationReq {
	return v.value
}

func (v *NullableBlockVolumeUpdateMigrationReq) Set(val *BlockVolumeUpdateMigrationReq) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockVolumeUpdateMigrationReq) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockVolumeUpdateMigrationReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockVolumeUpdateMigrationReq(val *BlockVolumeUpdateMigrationReq) *NullableBlockVolumeUpdateMigrationReq {
	return &NullableBlockVolumeUpdateMigrationReq{value: val, isSet: true}
}

func (v NullableBlockVolumeUpdateMigrationReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockVolumeUpdateMigrationReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


