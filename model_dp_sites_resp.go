/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DpSitesResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DpSitesResp{}

// DpSitesResp struct for DpSitesResp
type DpSitesResp struct {
	// data protection sites
	DpSites []DpSite `json:"dp_sites"`
}

type _DpSitesResp DpSitesResp

// NewDpSitesResp instantiates a new DpSitesResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDpSitesResp(dpSites []DpSite) *DpSitesResp {
	this := DpSitesResp{}
	this.DpSites = dpSites
	return &this
}

// NewDpSitesRespWithDefaults instantiates a new DpSitesResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDpSitesRespWithDefaults() *DpSitesResp {
	this := DpSitesResp{}
	return &this
}

// GetDpSites returns the DpSites field value
func (o *DpSitesResp) GetDpSites() []DpSite {
	if o == nil {
		var ret []DpSite
		return ret
	}

	return o.DpSites
}

// GetDpSitesOk returns a tuple with the DpSites field value
// and a boolean to check if the value has been set.
func (o *DpSitesResp) GetDpSitesOk() ([]DpSite, bool) {
	if o == nil {
		return nil, false
	}
	return o.DpSites, true
}

// SetDpSites sets field value
func (o *DpSitesResp) SetDpSites(v []DpSite) {
	o.DpSites = v
}

func (o DpSitesResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DpSitesResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dp_sites"] = o.DpSites
	return toSerialize, nil
}

func (o *DpSitesResp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dp_sites",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDpSitesResp := _DpSitesResp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDpSitesResp)

	if err != nil {
		return err
	}

	*o = DpSitesResp(varDpSitesResp)

	return err
}

type NullableDpSitesResp struct {
	value *DpSitesResp
	isSet bool
}

func (v NullableDpSitesResp) Get() *DpSitesResp {
	return v.value
}

func (v *NullableDpSitesResp) Set(val *DpSitesResp) {
	v.value = val
	v.isSet = true
}

func (v NullableDpSitesResp) IsSet() bool {
	return v.isSet
}

func (v *NullableDpSitesResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDpSitesResp(val *DpSitesResp) *NullableDpSitesResp {
	return &NullableDpSitesResp{value: val, isSet: true}
}

func (v NullableDpSitesResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDpSitesResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


