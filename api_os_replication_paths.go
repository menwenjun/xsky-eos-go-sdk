/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// OsReplicationPathsAPIService OsReplicationPathsAPI service
type OsReplicationPathsAPIService service

type ApiGetOSReplicationPathRequest struct {
	ctx context.Context
	ApiService *OsReplicationPathsAPIService
	pathUuid string
}

func (r ApiGetOSReplicationPathRequest) Execute() (*OSReplicationPathResp, *http.Response, error) {
	return r.ApiService.GetOSReplicationPathExecute(r)
}

/*
GetOSReplicationPath Method for GetOSReplicationPath

Get a os replication path

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pathUuid replication path uuid
 @return ApiGetOSReplicationPathRequest
*/
func (a *OsReplicationPathsAPIService) GetOSReplicationPath(ctx context.Context, pathUuid string) ApiGetOSReplicationPathRequest {
	return ApiGetOSReplicationPathRequest{
		ApiService: a,
		ctx: ctx,
		pathUuid: pathUuid,
	}
}

// Execute executes the request
//  @return OSReplicationPathResp
func (a *OsReplicationPathsAPIService) GetOSReplicationPathExecute(r ApiGetOSReplicationPathRequest) (*OSReplicationPathResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OSReplicationPathResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OsReplicationPathsAPIService.GetOSReplicationPath")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/os-replication-paths/{path_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"path_uuid"+"}", url.PathEscape(parameterValueToString(r.pathUuid, "pathUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListOSReplicationPathsRequest struct {
	ctx context.Context
	ApiService *OsReplicationPathsAPIService
	limit *int64
	offset *int64
	marker *string
	replicationUuid *string
	allowUnknownZone *bool
	clusterId *string
}

// paging param
func (r ApiListOSReplicationPathsRequest) Limit(limit int64) ApiListOSReplicationPathsRequest {
	r.limit = &limit
	return r
}

// paging param
func (r ApiListOSReplicationPathsRequest) Offset(offset int64) ApiListOSReplicationPathsRequest {
	r.offset = &offset
	return r
}

// paging param
func (r ApiListOSReplicationPathsRequest) Marker(marker string) ApiListOSReplicationPathsRequest {
	r.marker = &marker
	return r
}

// os replication uuid
func (r ApiListOSReplicationPathsRequest) ReplicationUuid(replicationUuid string) ApiListOSReplicationPathsRequest {
	r.replicationUuid = &replicationUuid
	return r
}

// allow has nil zone result(default true)
func (r ApiListOSReplicationPathsRequest) AllowUnknownZone(allowUnknownZone bool) ApiListOSReplicationPathsRequest {
	r.allowUnknownZone = &allowUnknownZone
	return r
}

// cluster id
func (r ApiListOSReplicationPathsRequest) ClusterId(clusterId string) ApiListOSReplicationPathsRequest {
	r.clusterId = &clusterId
	return r
}

func (r ApiListOSReplicationPathsRequest) Execute() (*OSReplicationPathsResp, *http.Response, error) {
	return r.ApiService.ListOSReplicationPathsExecute(r)
}

/*
ListOSReplicationPaths Method for ListOSReplicationPaths

List os replication paths

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListOSReplicationPathsRequest
*/
func (a *OsReplicationPathsAPIService) ListOSReplicationPaths(ctx context.Context) ApiListOSReplicationPathsRequest {
	return ApiListOSReplicationPathsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return OSReplicationPathsResp
func (a *OsReplicationPathsAPIService) ListOSReplicationPathsExecute(r ApiListOSReplicationPathsRequest) (*OSReplicationPathsResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OSReplicationPathsResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OsReplicationPathsAPIService.ListOSReplicationPaths")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/os-replication-paths/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.marker != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "marker", r.marker, "form", "")
	}
	if r.replicationUuid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "replication_uuid", r.replicationUuid, "form", "")
	}
	if r.allowUnknownZone != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allow_unknown_zone", r.allowUnknownZone, "form", "")
	}
	if r.clusterId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_id", r.clusterId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
