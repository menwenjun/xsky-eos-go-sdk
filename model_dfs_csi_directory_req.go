/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DfsCSIDirectoryReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsCSIDirectoryReq{}

// DfsCSIDirectoryReq struct for DfsCSIDirectoryReq
type DfsCSIDirectoryReq struct {
	DfsDirectory DfsCSIDirectoryReqDirectory `json:"dfs_directory"`
	DfsQuota *DfsCSIDirectoryReqQuota `json:"dfs_quota,omitempty"`
}

type _DfsCSIDirectoryReq DfsCSIDirectoryReq

// NewDfsCSIDirectoryReq instantiates a new DfsCSIDirectoryReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsCSIDirectoryReq(dfsDirectory DfsCSIDirectoryReqDirectory) *DfsCSIDirectoryReq {
	this := DfsCSIDirectoryReq{}
	this.DfsDirectory = dfsDirectory
	return &this
}

// NewDfsCSIDirectoryReqWithDefaults instantiates a new DfsCSIDirectoryReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsCSIDirectoryReqWithDefaults() *DfsCSIDirectoryReq {
	this := DfsCSIDirectoryReq{}
	return &this
}

// GetDfsDirectory returns the DfsDirectory field value
func (o *DfsCSIDirectoryReq) GetDfsDirectory() DfsCSIDirectoryReqDirectory {
	if o == nil {
		var ret DfsCSIDirectoryReqDirectory
		return ret
	}

	return o.DfsDirectory
}

// GetDfsDirectoryOk returns a tuple with the DfsDirectory field value
// and a boolean to check if the value has been set.
func (o *DfsCSIDirectoryReq) GetDfsDirectoryOk() (*DfsCSIDirectoryReqDirectory, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DfsDirectory, true
}

// SetDfsDirectory sets field value
func (o *DfsCSIDirectoryReq) SetDfsDirectory(v DfsCSIDirectoryReqDirectory) {
	o.DfsDirectory = v
}

// GetDfsQuota returns the DfsQuota field value if set, zero value otherwise.
func (o *DfsCSIDirectoryReq) GetDfsQuota() DfsCSIDirectoryReqQuota {
	if o == nil || IsNil(o.DfsQuota) {
		var ret DfsCSIDirectoryReqQuota
		return ret
	}
	return *o.DfsQuota
}

// GetDfsQuotaOk returns a tuple with the DfsQuota field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsCSIDirectoryReq) GetDfsQuotaOk() (*DfsCSIDirectoryReqQuota, bool) {
	if o == nil || IsNil(o.DfsQuota) {
		return nil, false
	}
	return o.DfsQuota, true
}

// HasDfsQuota returns a boolean if a field has been set.
func (o *DfsCSIDirectoryReq) HasDfsQuota() bool {
	if o != nil && !IsNil(o.DfsQuota) {
		return true
	}

	return false
}

// SetDfsQuota gets a reference to the given DfsCSIDirectoryReqQuota and assigns it to the DfsQuota field.
func (o *DfsCSIDirectoryReq) SetDfsQuota(v DfsCSIDirectoryReqQuota) {
	o.DfsQuota = &v
}

func (o DfsCSIDirectoryReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsCSIDirectoryReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dfs_directory"] = o.DfsDirectory
	if !IsNil(o.DfsQuota) {
		toSerialize["dfs_quota"] = o.DfsQuota
	}
	return toSerialize, nil
}

func (o *DfsCSIDirectoryReq) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dfs_directory",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDfsCSIDirectoryReq := _DfsCSIDirectoryReq{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDfsCSIDirectoryReq)

	if err != nil {
		return err
	}

	*o = DfsCSIDirectoryReq(varDfsCSIDirectoryReq)

	return err
}

type NullableDfsCSIDirectoryReq struct {
	value *DfsCSIDirectoryReq
	isSet bool
}

func (v NullableDfsCSIDirectoryReq) Get() *DfsCSIDirectoryReq {
	return v.value
}

func (v *NullableDfsCSIDirectoryReq) Set(val *DfsCSIDirectoryReq) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsCSIDirectoryReq) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsCSIDirectoryReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsCSIDirectoryReq(val *DfsCSIDirectoryReq) *NullableDfsCSIDirectoryReq {
	return &NullableDfsCSIDirectoryReq{value: val, isSet: true}
}

func (v NullableDfsCSIDirectoryReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsCSIDirectoryReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


