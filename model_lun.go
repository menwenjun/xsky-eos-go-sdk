/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the Lun type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Lun{}

// Lun Lun defines lun id +X:model:generate +X:benchmark:
type Lun struct {
	AccessPath *AccessPathNestview `json:"access_path,omitempty"`
	Cluster *ClusterNestview `json:"cluster,omitempty"`
	Create *time.Time `json:"create,omitempty"`
	Id *int64 `json:"id,omitempty"`
	LunId *int64 `json:"lun_id,omitempty"`
	Volume *VolumeNestview `json:"volume,omitempty"`
}

// NewLun instantiates a new Lun object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLun() *Lun {
	this := Lun{}
	return &this
}

// NewLunWithDefaults instantiates a new Lun object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLunWithDefaults() *Lun {
	this := Lun{}
	return &this
}

// GetAccessPath returns the AccessPath field value if set, zero value otherwise.
func (o *Lun) GetAccessPath() AccessPathNestview {
	if o == nil || IsNil(o.AccessPath) {
		var ret AccessPathNestview
		return ret
	}
	return *o.AccessPath
}

// GetAccessPathOk returns a tuple with the AccessPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lun) GetAccessPathOk() (*AccessPathNestview, bool) {
	if o == nil || IsNil(o.AccessPath) {
		return nil, false
	}
	return o.AccessPath, true
}

// HasAccessPath returns a boolean if a field has been set.
func (o *Lun) HasAccessPath() bool {
	if o != nil && !IsNil(o.AccessPath) {
		return true
	}

	return false
}

// SetAccessPath gets a reference to the given AccessPathNestview and assigns it to the AccessPath field.
func (o *Lun) SetAccessPath(v AccessPathNestview) {
	o.AccessPath = &v
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *Lun) GetCluster() ClusterNestview {
	if o == nil || IsNil(o.Cluster) {
		var ret ClusterNestview
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lun) GetClusterOk() (*ClusterNestview, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *Lun) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given ClusterNestview and assigns it to the Cluster field.
func (o *Lun) SetCluster(v ClusterNestview) {
	o.Cluster = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *Lun) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lun) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *Lun) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *Lun) SetCreate(v time.Time) {
	o.Create = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Lun) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lun) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Lun) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Lun) SetId(v int64) {
	o.Id = &v
}

// GetLunId returns the LunId field value if set, zero value otherwise.
func (o *Lun) GetLunId() int64 {
	if o == nil || IsNil(o.LunId) {
		var ret int64
		return ret
	}
	return *o.LunId
}

// GetLunIdOk returns a tuple with the LunId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lun) GetLunIdOk() (*int64, bool) {
	if o == nil || IsNil(o.LunId) {
		return nil, false
	}
	return o.LunId, true
}

// HasLunId returns a boolean if a field has been set.
func (o *Lun) HasLunId() bool {
	if o != nil && !IsNil(o.LunId) {
		return true
	}

	return false
}

// SetLunId gets a reference to the given int64 and assigns it to the LunId field.
func (o *Lun) SetLunId(v int64) {
	o.LunId = &v
}

// GetVolume returns the Volume field value if set, zero value otherwise.
func (o *Lun) GetVolume() VolumeNestview {
	if o == nil || IsNil(o.Volume) {
		var ret VolumeNestview
		return ret
	}
	return *o.Volume
}

// GetVolumeOk returns a tuple with the Volume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lun) GetVolumeOk() (*VolumeNestview, bool) {
	if o == nil || IsNil(o.Volume) {
		return nil, false
	}
	return o.Volume, true
}

// HasVolume returns a boolean if a field has been set.
func (o *Lun) HasVolume() bool {
	if o != nil && !IsNil(o.Volume) {
		return true
	}

	return false
}

// SetVolume gets a reference to the given VolumeNestview and assigns it to the Volume field.
func (o *Lun) SetVolume(v VolumeNestview) {
	o.Volume = &v
}

func (o Lun) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Lun) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccessPath) {
		toSerialize["access_path"] = o.AccessPath
	}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LunId) {
		toSerialize["lun_id"] = o.LunId
	}
	if !IsNil(o.Volume) {
		toSerialize["volume"] = o.Volume
	}
	return toSerialize, nil
}

type NullableLun struct {
	value *Lun
	isSet bool
}

func (v NullableLun) Get() *Lun {
	return v.value
}

func (v *NullableLun) Set(val *Lun) {
	v.value = val
	v.isSet = true
}

func (v NullableLun) IsSet() bool {
	return v.isSet
}

func (v *NullableLun) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLun(val *Lun) *NullableLun {
	return &NullableLun{value: val, isSet: true}
}

func (v NullableLun) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLun) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


