/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the S3LoadBalancerRemoveServiceReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &S3LoadBalancerRemoveServiceReq{}

// S3LoadBalancerRemoveServiceReq struct for S3LoadBalancerRemoveServiceReq
type S3LoadBalancerRemoveServiceReq struct {
	RemoveRules []S3LoadBalancerRemoveServiceReqRemoveRulesElt `json:"remove_rules"`
}

type _S3LoadBalancerRemoveServiceReq S3LoadBalancerRemoveServiceReq

// NewS3LoadBalancerRemoveServiceReq instantiates a new S3LoadBalancerRemoveServiceReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewS3LoadBalancerRemoveServiceReq(removeRules []S3LoadBalancerRemoveServiceReqRemoveRulesElt) *S3LoadBalancerRemoveServiceReq {
	this := S3LoadBalancerRemoveServiceReq{}
	this.RemoveRules = removeRules
	return &this
}

// NewS3LoadBalancerRemoveServiceReqWithDefaults instantiates a new S3LoadBalancerRemoveServiceReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewS3LoadBalancerRemoveServiceReqWithDefaults() *S3LoadBalancerRemoveServiceReq {
	this := S3LoadBalancerRemoveServiceReq{}
	return &this
}

// GetRemoveRules returns the RemoveRules field value
func (o *S3LoadBalancerRemoveServiceReq) GetRemoveRules() []S3LoadBalancerRemoveServiceReqRemoveRulesElt {
	if o == nil {
		var ret []S3LoadBalancerRemoveServiceReqRemoveRulesElt
		return ret
	}

	return o.RemoveRules
}

// GetRemoveRulesOk returns a tuple with the RemoveRules field value
// and a boolean to check if the value has been set.
func (o *S3LoadBalancerRemoveServiceReq) GetRemoveRulesOk() ([]S3LoadBalancerRemoveServiceReqRemoveRulesElt, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemoveRules, true
}

// SetRemoveRules sets field value
func (o *S3LoadBalancerRemoveServiceReq) SetRemoveRules(v []S3LoadBalancerRemoveServiceReqRemoveRulesElt) {
	o.RemoveRules = v
}

func (o S3LoadBalancerRemoveServiceReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o S3LoadBalancerRemoveServiceReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["remove_rules"] = o.RemoveRules
	return toSerialize, nil
}

func (o *S3LoadBalancerRemoveServiceReq) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"remove_rules",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varS3LoadBalancerRemoveServiceReq := _S3LoadBalancerRemoveServiceReq{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varS3LoadBalancerRemoveServiceReq)

	if err != nil {
		return err
	}

	*o = S3LoadBalancerRemoveServiceReq(varS3LoadBalancerRemoveServiceReq)

	return err
}

type NullableS3LoadBalancerRemoveServiceReq struct {
	value *S3LoadBalancerRemoveServiceReq
	isSet bool
}

func (v NullableS3LoadBalancerRemoveServiceReq) Get() *S3LoadBalancerRemoveServiceReq {
	return v.value
}

func (v *NullableS3LoadBalancerRemoveServiceReq) Set(val *S3LoadBalancerRemoveServiceReq) {
	v.value = val
	v.isSet = true
}

func (v NullableS3LoadBalancerRemoveServiceReq) IsSet() bool {
	return v.isSet
}

func (v *NullableS3LoadBalancerRemoveServiceReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableS3LoadBalancerRemoveServiceReq(val *S3LoadBalancerRemoveServiceReq) *NullableS3LoadBalancerRemoveServiceReq {
	return &NullableS3LoadBalancerRemoveServiceReq{value: val, isSet: true}
}

func (v NullableS3LoadBalancerRemoveServiceReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableS3LoadBalancerRemoveServiceReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


