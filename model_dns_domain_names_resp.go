/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DNSDomainNamesResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DNSDomainNamesResp{}

// DNSDomainNamesResp struct for DNSDomainNamesResp
type DNSDomainNamesResp struct {
	// dns domain name list
	DnsDomainNames []DNSDomainName `json:"dns_domain_names,omitempty"`
}

// NewDNSDomainNamesResp instantiates a new DNSDomainNamesResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDNSDomainNamesResp() *DNSDomainNamesResp {
	this := DNSDomainNamesResp{}
	return &this
}

// NewDNSDomainNamesRespWithDefaults instantiates a new DNSDomainNamesResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDNSDomainNamesRespWithDefaults() *DNSDomainNamesResp {
	this := DNSDomainNamesResp{}
	return &this
}

// GetDnsDomainNames returns the DnsDomainNames field value if set, zero value otherwise.
func (o *DNSDomainNamesResp) GetDnsDomainNames() []DNSDomainName {
	if o == nil || IsNil(o.DnsDomainNames) {
		var ret []DNSDomainName
		return ret
	}
	return o.DnsDomainNames
}

// GetDnsDomainNamesOk returns a tuple with the DnsDomainNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSDomainNamesResp) GetDnsDomainNamesOk() ([]DNSDomainName, bool) {
	if o == nil || IsNil(o.DnsDomainNames) {
		return nil, false
	}
	return o.DnsDomainNames, true
}

// HasDnsDomainNames returns a boolean if a field has been set.
func (o *DNSDomainNamesResp) HasDnsDomainNames() bool {
	if o != nil && !IsNil(o.DnsDomainNames) {
		return true
	}

	return false
}

// SetDnsDomainNames gets a reference to the given []DNSDomainName and assigns it to the DnsDomainNames field.
func (o *DNSDomainNamesResp) SetDnsDomainNames(v []DNSDomainName) {
	o.DnsDomainNames = v
}

func (o DNSDomainNamesResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DNSDomainNamesResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DnsDomainNames) {
		toSerialize["dns_domain_names"] = o.DnsDomainNames
	}
	return toSerialize, nil
}

type NullableDNSDomainNamesResp struct {
	value *DNSDomainNamesResp
	isSet bool
}

func (v NullableDNSDomainNamesResp) Get() *DNSDomainNamesResp {
	return v.value
}

func (v *NullableDNSDomainNamesResp) Set(val *DNSDomainNamesResp) {
	v.value = val
	v.isSet = true
}

func (v NullableDNSDomainNamesResp) IsSet() bool {
	return v.isSet
}

func (v *NullableDNSDomainNamesResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDNSDomainNamesResp(val *DNSDomainNamesResp) *NullableDNSDomainNamesResp {
	return &NullableDNSDomainNamesResp{value: val, isSet: true}
}

func (v NullableDNSDomainNamesResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDNSDomainNamesResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


