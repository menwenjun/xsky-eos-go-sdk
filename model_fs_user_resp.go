/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FSUserResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FSUserResp{}

// FSUserResp struct for FSUserResp
type FSUserResp struct {
	FsUser FSUser `json:"fs_user"`
}

type _FSUserResp FSUserResp

// NewFSUserResp instantiates a new FSUserResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFSUserResp(fsUser FSUser) *FSUserResp {
	this := FSUserResp{}
	this.FsUser = fsUser
	return &this
}

// NewFSUserRespWithDefaults instantiates a new FSUserResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFSUserRespWithDefaults() *FSUserResp {
	this := FSUserResp{}
	return &this
}

// GetFsUser returns the FsUser field value
func (o *FSUserResp) GetFsUser() FSUser {
	if o == nil {
		var ret FSUser
		return ret
	}

	return o.FsUser
}

// GetFsUserOk returns a tuple with the FsUser field value
// and a boolean to check if the value has been set.
func (o *FSUserResp) GetFsUserOk() (*FSUser, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FsUser, true
}

// SetFsUser sets field value
func (o *FSUserResp) SetFsUser(v FSUser) {
	o.FsUser = v
}

func (o FSUserResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FSUserResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fs_user"] = o.FsUser
	return toSerialize, nil
}

func (o *FSUserResp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fs_user",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFSUserResp := _FSUserResp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFSUserResp)

	if err != nil {
		return err
	}

	*o = FSUserResp(varFSUserResp)

	return err
}

type NullableFSUserResp struct {
	value *FSUserResp
	isSet bool
}

func (v NullableFSUserResp) Get() *FSUserResp {
	return v.value
}

func (v *NullableFSUserResp) Set(val *FSUserResp) {
	v.value = val
	v.isSet = true
}

func (v NullableFSUserResp) IsSet() bool {
	return v.isSet
}

func (v *NullableFSUserResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFSUserResp(val *FSUserResp) *NullableFSUserResp {
	return &NullableFSUserResp{value: val, isSet: true}
}

func (v NullableFSUserResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFSUserResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


