/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the LifecycleRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LifecycleRule{}

// LifecycleRule LifecycleRule is the details of object storage lifecycle rule
type LifecycleRule struct {
	Enabled *bool `json:"enabled,omitempty"`
	Expiration *LifecycleExpiration `json:"expiration,omitempty"`
	Name *string `json:"name,omitempty"`
	Prefix *string `json:"prefix,omitempty"`
	Transitions []LifecycleTransition `json:"transitions,omitempty"`
}

// NewLifecycleRule instantiates a new LifecycleRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLifecycleRule() *LifecycleRule {
	this := LifecycleRule{}
	return &this
}

// NewLifecycleRuleWithDefaults instantiates a new LifecycleRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLifecycleRuleWithDefaults() *LifecycleRule {
	this := LifecycleRule{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *LifecycleRule) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LifecycleRule) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *LifecycleRule) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *LifecycleRule) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetExpiration returns the Expiration field value if set, zero value otherwise.
func (o *LifecycleRule) GetExpiration() LifecycleExpiration {
	if o == nil || IsNil(o.Expiration) {
		var ret LifecycleExpiration
		return ret
	}
	return *o.Expiration
}

// GetExpirationOk returns a tuple with the Expiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LifecycleRule) GetExpirationOk() (*LifecycleExpiration, bool) {
	if o == nil || IsNil(o.Expiration) {
		return nil, false
	}
	return o.Expiration, true
}

// HasExpiration returns a boolean if a field has been set.
func (o *LifecycleRule) HasExpiration() bool {
	if o != nil && !IsNil(o.Expiration) {
		return true
	}

	return false
}

// SetExpiration gets a reference to the given LifecycleExpiration and assigns it to the Expiration field.
func (o *LifecycleRule) SetExpiration(v LifecycleExpiration) {
	o.Expiration = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *LifecycleRule) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LifecycleRule) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *LifecycleRule) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *LifecycleRule) SetName(v string) {
	o.Name = &v
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *LifecycleRule) GetPrefix() string {
	if o == nil || IsNil(o.Prefix) {
		var ret string
		return ret
	}
	return *o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LifecycleRule) GetPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.Prefix) {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *LifecycleRule) HasPrefix() bool {
	if o != nil && !IsNil(o.Prefix) {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given string and assigns it to the Prefix field.
func (o *LifecycleRule) SetPrefix(v string) {
	o.Prefix = &v
}

// GetTransitions returns the Transitions field value if set, zero value otherwise.
func (o *LifecycleRule) GetTransitions() []LifecycleTransition {
	if o == nil || IsNil(o.Transitions) {
		var ret []LifecycleTransition
		return ret
	}
	return o.Transitions
}

// GetTransitionsOk returns a tuple with the Transitions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LifecycleRule) GetTransitionsOk() ([]LifecycleTransition, bool) {
	if o == nil || IsNil(o.Transitions) {
		return nil, false
	}
	return o.Transitions, true
}

// HasTransitions returns a boolean if a field has been set.
func (o *LifecycleRule) HasTransitions() bool {
	if o != nil && !IsNil(o.Transitions) {
		return true
	}

	return false
}

// SetTransitions gets a reference to the given []LifecycleTransition and assigns it to the Transitions field.
func (o *LifecycleRule) SetTransitions(v []LifecycleTransition) {
	o.Transitions = v
}

func (o LifecycleRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LifecycleRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Expiration) {
		toSerialize["expiration"] = o.Expiration
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Prefix) {
		toSerialize["prefix"] = o.Prefix
	}
	if !IsNil(o.Transitions) {
		toSerialize["transitions"] = o.Transitions
	}
	return toSerialize, nil
}

type NullableLifecycleRule struct {
	value *LifecycleRule
	isSet bool
}

func (v NullableLifecycleRule) Get() *LifecycleRule {
	return v.value
}

func (v *NullableLifecycleRule) Set(val *LifecycleRule) {
	v.value = val
	v.isSet = true
}

func (v NullableLifecycleRule) IsSet() bool {
	return v.isSet
}

func (v *NullableLifecycleRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLifecycleRule(val *LifecycleRule) *NullableLifecycleRule {
	return &NullableLifecycleRule{value: val, isSet: true}
}

func (v NullableLifecycleRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLifecycleRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


