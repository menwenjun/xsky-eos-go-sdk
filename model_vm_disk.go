/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the VMDisk type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VMDisk{}

// VMDisk VMDisk defines disk of vm
type VMDisk struct {
	Cluster *ClusterNestview `json:"cluster,omitempty"`
	Disk *DiskNestview `json:"disk,omitempty"`
	Id *int64 `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
	Vm *VirtualMachineNestview `json:"vm,omitempty"`
	Volume *VolumeNestview `json:"volume,omitempty"`
}

// NewVMDisk instantiates a new VMDisk object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVMDisk() *VMDisk {
	this := VMDisk{}
	return &this
}

// NewVMDiskWithDefaults instantiates a new VMDisk object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVMDiskWithDefaults() *VMDisk {
	this := VMDisk{}
	return &this
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *VMDisk) GetCluster() ClusterNestview {
	if o == nil || IsNil(o.Cluster) {
		var ret ClusterNestview
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMDisk) GetClusterOk() (*ClusterNestview, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *VMDisk) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given ClusterNestview and assigns it to the Cluster field.
func (o *VMDisk) SetCluster(v ClusterNestview) {
	o.Cluster = &v
}

// GetDisk returns the Disk field value if set, zero value otherwise.
func (o *VMDisk) GetDisk() DiskNestview {
	if o == nil || IsNil(o.Disk) {
		var ret DiskNestview
		return ret
	}
	return *o.Disk
}

// GetDiskOk returns a tuple with the Disk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMDisk) GetDiskOk() (*DiskNestview, bool) {
	if o == nil || IsNil(o.Disk) {
		return nil, false
	}
	return o.Disk, true
}

// HasDisk returns a boolean if a field has been set.
func (o *VMDisk) HasDisk() bool {
	if o != nil && !IsNil(o.Disk) {
		return true
	}

	return false
}

// SetDisk gets a reference to the given DiskNestview and assigns it to the Disk field.
func (o *VMDisk) SetDisk(v DiskNestview) {
	o.Disk = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *VMDisk) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMDisk) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *VMDisk) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *VMDisk) SetId(v int64) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *VMDisk) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMDisk) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *VMDisk) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *VMDisk) SetType(v string) {
	o.Type = &v
}

// GetVm returns the Vm field value if set, zero value otherwise.
func (o *VMDisk) GetVm() VirtualMachineNestview {
	if o == nil || IsNil(o.Vm) {
		var ret VirtualMachineNestview
		return ret
	}
	return *o.Vm
}

// GetVmOk returns a tuple with the Vm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMDisk) GetVmOk() (*VirtualMachineNestview, bool) {
	if o == nil || IsNil(o.Vm) {
		return nil, false
	}
	return o.Vm, true
}

// HasVm returns a boolean if a field has been set.
func (o *VMDisk) HasVm() bool {
	if o != nil && !IsNil(o.Vm) {
		return true
	}

	return false
}

// SetVm gets a reference to the given VirtualMachineNestview and assigns it to the Vm field.
func (o *VMDisk) SetVm(v VirtualMachineNestview) {
	o.Vm = &v
}

// GetVolume returns the Volume field value if set, zero value otherwise.
func (o *VMDisk) GetVolume() VolumeNestview {
	if o == nil || IsNil(o.Volume) {
		var ret VolumeNestview
		return ret
	}
	return *o.Volume
}

// GetVolumeOk returns a tuple with the Volume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMDisk) GetVolumeOk() (*VolumeNestview, bool) {
	if o == nil || IsNil(o.Volume) {
		return nil, false
	}
	return o.Volume, true
}

// HasVolume returns a boolean if a field has been set.
func (o *VMDisk) HasVolume() bool {
	if o != nil && !IsNil(o.Volume) {
		return true
	}

	return false
}

// SetVolume gets a reference to the given VolumeNestview and assigns it to the Volume field.
func (o *VMDisk) SetVolume(v VolumeNestview) {
	o.Volume = &v
}

func (o VMDisk) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VMDisk) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !IsNil(o.Disk) {
		toSerialize["disk"] = o.Disk
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Vm) {
		toSerialize["vm"] = o.Vm
	}
	if !IsNil(o.Volume) {
		toSerialize["volume"] = o.Volume
	}
	return toSerialize, nil
}

type NullableVMDisk struct {
	value *VMDisk
	isSet bool
}

func (v NullableVMDisk) Get() *VMDisk {
	return v.value
}

func (v *NullableVMDisk) Set(val *VMDisk) {
	v.value = val
	v.isSet = true
}

func (v NullableVMDisk) IsSet() bool {
	return v.isSet
}

func (v *NullableVMDisk) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVMDisk(val *VMDisk) *NullableVMDisk {
	return &NullableVMDisk{value: val, isSet: true}
}

func (v NullableVMDisk) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVMDisk) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


