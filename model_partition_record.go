/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the PartitionRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PartitionRecord{}

// PartitionRecord PartitionRecord combines PartitionStat and Record as api response
type PartitionRecord struct {
	ActionStatus *string `json:"action_status,omitempty"`
	Cluster *ClusterNestview `json:"cluster,omitempty"`
	Create *time.Time `json:"create,omitempty"`
	Disk *DiskNestview `json:"disk,omitempty"`
	Id *int64 `json:"id,omitempty"`
	OmapByte *int64 `json:"omap_byte,omitempty"`
	// omap part path
	OmapDevicePath *string `json:"omap_device_path,omitempty"`
	OspMetadataCluster *OspMetadataCluster `json:"osp_metadata_cluster,omitempty"`
	// part path, generated from part num and disk device
	Path *string `json:"path,omitempty"`
	Size *int64 `json:"size,omitempty"`
	Status *string `json:"status,omitempty"`
	Type *string `json:"type,omitempty"`
	Update *time.Time `json:"update,omitempty"`
	Used *bool `json:"used,omitempty"`
	Uuid *string `json:"uuid,omitempty"`
	Version *int64 `json:"version,omitempty"`
	Samples []PartitionStat `json:"samples,omitempty"`
}

// NewPartitionRecord instantiates a new PartitionRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPartitionRecord() *PartitionRecord {
	this := PartitionRecord{}
	return &this
}

// NewPartitionRecordWithDefaults instantiates a new PartitionRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPartitionRecordWithDefaults() *PartitionRecord {
	this := PartitionRecord{}
	return &this
}

// GetActionStatus returns the ActionStatus field value if set, zero value otherwise.
func (o *PartitionRecord) GetActionStatus() string {
	if o == nil || IsNil(o.ActionStatus) {
		var ret string
		return ret
	}
	return *o.ActionStatus
}

// GetActionStatusOk returns a tuple with the ActionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionRecord) GetActionStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ActionStatus) {
		return nil, false
	}
	return o.ActionStatus, true
}

// HasActionStatus returns a boolean if a field has been set.
func (o *PartitionRecord) HasActionStatus() bool {
	if o != nil && !IsNil(o.ActionStatus) {
		return true
	}

	return false
}

// SetActionStatus gets a reference to the given string and assigns it to the ActionStatus field.
func (o *PartitionRecord) SetActionStatus(v string) {
	o.ActionStatus = &v
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *PartitionRecord) GetCluster() ClusterNestview {
	if o == nil || IsNil(o.Cluster) {
		var ret ClusterNestview
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionRecord) GetClusterOk() (*ClusterNestview, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *PartitionRecord) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given ClusterNestview and assigns it to the Cluster field.
func (o *PartitionRecord) SetCluster(v ClusterNestview) {
	o.Cluster = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *PartitionRecord) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionRecord) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *PartitionRecord) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *PartitionRecord) SetCreate(v time.Time) {
	o.Create = &v
}

// GetDisk returns the Disk field value if set, zero value otherwise.
func (o *PartitionRecord) GetDisk() DiskNestview {
	if o == nil || IsNil(o.Disk) {
		var ret DiskNestview
		return ret
	}
	return *o.Disk
}

// GetDiskOk returns a tuple with the Disk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionRecord) GetDiskOk() (*DiskNestview, bool) {
	if o == nil || IsNil(o.Disk) {
		return nil, false
	}
	return o.Disk, true
}

// HasDisk returns a boolean if a field has been set.
func (o *PartitionRecord) HasDisk() bool {
	if o != nil && !IsNil(o.Disk) {
		return true
	}

	return false
}

// SetDisk gets a reference to the given DiskNestview and assigns it to the Disk field.
func (o *PartitionRecord) SetDisk(v DiskNestview) {
	o.Disk = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PartitionRecord) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionRecord) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PartitionRecord) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *PartitionRecord) SetId(v int64) {
	o.Id = &v
}

// GetOmapByte returns the OmapByte field value if set, zero value otherwise.
func (o *PartitionRecord) GetOmapByte() int64 {
	if o == nil || IsNil(o.OmapByte) {
		var ret int64
		return ret
	}
	return *o.OmapByte
}

// GetOmapByteOk returns a tuple with the OmapByte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionRecord) GetOmapByteOk() (*int64, bool) {
	if o == nil || IsNil(o.OmapByte) {
		return nil, false
	}
	return o.OmapByte, true
}

// HasOmapByte returns a boolean if a field has been set.
func (o *PartitionRecord) HasOmapByte() bool {
	if o != nil && !IsNil(o.OmapByte) {
		return true
	}

	return false
}

// SetOmapByte gets a reference to the given int64 and assigns it to the OmapByte field.
func (o *PartitionRecord) SetOmapByte(v int64) {
	o.OmapByte = &v
}

// GetOmapDevicePath returns the OmapDevicePath field value if set, zero value otherwise.
func (o *PartitionRecord) GetOmapDevicePath() string {
	if o == nil || IsNil(o.OmapDevicePath) {
		var ret string
		return ret
	}
	return *o.OmapDevicePath
}

// GetOmapDevicePathOk returns a tuple with the OmapDevicePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionRecord) GetOmapDevicePathOk() (*string, bool) {
	if o == nil || IsNil(o.OmapDevicePath) {
		return nil, false
	}
	return o.OmapDevicePath, true
}

// HasOmapDevicePath returns a boolean if a field has been set.
func (o *PartitionRecord) HasOmapDevicePath() bool {
	if o != nil && !IsNil(o.OmapDevicePath) {
		return true
	}

	return false
}

// SetOmapDevicePath gets a reference to the given string and assigns it to the OmapDevicePath field.
func (o *PartitionRecord) SetOmapDevicePath(v string) {
	o.OmapDevicePath = &v
}

// GetOspMetadataCluster returns the OspMetadataCluster field value if set, zero value otherwise.
func (o *PartitionRecord) GetOspMetadataCluster() OspMetadataCluster {
	if o == nil || IsNil(o.OspMetadataCluster) {
		var ret OspMetadataCluster
		return ret
	}
	return *o.OspMetadataCluster
}

// GetOspMetadataClusterOk returns a tuple with the OspMetadataCluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionRecord) GetOspMetadataClusterOk() (*OspMetadataCluster, bool) {
	if o == nil || IsNil(o.OspMetadataCluster) {
		return nil, false
	}
	return o.OspMetadataCluster, true
}

// HasOspMetadataCluster returns a boolean if a field has been set.
func (o *PartitionRecord) HasOspMetadataCluster() bool {
	if o != nil && !IsNil(o.OspMetadataCluster) {
		return true
	}

	return false
}

// SetOspMetadataCluster gets a reference to the given OspMetadataCluster and assigns it to the OspMetadataCluster field.
func (o *PartitionRecord) SetOspMetadataCluster(v OspMetadataCluster) {
	o.OspMetadataCluster = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *PartitionRecord) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionRecord) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *PartitionRecord) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *PartitionRecord) SetPath(v string) {
	o.Path = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *PartitionRecord) GetSize() int64 {
	if o == nil || IsNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionRecord) GetSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *PartitionRecord) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *PartitionRecord) SetSize(v int64) {
	o.Size = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *PartitionRecord) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionRecord) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *PartitionRecord) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *PartitionRecord) SetStatus(v string) {
	o.Status = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PartitionRecord) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionRecord) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PartitionRecord) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PartitionRecord) SetType(v string) {
	o.Type = &v
}

// GetUpdate returns the Update field value if set, zero value otherwise.
func (o *PartitionRecord) GetUpdate() time.Time {
	if o == nil || IsNil(o.Update) {
		var ret time.Time
		return ret
	}
	return *o.Update
}

// GetUpdateOk returns a tuple with the Update field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionRecord) GetUpdateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Update) {
		return nil, false
	}
	return o.Update, true
}

// HasUpdate returns a boolean if a field has been set.
func (o *PartitionRecord) HasUpdate() bool {
	if o != nil && !IsNil(o.Update) {
		return true
	}

	return false
}

// SetUpdate gets a reference to the given time.Time and assigns it to the Update field.
func (o *PartitionRecord) SetUpdate(v time.Time) {
	o.Update = &v
}

// GetUsed returns the Used field value if set, zero value otherwise.
func (o *PartitionRecord) GetUsed() bool {
	if o == nil || IsNil(o.Used) {
		var ret bool
		return ret
	}
	return *o.Used
}

// GetUsedOk returns a tuple with the Used field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionRecord) GetUsedOk() (*bool, bool) {
	if o == nil || IsNil(o.Used) {
		return nil, false
	}
	return o.Used, true
}

// HasUsed returns a boolean if a field has been set.
func (o *PartitionRecord) HasUsed() bool {
	if o != nil && !IsNil(o.Used) {
		return true
	}

	return false
}

// SetUsed gets a reference to the given bool and assigns it to the Used field.
func (o *PartitionRecord) SetUsed(v bool) {
	o.Used = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *PartitionRecord) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionRecord) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *PartitionRecord) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *PartitionRecord) SetUuid(v string) {
	o.Uuid = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *PartitionRecord) GetVersion() int64 {
	if o == nil || IsNil(o.Version) {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionRecord) GetVersionOk() (*int64, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *PartitionRecord) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *PartitionRecord) SetVersion(v int64) {
	o.Version = &v
}

// GetSamples returns the Samples field value if set, zero value otherwise.
func (o *PartitionRecord) GetSamples() []PartitionStat {
	if o == nil || IsNil(o.Samples) {
		var ret []PartitionStat
		return ret
	}
	return o.Samples
}

// GetSamplesOk returns a tuple with the Samples field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionRecord) GetSamplesOk() ([]PartitionStat, bool) {
	if o == nil || IsNil(o.Samples) {
		return nil, false
	}
	return o.Samples, true
}

// HasSamples returns a boolean if a field has been set.
func (o *PartitionRecord) HasSamples() bool {
	if o != nil && !IsNil(o.Samples) {
		return true
	}

	return false
}

// SetSamples gets a reference to the given []PartitionStat and assigns it to the Samples field.
func (o *PartitionRecord) SetSamples(v []PartitionStat) {
	o.Samples = v
}

func (o PartitionRecord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PartitionRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActionStatus) {
		toSerialize["action_status"] = o.ActionStatus
	}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.Disk) {
		toSerialize["disk"] = o.Disk
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.OmapByte) {
		toSerialize["omap_byte"] = o.OmapByte
	}
	if !IsNil(o.OmapDevicePath) {
		toSerialize["omap_device_path"] = o.OmapDevicePath
	}
	if !IsNil(o.OspMetadataCluster) {
		toSerialize["osp_metadata_cluster"] = o.OspMetadataCluster
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Update) {
		toSerialize["update"] = o.Update
	}
	if !IsNil(o.Used) {
		toSerialize["used"] = o.Used
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Samples) {
		toSerialize["samples"] = o.Samples
	}
	return toSerialize, nil
}

type NullablePartitionRecord struct {
	value *PartitionRecord
	isSet bool
}

func (v NullablePartitionRecord) Get() *PartitionRecord {
	return v.value
}

func (v *NullablePartitionRecord) Set(val *PartitionRecord) {
	v.value = val
	v.isSet = true
}

func (v NullablePartitionRecord) IsSet() bool {
	return v.isSet
}

func (v *NullablePartitionRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePartitionRecord(val *PartitionRecord) *NullablePartitionRecord {
	return &NullablePartitionRecord{value: val, isSet: true}
}

func (v NullablePartitionRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePartitionRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


