/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DfsHdfsesAPIService DfsHdfsesAPI service
type DfsHdfsesAPIService service

type ApiAddDfsHdfsACLsRequest struct {
	ctx context.Context
	ApiService *DfsHdfsesAPIService
	dfsHdfsId int64
	body *DfsHdfsAddACLsReq
}

// dfs hdfs info
func (r ApiAddDfsHdfsACLsRequest) Body(body DfsHdfsAddACLsReq) ApiAddDfsHdfsACLsRequest {
	r.body = &body
	return r
}

func (r ApiAddDfsHdfsACLsRequest) Execute() (*DfsHdfsResp, *http.Response, error) {
	return r.ApiService.AddDfsHdfsACLsExecute(r)
}

/*
AddDfsHdfsACLs Method for AddDfsHdfsACLs

add dfs hdfs acls

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dfsHdfsId hdfs id
 @return ApiAddDfsHdfsACLsRequest
*/
func (a *DfsHdfsesAPIService) AddDfsHdfsACLs(ctx context.Context, dfsHdfsId int64) ApiAddDfsHdfsACLsRequest {
	return ApiAddDfsHdfsACLsRequest{
		ApiService: a,
		ctx: ctx,
		dfsHdfsId: dfsHdfsId,
	}
}

// Execute executes the request
//  @return DfsHdfsResp
func (a *DfsHdfsesAPIService) AddDfsHdfsACLsExecute(r ApiAddDfsHdfsACLsRequest) (*DfsHdfsResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsHdfsResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsHdfsesAPIService.AddDfsHdfsACLs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-hdfses/{dfs_hdfs_id}:add-acls"
	localVarPath = strings.Replace(localVarPath, "{"+"dfs_hdfs_id"+"}", url.PathEscape(parameterValueToString(r.dfsHdfsId, "dfsHdfsId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAddDfsHdfsIPWhiteListsRequest struct {
	ctx context.Context
	ApiService *DfsHdfsesAPIService
	dfsHdfsId int64
	body *DfsHdfsAddIPWhiteListReq
}

// dfs hdfs info
func (r ApiAddDfsHdfsIPWhiteListsRequest) Body(body DfsHdfsAddIPWhiteListReq) ApiAddDfsHdfsIPWhiteListsRequest {
	r.body = &body
	return r
}

func (r ApiAddDfsHdfsIPWhiteListsRequest) Execute() (*DfsHdfsResp, *http.Response, error) {
	return r.ApiService.AddDfsHdfsIPWhiteListsExecute(r)
}

/*
AddDfsHdfsIPWhiteLists Method for AddDfsHdfsIPWhiteLists

add dfs hdfs ip white list

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dfsHdfsId hdfs id
 @return ApiAddDfsHdfsIPWhiteListsRequest
*/
func (a *DfsHdfsesAPIService) AddDfsHdfsIPWhiteLists(ctx context.Context, dfsHdfsId int64) ApiAddDfsHdfsIPWhiteListsRequest {
	return ApiAddDfsHdfsIPWhiteListsRequest{
		ApiService: a,
		ctx: ctx,
		dfsHdfsId: dfsHdfsId,
	}
}

// Execute executes the request
//  @return DfsHdfsResp
func (a *DfsHdfsesAPIService) AddDfsHdfsIPWhiteListsExecute(r ApiAddDfsHdfsIPWhiteListsRequest) (*DfsHdfsResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsHdfsResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsHdfsesAPIService.AddDfsHdfsIPWhiteLists")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-hdfses/{dfs_hdfs_id}:add-ip-white-lists"
	localVarPath = strings.Replace(localVarPath, "{"+"dfs_hdfs_id"+"}", url.PathEscape(parameterValueToString(r.dfsHdfsId, "dfsHdfsId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAddDfsHdfsProxyUsersRequest struct {
	ctx context.Context
	ApiService *DfsHdfsesAPIService
	dfsHdfsId int64
	body *DfsHdfsAddProxyUsersReq
}

// dfs hdfs info
func (r ApiAddDfsHdfsProxyUsersRequest) Body(body DfsHdfsAddProxyUsersReq) ApiAddDfsHdfsProxyUsersRequest {
	r.body = &body
	return r
}

func (r ApiAddDfsHdfsProxyUsersRequest) Execute() (*DfsHdfsResp, *http.Response, error) {
	return r.ApiService.AddDfsHdfsProxyUsersExecute(r)
}

/*
AddDfsHdfsProxyUsers Method for AddDfsHdfsProxyUsers

add dfs hdfs proxy users

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dfsHdfsId hdfs id
 @return ApiAddDfsHdfsProxyUsersRequest
*/
func (a *DfsHdfsesAPIService) AddDfsHdfsProxyUsers(ctx context.Context, dfsHdfsId int64) ApiAddDfsHdfsProxyUsersRequest {
	return ApiAddDfsHdfsProxyUsersRequest{
		ApiService: a,
		ctx: ctx,
		dfsHdfsId: dfsHdfsId,
	}
}

// Execute executes the request
//  @return DfsHdfsResp
func (a *DfsHdfsesAPIService) AddDfsHdfsProxyUsersExecute(r ApiAddDfsHdfsProxyUsersRequest) (*DfsHdfsResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsHdfsResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsHdfsesAPIService.AddDfsHdfsProxyUsers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-hdfses/{dfs_hdfs_id}:add-proxy-users"
	localVarPath = strings.Replace(localVarPath, "{"+"dfs_hdfs_id"+"}", url.PathEscape(parameterValueToString(r.dfsHdfsId, "dfsHdfsId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateDfsHdfsRequest struct {
	ctx context.Context
	ApiService *DfsHdfsesAPIService
	body *DfsHdfsCreateReq
	allowPathCreate *bool
}

// hdfs info
func (r ApiCreateDfsHdfsRequest) Body(body DfsHdfsCreateReq) ApiCreateDfsHdfsRequest {
	r.body = &body
	return r
}

// allow create path when not existed
func (r ApiCreateDfsHdfsRequest) AllowPathCreate(allowPathCreate bool) ApiCreateDfsHdfsRequest {
	r.allowPathCreate = &allowPathCreate
	return r
}

func (r ApiCreateDfsHdfsRequest) Execute() (*DfsHdfsResp, *http.Response, error) {
	return r.ApiService.CreateDfsHdfsExecute(r)
}

/*
CreateDfsHdfs Method for CreateDfsHdfs

Create dfs hdfs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateDfsHdfsRequest
*/
func (a *DfsHdfsesAPIService) CreateDfsHdfs(ctx context.Context) ApiCreateDfsHdfsRequest {
	return ApiCreateDfsHdfsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DfsHdfsResp
func (a *DfsHdfsesAPIService) CreateDfsHdfsExecute(r ApiCreateDfsHdfsRequest) (*DfsHdfsResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsHdfsResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsHdfsesAPIService.CreateDfsHdfs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-hdfses/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.allowPathCreate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allow_path_create", r.allowPathCreate, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteDfsHdfsRequest struct {
	ctx context.Context
	ApiService *DfsHdfsesAPIService
	dfsHdfsId int64
	force *bool
	withDirectory *bool
}

// force delete or not
func (r ApiDeleteDfsHdfsRequest) Force(force bool) ApiDeleteDfsHdfsRequest {
	r.force = &force
	return r
}

// also delete directory
func (r ApiDeleteDfsHdfsRequest) WithDirectory(withDirectory bool) ApiDeleteDfsHdfsRequest {
	r.withDirectory = &withDirectory
	return r
}

func (r ApiDeleteDfsHdfsRequest) Execute() (*DfsHdfsResp, *http.Response, error) {
	return r.ApiService.DeleteDfsHdfsExecute(r)
}

/*
DeleteDfsHdfs Method for DeleteDfsHdfs

delete dfs hdfs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dfsHdfsId dfs hdfs id
 @return ApiDeleteDfsHdfsRequest
*/
func (a *DfsHdfsesAPIService) DeleteDfsHdfs(ctx context.Context, dfsHdfsId int64) ApiDeleteDfsHdfsRequest {
	return ApiDeleteDfsHdfsRequest{
		ApiService: a,
		ctx: ctx,
		dfsHdfsId: dfsHdfsId,
	}
}

// Execute executes the request
//  @return DfsHdfsResp
func (a *DfsHdfsesAPIService) DeleteDfsHdfsExecute(r ApiDeleteDfsHdfsRequest) (*DfsHdfsResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsHdfsResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsHdfsesAPIService.DeleteDfsHdfs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-hdfses/{dfs_hdfs_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"dfs_hdfs_id"+"}", url.PathEscape(parameterValueToString(r.dfsHdfsId, "dfsHdfsId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.force != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "force", r.force, "form", "")
	}
	if r.withDirectory != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "with_directory", r.withDirectory, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDfsHdfsRequest struct {
	ctx context.Context
	ApiService *DfsHdfsesAPIService
	dfsHdfsId int64
}

func (r ApiGetDfsHdfsRequest) Execute() (*DfsHdfsResp, *http.Response, error) {
	return r.ApiService.GetDfsHdfsExecute(r)
}

/*
GetDfsHdfs Method for GetDfsHdfs

Get dfs hdfs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dfsHdfsId dfs hdfs id
 @return ApiGetDfsHdfsRequest
*/
func (a *DfsHdfsesAPIService) GetDfsHdfs(ctx context.Context, dfsHdfsId int64) ApiGetDfsHdfsRequest {
	return ApiGetDfsHdfsRequest{
		ApiService: a,
		ctx: ctx,
		dfsHdfsId: dfsHdfsId,
	}
}

// Execute executes the request
//  @return DfsHdfsResp
func (a *DfsHdfsesAPIService) GetDfsHdfsExecute(r ApiGetDfsHdfsRequest) (*DfsHdfsResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsHdfsResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsHdfsesAPIService.GetDfsHdfs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-hdfses/{dfs_hdfs_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"dfs_hdfs_id"+"}", url.PathEscape(parameterValueToString(r.dfsHdfsId, "dfsHdfsId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListDfsHdfsesRequest struct {
	ctx context.Context
	ApiService *DfsHdfsesAPIService
	limit *int64
	offset *int64
	clusterId *string
	path *string
	auth *string
	dfsGatewayZoneId *int64
	q *string
	sort *string
}

// paging param
func (r ApiListDfsHdfsesRequest) Limit(limit int64) ApiListDfsHdfsesRequest {
	r.limit = &limit
	return r
}

// paging param
func (r ApiListDfsHdfsesRequest) Offset(offset int64) ApiListDfsHdfsesRequest {
	r.offset = &offset
	return r
}

// cluster id
func (r ApiListDfsHdfsesRequest) ClusterId(clusterId string) ApiListDfsHdfsesRequest {
	r.clusterId = &clusterId
	return r
}

// related dfs path
func (r ApiListDfsHdfsesRequest) Path(path string) ApiListDfsHdfsesRequest {
	r.path = &path
	return r
}

// authType for hdfs: simple, kerberos
func (r ApiListDfsHdfsesRequest) Auth(auth string) ApiListDfsHdfsesRequest {
	r.auth = &auth
	return r
}

// dfs gateway zone id
func (r ApiListDfsHdfsesRequest) DfsGatewayZoneId(dfsGatewayZoneId int64) ApiListDfsHdfsesRequest {
	r.dfsGatewayZoneId = &dfsGatewayZoneId
	return r
}

// query param of search
func (r ApiListDfsHdfsesRequest) Q(q string) ApiListDfsHdfsesRequest {
	r.q = &q
	return r
}

// sort param of search
func (r ApiListDfsHdfsesRequest) Sort(sort string) ApiListDfsHdfsesRequest {
	r.sort = &sort
	return r
}

func (r ApiListDfsHdfsesRequest) Execute() (*DfsHdfsesResp, *http.Response, error) {
	return r.ApiService.ListDfsHdfsesExecute(r)
}

/*
ListDfsHdfses Method for ListDfsHdfses

List dfs hdfs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListDfsHdfsesRequest
*/
func (a *DfsHdfsesAPIService) ListDfsHdfses(ctx context.Context) ApiListDfsHdfsesRequest {
	return ApiListDfsHdfsesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DfsHdfsesResp
func (a *DfsHdfsesAPIService) ListDfsHdfsesExecute(r ApiListDfsHdfsesRequest) (*DfsHdfsesResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsHdfsesResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsHdfsesAPIService.ListDfsHdfses")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-hdfses/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.clusterId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_id", r.clusterId, "form", "")
	}
	if r.path != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "path", r.path, "form", "")
	}
	if r.auth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "auth", r.auth, "form", "")
	}
	if r.dfsGatewayZoneId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dfs_gateway_zone_id", r.dfsGatewayZoneId, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRemoveDfsHdfsACLsRequest struct {
	ctx context.Context
	ApiService *DfsHdfsesAPIService
	dfsHdfsId int64
	body *DfsHdfsRemoveACLsReq
}

// hdfs acls info
func (r ApiRemoveDfsHdfsACLsRequest) Body(body DfsHdfsRemoveACLsReq) ApiRemoveDfsHdfsACLsRequest {
	r.body = &body
	return r
}

func (r ApiRemoveDfsHdfsACLsRequest) Execute() (*DfsHdfsResp, *http.Response, error) {
	return r.ApiService.RemoveDfsHdfsACLsExecute(r)
}

/*
RemoveDfsHdfsACLs Method for RemoveDfsHdfsACLs

remove dfs hdfs acls

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dfsHdfsId dfs hdfs id
 @return ApiRemoveDfsHdfsACLsRequest
*/
func (a *DfsHdfsesAPIService) RemoveDfsHdfsACLs(ctx context.Context, dfsHdfsId int64) ApiRemoveDfsHdfsACLsRequest {
	return ApiRemoveDfsHdfsACLsRequest{
		ApiService: a,
		ctx: ctx,
		dfsHdfsId: dfsHdfsId,
	}
}

// Execute executes the request
//  @return DfsHdfsResp
func (a *DfsHdfsesAPIService) RemoveDfsHdfsACLsExecute(r ApiRemoveDfsHdfsACLsRequest) (*DfsHdfsResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsHdfsResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsHdfsesAPIService.RemoveDfsHdfsACLs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-hdfses/{dfs_hdfs_id}:remove-acls"
	localVarPath = strings.Replace(localVarPath, "{"+"dfs_hdfs_id"+"}", url.PathEscape(parameterValueToString(r.dfsHdfsId, "dfsHdfsId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRemoveDfsHdfsIPWhiteListsRequest struct {
	ctx context.Context
	ApiService *DfsHdfsesAPIService
	dfsHdfsId int64
	body *DfsHdfsRemoveIPWhiteListReq
}

// hdfs ip white list info
func (r ApiRemoveDfsHdfsIPWhiteListsRequest) Body(body DfsHdfsRemoveIPWhiteListReq) ApiRemoveDfsHdfsIPWhiteListsRequest {
	r.body = &body
	return r
}

func (r ApiRemoveDfsHdfsIPWhiteListsRequest) Execute() (*DfsHdfsResp, *http.Response, error) {
	return r.ApiService.RemoveDfsHdfsIPWhiteListsExecute(r)
}

/*
RemoveDfsHdfsIPWhiteLists Method for RemoveDfsHdfsIPWhiteLists

remove dfs hdfs ip white lists

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dfsHdfsId dfs hdfs id
 @return ApiRemoveDfsHdfsIPWhiteListsRequest
*/
func (a *DfsHdfsesAPIService) RemoveDfsHdfsIPWhiteLists(ctx context.Context, dfsHdfsId int64) ApiRemoveDfsHdfsIPWhiteListsRequest {
	return ApiRemoveDfsHdfsIPWhiteListsRequest{
		ApiService: a,
		ctx: ctx,
		dfsHdfsId: dfsHdfsId,
	}
}

// Execute executes the request
//  @return DfsHdfsResp
func (a *DfsHdfsesAPIService) RemoveDfsHdfsIPWhiteListsExecute(r ApiRemoveDfsHdfsIPWhiteListsRequest) (*DfsHdfsResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsHdfsResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsHdfsesAPIService.RemoveDfsHdfsIPWhiteLists")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-hdfses/{dfs_hdfs_id}:remove-ip-white-lists"
	localVarPath = strings.Replace(localVarPath, "{"+"dfs_hdfs_id"+"}", url.PathEscape(parameterValueToString(r.dfsHdfsId, "dfsHdfsId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRemoveDfsHdfsProxyUsersRequest struct {
	ctx context.Context
	ApiService *DfsHdfsesAPIService
	dfsHdfsId int64
	body *DfsHdfsRemoveProxyUsersReq
}

// hdfs proxy users info
func (r ApiRemoveDfsHdfsProxyUsersRequest) Body(body DfsHdfsRemoveProxyUsersReq) ApiRemoveDfsHdfsProxyUsersRequest {
	r.body = &body
	return r
}

func (r ApiRemoveDfsHdfsProxyUsersRequest) Execute() (*DfsHdfsResp, *http.Response, error) {
	return r.ApiService.RemoveDfsHdfsProxyUsersExecute(r)
}

/*
RemoveDfsHdfsProxyUsers Method for RemoveDfsHdfsProxyUsers

remove dfs hdfs proxy users

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dfsHdfsId dfs hdfs id
 @return ApiRemoveDfsHdfsProxyUsersRequest
*/
func (a *DfsHdfsesAPIService) RemoveDfsHdfsProxyUsers(ctx context.Context, dfsHdfsId int64) ApiRemoveDfsHdfsProxyUsersRequest {
	return ApiRemoveDfsHdfsProxyUsersRequest{
		ApiService: a,
		ctx: ctx,
		dfsHdfsId: dfsHdfsId,
	}
}

// Execute executes the request
//  @return DfsHdfsResp
func (a *DfsHdfsesAPIService) RemoveDfsHdfsProxyUsersExecute(r ApiRemoveDfsHdfsProxyUsersRequest) (*DfsHdfsResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsHdfsResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsHdfsesAPIService.RemoveDfsHdfsProxyUsers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-hdfses/{dfs_hdfs_id}:remove-proxy-users"
	localVarPath = strings.Replace(localVarPath, "{"+"dfs_hdfs_id"+"}", url.PathEscape(parameterValueToString(r.dfsHdfsId, "dfsHdfsId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateDfsHdfsRequest struct {
	ctx context.Context
	ApiService *DfsHdfsesAPIService
	dfsHdfsId int64
	body *DfsHdfsUpdateReq
}

// dfs hdfs info
func (r ApiUpdateDfsHdfsRequest) Body(body DfsHdfsUpdateReq) ApiUpdateDfsHdfsRequest {
	r.body = &body
	return r
}

func (r ApiUpdateDfsHdfsRequest) Execute() (*DfsHdfsResp, *http.Response, error) {
	return r.ApiService.UpdateDfsHdfsExecute(r)
}

/*
UpdateDfsHdfs Method for UpdateDfsHdfs

Update dfs hdfs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dfsHdfsId hdfs id
 @return ApiUpdateDfsHdfsRequest
*/
func (a *DfsHdfsesAPIService) UpdateDfsHdfs(ctx context.Context, dfsHdfsId int64) ApiUpdateDfsHdfsRequest {
	return ApiUpdateDfsHdfsRequest{
		ApiService: a,
		ctx: ctx,
		dfsHdfsId: dfsHdfsId,
	}
}

// Execute executes the request
//  @return DfsHdfsResp
func (a *DfsHdfsesAPIService) UpdateDfsHdfsExecute(r ApiUpdateDfsHdfsRequest) (*DfsHdfsResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsHdfsResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsHdfsesAPIService.UpdateDfsHdfs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-hdfses/{dfs_hdfs_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"dfs_hdfs_id"+"}", url.PathEscape(parameterValueToString(r.dfsHdfsId, "dfsHdfsId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateDfsHdfsACLsRequest struct {
	ctx context.Context
	ApiService *DfsHdfsesAPIService
	dfsHdfsId int64
	body *DfsHdfsUpdateACLsReq
}

// hdfs acls info
func (r ApiUpdateDfsHdfsACLsRequest) Body(body DfsHdfsUpdateACLsReq) ApiUpdateDfsHdfsACLsRequest {
	r.body = &body
	return r
}

func (r ApiUpdateDfsHdfsACLsRequest) Execute() (*DfsHdfsResp, *http.Response, error) {
	return r.ApiService.UpdateDfsHdfsACLsExecute(r)
}

/*
UpdateDfsHdfsACLs Method for UpdateDfsHdfsACLs

Update dfs hdfs ACL

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dfsHdfsId hdfs id
 @return ApiUpdateDfsHdfsACLsRequest
*/
func (a *DfsHdfsesAPIService) UpdateDfsHdfsACLs(ctx context.Context, dfsHdfsId int64) ApiUpdateDfsHdfsACLsRequest {
	return ApiUpdateDfsHdfsACLsRequest{
		ApiService: a,
		ctx: ctx,
		dfsHdfsId: dfsHdfsId,
	}
}

// Execute executes the request
//  @return DfsHdfsResp
func (a *DfsHdfsesAPIService) UpdateDfsHdfsACLsExecute(r ApiUpdateDfsHdfsACLsRequest) (*DfsHdfsResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsHdfsResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsHdfsesAPIService.UpdateDfsHdfsACLs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-hdfses/{dfs_hdfs_id}:update-acls"
	localVarPath = strings.Replace(localVarPath, "{"+"dfs_hdfs_id"+"}", url.PathEscape(parameterValueToString(r.dfsHdfsId, "dfsHdfsId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateDfsHdfsIPWhiteListsRequest struct {
	ctx context.Context
	ApiService *DfsHdfsesAPIService
	dfsHdfsId int64
	body *DfsHdfsUpdateIPWhiteListsReq
}

// hdfs ip white lists info
func (r ApiUpdateDfsHdfsIPWhiteListsRequest) Body(body DfsHdfsUpdateIPWhiteListsReq) ApiUpdateDfsHdfsIPWhiteListsRequest {
	r.body = &body
	return r
}

func (r ApiUpdateDfsHdfsIPWhiteListsRequest) Execute() (*DfsHdfsResp, *http.Response, error) {
	return r.ApiService.UpdateDfsHdfsIPWhiteListsExecute(r)
}

/*
UpdateDfsHdfsIPWhiteLists Method for UpdateDfsHdfsIPWhiteLists

Update dfs hdfs IP White List

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dfsHdfsId hdfs id
 @return ApiUpdateDfsHdfsIPWhiteListsRequest
*/
func (a *DfsHdfsesAPIService) UpdateDfsHdfsIPWhiteLists(ctx context.Context, dfsHdfsId int64) ApiUpdateDfsHdfsIPWhiteListsRequest {
	return ApiUpdateDfsHdfsIPWhiteListsRequest{
		ApiService: a,
		ctx: ctx,
		dfsHdfsId: dfsHdfsId,
	}
}

// Execute executes the request
//  @return DfsHdfsResp
func (a *DfsHdfsesAPIService) UpdateDfsHdfsIPWhiteListsExecute(r ApiUpdateDfsHdfsIPWhiteListsRequest) (*DfsHdfsResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsHdfsResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsHdfsesAPIService.UpdateDfsHdfsIPWhiteLists")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-hdfses/{dfs_hdfs_id}:update-ip-white-lists"
	localVarPath = strings.Replace(localVarPath, "{"+"dfs_hdfs_id"+"}", url.PathEscape(parameterValueToString(r.dfsHdfsId, "dfsHdfsId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateDfsHdfsProxyUsersRequest struct {
	ctx context.Context
	ApiService *DfsHdfsesAPIService
	dfsHdfsId int64
	body *DfsHdfsUpdateProxyUsersReq
}

// hdfs proxy user info
func (r ApiUpdateDfsHdfsProxyUsersRequest) Body(body DfsHdfsUpdateProxyUsersReq) ApiUpdateDfsHdfsProxyUsersRequest {
	r.body = &body
	return r
}

func (r ApiUpdateDfsHdfsProxyUsersRequest) Execute() (*DfsHdfsResp, *http.Response, error) {
	return r.ApiService.UpdateDfsHdfsProxyUsersExecute(r)
}

/*
UpdateDfsHdfsProxyUsers Method for UpdateDfsHdfsProxyUsers

Update dfs hdfs proxy users

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dfsHdfsId hdfs id
 @return ApiUpdateDfsHdfsProxyUsersRequest
*/
func (a *DfsHdfsesAPIService) UpdateDfsHdfsProxyUsers(ctx context.Context, dfsHdfsId int64) ApiUpdateDfsHdfsProxyUsersRequest {
	return ApiUpdateDfsHdfsProxyUsersRequest{
		ApiService: a,
		ctx: ctx,
		dfsHdfsId: dfsHdfsId,
	}
}

// Execute executes the request
//  @return DfsHdfsResp
func (a *DfsHdfsesAPIService) UpdateDfsHdfsProxyUsersExecute(r ApiUpdateDfsHdfsProxyUsersRequest) (*DfsHdfsResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsHdfsResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsHdfsesAPIService.UpdateDfsHdfsProxyUsers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-hdfses/{dfs_hdfs_id}:update-proxy-users"
	localVarPath = strings.Replace(localVarPath, "{"+"dfs_hdfs_id"+"}", url.PathEscape(parameterValueToString(r.dfsHdfsId, "dfsHdfsId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
