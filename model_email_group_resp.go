/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EmailGroupResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailGroupResp{}

// EmailGroupResp struct for EmailGroupResp
type EmailGroupResp struct {
	EmailGroup EmailGroupRecord `json:"email_group"`
}

type _EmailGroupResp EmailGroupResp

// NewEmailGroupResp instantiates a new EmailGroupResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailGroupResp(emailGroup EmailGroupRecord) *EmailGroupResp {
	this := EmailGroupResp{}
	this.EmailGroup = emailGroup
	return &this
}

// NewEmailGroupRespWithDefaults instantiates a new EmailGroupResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailGroupRespWithDefaults() *EmailGroupResp {
	this := EmailGroupResp{}
	return &this
}

// GetEmailGroup returns the EmailGroup field value
func (o *EmailGroupResp) GetEmailGroup() EmailGroupRecord {
	if o == nil {
		var ret EmailGroupRecord
		return ret
	}

	return o.EmailGroup
}

// GetEmailGroupOk returns a tuple with the EmailGroup field value
// and a boolean to check if the value has been set.
func (o *EmailGroupResp) GetEmailGroupOk() (*EmailGroupRecord, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EmailGroup, true
}

// SetEmailGroup sets field value
func (o *EmailGroupResp) SetEmailGroup(v EmailGroupRecord) {
	o.EmailGroup = v
}

func (o EmailGroupResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailGroupResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["email_group"] = o.EmailGroup
	return toSerialize, nil
}

func (o *EmailGroupResp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"email_group",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEmailGroupResp := _EmailGroupResp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEmailGroupResp)

	if err != nil {
		return err
	}

	*o = EmailGroupResp(varEmailGroupResp)

	return err
}

type NullableEmailGroupResp struct {
	value *EmailGroupResp
	isSet bool
}

func (v NullableEmailGroupResp) Get() *EmailGroupResp {
	return v.value
}

func (v *NullableEmailGroupResp) Set(val *EmailGroupResp) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailGroupResp) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailGroupResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailGroupResp(val *EmailGroupResp) *NullableEmailGroupResp {
	return &NullableEmailGroupResp{value: val, isSet: true}
}

func (v NullableEmailGroupResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailGroupResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


