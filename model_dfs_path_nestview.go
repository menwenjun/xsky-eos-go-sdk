/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DfsPathNestview type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsPathNestview{}

// DfsPathNestview struct for DfsPathNestview
type DfsPathNestview struct {
	DfsPathPerformance *DfsPathNestviewDfsPathPerformance `json:"dfs_path_performance,omitempty"`
	DfsPathStat *DfsPathNestviewDfsPathStat `json:"dfs_path_stat,omitempty"`
	Id *int64 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Stretched *bool `json:"stretched,omitempty"`
}

// NewDfsPathNestview instantiates a new DfsPathNestview object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsPathNestview() *DfsPathNestview {
	this := DfsPathNestview{}
	return &this
}

// NewDfsPathNestviewWithDefaults instantiates a new DfsPathNestview object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsPathNestviewWithDefaults() *DfsPathNestview {
	this := DfsPathNestview{}
	return &this
}

// GetDfsPathPerformance returns the DfsPathPerformance field value if set, zero value otherwise.
func (o *DfsPathNestview) GetDfsPathPerformance() DfsPathNestviewDfsPathPerformance {
	if o == nil || IsNil(o.DfsPathPerformance) {
		var ret DfsPathNestviewDfsPathPerformance
		return ret
	}
	return *o.DfsPathPerformance
}

// GetDfsPathPerformanceOk returns a tuple with the DfsPathPerformance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsPathNestview) GetDfsPathPerformanceOk() (*DfsPathNestviewDfsPathPerformance, bool) {
	if o == nil || IsNil(o.DfsPathPerformance) {
		return nil, false
	}
	return o.DfsPathPerformance, true
}

// HasDfsPathPerformance returns a boolean if a field has been set.
func (o *DfsPathNestview) HasDfsPathPerformance() bool {
	if o != nil && !IsNil(o.DfsPathPerformance) {
		return true
	}

	return false
}

// SetDfsPathPerformance gets a reference to the given DfsPathNestviewDfsPathPerformance and assigns it to the DfsPathPerformance field.
func (o *DfsPathNestview) SetDfsPathPerformance(v DfsPathNestviewDfsPathPerformance) {
	o.DfsPathPerformance = &v
}

// GetDfsPathStat returns the DfsPathStat field value if set, zero value otherwise.
func (o *DfsPathNestview) GetDfsPathStat() DfsPathNestviewDfsPathStat {
	if o == nil || IsNil(o.DfsPathStat) {
		var ret DfsPathNestviewDfsPathStat
		return ret
	}
	return *o.DfsPathStat
}

// GetDfsPathStatOk returns a tuple with the DfsPathStat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsPathNestview) GetDfsPathStatOk() (*DfsPathNestviewDfsPathStat, bool) {
	if o == nil || IsNil(o.DfsPathStat) {
		return nil, false
	}
	return o.DfsPathStat, true
}

// HasDfsPathStat returns a boolean if a field has been set.
func (o *DfsPathNestview) HasDfsPathStat() bool {
	if o != nil && !IsNil(o.DfsPathStat) {
		return true
	}

	return false
}

// SetDfsPathStat gets a reference to the given DfsPathNestviewDfsPathStat and assigns it to the DfsPathStat field.
func (o *DfsPathNestview) SetDfsPathStat(v DfsPathNestviewDfsPathStat) {
	o.DfsPathStat = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DfsPathNestview) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsPathNestview) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DfsPathNestview) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *DfsPathNestview) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DfsPathNestview) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsPathNestview) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DfsPathNestview) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DfsPathNestview) SetName(v string) {
	o.Name = &v
}

// GetStretched returns the Stretched field value if set, zero value otherwise.
func (o *DfsPathNestview) GetStretched() bool {
	if o == nil || IsNil(o.Stretched) {
		var ret bool
		return ret
	}
	return *o.Stretched
}

// GetStretchedOk returns a tuple with the Stretched field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsPathNestview) GetStretchedOk() (*bool, bool) {
	if o == nil || IsNil(o.Stretched) {
		return nil, false
	}
	return o.Stretched, true
}

// HasStretched returns a boolean if a field has been set.
func (o *DfsPathNestview) HasStretched() bool {
	if o != nil && !IsNil(o.Stretched) {
		return true
	}

	return false
}

// SetStretched gets a reference to the given bool and assigns it to the Stretched field.
func (o *DfsPathNestview) SetStretched(v bool) {
	o.Stretched = &v
}

func (o DfsPathNestview) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsPathNestview) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DfsPathPerformance) {
		toSerialize["dfs_path_performance"] = o.DfsPathPerformance
	}
	if !IsNil(o.DfsPathStat) {
		toSerialize["dfs_path_stat"] = o.DfsPathStat
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Stretched) {
		toSerialize["stretched"] = o.Stretched
	}
	return toSerialize, nil
}

type NullableDfsPathNestview struct {
	value *DfsPathNestview
	isSet bool
}

func (v NullableDfsPathNestview) Get() *DfsPathNestview {
	return v.value
}

func (v *NullableDfsPathNestview) Set(val *DfsPathNestview) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsPathNestview) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsPathNestview) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsPathNestview(val *DfsPathNestview) *NullableDfsPathNestview {
	return &NullableDfsPathNestview{value: val, isSet: true}
}

func (v NullableDfsPathNestview) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsPathNestview) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


