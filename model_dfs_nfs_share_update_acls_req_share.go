/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DfsNFSShareUpdateACLsReqShare type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsNFSShareUpdateACLsReqShare{}

// DfsNFSShareUpdateACLsReqShare struct for DfsNFSShareUpdateACLsReqShare
type DfsNFSShareUpdateACLsReqShare struct {
	// access control array
	DfsNfsShareAcls []DfsNFSShareUpdateACLReq `json:"dfs_nfs_share_acls,omitempty"`
}

// NewDfsNFSShareUpdateACLsReqShare instantiates a new DfsNFSShareUpdateACLsReqShare object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsNFSShareUpdateACLsReqShare() *DfsNFSShareUpdateACLsReqShare {
	this := DfsNFSShareUpdateACLsReqShare{}
	return &this
}

// NewDfsNFSShareUpdateACLsReqShareWithDefaults instantiates a new DfsNFSShareUpdateACLsReqShare object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsNFSShareUpdateACLsReqShareWithDefaults() *DfsNFSShareUpdateACLsReqShare {
	this := DfsNFSShareUpdateACLsReqShare{}
	return &this
}

// GetDfsNfsShareAcls returns the DfsNfsShareAcls field value if set, zero value otherwise.
func (o *DfsNFSShareUpdateACLsReqShare) GetDfsNfsShareAcls() []DfsNFSShareUpdateACLReq {
	if o == nil || IsNil(o.DfsNfsShareAcls) {
		var ret []DfsNFSShareUpdateACLReq
		return ret
	}
	return o.DfsNfsShareAcls
}

// GetDfsNfsShareAclsOk returns a tuple with the DfsNfsShareAcls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsNFSShareUpdateACLsReqShare) GetDfsNfsShareAclsOk() ([]DfsNFSShareUpdateACLReq, bool) {
	if o == nil || IsNil(o.DfsNfsShareAcls) {
		return nil, false
	}
	return o.DfsNfsShareAcls, true
}

// HasDfsNfsShareAcls returns a boolean if a field has been set.
func (o *DfsNFSShareUpdateACLsReqShare) HasDfsNfsShareAcls() bool {
	if o != nil && !IsNil(o.DfsNfsShareAcls) {
		return true
	}

	return false
}

// SetDfsNfsShareAcls gets a reference to the given []DfsNFSShareUpdateACLReq and assigns it to the DfsNfsShareAcls field.
func (o *DfsNFSShareUpdateACLsReqShare) SetDfsNfsShareAcls(v []DfsNFSShareUpdateACLReq) {
	o.DfsNfsShareAcls = v
}

func (o DfsNFSShareUpdateACLsReqShare) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsNFSShareUpdateACLsReqShare) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DfsNfsShareAcls) {
		toSerialize["dfs_nfs_share_acls"] = o.DfsNfsShareAcls
	}
	return toSerialize, nil
}

type NullableDfsNFSShareUpdateACLsReqShare struct {
	value *DfsNFSShareUpdateACLsReqShare
	isSet bool
}

func (v NullableDfsNFSShareUpdateACLsReqShare) Get() *DfsNFSShareUpdateACLsReqShare {
	return v.value
}

func (v *NullableDfsNFSShareUpdateACLsReqShare) Set(val *DfsNFSShareUpdateACLsReqShare) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsNFSShareUpdateACLsReqShare) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsNFSShareUpdateACLsReqShare) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsNFSShareUpdateACLsReqShare(val *DfsNFSShareUpdateACLsReqShare) *NullableDfsNFSShareUpdateACLsReqShare {
	return &NullableDfsNFSShareUpdateACLsReqShare{value: val, isSet: true}
}

func (v NullableDfsNFSShareUpdateACLsReqShare) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsNFSShareUpdateACLsReqShare) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


