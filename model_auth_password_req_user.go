/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AuthPasswordReqUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthPasswordReqUser{}

// AuthPasswordReqUser struct for AuthPasswordReqUser
type AuthPasswordReqUser struct {
	// user email for auth
	Email *string `json:"email,omitempty"`
	// user id for auth
	Id *int64 `json:"id,omitempty"`
	// user name or email for auth
	Name *string `json:"name,omitempty"`
	// password for auth
	Password string `json:"password"`
}

type _AuthPasswordReqUser AuthPasswordReqUser

// NewAuthPasswordReqUser instantiates a new AuthPasswordReqUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthPasswordReqUser(password string) *AuthPasswordReqUser {
	this := AuthPasswordReqUser{}
	this.Password = password
	return &this
}

// NewAuthPasswordReqUserWithDefaults instantiates a new AuthPasswordReqUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthPasswordReqUserWithDefaults() *AuthPasswordReqUser {
	this := AuthPasswordReqUser{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *AuthPasswordReqUser) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthPasswordReqUser) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *AuthPasswordReqUser) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *AuthPasswordReqUser) SetEmail(v string) {
	o.Email = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AuthPasswordReqUser) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthPasswordReqUser) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AuthPasswordReqUser) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *AuthPasswordReqUser) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AuthPasswordReqUser) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthPasswordReqUser) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AuthPasswordReqUser) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AuthPasswordReqUser) SetName(v string) {
	o.Name = &v
}

// GetPassword returns the Password field value
func (o *AuthPasswordReqUser) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *AuthPasswordReqUser) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *AuthPasswordReqUser) SetPassword(v string) {
	o.Password = v
}

func (o AuthPasswordReqUser) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthPasswordReqUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["password"] = o.Password
	return toSerialize, nil
}

func (o *AuthPasswordReqUser) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"password",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAuthPasswordReqUser := _AuthPasswordReqUser{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAuthPasswordReqUser)

	if err != nil {
		return err
	}

	*o = AuthPasswordReqUser(varAuthPasswordReqUser)

	return err
}

type NullableAuthPasswordReqUser struct {
	value *AuthPasswordReqUser
	isSet bool
}

func (v NullableAuthPasswordReqUser) Get() *AuthPasswordReqUser {
	return v.value
}

func (v *NullableAuthPasswordReqUser) Set(val *AuthPasswordReqUser) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthPasswordReqUser) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthPasswordReqUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthPasswordReqUser(val *AuthPasswordReqUser) *NullableAuthPasswordReqUser {
	return &NullableAuthPasswordReqUser{value: val, isSet: true}
}

func (v NullableAuthPasswordReqUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthPasswordReqUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


