/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DfsVIPResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsVIPResp{}

// DfsVIPResp struct for DfsVIPResp
type DfsVIPResp struct {
	DfsVip DfsVIP `json:"dfs_vip"`
}

type _DfsVIPResp DfsVIPResp

// NewDfsVIPResp instantiates a new DfsVIPResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsVIPResp(dfsVip DfsVIP) *DfsVIPResp {
	this := DfsVIPResp{}
	this.DfsVip = dfsVip
	return &this
}

// NewDfsVIPRespWithDefaults instantiates a new DfsVIPResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsVIPRespWithDefaults() *DfsVIPResp {
	this := DfsVIPResp{}
	return &this
}

// GetDfsVip returns the DfsVip field value
func (o *DfsVIPResp) GetDfsVip() DfsVIP {
	if o == nil {
		var ret DfsVIP
		return ret
	}

	return o.DfsVip
}

// GetDfsVipOk returns a tuple with the DfsVip field value
// and a boolean to check if the value has been set.
func (o *DfsVIPResp) GetDfsVipOk() (*DfsVIP, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DfsVip, true
}

// SetDfsVip sets field value
func (o *DfsVIPResp) SetDfsVip(v DfsVIP) {
	o.DfsVip = v
}

func (o DfsVIPResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsVIPResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dfs_vip"] = o.DfsVip
	return toSerialize, nil
}

func (o *DfsVIPResp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dfs_vip",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDfsVIPResp := _DfsVIPResp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDfsVIPResp)

	if err != nil {
		return err
	}

	*o = DfsVIPResp(varDfsVIPResp)

	return err
}

type NullableDfsVIPResp struct {
	value *DfsVIPResp
	isSet bool
}

func (v NullableDfsVIPResp) Get() *DfsVIPResp {
	return v.value
}

func (v *NullableDfsVIPResp) Set(val *DfsVIPResp) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsVIPResp) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsVIPResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsVIPResp(val *DfsVIPResp) *NullableDfsVIPResp {
	return &NullableDfsVIPResp{value: val, isSet: true}
}

func (v NullableDfsVIPResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsVIPResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


