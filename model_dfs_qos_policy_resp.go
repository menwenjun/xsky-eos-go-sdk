/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DfsQosPolicyResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsQosPolicyResp{}

// DfsQosPolicyResp struct for DfsQosPolicyResp
type DfsQosPolicyResp struct {
	DfsQosPolicy *DfsQosPolicy `json:"dfs_qos_policy,omitempty"`
}

// NewDfsQosPolicyResp instantiates a new DfsQosPolicyResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsQosPolicyResp() *DfsQosPolicyResp {
	this := DfsQosPolicyResp{}
	return &this
}

// NewDfsQosPolicyRespWithDefaults instantiates a new DfsQosPolicyResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsQosPolicyRespWithDefaults() *DfsQosPolicyResp {
	this := DfsQosPolicyResp{}
	return &this
}

// GetDfsQosPolicy returns the DfsQosPolicy field value if set, zero value otherwise.
func (o *DfsQosPolicyResp) GetDfsQosPolicy() DfsQosPolicy {
	if o == nil || IsNil(o.DfsQosPolicy) {
		var ret DfsQosPolicy
		return ret
	}
	return *o.DfsQosPolicy
}

// GetDfsQosPolicyOk returns a tuple with the DfsQosPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsQosPolicyResp) GetDfsQosPolicyOk() (*DfsQosPolicy, bool) {
	if o == nil || IsNil(o.DfsQosPolicy) {
		return nil, false
	}
	return o.DfsQosPolicy, true
}

// HasDfsQosPolicy returns a boolean if a field has been set.
func (o *DfsQosPolicyResp) HasDfsQosPolicy() bool {
	if o != nil && !IsNil(o.DfsQosPolicy) {
		return true
	}

	return false
}

// SetDfsQosPolicy gets a reference to the given DfsQosPolicy and assigns it to the DfsQosPolicy field.
func (o *DfsQosPolicyResp) SetDfsQosPolicy(v DfsQosPolicy) {
	o.DfsQosPolicy = &v
}

func (o DfsQosPolicyResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsQosPolicyResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DfsQosPolicy) {
		toSerialize["dfs_qos_policy"] = o.DfsQosPolicy
	}
	return toSerialize, nil
}

type NullableDfsQosPolicyResp struct {
	value *DfsQosPolicyResp
	isSet bool
}

func (v NullableDfsQosPolicyResp) Get() *DfsQosPolicyResp {
	return v.value
}

func (v *NullableDfsQosPolicyResp) Set(val *DfsQosPolicyResp) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsQosPolicyResp) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsQosPolicyResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsQosPolicyResp(val *DfsQosPolicyResp) *NullableDfsQosPolicyResp {
	return &NullableDfsQosPolicyResp{value: val, isSet: true}
}

func (v NullableDfsQosPolicyResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsQosPolicyResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


