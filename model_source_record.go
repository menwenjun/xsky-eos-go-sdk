/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SourceRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SourceRecord{}

// SourceRecord struct for SourceRecord
type SourceRecord struct {
	Highlight map[string]interface{} `json:"highlight,omitempty"`
	Source map[string]interface{} `json:"source,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewSourceRecord instantiates a new SourceRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceRecord() *SourceRecord {
	this := SourceRecord{}
	return &this
}

// NewSourceRecordWithDefaults instantiates a new SourceRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceRecordWithDefaults() *SourceRecord {
	this := SourceRecord{}
	return &this
}

// GetHighlight returns the Highlight field value if set, zero value otherwise.
func (o *SourceRecord) GetHighlight() map[string]interface{} {
	if o == nil || IsNil(o.Highlight) {
		var ret map[string]interface{}
		return ret
	}
	return o.Highlight
}

// GetHighlightOk returns a tuple with the Highlight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceRecord) GetHighlightOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Highlight) {
		return map[string]interface{}{}, false
	}
	return o.Highlight, true
}

// HasHighlight returns a boolean if a field has been set.
func (o *SourceRecord) HasHighlight() bool {
	if o != nil && !IsNil(o.Highlight) {
		return true
	}

	return false
}

// SetHighlight gets a reference to the given map[string]interface{} and assigns it to the Highlight field.
func (o *SourceRecord) SetHighlight(v map[string]interface{}) {
	o.Highlight = v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *SourceRecord) GetSource() map[string]interface{} {
	if o == nil || IsNil(o.Source) {
		var ret map[string]interface{}
		return ret
	}
	return o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceRecord) GetSourceOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Source) {
		return map[string]interface{}{}, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *SourceRecord) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given map[string]interface{} and assigns it to the Source field.
func (o *SourceRecord) SetSource(v map[string]interface{}) {
	o.Source = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SourceRecord) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceRecord) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SourceRecord) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SourceRecord) SetType(v string) {
	o.Type = &v
}

func (o SourceRecord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SourceRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Highlight) {
		toSerialize["highlight"] = o.Highlight
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableSourceRecord struct {
	value *SourceRecord
	isSet bool
}

func (v NullableSourceRecord) Get() *SourceRecord {
	return v.value
}

func (v *NullableSourceRecord) Set(val *SourceRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceRecord(val *SourceRecord) *NullableSourceRecord {
	return &NullableSourceRecord{value: val, isSet: true}
}

func (v NullableSourceRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


