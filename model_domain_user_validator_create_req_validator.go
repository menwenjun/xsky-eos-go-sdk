/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DomainUserValidatorCreateReqValidator type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DomainUserValidatorCreateReqValidator{}

// DomainUserValidatorCreateReqValidator struct for DomainUserValidatorCreateReqValidator
type DomainUserValidatorCreateReqValidator struct {
	// Gateway Group ID
	GatewayGroupId *int64 `json:"gateway_group_id,omitempty"`
	// Domain groups
	Groups []string `json:"groups,omitempty"`
	// Domain type
	Type string `json:"type"`
	// Domain users
	Users []string `json:"users,omitempty"`
}

type _DomainUserValidatorCreateReqValidator DomainUserValidatorCreateReqValidator

// NewDomainUserValidatorCreateReqValidator instantiates a new DomainUserValidatorCreateReqValidator object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDomainUserValidatorCreateReqValidator(type_ string) *DomainUserValidatorCreateReqValidator {
	this := DomainUserValidatorCreateReqValidator{}
	this.Type = type_
	return &this
}

// NewDomainUserValidatorCreateReqValidatorWithDefaults instantiates a new DomainUserValidatorCreateReqValidator object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDomainUserValidatorCreateReqValidatorWithDefaults() *DomainUserValidatorCreateReqValidator {
	this := DomainUserValidatorCreateReqValidator{}
	return &this
}

// GetGatewayGroupId returns the GatewayGroupId field value if set, zero value otherwise.
func (o *DomainUserValidatorCreateReqValidator) GetGatewayGroupId() int64 {
	if o == nil || IsNil(o.GatewayGroupId) {
		var ret int64
		return ret
	}
	return *o.GatewayGroupId
}

// GetGatewayGroupIdOk returns a tuple with the GatewayGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainUserValidatorCreateReqValidator) GetGatewayGroupIdOk() (*int64, bool) {
	if o == nil || IsNil(o.GatewayGroupId) {
		return nil, false
	}
	return o.GatewayGroupId, true
}

// HasGatewayGroupId returns a boolean if a field has been set.
func (o *DomainUserValidatorCreateReqValidator) HasGatewayGroupId() bool {
	if o != nil && !IsNil(o.GatewayGroupId) {
		return true
	}

	return false
}

// SetGatewayGroupId gets a reference to the given int64 and assigns it to the GatewayGroupId field.
func (o *DomainUserValidatorCreateReqValidator) SetGatewayGroupId(v int64) {
	o.GatewayGroupId = &v
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *DomainUserValidatorCreateReqValidator) GetGroups() []string {
	if o == nil || IsNil(o.Groups) {
		var ret []string
		return ret
	}
	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainUserValidatorCreateReqValidator) GetGroupsOk() ([]string, bool) {
	if o == nil || IsNil(o.Groups) {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *DomainUserValidatorCreateReqValidator) HasGroups() bool {
	if o != nil && !IsNil(o.Groups) {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []string and assigns it to the Groups field.
func (o *DomainUserValidatorCreateReqValidator) SetGroups(v []string) {
	o.Groups = v
}

// GetType returns the Type field value
func (o *DomainUserValidatorCreateReqValidator) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DomainUserValidatorCreateReqValidator) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DomainUserValidatorCreateReqValidator) SetType(v string) {
	o.Type = v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *DomainUserValidatorCreateReqValidator) GetUsers() []string {
	if o == nil || IsNil(o.Users) {
		var ret []string
		return ret
	}
	return o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainUserValidatorCreateReqValidator) GetUsersOk() ([]string, bool) {
	if o == nil || IsNil(o.Users) {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *DomainUserValidatorCreateReqValidator) HasUsers() bool {
	if o != nil && !IsNil(o.Users) {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []string and assigns it to the Users field.
func (o *DomainUserValidatorCreateReqValidator) SetUsers(v []string) {
	o.Users = v
}

func (o DomainUserValidatorCreateReqValidator) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DomainUserValidatorCreateReqValidator) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GatewayGroupId) {
		toSerialize["gateway_group_id"] = o.GatewayGroupId
	}
	if !IsNil(o.Groups) {
		toSerialize["groups"] = o.Groups
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.Users) {
		toSerialize["users"] = o.Users
	}
	return toSerialize, nil
}

func (o *DomainUserValidatorCreateReqValidator) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDomainUserValidatorCreateReqValidator := _DomainUserValidatorCreateReqValidator{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDomainUserValidatorCreateReqValidator)

	if err != nil {
		return err
	}

	*o = DomainUserValidatorCreateReqValidator(varDomainUserValidatorCreateReqValidator)

	return err
}

type NullableDomainUserValidatorCreateReqValidator struct {
	value *DomainUserValidatorCreateReqValidator
	isSet bool
}

func (v NullableDomainUserValidatorCreateReqValidator) Get() *DomainUserValidatorCreateReqValidator {
	return v.value
}

func (v *NullableDomainUserValidatorCreateReqValidator) Set(val *DomainUserValidatorCreateReqValidator) {
	v.value = val
	v.isSet = true
}

func (v NullableDomainUserValidatorCreateReqValidator) IsSet() bool {
	return v.isSet
}

func (v *NullableDomainUserValidatorCreateReqValidator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDomainUserValidatorCreateReqValidator(val *DomainUserValidatorCreateReqValidator) *NullableDomainUserValidatorCreateReqValidator {
	return &NullableDomainUserValidatorCreateReqValidator{value: val, isSet: true}
}

func (v NullableDomainUserValidatorCreateReqValidator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDomainUserValidatorCreateReqValidator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


