/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DfsFTPShareUpdateACLsReqShare type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsFTPShareUpdateACLsReqShare{}

// DfsFTPShareUpdateACLsReqShare struct for DfsFTPShareUpdateACLsReqShare
type DfsFTPShareUpdateACLsReqShare struct {
	// access control array
	DfsFtpShareAcls []DfsFTPShareUpdateACLReq `json:"dfs_ftp_share_acls,omitempty"`
}

// NewDfsFTPShareUpdateACLsReqShare instantiates a new DfsFTPShareUpdateACLsReqShare object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsFTPShareUpdateACLsReqShare() *DfsFTPShareUpdateACLsReqShare {
	this := DfsFTPShareUpdateACLsReqShare{}
	return &this
}

// NewDfsFTPShareUpdateACLsReqShareWithDefaults instantiates a new DfsFTPShareUpdateACLsReqShare object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsFTPShareUpdateACLsReqShareWithDefaults() *DfsFTPShareUpdateACLsReqShare {
	this := DfsFTPShareUpdateACLsReqShare{}
	return &this
}

// GetDfsFtpShareAcls returns the DfsFtpShareAcls field value if set, zero value otherwise.
func (o *DfsFTPShareUpdateACLsReqShare) GetDfsFtpShareAcls() []DfsFTPShareUpdateACLReq {
	if o == nil || IsNil(o.DfsFtpShareAcls) {
		var ret []DfsFTPShareUpdateACLReq
		return ret
	}
	return o.DfsFtpShareAcls
}

// GetDfsFtpShareAclsOk returns a tuple with the DfsFtpShareAcls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFTPShareUpdateACLsReqShare) GetDfsFtpShareAclsOk() ([]DfsFTPShareUpdateACLReq, bool) {
	if o == nil || IsNil(o.DfsFtpShareAcls) {
		return nil, false
	}
	return o.DfsFtpShareAcls, true
}

// HasDfsFtpShareAcls returns a boolean if a field has been set.
func (o *DfsFTPShareUpdateACLsReqShare) HasDfsFtpShareAcls() bool {
	if o != nil && !IsNil(o.DfsFtpShareAcls) {
		return true
	}

	return false
}

// SetDfsFtpShareAcls gets a reference to the given []DfsFTPShareUpdateACLReq and assigns it to the DfsFtpShareAcls field.
func (o *DfsFTPShareUpdateACLsReqShare) SetDfsFtpShareAcls(v []DfsFTPShareUpdateACLReq) {
	o.DfsFtpShareAcls = v
}

func (o DfsFTPShareUpdateACLsReqShare) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsFTPShareUpdateACLsReqShare) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DfsFtpShareAcls) {
		toSerialize["dfs_ftp_share_acls"] = o.DfsFtpShareAcls
	}
	return toSerialize, nil
}

type NullableDfsFTPShareUpdateACLsReqShare struct {
	value *DfsFTPShareUpdateACLsReqShare
	isSet bool
}

func (v NullableDfsFTPShareUpdateACLsReqShare) Get() *DfsFTPShareUpdateACLsReqShare {
	return v.value
}

func (v *NullableDfsFTPShareUpdateACLsReqShare) Set(val *DfsFTPShareUpdateACLsReqShare) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsFTPShareUpdateACLsReqShare) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsFTPShareUpdateACLsReqShare) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsFTPShareUpdateACLsReqShare(val *DfsFTPShareUpdateACLsReqShare) *NullableDfsFTPShareUpdateACLsReqShare {
	return &NullableDfsFTPShareUpdateACLsReqShare{value: val, isSet: true}
}

func (v NullableDfsFTPShareUpdateACLsReqShare) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsFTPShareUpdateACLsReqShare) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


