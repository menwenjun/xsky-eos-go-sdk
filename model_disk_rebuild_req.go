/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DiskRebuildReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DiskRebuildReq{}

// DiskRebuildReq struct for DiskRebuildReq
type DiskRebuildReq struct {
	Disk DiskRebuildReqDisk `json:"disk"`
}

type _DiskRebuildReq DiskRebuildReq

// NewDiskRebuildReq instantiates a new DiskRebuildReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiskRebuildReq(disk DiskRebuildReqDisk) *DiskRebuildReq {
	this := DiskRebuildReq{}
	this.Disk = disk
	return &this
}

// NewDiskRebuildReqWithDefaults instantiates a new DiskRebuildReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiskRebuildReqWithDefaults() *DiskRebuildReq {
	this := DiskRebuildReq{}
	return &this
}

// GetDisk returns the Disk field value
func (o *DiskRebuildReq) GetDisk() DiskRebuildReqDisk {
	if o == nil {
		var ret DiskRebuildReqDisk
		return ret
	}

	return o.Disk
}

// GetDiskOk returns a tuple with the Disk field value
// and a boolean to check if the value has been set.
func (o *DiskRebuildReq) GetDiskOk() (*DiskRebuildReqDisk, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Disk, true
}

// SetDisk sets field value
func (o *DiskRebuildReq) SetDisk(v DiskRebuildReqDisk) {
	o.Disk = v
}

func (o DiskRebuildReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DiskRebuildReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["disk"] = o.Disk
	return toSerialize, nil
}

func (o *DiskRebuildReq) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"disk",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDiskRebuildReq := _DiskRebuildReq{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDiskRebuildReq)

	if err != nil {
		return err
	}

	*o = DiskRebuildReq(varDiskRebuildReq)

	return err
}

type NullableDiskRebuildReq struct {
	value *DiskRebuildReq
	isSet bool
}

func (v NullableDiskRebuildReq) Get() *DiskRebuildReq {
	return v.value
}

func (v *NullableDiskRebuildReq) Set(val *DiskRebuildReq) {
	v.value = val
	v.isSet = true
}

func (v NullableDiskRebuildReq) IsSet() bool {
	return v.isSet
}

func (v *NullableDiskRebuildReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiskRebuildReq(val *DiskRebuildReq) *NullableDiskRebuildReq {
	return &NullableDiskRebuildReq{value: val, isSet: true}
}

func (v NullableDiskRebuildReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiskRebuildReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


