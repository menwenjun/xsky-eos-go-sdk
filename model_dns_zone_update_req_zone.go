/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DNSZoneUpdateReqZone type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DNSZoneUpdateReqZone{}

// DNSZoneUpdateReqZone struct for DNSZoneUpdateReqZone
type DNSZoneUpdateReqZone struct {
	// dns origin in zone
	Origin *string `json:"origin,omitempty"`
	// dns ttl with zone
	Ttl *int64 `json:"ttl,omitempty"`
}

// NewDNSZoneUpdateReqZone instantiates a new DNSZoneUpdateReqZone object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDNSZoneUpdateReqZone() *DNSZoneUpdateReqZone {
	this := DNSZoneUpdateReqZone{}
	return &this
}

// NewDNSZoneUpdateReqZoneWithDefaults instantiates a new DNSZoneUpdateReqZone object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDNSZoneUpdateReqZoneWithDefaults() *DNSZoneUpdateReqZone {
	this := DNSZoneUpdateReqZone{}
	return &this
}

// GetOrigin returns the Origin field value if set, zero value otherwise.
func (o *DNSZoneUpdateReqZone) GetOrigin() string {
	if o == nil || IsNil(o.Origin) {
		var ret string
		return ret
	}
	return *o.Origin
}

// GetOriginOk returns a tuple with the Origin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSZoneUpdateReqZone) GetOriginOk() (*string, bool) {
	if o == nil || IsNil(o.Origin) {
		return nil, false
	}
	return o.Origin, true
}

// HasOrigin returns a boolean if a field has been set.
func (o *DNSZoneUpdateReqZone) HasOrigin() bool {
	if o != nil && !IsNil(o.Origin) {
		return true
	}

	return false
}

// SetOrigin gets a reference to the given string and assigns it to the Origin field.
func (o *DNSZoneUpdateReqZone) SetOrigin(v string) {
	o.Origin = &v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *DNSZoneUpdateReqZone) GetTtl() int64 {
	if o == nil || IsNil(o.Ttl) {
		var ret int64
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSZoneUpdateReqZone) GetTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.Ttl) {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *DNSZoneUpdateReqZone) HasTtl() bool {
	if o != nil && !IsNil(o.Ttl) {
		return true
	}

	return false
}

// SetTtl gets a reference to the given int64 and assigns it to the Ttl field.
func (o *DNSZoneUpdateReqZone) SetTtl(v int64) {
	o.Ttl = &v
}

func (o DNSZoneUpdateReqZone) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DNSZoneUpdateReqZone) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Origin) {
		toSerialize["origin"] = o.Origin
	}
	if !IsNil(o.Ttl) {
		toSerialize["ttl"] = o.Ttl
	}
	return toSerialize, nil
}

type NullableDNSZoneUpdateReqZone struct {
	value *DNSZoneUpdateReqZone
	isSet bool
}

func (v NullableDNSZoneUpdateReqZone) Get() *DNSZoneUpdateReqZone {
	return v.value
}

func (v *NullableDNSZoneUpdateReqZone) Set(val *DNSZoneUpdateReqZone) {
	v.value = val
	v.isSet = true
}

func (v NullableDNSZoneUpdateReqZone) IsSet() bool {
	return v.isSet
}

func (v *NullableDNSZoneUpdateReqZone) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDNSZoneUpdateReqZone(val *DNSZoneUpdateReqZone) *NullableDNSZoneUpdateReqZone {
	return &NullableDNSZoneUpdateReqZone{value: val, isSet: true}
}

func (v NullableDNSZoneUpdateReqZone) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDNSZoneUpdateReqZone) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


