/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DfsQosPoliciesResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsQosPoliciesResp{}

// DfsQosPoliciesResp struct for DfsQosPoliciesResp
type DfsQosPoliciesResp struct {
	// dfs qos policies
	DfsQosPolicies []DfsQosPolicy `json:"dfs_qos_policies,omitempty"`
}

// NewDfsQosPoliciesResp instantiates a new DfsQosPoliciesResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsQosPoliciesResp() *DfsQosPoliciesResp {
	this := DfsQosPoliciesResp{}
	return &this
}

// NewDfsQosPoliciesRespWithDefaults instantiates a new DfsQosPoliciesResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsQosPoliciesRespWithDefaults() *DfsQosPoliciesResp {
	this := DfsQosPoliciesResp{}
	return &this
}

// GetDfsQosPolicies returns the DfsQosPolicies field value if set, zero value otherwise.
func (o *DfsQosPoliciesResp) GetDfsQosPolicies() []DfsQosPolicy {
	if o == nil || IsNil(o.DfsQosPolicies) {
		var ret []DfsQosPolicy
		return ret
	}
	return o.DfsQosPolicies
}

// GetDfsQosPoliciesOk returns a tuple with the DfsQosPolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsQosPoliciesResp) GetDfsQosPoliciesOk() ([]DfsQosPolicy, bool) {
	if o == nil || IsNil(o.DfsQosPolicies) {
		return nil, false
	}
	return o.DfsQosPolicies, true
}

// HasDfsQosPolicies returns a boolean if a field has been set.
func (o *DfsQosPoliciesResp) HasDfsQosPolicies() bool {
	if o != nil && !IsNil(o.DfsQosPolicies) {
		return true
	}

	return false
}

// SetDfsQosPolicies gets a reference to the given []DfsQosPolicy and assigns it to the DfsQosPolicies field.
func (o *DfsQosPoliciesResp) SetDfsQosPolicies(v []DfsQosPolicy) {
	o.DfsQosPolicies = v
}

func (o DfsQosPoliciesResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsQosPoliciesResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DfsQosPolicies) {
		toSerialize["dfs_qos_policies"] = o.DfsQosPolicies
	}
	return toSerialize, nil
}

type NullableDfsQosPoliciesResp struct {
	value *DfsQosPoliciesResp
	isSet bool
}

func (v NullableDfsQosPoliciesResp) Get() *DfsQosPoliciesResp {
	return v.value
}

func (v *NullableDfsQosPoliciesResp) Set(val *DfsQosPoliciesResp) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsQosPoliciesResp) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsQosPoliciesResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsQosPoliciesResp(val *DfsQosPoliciesResp) *NullableDfsQosPoliciesResp {
	return &NullableDfsQosPoliciesResp{value: val, isSet: true}
}

func (v NullableDfsQosPoliciesResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsQosPoliciesResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


