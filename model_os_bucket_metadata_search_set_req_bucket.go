/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OSBucketMetadataSearchSetReqBucket type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OSBucketMetadataSearchSetReqBucket{}

// OSBucketMetadataSearchSetReqBucket struct for OSBucketMetadataSearchSetReqBucket
type OSBucketMetadataSearchSetReqBucket struct {
	MetadataSearchEnabled bool `json:"metadata_search_enabled"`
}

type _OSBucketMetadataSearchSetReqBucket OSBucketMetadataSearchSetReqBucket

// NewOSBucketMetadataSearchSetReqBucket instantiates a new OSBucketMetadataSearchSetReqBucket object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOSBucketMetadataSearchSetReqBucket(metadataSearchEnabled bool) *OSBucketMetadataSearchSetReqBucket {
	this := OSBucketMetadataSearchSetReqBucket{}
	this.MetadataSearchEnabled = metadataSearchEnabled
	return &this
}

// NewOSBucketMetadataSearchSetReqBucketWithDefaults instantiates a new OSBucketMetadataSearchSetReqBucket object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOSBucketMetadataSearchSetReqBucketWithDefaults() *OSBucketMetadataSearchSetReqBucket {
	this := OSBucketMetadataSearchSetReqBucket{}
	return &this
}

// GetMetadataSearchEnabled returns the MetadataSearchEnabled field value
func (o *OSBucketMetadataSearchSetReqBucket) GetMetadataSearchEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.MetadataSearchEnabled
}

// GetMetadataSearchEnabledOk returns a tuple with the MetadataSearchEnabled field value
// and a boolean to check if the value has been set.
func (o *OSBucketMetadataSearchSetReqBucket) GetMetadataSearchEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetadataSearchEnabled, true
}

// SetMetadataSearchEnabled sets field value
func (o *OSBucketMetadataSearchSetReqBucket) SetMetadataSearchEnabled(v bool) {
	o.MetadataSearchEnabled = v
}

func (o OSBucketMetadataSearchSetReqBucket) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OSBucketMetadataSearchSetReqBucket) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["metadata_search_enabled"] = o.MetadataSearchEnabled
	return toSerialize, nil
}

func (o *OSBucketMetadataSearchSetReqBucket) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"metadata_search_enabled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOSBucketMetadataSearchSetReqBucket := _OSBucketMetadataSearchSetReqBucket{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOSBucketMetadataSearchSetReqBucket)

	if err != nil {
		return err
	}

	*o = OSBucketMetadataSearchSetReqBucket(varOSBucketMetadataSearchSetReqBucket)

	return err
}

type NullableOSBucketMetadataSearchSetReqBucket struct {
	value *OSBucketMetadataSearchSetReqBucket
	isSet bool
}

func (v NullableOSBucketMetadataSearchSetReqBucket) Get() *OSBucketMetadataSearchSetReqBucket {
	return v.value
}

func (v *NullableOSBucketMetadataSearchSetReqBucket) Set(val *OSBucketMetadataSearchSetReqBucket) {
	v.value = val
	v.isSet = true
}

func (v NullableOSBucketMetadataSearchSetReqBucket) IsSet() bool {
	return v.isSet
}

func (v *NullableOSBucketMetadataSearchSetReqBucket) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOSBucketMetadataSearchSetReqBucket(val *OSBucketMetadataSearchSetReqBucket) *NullableOSBucketMetadataSearchSetReqBucket {
	return &NullableOSBucketMetadataSearchSetReqBucket{value: val, isSet: true}
}

func (v NullableOSBucketMetadataSearchSetReqBucket) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOSBucketMetadataSearchSetReqBucket) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


