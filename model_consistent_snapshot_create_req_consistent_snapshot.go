/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ConsistentSnapshotCreateReqConsistentSnapshot type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConsistentSnapshotCreateReqConsistentSnapshot{}

// ConsistentSnapshotCreateReqConsistentSnapshot struct for ConsistentSnapshotCreateReqConsistentSnapshot
type ConsistentSnapshotCreateReqConsistentSnapshot struct {
	BlockVolumeIds []int64 `json:"block_volume_ids"`
	Description *string `json:"description,omitempty"`
	Name *string `json:"name,omitempty"`
	SnapUids []string `json:"snap_uids,omitempty"`
}

type _ConsistentSnapshotCreateReqConsistentSnapshot ConsistentSnapshotCreateReqConsistentSnapshot

// NewConsistentSnapshotCreateReqConsistentSnapshot instantiates a new ConsistentSnapshotCreateReqConsistentSnapshot object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConsistentSnapshotCreateReqConsistentSnapshot(blockVolumeIds []int64) *ConsistentSnapshotCreateReqConsistentSnapshot {
	this := ConsistentSnapshotCreateReqConsistentSnapshot{}
	this.BlockVolumeIds = blockVolumeIds
	return &this
}

// NewConsistentSnapshotCreateReqConsistentSnapshotWithDefaults instantiates a new ConsistentSnapshotCreateReqConsistentSnapshot object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConsistentSnapshotCreateReqConsistentSnapshotWithDefaults() *ConsistentSnapshotCreateReqConsistentSnapshot {
	this := ConsistentSnapshotCreateReqConsistentSnapshot{}
	return &this
}

// GetBlockVolumeIds returns the BlockVolumeIds field value
func (o *ConsistentSnapshotCreateReqConsistentSnapshot) GetBlockVolumeIds() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}

	return o.BlockVolumeIds
}

// GetBlockVolumeIdsOk returns a tuple with the BlockVolumeIds field value
// and a boolean to check if the value has been set.
func (o *ConsistentSnapshotCreateReqConsistentSnapshot) GetBlockVolumeIdsOk() ([]int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.BlockVolumeIds, true
}

// SetBlockVolumeIds sets field value
func (o *ConsistentSnapshotCreateReqConsistentSnapshot) SetBlockVolumeIds(v []int64) {
	o.BlockVolumeIds = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ConsistentSnapshotCreateReqConsistentSnapshot) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsistentSnapshotCreateReqConsistentSnapshot) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ConsistentSnapshotCreateReqConsistentSnapshot) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ConsistentSnapshotCreateReqConsistentSnapshot) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ConsistentSnapshotCreateReqConsistentSnapshot) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsistentSnapshotCreateReqConsistentSnapshot) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ConsistentSnapshotCreateReqConsistentSnapshot) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ConsistentSnapshotCreateReqConsistentSnapshot) SetName(v string) {
	o.Name = &v
}

// GetSnapUids returns the SnapUids field value if set, zero value otherwise.
func (o *ConsistentSnapshotCreateReqConsistentSnapshot) GetSnapUids() []string {
	if o == nil || IsNil(o.SnapUids) {
		var ret []string
		return ret
	}
	return o.SnapUids
}

// GetSnapUidsOk returns a tuple with the SnapUids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsistentSnapshotCreateReqConsistentSnapshot) GetSnapUidsOk() ([]string, bool) {
	if o == nil || IsNil(o.SnapUids) {
		return nil, false
	}
	return o.SnapUids, true
}

// HasSnapUids returns a boolean if a field has been set.
func (o *ConsistentSnapshotCreateReqConsistentSnapshot) HasSnapUids() bool {
	if o != nil && !IsNil(o.SnapUids) {
		return true
	}

	return false
}

// SetSnapUids gets a reference to the given []string and assigns it to the SnapUids field.
func (o *ConsistentSnapshotCreateReqConsistentSnapshot) SetSnapUids(v []string) {
	o.SnapUids = v
}

func (o ConsistentSnapshotCreateReqConsistentSnapshot) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConsistentSnapshotCreateReqConsistentSnapshot) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["block_volume_ids"] = o.BlockVolumeIds
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.SnapUids) {
		toSerialize["snap_uids"] = o.SnapUids
	}
	return toSerialize, nil
}

func (o *ConsistentSnapshotCreateReqConsistentSnapshot) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"block_volume_ids",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConsistentSnapshotCreateReqConsistentSnapshot := _ConsistentSnapshotCreateReqConsistentSnapshot{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConsistentSnapshotCreateReqConsistentSnapshot)

	if err != nil {
		return err
	}

	*o = ConsistentSnapshotCreateReqConsistentSnapshot(varConsistentSnapshotCreateReqConsistentSnapshot)

	return err
}

type NullableConsistentSnapshotCreateReqConsistentSnapshot struct {
	value *ConsistentSnapshotCreateReqConsistentSnapshot
	isSet bool
}

func (v NullableConsistentSnapshotCreateReqConsistentSnapshot) Get() *ConsistentSnapshotCreateReqConsistentSnapshot {
	return v.value
}

func (v *NullableConsistentSnapshotCreateReqConsistentSnapshot) Set(val *ConsistentSnapshotCreateReqConsistentSnapshot) {
	v.value = val
	v.isSet = true
}

func (v NullableConsistentSnapshotCreateReqConsistentSnapshot) IsSet() bool {
	return v.isSet
}

func (v *NullableConsistentSnapshotCreateReqConsistentSnapshot) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConsistentSnapshotCreateReqConsistentSnapshot(val *ConsistentSnapshotCreateReqConsistentSnapshot) *NullableConsistentSnapshotCreateReqConsistentSnapshot {
	return &NullableConsistentSnapshotCreateReqConsistentSnapshot{value: val, isSet: true}
}

func (v NullableConsistentSnapshotCreateReqConsistentSnapshot) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConsistentSnapshotCreateReqConsistentSnapshot) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


