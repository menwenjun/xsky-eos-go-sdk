/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BatchResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BatchResp{}

// BatchResp struct for BatchResp
type BatchResp struct {
	// list of API responses in the batch.
	ApiResponses []BatchRespAPIResponse `json:"api_responses,omitempty"`
	// the total time to execute all API requests. Unit is second.
	TotalCostSeconds *float64 `json:"total_cost_seconds,omitempty"`
}

// NewBatchResp instantiates a new BatchResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchResp() *BatchResp {
	this := BatchResp{}
	return &this
}

// NewBatchRespWithDefaults instantiates a new BatchResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchRespWithDefaults() *BatchResp {
	this := BatchResp{}
	return &this
}

// GetApiResponses returns the ApiResponses field value if set, zero value otherwise.
func (o *BatchResp) GetApiResponses() []BatchRespAPIResponse {
	if o == nil || IsNil(o.ApiResponses) {
		var ret []BatchRespAPIResponse
		return ret
	}
	return o.ApiResponses
}

// GetApiResponsesOk returns a tuple with the ApiResponses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchResp) GetApiResponsesOk() ([]BatchRespAPIResponse, bool) {
	if o == nil || IsNil(o.ApiResponses) {
		return nil, false
	}
	return o.ApiResponses, true
}

// HasApiResponses returns a boolean if a field has been set.
func (o *BatchResp) HasApiResponses() bool {
	if o != nil && !IsNil(o.ApiResponses) {
		return true
	}

	return false
}

// SetApiResponses gets a reference to the given []BatchRespAPIResponse and assigns it to the ApiResponses field.
func (o *BatchResp) SetApiResponses(v []BatchRespAPIResponse) {
	o.ApiResponses = v
}

// GetTotalCostSeconds returns the TotalCostSeconds field value if set, zero value otherwise.
func (o *BatchResp) GetTotalCostSeconds() float64 {
	if o == nil || IsNil(o.TotalCostSeconds) {
		var ret float64
		return ret
	}
	return *o.TotalCostSeconds
}

// GetTotalCostSecondsOk returns a tuple with the TotalCostSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchResp) GetTotalCostSecondsOk() (*float64, bool) {
	if o == nil || IsNil(o.TotalCostSeconds) {
		return nil, false
	}
	return o.TotalCostSeconds, true
}

// HasTotalCostSeconds returns a boolean if a field has been set.
func (o *BatchResp) HasTotalCostSeconds() bool {
	if o != nil && !IsNil(o.TotalCostSeconds) {
		return true
	}

	return false
}

// SetTotalCostSeconds gets a reference to the given float64 and assigns it to the TotalCostSeconds field.
func (o *BatchResp) SetTotalCostSeconds(v float64) {
	o.TotalCostSeconds = &v
}

func (o BatchResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BatchResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApiResponses) {
		toSerialize["api_responses"] = o.ApiResponses
	}
	if !IsNil(o.TotalCostSeconds) {
		toSerialize["total_cost_seconds"] = o.TotalCostSeconds
	}
	return toSerialize, nil
}

type NullableBatchResp struct {
	value *BatchResp
	isSet bool
}

func (v NullableBatchResp) Get() *BatchResp {
	return v.value
}

func (v *NullableBatchResp) Set(val *BatchResp) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchResp) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchResp(val *BatchResp) *NullableBatchResp {
	return &NullableBatchResp{value: val, isSet: true}
}

func (v NullableBatchResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


