/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the S3LoadBalancersAddReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &S3LoadBalancersAddReq{}

// S3LoadBalancersAddReq struct for S3LoadBalancersAddReq
type S3LoadBalancersAddReq struct {
	S3LoadBalancers []S3LoadBalancersAddReqLoadBalancersElt `json:"s3_load_balancers"`
}

type _S3LoadBalancersAddReq S3LoadBalancersAddReq

// NewS3LoadBalancersAddReq instantiates a new S3LoadBalancersAddReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewS3LoadBalancersAddReq(s3LoadBalancers []S3LoadBalancersAddReqLoadBalancersElt) *S3LoadBalancersAddReq {
	this := S3LoadBalancersAddReq{}
	this.S3LoadBalancers = s3LoadBalancers
	return &this
}

// NewS3LoadBalancersAddReqWithDefaults instantiates a new S3LoadBalancersAddReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewS3LoadBalancersAddReqWithDefaults() *S3LoadBalancersAddReq {
	this := S3LoadBalancersAddReq{}
	return &this
}

// GetS3LoadBalancers returns the S3LoadBalancers field value
func (o *S3LoadBalancersAddReq) GetS3LoadBalancers() []S3LoadBalancersAddReqLoadBalancersElt {
	if o == nil {
		var ret []S3LoadBalancersAddReqLoadBalancersElt
		return ret
	}

	return o.S3LoadBalancers
}

// GetS3LoadBalancersOk returns a tuple with the S3LoadBalancers field value
// and a boolean to check if the value has been set.
func (o *S3LoadBalancersAddReq) GetS3LoadBalancersOk() ([]S3LoadBalancersAddReqLoadBalancersElt, bool) {
	if o == nil {
		return nil, false
	}
	return o.S3LoadBalancers, true
}

// SetS3LoadBalancers sets field value
func (o *S3LoadBalancersAddReq) SetS3LoadBalancers(v []S3LoadBalancersAddReqLoadBalancersElt) {
	o.S3LoadBalancers = v
}

func (o S3LoadBalancersAddReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o S3LoadBalancersAddReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["s3_load_balancers"] = o.S3LoadBalancers
	return toSerialize, nil
}

func (o *S3LoadBalancersAddReq) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"s3_load_balancers",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varS3LoadBalancersAddReq := _S3LoadBalancersAddReq{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varS3LoadBalancersAddReq)

	if err != nil {
		return err
	}

	*o = S3LoadBalancersAddReq(varS3LoadBalancersAddReq)

	return err
}

type NullableS3LoadBalancersAddReq struct {
	value *S3LoadBalancersAddReq
	isSet bool
}

func (v NullableS3LoadBalancersAddReq) Get() *S3LoadBalancersAddReq {
	return v.value
}

func (v *NullableS3LoadBalancersAddReq) Set(val *S3LoadBalancersAddReq) {
	v.value = val
	v.isSet = true
}

func (v NullableS3LoadBalancersAddReq) IsSet() bool {
	return v.isSet
}

func (v *NullableS3LoadBalancersAddReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableS3LoadBalancersAddReq(val *S3LoadBalancersAddReq) *NullableS3LoadBalancersAddReq {
	return &NullableS3LoadBalancersAddReq{value: val, isSet: true}
}

func (v NullableS3LoadBalancersAddReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableS3LoadBalancersAddReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


