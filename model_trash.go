/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the Trash type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Trash{}

// Trash Trash defines the trash attributes. +X:model:generate;etcd_lock=with_get;
type Trash struct {
	Cluster *ClusterNestview `json:"cluster,omitempty"`
	Create *time.Time `json:"create,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	Id *int64 `json:"id,omitempty"`
	ResourceType *string `json:"resource_type,omitempty"`
	Retention *string `json:"retention,omitempty"`
	Status *string `json:"status,omitempty"`
	TrashResourceNum *int64 `json:"trash_resource_num,omitempty"`
	Update *time.Time `json:"update,omitempty"`
}

// NewTrash instantiates a new Trash object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrash() *Trash {
	this := Trash{}
	return &this
}

// NewTrashWithDefaults instantiates a new Trash object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrashWithDefaults() *Trash {
	this := Trash{}
	return &this
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *Trash) GetCluster() ClusterNestview {
	if o == nil || IsNil(o.Cluster) {
		var ret ClusterNestview
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trash) GetClusterOk() (*ClusterNestview, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *Trash) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given ClusterNestview and assigns it to the Cluster field.
func (o *Trash) SetCluster(v ClusterNestview) {
	o.Cluster = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *Trash) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trash) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *Trash) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *Trash) SetCreate(v time.Time) {
	o.Create = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *Trash) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trash) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *Trash) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *Trash) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Trash) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trash) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Trash) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Trash) SetId(v int64) {
	o.Id = &v
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *Trash) GetResourceType() string {
	if o == nil || IsNil(o.ResourceType) {
		var ret string
		return ret
	}
	return *o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trash) GetResourceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceType) {
		return nil, false
	}
	return o.ResourceType, true
}

// HasResourceType returns a boolean if a field has been set.
func (o *Trash) HasResourceType() bool {
	if o != nil && !IsNil(o.ResourceType) {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given string and assigns it to the ResourceType field.
func (o *Trash) SetResourceType(v string) {
	o.ResourceType = &v
}

// GetRetention returns the Retention field value if set, zero value otherwise.
func (o *Trash) GetRetention() string {
	if o == nil || IsNil(o.Retention) {
		var ret string
		return ret
	}
	return *o.Retention
}

// GetRetentionOk returns a tuple with the Retention field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trash) GetRetentionOk() (*string, bool) {
	if o == nil || IsNil(o.Retention) {
		return nil, false
	}
	return o.Retention, true
}

// HasRetention returns a boolean if a field has been set.
func (o *Trash) HasRetention() bool {
	if o != nil && !IsNil(o.Retention) {
		return true
	}

	return false
}

// SetRetention gets a reference to the given string and assigns it to the Retention field.
func (o *Trash) SetRetention(v string) {
	o.Retention = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Trash) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trash) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Trash) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Trash) SetStatus(v string) {
	o.Status = &v
}

// GetTrashResourceNum returns the TrashResourceNum field value if set, zero value otherwise.
func (o *Trash) GetTrashResourceNum() int64 {
	if o == nil || IsNil(o.TrashResourceNum) {
		var ret int64
		return ret
	}
	return *o.TrashResourceNum
}

// GetTrashResourceNumOk returns a tuple with the TrashResourceNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trash) GetTrashResourceNumOk() (*int64, bool) {
	if o == nil || IsNil(o.TrashResourceNum) {
		return nil, false
	}
	return o.TrashResourceNum, true
}

// HasTrashResourceNum returns a boolean if a field has been set.
func (o *Trash) HasTrashResourceNum() bool {
	if o != nil && !IsNil(o.TrashResourceNum) {
		return true
	}

	return false
}

// SetTrashResourceNum gets a reference to the given int64 and assigns it to the TrashResourceNum field.
func (o *Trash) SetTrashResourceNum(v int64) {
	o.TrashResourceNum = &v
}

// GetUpdate returns the Update field value if set, zero value otherwise.
func (o *Trash) GetUpdate() time.Time {
	if o == nil || IsNil(o.Update) {
		var ret time.Time
		return ret
	}
	return *o.Update
}

// GetUpdateOk returns a tuple with the Update field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trash) GetUpdateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Update) {
		return nil, false
	}
	return o.Update, true
}

// HasUpdate returns a boolean if a field has been set.
func (o *Trash) HasUpdate() bool {
	if o != nil && !IsNil(o.Update) {
		return true
	}

	return false
}

// SetUpdate gets a reference to the given time.Time and assigns it to the Update field.
func (o *Trash) SetUpdate(v time.Time) {
	o.Update = &v
}

func (o Trash) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Trash) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ResourceType) {
		toSerialize["resource_type"] = o.ResourceType
	}
	if !IsNil(o.Retention) {
		toSerialize["retention"] = o.Retention
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.TrashResourceNum) {
		toSerialize["trash_resource_num"] = o.TrashResourceNum
	}
	if !IsNil(o.Update) {
		toSerialize["update"] = o.Update
	}
	return toSerialize, nil
}

type NullableTrash struct {
	value *Trash
	isSet bool
}

func (v NullableTrash) Get() *Trash {
	return v.value
}

func (v *NullableTrash) Set(val *Trash) {
	v.value = val
	v.isSet = true
}

func (v NullableTrash) IsSet() bool {
	return v.isSet
}

func (v *NullableTrash) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrash(val *Trash) *NullableTrash {
	return &NullableTrash{value: val, isSet: true}
}

func (v NullableTrash) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrash) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


