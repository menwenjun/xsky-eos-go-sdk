/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DfsFileResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsFileResp{}

// DfsFileResp struct for DfsFileResp
type DfsFileResp struct {
	DfsFile *DfsFile `json:"dfs_file,omitempty"`
}

// NewDfsFileResp instantiates a new DfsFileResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsFileResp() *DfsFileResp {
	this := DfsFileResp{}
	return &this
}

// NewDfsFileRespWithDefaults instantiates a new DfsFileResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsFileRespWithDefaults() *DfsFileResp {
	this := DfsFileResp{}
	return &this
}

// GetDfsFile returns the DfsFile field value if set, zero value otherwise.
func (o *DfsFileResp) GetDfsFile() DfsFile {
	if o == nil || IsNil(o.DfsFile) {
		var ret DfsFile
		return ret
	}
	return *o.DfsFile
}

// GetDfsFileOk returns a tuple with the DfsFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFileResp) GetDfsFileOk() (*DfsFile, bool) {
	if o == nil || IsNil(o.DfsFile) {
		return nil, false
	}
	return o.DfsFile, true
}

// HasDfsFile returns a boolean if a field has been set.
func (o *DfsFileResp) HasDfsFile() bool {
	if o != nil && !IsNil(o.DfsFile) {
		return true
	}

	return false
}

// SetDfsFile gets a reference to the given DfsFile and assigns it to the DfsFile field.
func (o *DfsFileResp) SetDfsFile(v DfsFile) {
	o.DfsFile = &v
}

func (o DfsFileResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsFileResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DfsFile) {
		toSerialize["dfs_file"] = o.DfsFile
	}
	return toSerialize, nil
}

type NullableDfsFileResp struct {
	value *DfsFileResp
	isSet bool
}

func (v NullableDfsFileResp) Get() *DfsFileResp {
	return v.value
}

func (v *NullableDfsFileResp) Set(val *DfsFileResp) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsFileResp) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsFileResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsFileResp(val *DfsFileResp) *NullableDfsFileResp {
	return &NullableDfsFileResp{value: val, isSet: true}
}

func (v NullableDfsFileResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsFileResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


