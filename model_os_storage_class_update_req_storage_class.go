/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OSStorageClassUpdateReqStorageClass type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OSStorageClassUpdateReqStorageClass{}

// OSStorageClassUpdateReqStorageClass struct for OSStorageClassUpdateReqStorageClass
type OSStorageClassUpdateReqStorageClass struct {
	ActivePoolIds []int64 `json:"active_pool_ids,omitempty"`
	Description *string `json:"description,omitempty"`
	InactivePoolIds []int64 `json:"inactive_pool_ids,omitempty"`
	Name *string `json:"name,omitempty"`
}

// NewOSStorageClassUpdateReqStorageClass instantiates a new OSStorageClassUpdateReqStorageClass object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOSStorageClassUpdateReqStorageClass() *OSStorageClassUpdateReqStorageClass {
	this := OSStorageClassUpdateReqStorageClass{}
	return &this
}

// NewOSStorageClassUpdateReqStorageClassWithDefaults instantiates a new OSStorageClassUpdateReqStorageClass object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOSStorageClassUpdateReqStorageClassWithDefaults() *OSStorageClassUpdateReqStorageClass {
	this := OSStorageClassUpdateReqStorageClass{}
	return &this
}

// GetActivePoolIds returns the ActivePoolIds field value if set, zero value otherwise.
func (o *OSStorageClassUpdateReqStorageClass) GetActivePoolIds() []int64 {
	if o == nil || IsNil(o.ActivePoolIds) {
		var ret []int64
		return ret
	}
	return o.ActivePoolIds
}

// GetActivePoolIdsOk returns a tuple with the ActivePoolIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSStorageClassUpdateReqStorageClass) GetActivePoolIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.ActivePoolIds) {
		return nil, false
	}
	return o.ActivePoolIds, true
}

// HasActivePoolIds returns a boolean if a field has been set.
func (o *OSStorageClassUpdateReqStorageClass) HasActivePoolIds() bool {
	if o != nil && !IsNil(o.ActivePoolIds) {
		return true
	}

	return false
}

// SetActivePoolIds gets a reference to the given []int64 and assigns it to the ActivePoolIds field.
func (o *OSStorageClassUpdateReqStorageClass) SetActivePoolIds(v []int64) {
	o.ActivePoolIds = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *OSStorageClassUpdateReqStorageClass) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSStorageClassUpdateReqStorageClass) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *OSStorageClassUpdateReqStorageClass) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *OSStorageClassUpdateReqStorageClass) SetDescription(v string) {
	o.Description = &v
}

// GetInactivePoolIds returns the InactivePoolIds field value if set, zero value otherwise.
func (o *OSStorageClassUpdateReqStorageClass) GetInactivePoolIds() []int64 {
	if o == nil || IsNil(o.InactivePoolIds) {
		var ret []int64
		return ret
	}
	return o.InactivePoolIds
}

// GetInactivePoolIdsOk returns a tuple with the InactivePoolIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSStorageClassUpdateReqStorageClass) GetInactivePoolIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.InactivePoolIds) {
		return nil, false
	}
	return o.InactivePoolIds, true
}

// HasInactivePoolIds returns a boolean if a field has been set.
func (o *OSStorageClassUpdateReqStorageClass) HasInactivePoolIds() bool {
	if o != nil && !IsNil(o.InactivePoolIds) {
		return true
	}

	return false
}

// SetInactivePoolIds gets a reference to the given []int64 and assigns it to the InactivePoolIds field.
func (o *OSStorageClassUpdateReqStorageClass) SetInactivePoolIds(v []int64) {
	o.InactivePoolIds = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *OSStorageClassUpdateReqStorageClass) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSStorageClassUpdateReqStorageClass) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *OSStorageClassUpdateReqStorageClass) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *OSStorageClassUpdateReqStorageClass) SetName(v string) {
	o.Name = &v
}

func (o OSStorageClassUpdateReqStorageClass) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OSStorageClassUpdateReqStorageClass) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActivePoolIds) {
		toSerialize["active_pool_ids"] = o.ActivePoolIds
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.InactivePoolIds) {
		toSerialize["inactive_pool_ids"] = o.InactivePoolIds
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableOSStorageClassUpdateReqStorageClass struct {
	value *OSStorageClassUpdateReqStorageClass
	isSet bool
}

func (v NullableOSStorageClassUpdateReqStorageClass) Get() *OSStorageClassUpdateReqStorageClass {
	return v.value
}

func (v *NullableOSStorageClassUpdateReqStorageClass) Set(val *OSStorageClassUpdateReqStorageClass) {
	v.value = val
	v.isSet = true
}

func (v NullableOSStorageClassUpdateReqStorageClass) IsSet() bool {
	return v.isSet
}

func (v *NullableOSStorageClassUpdateReqStorageClass) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOSStorageClassUpdateReqStorageClass(val *OSStorageClassUpdateReqStorageClass) *NullableOSStorageClassUpdateReqStorageClass {
	return &NullableOSStorageClassUpdateReqStorageClass{value: val, isSet: true}
}

func (v NullableOSStorageClassUpdateReqStorageClass) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOSStorageClassUpdateReqStorageClass) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


