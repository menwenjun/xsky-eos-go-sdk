/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LicenseSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LicenseSummary{}

// LicenseSummary struct for LicenseSummary
type LicenseSummary struct {
	CapacityBase int64 `json:"capacity_base"`
	ExpiredFeatures []string `json:"expired_features"`
	ExpiredProtocols []string `json:"expired_protocols"`
	Features []string `json:"features"`
	LicenseInvalid bool `json:"license_invalid"`
	// ProductLimits defines product limits
	Limits map[string]string `json:"limits"`
	OspCapacityBase int64 `json:"osp_capacity_base"`
	ProductInfo ProductInfo `json:"product_info"`
	Protocols []string `json:"protocols"`
	UsedQuota UsedQuota `json:"used_quota"`
}

type _LicenseSummary LicenseSummary

// NewLicenseSummary instantiates a new LicenseSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicenseSummary(capacityBase int64, expiredFeatures []string, expiredProtocols []string, features []string, licenseInvalid bool, limits map[string]string, ospCapacityBase int64, productInfo ProductInfo, protocols []string, usedQuota UsedQuota) *LicenseSummary {
	this := LicenseSummary{}
	this.CapacityBase = capacityBase
	this.ExpiredFeatures = expiredFeatures
	this.ExpiredProtocols = expiredProtocols
	this.Features = features
	this.LicenseInvalid = licenseInvalid
	this.Limits = limits
	this.OspCapacityBase = ospCapacityBase
	this.ProductInfo = productInfo
	this.Protocols = protocols
	this.UsedQuota = usedQuota
	return &this
}

// NewLicenseSummaryWithDefaults instantiates a new LicenseSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicenseSummaryWithDefaults() *LicenseSummary {
	this := LicenseSummary{}
	return &this
}

// GetCapacityBase returns the CapacityBase field value
func (o *LicenseSummary) GetCapacityBase() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CapacityBase
}

// GetCapacityBaseOk returns a tuple with the CapacityBase field value
// and a boolean to check if the value has been set.
func (o *LicenseSummary) GetCapacityBaseOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CapacityBase, true
}

// SetCapacityBase sets field value
func (o *LicenseSummary) SetCapacityBase(v int64) {
	o.CapacityBase = v
}

// GetExpiredFeatures returns the ExpiredFeatures field value
func (o *LicenseSummary) GetExpiredFeatures() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ExpiredFeatures
}

// GetExpiredFeaturesOk returns a tuple with the ExpiredFeatures field value
// and a boolean to check if the value has been set.
func (o *LicenseSummary) GetExpiredFeaturesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpiredFeatures, true
}

// SetExpiredFeatures sets field value
func (o *LicenseSummary) SetExpiredFeatures(v []string) {
	o.ExpiredFeatures = v
}

// GetExpiredProtocols returns the ExpiredProtocols field value
func (o *LicenseSummary) GetExpiredProtocols() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ExpiredProtocols
}

// GetExpiredProtocolsOk returns a tuple with the ExpiredProtocols field value
// and a boolean to check if the value has been set.
func (o *LicenseSummary) GetExpiredProtocolsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpiredProtocols, true
}

// SetExpiredProtocols sets field value
func (o *LicenseSummary) SetExpiredProtocols(v []string) {
	o.ExpiredProtocols = v
}

// GetFeatures returns the Features field value
func (o *LicenseSummary) GetFeatures() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Features
}

// GetFeaturesOk returns a tuple with the Features field value
// and a boolean to check if the value has been set.
func (o *LicenseSummary) GetFeaturesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Features, true
}

// SetFeatures sets field value
func (o *LicenseSummary) SetFeatures(v []string) {
	o.Features = v
}

// GetLicenseInvalid returns the LicenseInvalid field value
func (o *LicenseSummary) GetLicenseInvalid() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.LicenseInvalid
}

// GetLicenseInvalidOk returns a tuple with the LicenseInvalid field value
// and a boolean to check if the value has been set.
func (o *LicenseSummary) GetLicenseInvalidOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LicenseInvalid, true
}

// SetLicenseInvalid sets field value
func (o *LicenseSummary) SetLicenseInvalid(v bool) {
	o.LicenseInvalid = v
}

// GetLimits returns the Limits field value
func (o *LicenseSummary) GetLimits() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Limits
}

// GetLimitsOk returns a tuple with the Limits field value
// and a boolean to check if the value has been set.
func (o *LicenseSummary) GetLimitsOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Limits, true
}

// SetLimits sets field value
func (o *LicenseSummary) SetLimits(v map[string]string) {
	o.Limits = v
}

// GetOspCapacityBase returns the OspCapacityBase field value
func (o *LicenseSummary) GetOspCapacityBase() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.OspCapacityBase
}

// GetOspCapacityBaseOk returns a tuple with the OspCapacityBase field value
// and a boolean to check if the value has been set.
func (o *LicenseSummary) GetOspCapacityBaseOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OspCapacityBase, true
}

// SetOspCapacityBase sets field value
func (o *LicenseSummary) SetOspCapacityBase(v int64) {
	o.OspCapacityBase = v
}

// GetProductInfo returns the ProductInfo field value
func (o *LicenseSummary) GetProductInfo() ProductInfo {
	if o == nil {
		var ret ProductInfo
		return ret
	}

	return o.ProductInfo
}

// GetProductInfoOk returns a tuple with the ProductInfo field value
// and a boolean to check if the value has been set.
func (o *LicenseSummary) GetProductInfoOk() (*ProductInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductInfo, true
}

// SetProductInfo sets field value
func (o *LicenseSummary) SetProductInfo(v ProductInfo) {
	o.ProductInfo = v
}

// GetProtocols returns the Protocols field value
func (o *LicenseSummary) GetProtocols() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Protocols
}

// GetProtocolsOk returns a tuple with the Protocols field value
// and a boolean to check if the value has been set.
func (o *LicenseSummary) GetProtocolsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Protocols, true
}

// SetProtocols sets field value
func (o *LicenseSummary) SetProtocols(v []string) {
	o.Protocols = v
}

// GetUsedQuota returns the UsedQuota field value
func (o *LicenseSummary) GetUsedQuota() UsedQuota {
	if o == nil {
		var ret UsedQuota
		return ret
	}

	return o.UsedQuota
}

// GetUsedQuotaOk returns a tuple with the UsedQuota field value
// and a boolean to check if the value has been set.
func (o *LicenseSummary) GetUsedQuotaOk() (*UsedQuota, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UsedQuota, true
}

// SetUsedQuota sets field value
func (o *LicenseSummary) SetUsedQuota(v UsedQuota) {
	o.UsedQuota = v
}

func (o LicenseSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LicenseSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["capacity_base"] = o.CapacityBase
	toSerialize["expired_features"] = o.ExpiredFeatures
	toSerialize["expired_protocols"] = o.ExpiredProtocols
	toSerialize["features"] = o.Features
	toSerialize["license_invalid"] = o.LicenseInvalid
	toSerialize["limits"] = o.Limits
	toSerialize["osp_capacity_base"] = o.OspCapacityBase
	toSerialize["product_info"] = o.ProductInfo
	toSerialize["protocols"] = o.Protocols
	toSerialize["used_quota"] = o.UsedQuota
	return toSerialize, nil
}

func (o *LicenseSummary) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"capacity_base",
		"expired_features",
		"expired_protocols",
		"features",
		"license_invalid",
		"limits",
		"osp_capacity_base",
		"product_info",
		"protocols",
		"used_quota",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLicenseSummary := _LicenseSummary{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLicenseSummary)

	if err != nil {
		return err
	}

	*o = LicenseSummary(varLicenseSummary)

	return err
}

type NullableLicenseSummary struct {
	value *LicenseSummary
	isSet bool
}

func (v NullableLicenseSummary) Get() *LicenseSummary {
	return v.value
}

func (v *NullableLicenseSummary) Set(val *LicenseSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableLicenseSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableLicenseSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicenseSummary(val *LicenseSummary) *NullableLicenseSummary {
	return &NullableLicenseSummary{value: val, isSet: true}
}

func (v NullableLicenseSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicenseSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


