/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the DpDfsSnapshotJob type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DpDfsSnapshotJob{}

// DpDfsSnapshotJob DpDfsSnapshotJob is one execution of a dp dfs snapshot plan
type DpDfsSnapshotJob struct {
	Cluster *Cluster `json:"cluster,omitempty"`
	DfsPath *DfsPath `json:"dfs_path,omitempty"`
	DfsSnapshot *DfsSnapshotNestview `json:"dfs_snapshot,omitempty"`
	DpDfsSnapshot *DpDfsSnapshotNestview `json:"dp_dfs_snapshot,omitempty"`
	DpDfsSnapshotPolicy *DpDfsSnapshotPolicy `json:"dp_dfs_snapshot_policy,omitempty"`
	FinishedAt *time.Time `json:"finished_at,omitempty"`
	Id *int64 `json:"id,omitempty"`
	StartedAt *time.Time `json:"started_at,omitempty"`
	Status *string `json:"status,omitempty"`
}

// NewDpDfsSnapshotJob instantiates a new DpDfsSnapshotJob object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDpDfsSnapshotJob() *DpDfsSnapshotJob {
	this := DpDfsSnapshotJob{}
	return &this
}

// NewDpDfsSnapshotJobWithDefaults instantiates a new DpDfsSnapshotJob object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDpDfsSnapshotJobWithDefaults() *DpDfsSnapshotJob {
	this := DpDfsSnapshotJob{}
	return &this
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *DpDfsSnapshotJob) GetCluster() Cluster {
	if o == nil || IsNil(o.Cluster) {
		var ret Cluster
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpDfsSnapshotJob) GetClusterOk() (*Cluster, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *DpDfsSnapshotJob) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given Cluster and assigns it to the Cluster field.
func (o *DpDfsSnapshotJob) SetCluster(v Cluster) {
	o.Cluster = &v
}

// GetDfsPath returns the DfsPath field value if set, zero value otherwise.
func (o *DpDfsSnapshotJob) GetDfsPath() DfsPath {
	if o == nil || IsNil(o.DfsPath) {
		var ret DfsPath
		return ret
	}
	return *o.DfsPath
}

// GetDfsPathOk returns a tuple with the DfsPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpDfsSnapshotJob) GetDfsPathOk() (*DfsPath, bool) {
	if o == nil || IsNil(o.DfsPath) {
		return nil, false
	}
	return o.DfsPath, true
}

// HasDfsPath returns a boolean if a field has been set.
func (o *DpDfsSnapshotJob) HasDfsPath() bool {
	if o != nil && !IsNil(o.DfsPath) {
		return true
	}

	return false
}

// SetDfsPath gets a reference to the given DfsPath and assigns it to the DfsPath field.
func (o *DpDfsSnapshotJob) SetDfsPath(v DfsPath) {
	o.DfsPath = &v
}

// GetDfsSnapshot returns the DfsSnapshot field value if set, zero value otherwise.
func (o *DpDfsSnapshotJob) GetDfsSnapshot() DfsSnapshotNestview {
	if o == nil || IsNil(o.DfsSnapshot) {
		var ret DfsSnapshotNestview
		return ret
	}
	return *o.DfsSnapshot
}

// GetDfsSnapshotOk returns a tuple with the DfsSnapshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpDfsSnapshotJob) GetDfsSnapshotOk() (*DfsSnapshotNestview, bool) {
	if o == nil || IsNil(o.DfsSnapshot) {
		return nil, false
	}
	return o.DfsSnapshot, true
}

// HasDfsSnapshot returns a boolean if a field has been set.
func (o *DpDfsSnapshotJob) HasDfsSnapshot() bool {
	if o != nil && !IsNil(o.DfsSnapshot) {
		return true
	}

	return false
}

// SetDfsSnapshot gets a reference to the given DfsSnapshotNestview and assigns it to the DfsSnapshot field.
func (o *DpDfsSnapshotJob) SetDfsSnapshot(v DfsSnapshotNestview) {
	o.DfsSnapshot = &v
}

// GetDpDfsSnapshot returns the DpDfsSnapshot field value if set, zero value otherwise.
func (o *DpDfsSnapshotJob) GetDpDfsSnapshot() DpDfsSnapshotNestview {
	if o == nil || IsNil(o.DpDfsSnapshot) {
		var ret DpDfsSnapshotNestview
		return ret
	}
	return *o.DpDfsSnapshot
}

// GetDpDfsSnapshotOk returns a tuple with the DpDfsSnapshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpDfsSnapshotJob) GetDpDfsSnapshotOk() (*DpDfsSnapshotNestview, bool) {
	if o == nil || IsNil(o.DpDfsSnapshot) {
		return nil, false
	}
	return o.DpDfsSnapshot, true
}

// HasDpDfsSnapshot returns a boolean if a field has been set.
func (o *DpDfsSnapshotJob) HasDpDfsSnapshot() bool {
	if o != nil && !IsNil(o.DpDfsSnapshot) {
		return true
	}

	return false
}

// SetDpDfsSnapshot gets a reference to the given DpDfsSnapshotNestview and assigns it to the DpDfsSnapshot field.
func (o *DpDfsSnapshotJob) SetDpDfsSnapshot(v DpDfsSnapshotNestview) {
	o.DpDfsSnapshot = &v
}

// GetDpDfsSnapshotPolicy returns the DpDfsSnapshotPolicy field value if set, zero value otherwise.
func (o *DpDfsSnapshotJob) GetDpDfsSnapshotPolicy() DpDfsSnapshotPolicy {
	if o == nil || IsNil(o.DpDfsSnapshotPolicy) {
		var ret DpDfsSnapshotPolicy
		return ret
	}
	return *o.DpDfsSnapshotPolicy
}

// GetDpDfsSnapshotPolicyOk returns a tuple with the DpDfsSnapshotPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpDfsSnapshotJob) GetDpDfsSnapshotPolicyOk() (*DpDfsSnapshotPolicy, bool) {
	if o == nil || IsNil(o.DpDfsSnapshotPolicy) {
		return nil, false
	}
	return o.DpDfsSnapshotPolicy, true
}

// HasDpDfsSnapshotPolicy returns a boolean if a field has been set.
func (o *DpDfsSnapshotJob) HasDpDfsSnapshotPolicy() bool {
	if o != nil && !IsNil(o.DpDfsSnapshotPolicy) {
		return true
	}

	return false
}

// SetDpDfsSnapshotPolicy gets a reference to the given DpDfsSnapshotPolicy and assigns it to the DpDfsSnapshotPolicy field.
func (o *DpDfsSnapshotJob) SetDpDfsSnapshotPolicy(v DpDfsSnapshotPolicy) {
	o.DpDfsSnapshotPolicy = &v
}

// GetFinishedAt returns the FinishedAt field value if set, zero value otherwise.
func (o *DpDfsSnapshotJob) GetFinishedAt() time.Time {
	if o == nil || IsNil(o.FinishedAt) {
		var ret time.Time
		return ret
	}
	return *o.FinishedAt
}

// GetFinishedAtOk returns a tuple with the FinishedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpDfsSnapshotJob) GetFinishedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.FinishedAt) {
		return nil, false
	}
	return o.FinishedAt, true
}

// HasFinishedAt returns a boolean if a field has been set.
func (o *DpDfsSnapshotJob) HasFinishedAt() bool {
	if o != nil && !IsNil(o.FinishedAt) {
		return true
	}

	return false
}

// SetFinishedAt gets a reference to the given time.Time and assigns it to the FinishedAt field.
func (o *DpDfsSnapshotJob) SetFinishedAt(v time.Time) {
	o.FinishedAt = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DpDfsSnapshotJob) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpDfsSnapshotJob) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DpDfsSnapshotJob) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *DpDfsSnapshotJob) SetId(v int64) {
	o.Id = &v
}

// GetStartedAt returns the StartedAt field value if set, zero value otherwise.
func (o *DpDfsSnapshotJob) GetStartedAt() time.Time {
	if o == nil || IsNil(o.StartedAt) {
		var ret time.Time
		return ret
	}
	return *o.StartedAt
}

// GetStartedAtOk returns a tuple with the StartedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpDfsSnapshotJob) GetStartedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartedAt) {
		return nil, false
	}
	return o.StartedAt, true
}

// HasStartedAt returns a boolean if a field has been set.
func (o *DpDfsSnapshotJob) HasStartedAt() bool {
	if o != nil && !IsNil(o.StartedAt) {
		return true
	}

	return false
}

// SetStartedAt gets a reference to the given time.Time and assigns it to the StartedAt field.
func (o *DpDfsSnapshotJob) SetStartedAt(v time.Time) {
	o.StartedAt = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DpDfsSnapshotJob) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpDfsSnapshotJob) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DpDfsSnapshotJob) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *DpDfsSnapshotJob) SetStatus(v string) {
	o.Status = &v
}

func (o DpDfsSnapshotJob) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DpDfsSnapshotJob) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !IsNil(o.DfsPath) {
		toSerialize["dfs_path"] = o.DfsPath
	}
	if !IsNil(o.DfsSnapshot) {
		toSerialize["dfs_snapshot"] = o.DfsSnapshot
	}
	if !IsNil(o.DpDfsSnapshot) {
		toSerialize["dp_dfs_snapshot"] = o.DpDfsSnapshot
	}
	if !IsNil(o.DpDfsSnapshotPolicy) {
		toSerialize["dp_dfs_snapshot_policy"] = o.DpDfsSnapshotPolicy
	}
	if !IsNil(o.FinishedAt) {
		toSerialize["finished_at"] = o.FinishedAt
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.StartedAt) {
		toSerialize["started_at"] = o.StartedAt
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableDpDfsSnapshotJob struct {
	value *DpDfsSnapshotJob
	isSet bool
}

func (v NullableDpDfsSnapshotJob) Get() *DpDfsSnapshotJob {
	return v.value
}

func (v *NullableDpDfsSnapshotJob) Set(val *DpDfsSnapshotJob) {
	v.value = val
	v.isSet = true
}

func (v NullableDpDfsSnapshotJob) IsSet() bool {
	return v.isSet
}

func (v *NullableDpDfsSnapshotJob) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDpDfsSnapshotJob(val *DpDfsSnapshotJob) *NullableDpDfsSnapshotJob {
	return &NullableDpDfsSnapshotJob{value: val, isSet: true}
}

func (v NullableDpDfsSnapshotJob) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDpDfsSnapshotJob) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


