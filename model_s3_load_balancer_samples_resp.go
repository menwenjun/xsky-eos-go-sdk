/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the S3LoadBalancerSamplesResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &S3LoadBalancerSamplesResp{}

// S3LoadBalancerSamplesResp struct for S3LoadBalancerSamplesResp
type S3LoadBalancerSamplesResp struct {
	// s3 load balancer samples
	S3LoadBalancerSamples []S3LoadBalancerStat `json:"s3_load_balancer_samples"`
}

type _S3LoadBalancerSamplesResp S3LoadBalancerSamplesResp

// NewS3LoadBalancerSamplesResp instantiates a new S3LoadBalancerSamplesResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewS3LoadBalancerSamplesResp(s3LoadBalancerSamples []S3LoadBalancerStat) *S3LoadBalancerSamplesResp {
	this := S3LoadBalancerSamplesResp{}
	this.S3LoadBalancerSamples = s3LoadBalancerSamples
	return &this
}

// NewS3LoadBalancerSamplesRespWithDefaults instantiates a new S3LoadBalancerSamplesResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewS3LoadBalancerSamplesRespWithDefaults() *S3LoadBalancerSamplesResp {
	this := S3LoadBalancerSamplesResp{}
	return &this
}

// GetS3LoadBalancerSamples returns the S3LoadBalancerSamples field value
func (o *S3LoadBalancerSamplesResp) GetS3LoadBalancerSamples() []S3LoadBalancerStat {
	if o == nil {
		var ret []S3LoadBalancerStat
		return ret
	}

	return o.S3LoadBalancerSamples
}

// GetS3LoadBalancerSamplesOk returns a tuple with the S3LoadBalancerSamples field value
// and a boolean to check if the value has been set.
func (o *S3LoadBalancerSamplesResp) GetS3LoadBalancerSamplesOk() ([]S3LoadBalancerStat, bool) {
	if o == nil {
		return nil, false
	}
	return o.S3LoadBalancerSamples, true
}

// SetS3LoadBalancerSamples sets field value
func (o *S3LoadBalancerSamplesResp) SetS3LoadBalancerSamples(v []S3LoadBalancerStat) {
	o.S3LoadBalancerSamples = v
}

func (o S3LoadBalancerSamplesResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o S3LoadBalancerSamplesResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["s3_load_balancer_samples"] = o.S3LoadBalancerSamples
	return toSerialize, nil
}

func (o *S3LoadBalancerSamplesResp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"s3_load_balancer_samples",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varS3LoadBalancerSamplesResp := _S3LoadBalancerSamplesResp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varS3LoadBalancerSamplesResp)

	if err != nil {
		return err
	}

	*o = S3LoadBalancerSamplesResp(varS3LoadBalancerSamplesResp)

	return err
}

type NullableS3LoadBalancerSamplesResp struct {
	value *S3LoadBalancerSamplesResp
	isSet bool
}

func (v NullableS3LoadBalancerSamplesResp) Get() *S3LoadBalancerSamplesResp {
	return v.value
}

func (v *NullableS3LoadBalancerSamplesResp) Set(val *S3LoadBalancerSamplesResp) {
	v.value = val
	v.isSet = true
}

func (v NullableS3LoadBalancerSamplesResp) IsSet() bool {
	return v.isSet
}

func (v *NullableS3LoadBalancerSamplesResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableS3LoadBalancerSamplesResp(val *S3LoadBalancerSamplesResp) *NullableS3LoadBalancerSamplesResp {
	return &NullableS3LoadBalancerSamplesResp{value: val, isSet: true}
}

func (v NullableS3LoadBalancerSamplesResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableS3LoadBalancerSamplesResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


