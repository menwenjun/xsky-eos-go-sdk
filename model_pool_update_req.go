/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PoolUpdateReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PoolUpdateReq{}

// PoolUpdateReq struct for PoolUpdateReq
type PoolUpdateReq struct {
	Pool PoolUpdateReqPool `json:"pool"`
}

type _PoolUpdateReq PoolUpdateReq

// NewPoolUpdateReq instantiates a new PoolUpdateReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPoolUpdateReq(pool PoolUpdateReqPool) *PoolUpdateReq {
	this := PoolUpdateReq{}
	this.Pool = pool
	return &this
}

// NewPoolUpdateReqWithDefaults instantiates a new PoolUpdateReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPoolUpdateReqWithDefaults() *PoolUpdateReq {
	this := PoolUpdateReq{}
	return &this
}

// GetPool returns the Pool field value
func (o *PoolUpdateReq) GetPool() PoolUpdateReqPool {
	if o == nil {
		var ret PoolUpdateReqPool
		return ret
	}

	return o.Pool
}

// GetPoolOk returns a tuple with the Pool field value
// and a boolean to check if the value has been set.
func (o *PoolUpdateReq) GetPoolOk() (*PoolUpdateReqPool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pool, true
}

// SetPool sets field value
func (o *PoolUpdateReq) SetPool(v PoolUpdateReqPool) {
	o.Pool = v
}

func (o PoolUpdateReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PoolUpdateReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["pool"] = o.Pool
	return toSerialize, nil
}

func (o *PoolUpdateReq) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pool",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPoolUpdateReq := _PoolUpdateReq{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPoolUpdateReq)

	if err != nil {
		return err
	}

	*o = PoolUpdateReq(varPoolUpdateReq)

	return err
}

type NullablePoolUpdateReq struct {
	value *PoolUpdateReq
	isSet bool
}

func (v NullablePoolUpdateReq) Get() *PoolUpdateReq {
	return v.value
}

func (v *NullablePoolUpdateReq) Set(val *PoolUpdateReq) {
	v.value = val
	v.isSet = true
}

func (v NullablePoolUpdateReq) IsSet() bool {
	return v.isSet
}

func (v *NullablePoolUpdateReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePoolUpdateReq(val *PoolUpdateReq) *NullablePoolUpdateReq {
	return &NullablePoolUpdateReq{value: val, isSet: true}
}

func (v NullablePoolUpdateReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePoolUpdateReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


