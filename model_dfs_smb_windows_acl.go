/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DfsSMBWindowsACL type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsSMBWindowsACL{}

// DfsSMBWindowsACL DfsSMBWindowsACL windows acl
type DfsSMBWindowsACL struct {
	Aces []DfsSMBWindowsACE `json:"aces,omitempty"`
	Control *string `json:"control,omitempty"`
	DfsRootfs *DfsRootfs `json:"dfs_rootfs,omitempty"`
	Group *string `json:"group,omitempty"`
	InheritanceEnabled *bool `json:"inheritance_enabled,omitempty"`
	Owner *string `json:"owner,omitempty"`
	Path *string `json:"path,omitempty"`
	Revision *string `json:"revision,omitempty"`
}

// NewDfsSMBWindowsACL instantiates a new DfsSMBWindowsACL object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsSMBWindowsACL() *DfsSMBWindowsACL {
	this := DfsSMBWindowsACL{}
	return &this
}

// NewDfsSMBWindowsACLWithDefaults instantiates a new DfsSMBWindowsACL object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsSMBWindowsACLWithDefaults() *DfsSMBWindowsACL {
	this := DfsSMBWindowsACL{}
	return &this
}

// GetAces returns the Aces field value if set, zero value otherwise.
func (o *DfsSMBWindowsACL) GetAces() []DfsSMBWindowsACE {
	if o == nil || IsNil(o.Aces) {
		var ret []DfsSMBWindowsACE
		return ret
	}
	return o.Aces
}

// GetAcesOk returns a tuple with the Aces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBWindowsACL) GetAcesOk() ([]DfsSMBWindowsACE, bool) {
	if o == nil || IsNil(o.Aces) {
		return nil, false
	}
	return o.Aces, true
}

// HasAces returns a boolean if a field has been set.
func (o *DfsSMBWindowsACL) HasAces() bool {
	if o != nil && !IsNil(o.Aces) {
		return true
	}

	return false
}

// SetAces gets a reference to the given []DfsSMBWindowsACE and assigns it to the Aces field.
func (o *DfsSMBWindowsACL) SetAces(v []DfsSMBWindowsACE) {
	o.Aces = v
}

// GetControl returns the Control field value if set, zero value otherwise.
func (o *DfsSMBWindowsACL) GetControl() string {
	if o == nil || IsNil(o.Control) {
		var ret string
		return ret
	}
	return *o.Control
}

// GetControlOk returns a tuple with the Control field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBWindowsACL) GetControlOk() (*string, bool) {
	if o == nil || IsNil(o.Control) {
		return nil, false
	}
	return o.Control, true
}

// HasControl returns a boolean if a field has been set.
func (o *DfsSMBWindowsACL) HasControl() bool {
	if o != nil && !IsNil(o.Control) {
		return true
	}

	return false
}

// SetControl gets a reference to the given string and assigns it to the Control field.
func (o *DfsSMBWindowsACL) SetControl(v string) {
	o.Control = &v
}

// GetDfsRootfs returns the DfsRootfs field value if set, zero value otherwise.
func (o *DfsSMBWindowsACL) GetDfsRootfs() DfsRootfs {
	if o == nil || IsNil(o.DfsRootfs) {
		var ret DfsRootfs
		return ret
	}
	return *o.DfsRootfs
}

// GetDfsRootfsOk returns a tuple with the DfsRootfs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBWindowsACL) GetDfsRootfsOk() (*DfsRootfs, bool) {
	if o == nil || IsNil(o.DfsRootfs) {
		return nil, false
	}
	return o.DfsRootfs, true
}

// HasDfsRootfs returns a boolean if a field has been set.
func (o *DfsSMBWindowsACL) HasDfsRootfs() bool {
	if o != nil && !IsNil(o.DfsRootfs) {
		return true
	}

	return false
}

// SetDfsRootfs gets a reference to the given DfsRootfs and assigns it to the DfsRootfs field.
func (o *DfsSMBWindowsACL) SetDfsRootfs(v DfsRootfs) {
	o.DfsRootfs = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *DfsSMBWindowsACL) GetGroup() string {
	if o == nil || IsNil(o.Group) {
		var ret string
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBWindowsACL) GetGroupOk() (*string, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *DfsSMBWindowsACL) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given string and assigns it to the Group field.
func (o *DfsSMBWindowsACL) SetGroup(v string) {
	o.Group = &v
}

// GetInheritanceEnabled returns the InheritanceEnabled field value if set, zero value otherwise.
func (o *DfsSMBWindowsACL) GetInheritanceEnabled() bool {
	if o == nil || IsNil(o.InheritanceEnabled) {
		var ret bool
		return ret
	}
	return *o.InheritanceEnabled
}

// GetInheritanceEnabledOk returns a tuple with the InheritanceEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBWindowsACL) GetInheritanceEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.InheritanceEnabled) {
		return nil, false
	}
	return o.InheritanceEnabled, true
}

// HasInheritanceEnabled returns a boolean if a field has been set.
func (o *DfsSMBWindowsACL) HasInheritanceEnabled() bool {
	if o != nil && !IsNil(o.InheritanceEnabled) {
		return true
	}

	return false
}

// SetInheritanceEnabled gets a reference to the given bool and assigns it to the InheritanceEnabled field.
func (o *DfsSMBWindowsACL) SetInheritanceEnabled(v bool) {
	o.InheritanceEnabled = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *DfsSMBWindowsACL) GetOwner() string {
	if o == nil || IsNil(o.Owner) {
		var ret string
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBWindowsACL) GetOwnerOk() (*string, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *DfsSMBWindowsACL) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given string and assigns it to the Owner field.
func (o *DfsSMBWindowsACL) SetOwner(v string) {
	o.Owner = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *DfsSMBWindowsACL) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBWindowsACL) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *DfsSMBWindowsACL) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *DfsSMBWindowsACL) SetPath(v string) {
	o.Path = &v
}

// GetRevision returns the Revision field value if set, zero value otherwise.
func (o *DfsSMBWindowsACL) GetRevision() string {
	if o == nil || IsNil(o.Revision) {
		var ret string
		return ret
	}
	return *o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBWindowsACL) GetRevisionOk() (*string, bool) {
	if o == nil || IsNil(o.Revision) {
		return nil, false
	}
	return o.Revision, true
}

// HasRevision returns a boolean if a field has been set.
func (o *DfsSMBWindowsACL) HasRevision() bool {
	if o != nil && !IsNil(o.Revision) {
		return true
	}

	return false
}

// SetRevision gets a reference to the given string and assigns it to the Revision field.
func (o *DfsSMBWindowsACL) SetRevision(v string) {
	o.Revision = &v
}

func (o DfsSMBWindowsACL) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsSMBWindowsACL) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Aces) {
		toSerialize["aces"] = o.Aces
	}
	if !IsNil(o.Control) {
		toSerialize["control"] = o.Control
	}
	if !IsNil(o.DfsRootfs) {
		toSerialize["dfs_rootfs"] = o.DfsRootfs
	}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	if !IsNil(o.InheritanceEnabled) {
		toSerialize["inheritance_enabled"] = o.InheritanceEnabled
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.Revision) {
		toSerialize["revision"] = o.Revision
	}
	return toSerialize, nil
}

type NullableDfsSMBWindowsACL struct {
	value *DfsSMBWindowsACL
	isSet bool
}

func (v NullableDfsSMBWindowsACL) Get() *DfsSMBWindowsACL {
	return v.value
}

func (v *NullableDfsSMBWindowsACL) Set(val *DfsSMBWindowsACL) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsSMBWindowsACL) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsSMBWindowsACL) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsSMBWindowsACL(val *DfsSMBWindowsACL) *NullableDfsSMBWindowsACL {
	return &NullableDfsSMBWindowsACL{value: val, isSet: true}
}

func (v NullableDfsSMBWindowsACL) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsSMBWindowsACL) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


