/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SnapshotBackupConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SnapshotBackupConfig{}

// SnapshotBackupConfig SnapshotBackupConfig contains config for snapshot backup
type SnapshotBackupConfig struct {
	AccessKey *string `json:"access_key,omitempty"`
	AppId *string `json:"app_id,omitempty"`
	Bucket *string `json:"bucket,omitempty"`
	MountPath *string `json:"mount_path,omitempty"`
	Password *string `json:"password,omitempty"`
	Port *int64 `json:"port,omitempty"`
	Region *string `json:"region,omitempty"`
	SecretKey *string `json:"secret_key,omitempty"`
	Username *string `json:"username,omitempty"`
}

// NewSnapshotBackupConfig instantiates a new SnapshotBackupConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnapshotBackupConfig() *SnapshotBackupConfig {
	this := SnapshotBackupConfig{}
	return &this
}

// NewSnapshotBackupConfigWithDefaults instantiates a new SnapshotBackupConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnapshotBackupConfigWithDefaults() *SnapshotBackupConfig {
	this := SnapshotBackupConfig{}
	return &this
}

// GetAccessKey returns the AccessKey field value if set, zero value otherwise.
func (o *SnapshotBackupConfig) GetAccessKey() string {
	if o == nil || IsNil(o.AccessKey) {
		var ret string
		return ret
	}
	return *o.AccessKey
}

// GetAccessKeyOk returns a tuple with the AccessKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotBackupConfig) GetAccessKeyOk() (*string, bool) {
	if o == nil || IsNil(o.AccessKey) {
		return nil, false
	}
	return o.AccessKey, true
}

// HasAccessKey returns a boolean if a field has been set.
func (o *SnapshotBackupConfig) HasAccessKey() bool {
	if o != nil && !IsNil(o.AccessKey) {
		return true
	}

	return false
}

// SetAccessKey gets a reference to the given string and assigns it to the AccessKey field.
func (o *SnapshotBackupConfig) SetAccessKey(v string) {
	o.AccessKey = &v
}

// GetAppId returns the AppId field value if set, zero value otherwise.
func (o *SnapshotBackupConfig) GetAppId() string {
	if o == nil || IsNil(o.AppId) {
		var ret string
		return ret
	}
	return *o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotBackupConfig) GetAppIdOk() (*string, bool) {
	if o == nil || IsNil(o.AppId) {
		return nil, false
	}
	return o.AppId, true
}

// HasAppId returns a boolean if a field has been set.
func (o *SnapshotBackupConfig) HasAppId() bool {
	if o != nil && !IsNil(o.AppId) {
		return true
	}

	return false
}

// SetAppId gets a reference to the given string and assigns it to the AppId field.
func (o *SnapshotBackupConfig) SetAppId(v string) {
	o.AppId = &v
}

// GetBucket returns the Bucket field value if set, zero value otherwise.
func (o *SnapshotBackupConfig) GetBucket() string {
	if o == nil || IsNil(o.Bucket) {
		var ret string
		return ret
	}
	return *o.Bucket
}

// GetBucketOk returns a tuple with the Bucket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotBackupConfig) GetBucketOk() (*string, bool) {
	if o == nil || IsNil(o.Bucket) {
		return nil, false
	}
	return o.Bucket, true
}

// HasBucket returns a boolean if a field has been set.
func (o *SnapshotBackupConfig) HasBucket() bool {
	if o != nil && !IsNil(o.Bucket) {
		return true
	}

	return false
}

// SetBucket gets a reference to the given string and assigns it to the Bucket field.
func (o *SnapshotBackupConfig) SetBucket(v string) {
	o.Bucket = &v
}

// GetMountPath returns the MountPath field value if set, zero value otherwise.
func (o *SnapshotBackupConfig) GetMountPath() string {
	if o == nil || IsNil(o.MountPath) {
		var ret string
		return ret
	}
	return *o.MountPath
}

// GetMountPathOk returns a tuple with the MountPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotBackupConfig) GetMountPathOk() (*string, bool) {
	if o == nil || IsNil(o.MountPath) {
		return nil, false
	}
	return o.MountPath, true
}

// HasMountPath returns a boolean if a field has been set.
func (o *SnapshotBackupConfig) HasMountPath() bool {
	if o != nil && !IsNil(o.MountPath) {
		return true
	}

	return false
}

// SetMountPath gets a reference to the given string and assigns it to the MountPath field.
func (o *SnapshotBackupConfig) SetMountPath(v string) {
	o.MountPath = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *SnapshotBackupConfig) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotBackupConfig) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *SnapshotBackupConfig) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *SnapshotBackupConfig) SetPassword(v string) {
	o.Password = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *SnapshotBackupConfig) GetPort() int64 {
	if o == nil || IsNil(o.Port) {
		var ret int64
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotBackupConfig) GetPortOk() (*int64, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *SnapshotBackupConfig) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int64 and assigns it to the Port field.
func (o *SnapshotBackupConfig) SetPort(v int64) {
	o.Port = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *SnapshotBackupConfig) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotBackupConfig) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *SnapshotBackupConfig) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *SnapshotBackupConfig) SetRegion(v string) {
	o.Region = &v
}

// GetSecretKey returns the SecretKey field value if set, zero value otherwise.
func (o *SnapshotBackupConfig) GetSecretKey() string {
	if o == nil || IsNil(o.SecretKey) {
		var ret string
		return ret
	}
	return *o.SecretKey
}

// GetSecretKeyOk returns a tuple with the SecretKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotBackupConfig) GetSecretKeyOk() (*string, bool) {
	if o == nil || IsNil(o.SecretKey) {
		return nil, false
	}
	return o.SecretKey, true
}

// HasSecretKey returns a boolean if a field has been set.
func (o *SnapshotBackupConfig) HasSecretKey() bool {
	if o != nil && !IsNil(o.SecretKey) {
		return true
	}

	return false
}

// SetSecretKey gets a reference to the given string and assigns it to the SecretKey field.
func (o *SnapshotBackupConfig) SetSecretKey(v string) {
	o.SecretKey = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *SnapshotBackupConfig) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotBackupConfig) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *SnapshotBackupConfig) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *SnapshotBackupConfig) SetUsername(v string) {
	o.Username = &v
}

func (o SnapshotBackupConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnapshotBackupConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccessKey) {
		toSerialize["access_key"] = o.AccessKey
	}
	if !IsNil(o.AppId) {
		toSerialize["app_id"] = o.AppId
	}
	if !IsNil(o.Bucket) {
		toSerialize["bucket"] = o.Bucket
	}
	if !IsNil(o.MountPath) {
		toSerialize["mount_path"] = o.MountPath
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.SecretKey) {
		toSerialize["secret_key"] = o.SecretKey
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	return toSerialize, nil
}

type NullableSnapshotBackupConfig struct {
	value *SnapshotBackupConfig
	isSet bool
}

func (v NullableSnapshotBackupConfig) Get() *SnapshotBackupConfig {
	return v.value
}

func (v *NullableSnapshotBackupConfig) Set(val *SnapshotBackupConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableSnapshotBackupConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableSnapshotBackupConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnapshotBackupConfig(val *SnapshotBackupConfig) *NullableSnapshotBackupConfig {
	return &NullableSnapshotBackupConfig{value: val, isSet: true}
}

func (v NullableSnapshotBackupConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnapshotBackupConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


