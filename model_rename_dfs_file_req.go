/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RenameDfsFileReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RenameDfsFileReq{}

// RenameDfsFileReq struct for RenameDfsFileReq
type RenameDfsFileReq struct {
	DfsFile RenameDfsFileReqFile `json:"dfs_file"`
}

type _RenameDfsFileReq RenameDfsFileReq

// NewRenameDfsFileReq instantiates a new RenameDfsFileReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRenameDfsFileReq(dfsFile RenameDfsFileReqFile) *RenameDfsFileReq {
	this := RenameDfsFileReq{}
	this.DfsFile = dfsFile
	return &this
}

// NewRenameDfsFileReqWithDefaults instantiates a new RenameDfsFileReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRenameDfsFileReqWithDefaults() *RenameDfsFileReq {
	this := RenameDfsFileReq{}
	return &this
}

// GetDfsFile returns the DfsFile field value
func (o *RenameDfsFileReq) GetDfsFile() RenameDfsFileReqFile {
	if o == nil {
		var ret RenameDfsFileReqFile
		return ret
	}

	return o.DfsFile
}

// GetDfsFileOk returns a tuple with the DfsFile field value
// and a boolean to check if the value has been set.
func (o *RenameDfsFileReq) GetDfsFileOk() (*RenameDfsFileReqFile, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DfsFile, true
}

// SetDfsFile sets field value
func (o *RenameDfsFileReq) SetDfsFile(v RenameDfsFileReqFile) {
	o.DfsFile = v
}

func (o RenameDfsFileReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RenameDfsFileReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dfs_file"] = o.DfsFile
	return toSerialize, nil
}

func (o *RenameDfsFileReq) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dfs_file",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRenameDfsFileReq := _RenameDfsFileReq{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRenameDfsFileReq)

	if err != nil {
		return err
	}

	*o = RenameDfsFileReq(varRenameDfsFileReq)

	return err
}

type NullableRenameDfsFileReq struct {
	value *RenameDfsFileReq
	isSet bool
}

func (v NullableRenameDfsFileReq) Get() *RenameDfsFileReq {
	return v.value
}

func (v *NullableRenameDfsFileReq) Set(val *RenameDfsFileReq) {
	v.value = val
	v.isSet = true
}

func (v NullableRenameDfsFileReq) IsSet() bool {
	return v.isSet
}

func (v *NullableRenameDfsFileReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRenameDfsFileReq(val *RenameDfsFileReq) *NullableRenameDfsFileReq {
	return &NullableRenameDfsFileReq{value: val, isSet: true}
}

func (v NullableRenameDfsFileReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRenameDfsFileReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


