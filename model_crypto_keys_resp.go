/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CryptoKeysResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CryptoKeysResp{}

// CryptoKeysResp struct for CryptoKeysResp
type CryptoKeysResp struct {
	CryptoKeys []CryptoKey `json:"crypto_keys"`
}

type _CryptoKeysResp CryptoKeysResp

// NewCryptoKeysResp instantiates a new CryptoKeysResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCryptoKeysResp(cryptoKeys []CryptoKey) *CryptoKeysResp {
	this := CryptoKeysResp{}
	this.CryptoKeys = cryptoKeys
	return &this
}

// NewCryptoKeysRespWithDefaults instantiates a new CryptoKeysResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCryptoKeysRespWithDefaults() *CryptoKeysResp {
	this := CryptoKeysResp{}
	return &this
}

// GetCryptoKeys returns the CryptoKeys field value
func (o *CryptoKeysResp) GetCryptoKeys() []CryptoKey {
	if o == nil {
		var ret []CryptoKey
		return ret
	}

	return o.CryptoKeys
}

// GetCryptoKeysOk returns a tuple with the CryptoKeys field value
// and a boolean to check if the value has been set.
func (o *CryptoKeysResp) GetCryptoKeysOk() ([]CryptoKey, bool) {
	if o == nil {
		return nil, false
	}
	return o.CryptoKeys, true
}

// SetCryptoKeys sets field value
func (o *CryptoKeysResp) SetCryptoKeys(v []CryptoKey) {
	o.CryptoKeys = v
}

func (o CryptoKeysResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CryptoKeysResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["crypto_keys"] = o.CryptoKeys
	return toSerialize, nil
}

func (o *CryptoKeysResp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"crypto_keys",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCryptoKeysResp := _CryptoKeysResp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCryptoKeysResp)

	if err != nil {
		return err
	}

	*o = CryptoKeysResp(varCryptoKeysResp)

	return err
}

type NullableCryptoKeysResp struct {
	value *CryptoKeysResp
	isSet bool
}

func (v NullableCryptoKeysResp) Get() *CryptoKeysResp {
	return v.value
}

func (v *NullableCryptoKeysResp) Set(val *CryptoKeysResp) {
	v.value = val
	v.isSet = true
}

func (v NullableCryptoKeysResp) IsSet() bool {
	return v.isSet
}

func (v *NullableCryptoKeysResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCryptoKeysResp(val *CryptoKeysResp) *NullableCryptoKeysResp {
	return &NullableCryptoKeysResp{value: val, isSet: true}
}

func (v NullableCryptoKeysResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCryptoKeysResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


