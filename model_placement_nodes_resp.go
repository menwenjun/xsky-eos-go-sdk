/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PlacementNodesResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlacementNodesResp{}

// PlacementNodesResp struct for PlacementNodesResp
type PlacementNodesResp struct {
	// placement nodes
	PlacementNodes []PlacementNodeRecord `json:"placement_nodes"`
}

type _PlacementNodesResp PlacementNodesResp

// NewPlacementNodesResp instantiates a new PlacementNodesResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlacementNodesResp(placementNodes []PlacementNodeRecord) *PlacementNodesResp {
	this := PlacementNodesResp{}
	this.PlacementNodes = placementNodes
	return &this
}

// NewPlacementNodesRespWithDefaults instantiates a new PlacementNodesResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlacementNodesRespWithDefaults() *PlacementNodesResp {
	this := PlacementNodesResp{}
	return &this
}

// GetPlacementNodes returns the PlacementNodes field value
func (o *PlacementNodesResp) GetPlacementNodes() []PlacementNodeRecord {
	if o == nil {
		var ret []PlacementNodeRecord
		return ret
	}

	return o.PlacementNodes
}

// GetPlacementNodesOk returns a tuple with the PlacementNodes field value
// and a boolean to check if the value has been set.
func (o *PlacementNodesResp) GetPlacementNodesOk() ([]PlacementNodeRecord, bool) {
	if o == nil {
		return nil, false
	}
	return o.PlacementNodes, true
}

// SetPlacementNodes sets field value
func (o *PlacementNodesResp) SetPlacementNodes(v []PlacementNodeRecord) {
	o.PlacementNodes = v
}

func (o PlacementNodesResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlacementNodesResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["placement_nodes"] = o.PlacementNodes
	return toSerialize, nil
}

func (o *PlacementNodesResp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"placement_nodes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPlacementNodesResp := _PlacementNodesResp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPlacementNodesResp)

	if err != nil {
		return err
	}

	*o = PlacementNodesResp(varPlacementNodesResp)

	return err
}

type NullablePlacementNodesResp struct {
	value *PlacementNodesResp
	isSet bool
}

func (v NullablePlacementNodesResp) Get() *PlacementNodesResp {
	return v.value
}

func (v *NullablePlacementNodesResp) Set(val *PlacementNodesResp) {
	v.value = val
	v.isSet = true
}

func (v NullablePlacementNodesResp) IsSet() bool {
	return v.isSet
}

func (v *NullablePlacementNodesResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlacementNodesResp(val *PlacementNodesResp) *NullablePlacementNodesResp {
	return &NullablePlacementNodesResp{value: val, isSet: true}
}

func (v NullablePlacementNodesResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlacementNodesResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


