/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DfsNFSShareRemoveACLsReqShare type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsNFSShareRemoveACLsReqShare{}

// DfsNFSShareRemoveACLsReqShare struct for DfsNFSShareRemoveACLsReqShare
type DfsNFSShareRemoveACLsReqShare struct {
	// access control array
	DfsNfsShareAclIds []int64 `json:"dfs_nfs_share_acl_ids"`
}

type _DfsNFSShareRemoveACLsReqShare DfsNFSShareRemoveACLsReqShare

// NewDfsNFSShareRemoveACLsReqShare instantiates a new DfsNFSShareRemoveACLsReqShare object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsNFSShareRemoveACLsReqShare(dfsNfsShareAclIds []int64) *DfsNFSShareRemoveACLsReqShare {
	this := DfsNFSShareRemoveACLsReqShare{}
	this.DfsNfsShareAclIds = dfsNfsShareAclIds
	return &this
}

// NewDfsNFSShareRemoveACLsReqShareWithDefaults instantiates a new DfsNFSShareRemoveACLsReqShare object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsNFSShareRemoveACLsReqShareWithDefaults() *DfsNFSShareRemoveACLsReqShare {
	this := DfsNFSShareRemoveACLsReqShare{}
	return &this
}

// GetDfsNfsShareAclIds returns the DfsNfsShareAclIds field value
func (o *DfsNFSShareRemoveACLsReqShare) GetDfsNfsShareAclIds() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}

	return o.DfsNfsShareAclIds
}

// GetDfsNfsShareAclIdsOk returns a tuple with the DfsNfsShareAclIds field value
// and a boolean to check if the value has been set.
func (o *DfsNFSShareRemoveACLsReqShare) GetDfsNfsShareAclIdsOk() ([]int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.DfsNfsShareAclIds, true
}

// SetDfsNfsShareAclIds sets field value
func (o *DfsNFSShareRemoveACLsReqShare) SetDfsNfsShareAclIds(v []int64) {
	o.DfsNfsShareAclIds = v
}

func (o DfsNFSShareRemoveACLsReqShare) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsNFSShareRemoveACLsReqShare) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dfs_nfs_share_acl_ids"] = o.DfsNfsShareAclIds
	return toSerialize, nil
}

func (o *DfsNFSShareRemoveACLsReqShare) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dfs_nfs_share_acl_ids",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDfsNFSShareRemoveACLsReqShare := _DfsNFSShareRemoveACLsReqShare{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDfsNFSShareRemoveACLsReqShare)

	if err != nil {
		return err
	}

	*o = DfsNFSShareRemoveACLsReqShare(varDfsNFSShareRemoveACLsReqShare)

	return err
}

type NullableDfsNFSShareRemoveACLsReqShare struct {
	value *DfsNFSShareRemoveACLsReqShare
	isSet bool
}

func (v NullableDfsNFSShareRemoveACLsReqShare) Get() *DfsNFSShareRemoveACLsReqShare {
	return v.value
}

func (v *NullableDfsNFSShareRemoveACLsReqShare) Set(val *DfsNFSShareRemoveACLsReqShare) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsNFSShareRemoveACLsReqShare) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsNFSShareRemoveACLsReqShare) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsNFSShareRemoveACLsReqShare(val *DfsNFSShareRemoveACLsReqShare) *NullableDfsNFSShareRemoveACLsReqShare {
	return &NullableDfsNFSShareRemoveACLsReqShare{value: val, isSet: true}
}

func (v NullableDfsNFSShareRemoveACLsReqShare) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsNFSShareRemoveACLsReqShare) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


