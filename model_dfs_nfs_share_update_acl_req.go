/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DfsNFSShareUpdateACLReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsNFSShareUpdateACLReq{}

// DfsNFSShareUpdateACLReq struct for DfsNFSShareUpdateACLReq
type DfsNFSShareUpdateACLReq struct {
	// all squash
	AllSquash *bool `json:"all_squash,omitempty"`
	// ip or network list, separated by comma
	Clients *string `json:"clients,omitempty"`
	// id of user group
	Id *int64 `json:"id,omitempty"`
	// readonly or readwrite access
	Permission *string `json:"permission,omitempty"`
	// root squash
	RootSquash *bool `json:"root_squash,omitempty"`
	// write to disk by sync or async
	Sync *bool `json:"sync,omitempty"`
}

// NewDfsNFSShareUpdateACLReq instantiates a new DfsNFSShareUpdateACLReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsNFSShareUpdateACLReq() *DfsNFSShareUpdateACLReq {
	this := DfsNFSShareUpdateACLReq{}
	return &this
}

// NewDfsNFSShareUpdateACLReqWithDefaults instantiates a new DfsNFSShareUpdateACLReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsNFSShareUpdateACLReqWithDefaults() *DfsNFSShareUpdateACLReq {
	this := DfsNFSShareUpdateACLReq{}
	return &this
}

// GetAllSquash returns the AllSquash field value if set, zero value otherwise.
func (o *DfsNFSShareUpdateACLReq) GetAllSquash() bool {
	if o == nil || IsNil(o.AllSquash) {
		var ret bool
		return ret
	}
	return *o.AllSquash
}

// GetAllSquashOk returns a tuple with the AllSquash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsNFSShareUpdateACLReq) GetAllSquashOk() (*bool, bool) {
	if o == nil || IsNil(o.AllSquash) {
		return nil, false
	}
	return o.AllSquash, true
}

// HasAllSquash returns a boolean if a field has been set.
func (o *DfsNFSShareUpdateACLReq) HasAllSquash() bool {
	if o != nil && !IsNil(o.AllSquash) {
		return true
	}

	return false
}

// SetAllSquash gets a reference to the given bool and assigns it to the AllSquash field.
func (o *DfsNFSShareUpdateACLReq) SetAllSquash(v bool) {
	o.AllSquash = &v
}

// GetClients returns the Clients field value if set, zero value otherwise.
func (o *DfsNFSShareUpdateACLReq) GetClients() string {
	if o == nil || IsNil(o.Clients) {
		var ret string
		return ret
	}
	return *o.Clients
}

// GetClientsOk returns a tuple with the Clients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsNFSShareUpdateACLReq) GetClientsOk() (*string, bool) {
	if o == nil || IsNil(o.Clients) {
		return nil, false
	}
	return o.Clients, true
}

// HasClients returns a boolean if a field has been set.
func (o *DfsNFSShareUpdateACLReq) HasClients() bool {
	if o != nil && !IsNil(o.Clients) {
		return true
	}

	return false
}

// SetClients gets a reference to the given string and assigns it to the Clients field.
func (o *DfsNFSShareUpdateACLReq) SetClients(v string) {
	o.Clients = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DfsNFSShareUpdateACLReq) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsNFSShareUpdateACLReq) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DfsNFSShareUpdateACLReq) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *DfsNFSShareUpdateACLReq) SetId(v int64) {
	o.Id = &v
}

// GetPermission returns the Permission field value if set, zero value otherwise.
func (o *DfsNFSShareUpdateACLReq) GetPermission() string {
	if o == nil || IsNil(o.Permission) {
		var ret string
		return ret
	}
	return *o.Permission
}

// GetPermissionOk returns a tuple with the Permission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsNFSShareUpdateACLReq) GetPermissionOk() (*string, bool) {
	if o == nil || IsNil(o.Permission) {
		return nil, false
	}
	return o.Permission, true
}

// HasPermission returns a boolean if a field has been set.
func (o *DfsNFSShareUpdateACLReq) HasPermission() bool {
	if o != nil && !IsNil(o.Permission) {
		return true
	}

	return false
}

// SetPermission gets a reference to the given string and assigns it to the Permission field.
func (o *DfsNFSShareUpdateACLReq) SetPermission(v string) {
	o.Permission = &v
}

// GetRootSquash returns the RootSquash field value if set, zero value otherwise.
func (o *DfsNFSShareUpdateACLReq) GetRootSquash() bool {
	if o == nil || IsNil(o.RootSquash) {
		var ret bool
		return ret
	}
	return *o.RootSquash
}

// GetRootSquashOk returns a tuple with the RootSquash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsNFSShareUpdateACLReq) GetRootSquashOk() (*bool, bool) {
	if o == nil || IsNil(o.RootSquash) {
		return nil, false
	}
	return o.RootSquash, true
}

// HasRootSquash returns a boolean if a field has been set.
func (o *DfsNFSShareUpdateACLReq) HasRootSquash() bool {
	if o != nil && !IsNil(o.RootSquash) {
		return true
	}

	return false
}

// SetRootSquash gets a reference to the given bool and assigns it to the RootSquash field.
func (o *DfsNFSShareUpdateACLReq) SetRootSquash(v bool) {
	o.RootSquash = &v
}

// GetSync returns the Sync field value if set, zero value otherwise.
func (o *DfsNFSShareUpdateACLReq) GetSync() bool {
	if o == nil || IsNil(o.Sync) {
		var ret bool
		return ret
	}
	return *o.Sync
}

// GetSyncOk returns a tuple with the Sync field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsNFSShareUpdateACLReq) GetSyncOk() (*bool, bool) {
	if o == nil || IsNil(o.Sync) {
		return nil, false
	}
	return o.Sync, true
}

// HasSync returns a boolean if a field has been set.
func (o *DfsNFSShareUpdateACLReq) HasSync() bool {
	if o != nil && !IsNil(o.Sync) {
		return true
	}

	return false
}

// SetSync gets a reference to the given bool and assigns it to the Sync field.
func (o *DfsNFSShareUpdateACLReq) SetSync(v bool) {
	o.Sync = &v
}

func (o DfsNFSShareUpdateACLReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsNFSShareUpdateACLReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllSquash) {
		toSerialize["all_squash"] = o.AllSquash
	}
	if !IsNil(o.Clients) {
		toSerialize["clients"] = o.Clients
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Permission) {
		toSerialize["permission"] = o.Permission
	}
	if !IsNil(o.RootSquash) {
		toSerialize["root_squash"] = o.RootSquash
	}
	if !IsNil(o.Sync) {
		toSerialize["sync"] = o.Sync
	}
	return toSerialize, nil
}

type NullableDfsNFSShareUpdateACLReq struct {
	value *DfsNFSShareUpdateACLReq
	isSet bool
}

func (v NullableDfsNFSShareUpdateACLReq) Get() *DfsNFSShareUpdateACLReq {
	return v.value
}

func (v *NullableDfsNFSShareUpdateACLReq) Set(val *DfsNFSShareUpdateACLReq) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsNFSShareUpdateACLReq) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsNFSShareUpdateACLReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsNFSShareUpdateACLReq(val *DfsNFSShareUpdateACLReq) *NullableDfsNFSShareUpdateACLReq {
	return &NullableDfsNFSShareUpdateACLReq{value: val, isSet: true}
}

func (v NullableDfsNFSShareUpdateACLReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsNFSShareUpdateACLReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


