/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MatchingRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchingRule{}

// MatchingRule MatchingRule defines matching rule of object
type MatchingRule struct {
	ClassId *string `json:"class_id,omitempty"`
	ClassName *string `json:"class_name,omitempty"`
	MatchingCondition *MatchingRuleMatchCondition `json:"matching_condition,omitempty"`
	Prior *int32 `json:"prior,omitempty"`
}

// NewMatchingRule instantiates a new MatchingRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchingRule() *MatchingRule {
	this := MatchingRule{}
	return &this
}

// NewMatchingRuleWithDefaults instantiates a new MatchingRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchingRuleWithDefaults() *MatchingRule {
	this := MatchingRule{}
	return &this
}

// GetClassId returns the ClassId field value if set, zero value otherwise.
func (o *MatchingRule) GetClassId() string {
	if o == nil || IsNil(o.ClassId) {
		var ret string
		return ret
	}
	return *o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchingRule) GetClassIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClassId) {
		return nil, false
	}
	return o.ClassId, true
}

// HasClassId returns a boolean if a field has been set.
func (o *MatchingRule) HasClassId() bool {
	if o != nil && !IsNil(o.ClassId) {
		return true
	}

	return false
}

// SetClassId gets a reference to the given string and assigns it to the ClassId field.
func (o *MatchingRule) SetClassId(v string) {
	o.ClassId = &v
}

// GetClassName returns the ClassName field value if set, zero value otherwise.
func (o *MatchingRule) GetClassName() string {
	if o == nil || IsNil(o.ClassName) {
		var ret string
		return ret
	}
	return *o.ClassName
}

// GetClassNameOk returns a tuple with the ClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchingRule) GetClassNameOk() (*string, bool) {
	if o == nil || IsNil(o.ClassName) {
		return nil, false
	}
	return o.ClassName, true
}

// HasClassName returns a boolean if a field has been set.
func (o *MatchingRule) HasClassName() bool {
	if o != nil && !IsNil(o.ClassName) {
		return true
	}

	return false
}

// SetClassName gets a reference to the given string and assigns it to the ClassName field.
func (o *MatchingRule) SetClassName(v string) {
	o.ClassName = &v
}

// GetMatchingCondition returns the MatchingCondition field value if set, zero value otherwise.
func (o *MatchingRule) GetMatchingCondition() MatchingRuleMatchCondition {
	if o == nil || IsNil(o.MatchingCondition) {
		var ret MatchingRuleMatchCondition
		return ret
	}
	return *o.MatchingCondition
}

// GetMatchingConditionOk returns a tuple with the MatchingCondition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchingRule) GetMatchingConditionOk() (*MatchingRuleMatchCondition, bool) {
	if o == nil || IsNil(o.MatchingCondition) {
		return nil, false
	}
	return o.MatchingCondition, true
}

// HasMatchingCondition returns a boolean if a field has been set.
func (o *MatchingRule) HasMatchingCondition() bool {
	if o != nil && !IsNil(o.MatchingCondition) {
		return true
	}

	return false
}

// SetMatchingCondition gets a reference to the given MatchingRuleMatchCondition and assigns it to the MatchingCondition field.
func (o *MatchingRule) SetMatchingCondition(v MatchingRuleMatchCondition) {
	o.MatchingCondition = &v
}

// GetPrior returns the Prior field value if set, zero value otherwise.
func (o *MatchingRule) GetPrior() int32 {
	if o == nil || IsNil(o.Prior) {
		var ret int32
		return ret
	}
	return *o.Prior
}

// GetPriorOk returns a tuple with the Prior field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchingRule) GetPriorOk() (*int32, bool) {
	if o == nil || IsNil(o.Prior) {
		return nil, false
	}
	return o.Prior, true
}

// HasPrior returns a boolean if a field has been set.
func (o *MatchingRule) HasPrior() bool {
	if o != nil && !IsNil(o.Prior) {
		return true
	}

	return false
}

// SetPrior gets a reference to the given int32 and assigns it to the Prior field.
func (o *MatchingRule) SetPrior(v int32) {
	o.Prior = &v
}

func (o MatchingRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchingRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ClassId) {
		toSerialize["class_id"] = o.ClassId
	}
	if !IsNil(o.ClassName) {
		toSerialize["class_name"] = o.ClassName
	}
	if !IsNil(o.MatchingCondition) {
		toSerialize["matching_condition"] = o.MatchingCondition
	}
	if !IsNil(o.Prior) {
		toSerialize["prior"] = o.Prior
	}
	return toSerialize, nil
}

type NullableMatchingRule struct {
	value *MatchingRule
	isSet bool
}

func (v NullableMatchingRule) Get() *MatchingRule {
	return v.value
}

func (v *NullableMatchingRule) Set(val *MatchingRule) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchingRule) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchingRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchingRule(val *MatchingRule) *NullableMatchingRule {
	return &NullableMatchingRule{value: val, isSet: true}
}

func (v NullableMatchingRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchingRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


