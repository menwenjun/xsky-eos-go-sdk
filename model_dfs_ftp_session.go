/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the DfsFTPSession type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsFTPSession{}

// DfsFTPSession DfsFTPSession defines model of dfs ftp session
type DfsFTPSession struct {
	ClientIp *string `json:"client_ip,omitempty"`
	ClientPort *int64 `json:"client_port,omitempty"`
	Cluster *ClusterNestview `json:"cluster,omitempty"`
	ConnectedAt *time.Time `json:"connected_at,omitempty"`
	Create *time.Time `json:"create,omitempty"`
	DfsFtpShare *DfsFTPShareNestview `json:"dfs_ftp_share,omitempty"`
	DfsGateway *DfsGatewayNestview `json:"dfs_gateway,omitempty"`
	Id *int64 `json:"id,omitempty"`
	Update *time.Time `json:"update,omitempty"`
	Username *string `json:"username,omitempty"`
}

// NewDfsFTPSession instantiates a new DfsFTPSession object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsFTPSession() *DfsFTPSession {
	this := DfsFTPSession{}
	return &this
}

// NewDfsFTPSessionWithDefaults instantiates a new DfsFTPSession object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsFTPSessionWithDefaults() *DfsFTPSession {
	this := DfsFTPSession{}
	return &this
}

// GetClientIp returns the ClientIp field value if set, zero value otherwise.
func (o *DfsFTPSession) GetClientIp() string {
	if o == nil || IsNil(o.ClientIp) {
		var ret string
		return ret
	}
	return *o.ClientIp
}

// GetClientIpOk returns a tuple with the ClientIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFTPSession) GetClientIpOk() (*string, bool) {
	if o == nil || IsNil(o.ClientIp) {
		return nil, false
	}
	return o.ClientIp, true
}

// HasClientIp returns a boolean if a field has been set.
func (o *DfsFTPSession) HasClientIp() bool {
	if o != nil && !IsNil(o.ClientIp) {
		return true
	}

	return false
}

// SetClientIp gets a reference to the given string and assigns it to the ClientIp field.
func (o *DfsFTPSession) SetClientIp(v string) {
	o.ClientIp = &v
}

// GetClientPort returns the ClientPort field value if set, zero value otherwise.
func (o *DfsFTPSession) GetClientPort() int64 {
	if o == nil || IsNil(o.ClientPort) {
		var ret int64
		return ret
	}
	return *o.ClientPort
}

// GetClientPortOk returns a tuple with the ClientPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFTPSession) GetClientPortOk() (*int64, bool) {
	if o == nil || IsNil(o.ClientPort) {
		return nil, false
	}
	return o.ClientPort, true
}

// HasClientPort returns a boolean if a field has been set.
func (o *DfsFTPSession) HasClientPort() bool {
	if o != nil && !IsNil(o.ClientPort) {
		return true
	}

	return false
}

// SetClientPort gets a reference to the given int64 and assigns it to the ClientPort field.
func (o *DfsFTPSession) SetClientPort(v int64) {
	o.ClientPort = &v
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *DfsFTPSession) GetCluster() ClusterNestview {
	if o == nil || IsNil(o.Cluster) {
		var ret ClusterNestview
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFTPSession) GetClusterOk() (*ClusterNestview, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *DfsFTPSession) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given ClusterNestview and assigns it to the Cluster field.
func (o *DfsFTPSession) SetCluster(v ClusterNestview) {
	o.Cluster = &v
}

// GetConnectedAt returns the ConnectedAt field value if set, zero value otherwise.
func (o *DfsFTPSession) GetConnectedAt() time.Time {
	if o == nil || IsNil(o.ConnectedAt) {
		var ret time.Time
		return ret
	}
	return *o.ConnectedAt
}

// GetConnectedAtOk returns a tuple with the ConnectedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFTPSession) GetConnectedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ConnectedAt) {
		return nil, false
	}
	return o.ConnectedAt, true
}

// HasConnectedAt returns a boolean if a field has been set.
func (o *DfsFTPSession) HasConnectedAt() bool {
	if o != nil && !IsNil(o.ConnectedAt) {
		return true
	}

	return false
}

// SetConnectedAt gets a reference to the given time.Time and assigns it to the ConnectedAt field.
func (o *DfsFTPSession) SetConnectedAt(v time.Time) {
	o.ConnectedAt = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *DfsFTPSession) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFTPSession) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *DfsFTPSession) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *DfsFTPSession) SetCreate(v time.Time) {
	o.Create = &v
}

// GetDfsFtpShare returns the DfsFtpShare field value if set, zero value otherwise.
func (o *DfsFTPSession) GetDfsFtpShare() DfsFTPShareNestview {
	if o == nil || IsNil(o.DfsFtpShare) {
		var ret DfsFTPShareNestview
		return ret
	}
	return *o.DfsFtpShare
}

// GetDfsFtpShareOk returns a tuple with the DfsFtpShare field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFTPSession) GetDfsFtpShareOk() (*DfsFTPShareNestview, bool) {
	if o == nil || IsNil(o.DfsFtpShare) {
		return nil, false
	}
	return o.DfsFtpShare, true
}

// HasDfsFtpShare returns a boolean if a field has been set.
func (o *DfsFTPSession) HasDfsFtpShare() bool {
	if o != nil && !IsNil(o.DfsFtpShare) {
		return true
	}

	return false
}

// SetDfsFtpShare gets a reference to the given DfsFTPShareNestview and assigns it to the DfsFtpShare field.
func (o *DfsFTPSession) SetDfsFtpShare(v DfsFTPShareNestview) {
	o.DfsFtpShare = &v
}

// GetDfsGateway returns the DfsGateway field value if set, zero value otherwise.
func (o *DfsFTPSession) GetDfsGateway() DfsGatewayNestview {
	if o == nil || IsNil(o.DfsGateway) {
		var ret DfsGatewayNestview
		return ret
	}
	return *o.DfsGateway
}

// GetDfsGatewayOk returns a tuple with the DfsGateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFTPSession) GetDfsGatewayOk() (*DfsGatewayNestview, bool) {
	if o == nil || IsNil(o.DfsGateway) {
		return nil, false
	}
	return o.DfsGateway, true
}

// HasDfsGateway returns a boolean if a field has been set.
func (o *DfsFTPSession) HasDfsGateway() bool {
	if o != nil && !IsNil(o.DfsGateway) {
		return true
	}

	return false
}

// SetDfsGateway gets a reference to the given DfsGatewayNestview and assigns it to the DfsGateway field.
func (o *DfsFTPSession) SetDfsGateway(v DfsGatewayNestview) {
	o.DfsGateway = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DfsFTPSession) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFTPSession) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DfsFTPSession) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *DfsFTPSession) SetId(v int64) {
	o.Id = &v
}

// GetUpdate returns the Update field value if set, zero value otherwise.
func (o *DfsFTPSession) GetUpdate() time.Time {
	if o == nil || IsNil(o.Update) {
		var ret time.Time
		return ret
	}
	return *o.Update
}

// GetUpdateOk returns a tuple with the Update field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFTPSession) GetUpdateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Update) {
		return nil, false
	}
	return o.Update, true
}

// HasUpdate returns a boolean if a field has been set.
func (o *DfsFTPSession) HasUpdate() bool {
	if o != nil && !IsNil(o.Update) {
		return true
	}

	return false
}

// SetUpdate gets a reference to the given time.Time and assigns it to the Update field.
func (o *DfsFTPSession) SetUpdate(v time.Time) {
	o.Update = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *DfsFTPSession) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFTPSession) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *DfsFTPSession) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *DfsFTPSession) SetUsername(v string) {
	o.Username = &v
}

func (o DfsFTPSession) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsFTPSession) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ClientIp) {
		toSerialize["client_ip"] = o.ClientIp
	}
	if !IsNil(o.ClientPort) {
		toSerialize["client_port"] = o.ClientPort
	}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !IsNil(o.ConnectedAt) {
		toSerialize["connected_at"] = o.ConnectedAt
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.DfsFtpShare) {
		toSerialize["dfs_ftp_share"] = o.DfsFtpShare
	}
	if !IsNil(o.DfsGateway) {
		toSerialize["dfs_gateway"] = o.DfsGateway
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Update) {
		toSerialize["update"] = o.Update
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	return toSerialize, nil
}

type NullableDfsFTPSession struct {
	value *DfsFTPSession
	isSet bool
}

func (v NullableDfsFTPSession) Get() *DfsFTPSession {
	return v.value
}

func (v *NullableDfsFTPSession) Set(val *DfsFTPSession) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsFTPSession) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsFTPSession) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsFTPSession(val *DfsFTPSession) *NullableDfsFTPSession {
	return &NullableDfsFTPSession{value: val, isSet: true}
}

func (v NullableDfsFTPSession) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsFTPSession) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


