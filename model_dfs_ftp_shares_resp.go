/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DfsFTPSharesResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsFTPSharesResp{}

// DfsFTPSharesResp struct for DfsFTPSharesResp
type DfsFTPSharesResp struct {
	// dfs ftp share
	DfsFtpShares []DfsFTPShareRecord `json:"dfs_ftp_shares"`
}

type _DfsFTPSharesResp DfsFTPSharesResp

// NewDfsFTPSharesResp instantiates a new DfsFTPSharesResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsFTPSharesResp(dfsFtpShares []DfsFTPShareRecord) *DfsFTPSharesResp {
	this := DfsFTPSharesResp{}
	this.DfsFtpShares = dfsFtpShares
	return &this
}

// NewDfsFTPSharesRespWithDefaults instantiates a new DfsFTPSharesResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsFTPSharesRespWithDefaults() *DfsFTPSharesResp {
	this := DfsFTPSharesResp{}
	return &this
}

// GetDfsFtpShares returns the DfsFtpShares field value
func (o *DfsFTPSharesResp) GetDfsFtpShares() []DfsFTPShareRecord {
	if o == nil {
		var ret []DfsFTPShareRecord
		return ret
	}

	return o.DfsFtpShares
}

// GetDfsFtpSharesOk returns a tuple with the DfsFtpShares field value
// and a boolean to check if the value has been set.
func (o *DfsFTPSharesResp) GetDfsFtpSharesOk() ([]DfsFTPShareRecord, bool) {
	if o == nil {
		return nil, false
	}
	return o.DfsFtpShares, true
}

// SetDfsFtpShares sets field value
func (o *DfsFTPSharesResp) SetDfsFtpShares(v []DfsFTPShareRecord) {
	o.DfsFtpShares = v
}

func (o DfsFTPSharesResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsFTPSharesResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dfs_ftp_shares"] = o.DfsFtpShares
	return toSerialize, nil
}

func (o *DfsFTPSharesResp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dfs_ftp_shares",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDfsFTPSharesResp := _DfsFTPSharesResp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDfsFTPSharesResp)

	if err != nil {
		return err
	}

	*o = DfsFTPSharesResp(varDfsFTPSharesResp)

	return err
}

type NullableDfsFTPSharesResp struct {
	value *DfsFTPSharesResp
	isSet bool
}

func (v NullableDfsFTPSharesResp) Get() *DfsFTPSharesResp {
	return v.value
}

func (v *NullableDfsFTPSharesResp) Set(val *DfsFTPSharesResp) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsFTPSharesResp) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsFTPSharesResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsFTPSharesResp(val *DfsFTPSharesResp) *NullableDfsFTPSharesResp {
	return &NullableDfsFTPSharesResp{value: val, isSet: true}
}

func (v NullableDfsFTPSharesResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsFTPSharesResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


