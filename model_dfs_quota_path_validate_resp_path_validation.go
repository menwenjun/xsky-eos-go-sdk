/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DfsQuotaPathValidateRespPathValidation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsQuotaPathValidateRespPathValidation{}

// DfsQuotaPathValidateRespPathValidation struct for DfsQuotaPathValidateRespPathValidation
type DfsQuotaPathValidateRespPathValidation struct {
	ExistDirQuota *DfsQuota `json:"exist_dir_quota,omitempty"`
	IsDirEmpty *bool `json:"is_dir_empty,omitempty"`
	IsDirExist *bool `json:"is_dir_exist,omitempty"`
	IsExceedMaxQuota *bool `json:"is_exceed_max_quota,omitempty"`
	IsQuotaExist *bool `json:"is_quota_exist,omitempty"`
	UsedFiles *int64 `json:"used_files,omitempty"`
	UsedKbyte *int64 `json:"used_kbyte,omitempty"`
	UserGroups []FSUserGroup `json:"user_groups,omitempty"`
	Users []FSUser `json:"users,omitempty"`
}

// NewDfsQuotaPathValidateRespPathValidation instantiates a new DfsQuotaPathValidateRespPathValidation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsQuotaPathValidateRespPathValidation() *DfsQuotaPathValidateRespPathValidation {
	this := DfsQuotaPathValidateRespPathValidation{}
	return &this
}

// NewDfsQuotaPathValidateRespPathValidationWithDefaults instantiates a new DfsQuotaPathValidateRespPathValidation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsQuotaPathValidateRespPathValidationWithDefaults() *DfsQuotaPathValidateRespPathValidation {
	this := DfsQuotaPathValidateRespPathValidation{}
	return &this
}

// GetExistDirQuota returns the ExistDirQuota field value if set, zero value otherwise.
func (o *DfsQuotaPathValidateRespPathValidation) GetExistDirQuota() DfsQuota {
	if o == nil || IsNil(o.ExistDirQuota) {
		var ret DfsQuota
		return ret
	}
	return *o.ExistDirQuota
}

// GetExistDirQuotaOk returns a tuple with the ExistDirQuota field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsQuotaPathValidateRespPathValidation) GetExistDirQuotaOk() (*DfsQuota, bool) {
	if o == nil || IsNil(o.ExistDirQuota) {
		return nil, false
	}
	return o.ExistDirQuota, true
}

// HasExistDirQuota returns a boolean if a field has been set.
func (o *DfsQuotaPathValidateRespPathValidation) HasExistDirQuota() bool {
	if o != nil && !IsNil(o.ExistDirQuota) {
		return true
	}

	return false
}

// SetExistDirQuota gets a reference to the given DfsQuota and assigns it to the ExistDirQuota field.
func (o *DfsQuotaPathValidateRespPathValidation) SetExistDirQuota(v DfsQuota) {
	o.ExistDirQuota = &v
}

// GetIsDirEmpty returns the IsDirEmpty field value if set, zero value otherwise.
func (o *DfsQuotaPathValidateRespPathValidation) GetIsDirEmpty() bool {
	if o == nil || IsNil(o.IsDirEmpty) {
		var ret bool
		return ret
	}
	return *o.IsDirEmpty
}

// GetIsDirEmptyOk returns a tuple with the IsDirEmpty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsQuotaPathValidateRespPathValidation) GetIsDirEmptyOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDirEmpty) {
		return nil, false
	}
	return o.IsDirEmpty, true
}

// HasIsDirEmpty returns a boolean if a field has been set.
func (o *DfsQuotaPathValidateRespPathValidation) HasIsDirEmpty() bool {
	if o != nil && !IsNil(o.IsDirEmpty) {
		return true
	}

	return false
}

// SetIsDirEmpty gets a reference to the given bool and assigns it to the IsDirEmpty field.
func (o *DfsQuotaPathValidateRespPathValidation) SetIsDirEmpty(v bool) {
	o.IsDirEmpty = &v
}

// GetIsDirExist returns the IsDirExist field value if set, zero value otherwise.
func (o *DfsQuotaPathValidateRespPathValidation) GetIsDirExist() bool {
	if o == nil || IsNil(o.IsDirExist) {
		var ret bool
		return ret
	}
	return *o.IsDirExist
}

// GetIsDirExistOk returns a tuple with the IsDirExist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsQuotaPathValidateRespPathValidation) GetIsDirExistOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDirExist) {
		return nil, false
	}
	return o.IsDirExist, true
}

// HasIsDirExist returns a boolean if a field has been set.
func (o *DfsQuotaPathValidateRespPathValidation) HasIsDirExist() bool {
	if o != nil && !IsNil(o.IsDirExist) {
		return true
	}

	return false
}

// SetIsDirExist gets a reference to the given bool and assigns it to the IsDirExist field.
func (o *DfsQuotaPathValidateRespPathValidation) SetIsDirExist(v bool) {
	o.IsDirExist = &v
}

// GetIsExceedMaxQuota returns the IsExceedMaxQuota field value if set, zero value otherwise.
func (o *DfsQuotaPathValidateRespPathValidation) GetIsExceedMaxQuota() bool {
	if o == nil || IsNil(o.IsExceedMaxQuota) {
		var ret bool
		return ret
	}
	return *o.IsExceedMaxQuota
}

// GetIsExceedMaxQuotaOk returns a tuple with the IsExceedMaxQuota field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsQuotaPathValidateRespPathValidation) GetIsExceedMaxQuotaOk() (*bool, bool) {
	if o == nil || IsNil(o.IsExceedMaxQuota) {
		return nil, false
	}
	return o.IsExceedMaxQuota, true
}

// HasIsExceedMaxQuota returns a boolean if a field has been set.
func (o *DfsQuotaPathValidateRespPathValidation) HasIsExceedMaxQuota() bool {
	if o != nil && !IsNil(o.IsExceedMaxQuota) {
		return true
	}

	return false
}

// SetIsExceedMaxQuota gets a reference to the given bool and assigns it to the IsExceedMaxQuota field.
func (o *DfsQuotaPathValidateRespPathValidation) SetIsExceedMaxQuota(v bool) {
	o.IsExceedMaxQuota = &v
}

// GetIsQuotaExist returns the IsQuotaExist field value if set, zero value otherwise.
func (o *DfsQuotaPathValidateRespPathValidation) GetIsQuotaExist() bool {
	if o == nil || IsNil(o.IsQuotaExist) {
		var ret bool
		return ret
	}
	return *o.IsQuotaExist
}

// GetIsQuotaExistOk returns a tuple with the IsQuotaExist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsQuotaPathValidateRespPathValidation) GetIsQuotaExistOk() (*bool, bool) {
	if o == nil || IsNil(o.IsQuotaExist) {
		return nil, false
	}
	return o.IsQuotaExist, true
}

// HasIsQuotaExist returns a boolean if a field has been set.
func (o *DfsQuotaPathValidateRespPathValidation) HasIsQuotaExist() bool {
	if o != nil && !IsNil(o.IsQuotaExist) {
		return true
	}

	return false
}

// SetIsQuotaExist gets a reference to the given bool and assigns it to the IsQuotaExist field.
func (o *DfsQuotaPathValidateRespPathValidation) SetIsQuotaExist(v bool) {
	o.IsQuotaExist = &v
}

// GetUsedFiles returns the UsedFiles field value if set, zero value otherwise.
func (o *DfsQuotaPathValidateRespPathValidation) GetUsedFiles() int64 {
	if o == nil || IsNil(o.UsedFiles) {
		var ret int64
		return ret
	}
	return *o.UsedFiles
}

// GetUsedFilesOk returns a tuple with the UsedFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsQuotaPathValidateRespPathValidation) GetUsedFilesOk() (*int64, bool) {
	if o == nil || IsNil(o.UsedFiles) {
		return nil, false
	}
	return o.UsedFiles, true
}

// HasUsedFiles returns a boolean if a field has been set.
func (o *DfsQuotaPathValidateRespPathValidation) HasUsedFiles() bool {
	if o != nil && !IsNil(o.UsedFiles) {
		return true
	}

	return false
}

// SetUsedFiles gets a reference to the given int64 and assigns it to the UsedFiles field.
func (o *DfsQuotaPathValidateRespPathValidation) SetUsedFiles(v int64) {
	o.UsedFiles = &v
}

// GetUsedKbyte returns the UsedKbyte field value if set, zero value otherwise.
func (o *DfsQuotaPathValidateRespPathValidation) GetUsedKbyte() int64 {
	if o == nil || IsNil(o.UsedKbyte) {
		var ret int64
		return ret
	}
	return *o.UsedKbyte
}

// GetUsedKbyteOk returns a tuple with the UsedKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsQuotaPathValidateRespPathValidation) GetUsedKbyteOk() (*int64, bool) {
	if o == nil || IsNil(o.UsedKbyte) {
		return nil, false
	}
	return o.UsedKbyte, true
}

// HasUsedKbyte returns a boolean if a field has been set.
func (o *DfsQuotaPathValidateRespPathValidation) HasUsedKbyte() bool {
	if o != nil && !IsNil(o.UsedKbyte) {
		return true
	}

	return false
}

// SetUsedKbyte gets a reference to the given int64 and assigns it to the UsedKbyte field.
func (o *DfsQuotaPathValidateRespPathValidation) SetUsedKbyte(v int64) {
	o.UsedKbyte = &v
}

// GetUserGroups returns the UserGroups field value if set, zero value otherwise.
func (o *DfsQuotaPathValidateRespPathValidation) GetUserGroups() []FSUserGroup {
	if o == nil || IsNil(o.UserGroups) {
		var ret []FSUserGroup
		return ret
	}
	return o.UserGroups
}

// GetUserGroupsOk returns a tuple with the UserGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsQuotaPathValidateRespPathValidation) GetUserGroupsOk() ([]FSUserGroup, bool) {
	if o == nil || IsNil(o.UserGroups) {
		return nil, false
	}
	return o.UserGroups, true
}

// HasUserGroups returns a boolean if a field has been set.
func (o *DfsQuotaPathValidateRespPathValidation) HasUserGroups() bool {
	if o != nil && !IsNil(o.UserGroups) {
		return true
	}

	return false
}

// SetUserGroups gets a reference to the given []FSUserGroup and assigns it to the UserGroups field.
func (o *DfsQuotaPathValidateRespPathValidation) SetUserGroups(v []FSUserGroup) {
	o.UserGroups = v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *DfsQuotaPathValidateRespPathValidation) GetUsers() []FSUser {
	if o == nil || IsNil(o.Users) {
		var ret []FSUser
		return ret
	}
	return o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsQuotaPathValidateRespPathValidation) GetUsersOk() ([]FSUser, bool) {
	if o == nil || IsNil(o.Users) {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *DfsQuotaPathValidateRespPathValidation) HasUsers() bool {
	if o != nil && !IsNil(o.Users) {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []FSUser and assigns it to the Users field.
func (o *DfsQuotaPathValidateRespPathValidation) SetUsers(v []FSUser) {
	o.Users = v
}

func (o DfsQuotaPathValidateRespPathValidation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsQuotaPathValidateRespPathValidation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExistDirQuota) {
		toSerialize["exist_dir_quota"] = o.ExistDirQuota
	}
	if !IsNil(o.IsDirEmpty) {
		toSerialize["is_dir_empty"] = o.IsDirEmpty
	}
	if !IsNil(o.IsDirExist) {
		toSerialize["is_dir_exist"] = o.IsDirExist
	}
	if !IsNil(o.IsExceedMaxQuota) {
		toSerialize["is_exceed_max_quota"] = o.IsExceedMaxQuota
	}
	if !IsNil(o.IsQuotaExist) {
		toSerialize["is_quota_exist"] = o.IsQuotaExist
	}
	if !IsNil(o.UsedFiles) {
		toSerialize["used_files"] = o.UsedFiles
	}
	if !IsNil(o.UsedKbyte) {
		toSerialize["used_kbyte"] = o.UsedKbyte
	}
	if !IsNil(o.UserGroups) {
		toSerialize["user_groups"] = o.UserGroups
	}
	if !IsNil(o.Users) {
		toSerialize["users"] = o.Users
	}
	return toSerialize, nil
}

type NullableDfsQuotaPathValidateRespPathValidation struct {
	value *DfsQuotaPathValidateRespPathValidation
	isSet bool
}

func (v NullableDfsQuotaPathValidateRespPathValidation) Get() *DfsQuotaPathValidateRespPathValidation {
	return v.value
}

func (v *NullableDfsQuotaPathValidateRespPathValidation) Set(val *DfsQuotaPathValidateRespPathValidation) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsQuotaPathValidateRespPathValidation) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsQuotaPathValidateRespPathValidation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsQuotaPathValidateRespPathValidation(val *DfsQuotaPathValidateRespPathValidation) *NullableDfsQuotaPathValidateRespPathValidation {
	return &NullableDfsQuotaPathValidateRespPathValidation{value: val, isSet: true}
}

func (v NullableDfsQuotaPathValidateRespPathValidation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsQuotaPathValidateRespPathValidation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


