/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DfsSnapshotsResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsSnapshotsResp{}

// DfsSnapshotsResp struct for DfsSnapshotsResp
type DfsSnapshotsResp struct {
	// dfs snapshot list
	DfsSnapshots []DfsSnapshot `json:"dfs_snapshots"`
}

type _DfsSnapshotsResp DfsSnapshotsResp

// NewDfsSnapshotsResp instantiates a new DfsSnapshotsResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsSnapshotsResp(dfsSnapshots []DfsSnapshot) *DfsSnapshotsResp {
	this := DfsSnapshotsResp{}
	this.DfsSnapshots = dfsSnapshots
	return &this
}

// NewDfsSnapshotsRespWithDefaults instantiates a new DfsSnapshotsResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsSnapshotsRespWithDefaults() *DfsSnapshotsResp {
	this := DfsSnapshotsResp{}
	return &this
}

// GetDfsSnapshots returns the DfsSnapshots field value
func (o *DfsSnapshotsResp) GetDfsSnapshots() []DfsSnapshot {
	if o == nil {
		var ret []DfsSnapshot
		return ret
	}

	return o.DfsSnapshots
}

// GetDfsSnapshotsOk returns a tuple with the DfsSnapshots field value
// and a boolean to check if the value has been set.
func (o *DfsSnapshotsResp) GetDfsSnapshotsOk() ([]DfsSnapshot, bool) {
	if o == nil {
		return nil, false
	}
	return o.DfsSnapshots, true
}

// SetDfsSnapshots sets field value
func (o *DfsSnapshotsResp) SetDfsSnapshots(v []DfsSnapshot) {
	o.DfsSnapshots = v
}

func (o DfsSnapshotsResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsSnapshotsResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dfs_snapshots"] = o.DfsSnapshots
	return toSerialize, nil
}

func (o *DfsSnapshotsResp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dfs_snapshots",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDfsSnapshotsResp := _DfsSnapshotsResp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDfsSnapshotsResp)

	if err != nil {
		return err
	}

	*o = DfsSnapshotsResp(varDfsSnapshotsResp)

	return err
}

type NullableDfsSnapshotsResp struct {
	value *DfsSnapshotsResp
	isSet bool
}

func (v NullableDfsSnapshotsResp) Get() *DfsSnapshotsResp {
	return v.value
}

func (v *NullableDfsSnapshotsResp) Set(val *DfsSnapshotsResp) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsSnapshotsResp) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsSnapshotsResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsSnapshotsResp(val *DfsSnapshotsResp) *NullableDfsSnapshotsResp {
	return &NullableDfsSnapshotsResp{value: val, isSet: true}
}

func (v NullableDfsSnapshotsResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsSnapshotsResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


