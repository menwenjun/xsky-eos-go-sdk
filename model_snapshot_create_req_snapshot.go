/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SnapshotCreateReqSnapshot type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SnapshotCreateReqSnapshot{}

// SnapshotCreateReqSnapshot struct for SnapshotCreateReqSnapshot
type SnapshotCreateReqSnapshot struct {
	BlockVolumeId int64 `json:"block_volume_id"`
	Description string `json:"description"`
	Name string `json:"name"`
	Uid *string `json:"uid,omitempty"`
}

type _SnapshotCreateReqSnapshot SnapshotCreateReqSnapshot

// NewSnapshotCreateReqSnapshot instantiates a new SnapshotCreateReqSnapshot object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnapshotCreateReqSnapshot(blockVolumeId int64, description string, name string) *SnapshotCreateReqSnapshot {
	this := SnapshotCreateReqSnapshot{}
	this.BlockVolumeId = blockVolumeId
	this.Description = description
	this.Name = name
	return &this
}

// NewSnapshotCreateReqSnapshotWithDefaults instantiates a new SnapshotCreateReqSnapshot object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnapshotCreateReqSnapshotWithDefaults() *SnapshotCreateReqSnapshot {
	this := SnapshotCreateReqSnapshot{}
	return &this
}

// GetBlockVolumeId returns the BlockVolumeId field value
func (o *SnapshotCreateReqSnapshot) GetBlockVolumeId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.BlockVolumeId
}

// GetBlockVolumeIdOk returns a tuple with the BlockVolumeId field value
// and a boolean to check if the value has been set.
func (o *SnapshotCreateReqSnapshot) GetBlockVolumeIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BlockVolumeId, true
}

// SetBlockVolumeId sets field value
func (o *SnapshotCreateReqSnapshot) SetBlockVolumeId(v int64) {
	o.BlockVolumeId = v
}

// GetDescription returns the Description field value
func (o *SnapshotCreateReqSnapshot) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *SnapshotCreateReqSnapshot) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *SnapshotCreateReqSnapshot) SetDescription(v string) {
	o.Description = v
}

// GetName returns the Name field value
func (o *SnapshotCreateReqSnapshot) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SnapshotCreateReqSnapshot) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SnapshotCreateReqSnapshot) SetName(v string) {
	o.Name = v
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *SnapshotCreateReqSnapshot) GetUid() string {
	if o == nil || IsNil(o.Uid) {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotCreateReqSnapshot) GetUidOk() (*string, bool) {
	if o == nil || IsNil(o.Uid) {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *SnapshotCreateReqSnapshot) HasUid() bool {
	if o != nil && !IsNil(o.Uid) {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *SnapshotCreateReqSnapshot) SetUid(v string) {
	o.Uid = &v
}

func (o SnapshotCreateReqSnapshot) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnapshotCreateReqSnapshot) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["block_volume_id"] = o.BlockVolumeId
	toSerialize["description"] = o.Description
	toSerialize["name"] = o.Name
	if !IsNil(o.Uid) {
		toSerialize["uid"] = o.Uid
	}
	return toSerialize, nil
}

func (o *SnapshotCreateReqSnapshot) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"block_volume_id",
		"description",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSnapshotCreateReqSnapshot := _SnapshotCreateReqSnapshot{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSnapshotCreateReqSnapshot)

	if err != nil {
		return err
	}

	*o = SnapshotCreateReqSnapshot(varSnapshotCreateReqSnapshot)

	return err
}

type NullableSnapshotCreateReqSnapshot struct {
	value *SnapshotCreateReqSnapshot
	isSet bool
}

func (v NullableSnapshotCreateReqSnapshot) Get() *SnapshotCreateReqSnapshot {
	return v.value
}

func (v *NullableSnapshotCreateReqSnapshot) Set(val *SnapshotCreateReqSnapshot) {
	v.value = val
	v.isSet = true
}

func (v NullableSnapshotCreateReqSnapshot) IsSet() bool {
	return v.isSet
}

func (v *NullableSnapshotCreateReqSnapshot) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnapshotCreateReqSnapshot(val *SnapshotCreateReqSnapshot) *NullableSnapshotCreateReqSnapshot {
	return &NullableSnapshotCreateReqSnapshot{value: val, isSet: true}
}

func (v NullableSnapshotCreateReqSnapshot) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnapshotCreateReqSnapshot) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


