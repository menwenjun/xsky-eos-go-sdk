/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// FsUsersAPIService FsUsersAPI service
type FsUsersAPIService service

type ApiCreateFSUserRequest struct {
	ctx context.Context
	ApiService *FsUsersAPIService
	body *FSUserCreateReq
	clusterId *string
	allowPathCreate *bool
}

// user info
func (r ApiCreateFSUserRequest) Body(body FSUserCreateReq) ApiCreateFSUserRequest {
	r.body = &body
	return r
}

// cluster id
func (r ApiCreateFSUserRequest) ClusterId(clusterId string) ApiCreateFSUserRequest {
	r.clusterId = &clusterId
	return r
}

// allow create path for s3 when not existed
func (r ApiCreateFSUserRequest) AllowPathCreate(allowPathCreate bool) ApiCreateFSUserRequest {
	r.allowPathCreate = &allowPathCreate
	return r
}

func (r ApiCreateFSUserRequest) Execute() (*FSUserResp, *http.Response, error) {
	return r.ApiService.CreateFSUserExecute(r)
}

/*
CreateFSUser Method for CreateFSUser

create file storage user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateFSUserRequest
*/
func (a *FsUsersAPIService) CreateFSUser(ctx context.Context) ApiCreateFSUserRequest {
	return ApiCreateFSUserRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FSUserResp
func (a *FsUsersAPIService) CreateFSUserExecute(r ApiCreateFSUserRequest) (*FSUserResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FSUserResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FsUsersAPIService.CreateFSUser")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fs-users/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.clusterId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_id", r.clusterId, "form", "")
	}
	if r.allowPathCreate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allow_path_create", r.allowPathCreate, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteFSUserRequest struct {
	ctx context.Context
	ApiService *FsUsersAPIService
	fsUserId int64
}

func (r ApiDeleteFSUserRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteFSUserExecute(r)
}

/*
DeleteFSUser Method for DeleteFSUser

delete file storage user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param fsUserId user id
 @return ApiDeleteFSUserRequest
*/
func (a *FsUsersAPIService) DeleteFSUser(ctx context.Context, fsUserId int64) ApiDeleteFSUserRequest {
	return ApiDeleteFSUserRequest{
		ApiService: a,
		ctx: ctx,
		fsUserId: fsUserId,
	}
}

// Execute executes the request
func (a *FsUsersAPIService) DeleteFSUserExecute(r ApiDeleteFSUserRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FsUsersAPIService.DeleteFSUser")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fs-users/{fs_user_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"fs_user_id"+"}", url.PathEscape(parameterValueToString(r.fsUserId, "fsUserId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetFSUserRequest struct {
	ctx context.Context
	ApiService *FsUsersAPIService
	fsUserId int64
}

func (r ApiGetFSUserRequest) Execute() (*FSUserResp, *http.Response, error) {
	return r.ApiService.GetFSUserExecute(r)
}

/*
GetFSUser Method for GetFSUser

get file storage user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param fsUserId user id
 @return ApiGetFSUserRequest
*/
func (a *FsUsersAPIService) GetFSUser(ctx context.Context, fsUserId int64) ApiGetFSUserRequest {
	return ApiGetFSUserRequest{
		ApiService: a,
		ctx: ctx,
		fsUserId: fsUserId,
	}
}

// Execute executes the request
//  @return FSUserResp
func (a *FsUsersAPIService) GetFSUserExecute(r ApiGetFSUserRequest) (*FSUserResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FSUserResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FsUsersAPIService.GetFSUser")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fs-users/{fs_user_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"fs_user_id"+"}", url.PathEscape(parameterValueToString(r.fsUserId, "fsUserId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListFSUsersRequest struct {
	ctx context.Context
	ApiService *FsUsersAPIService
	limit *int64
	offset *int64
	q *string
	sort *string
	clusterId *string
	security *string
	fsUserGroupId *int64
	notFsUserGroupId *int64
	notDfsSmbShareId *int64
	notDfsHdfsId *int64
	notDfsFtpShare *bool
	dfsGatewayGroupId *int64
	s3Enabled *bool
	userId *int64
}

// paging param
func (r ApiListFSUsersRequest) Limit(limit int64) ApiListFSUsersRequest {
	r.limit = &limit
	return r
}

// paging param
func (r ApiListFSUsersRequest) Offset(offset int64) ApiListFSUsersRequest {
	r.offset = &offset
	return r
}

// query param of search
func (r ApiListFSUsersRequest) Q(q string) ApiListFSUsersRequest {
	r.q = &q
	return r
}

// sort param of search
func (r ApiListFSUsersRequest) Sort(sort string) ApiListFSUsersRequest {
	r.sort = &sort
	return r
}

// cluster id
func (r ApiListFSUsersRequest) ClusterId(clusterId string) ApiListFSUsersRequest {
	r.clusterId = &clusterId
	return r
}

// security of file storage users
func (r ApiListFSUsersRequest) Security(security string) ApiListFSUsersRequest {
	r.security = &security
	return r
}

// file storage user group id
func (r ApiListFSUsersRequest) FsUserGroupId(fsUserGroupId int64) ApiListFSUsersRequest {
	r.fsUserGroupId = &fsUserGroupId
	return r
}

// file storage user group id
func (r ApiListFSUsersRequest) NotFsUserGroupId(notFsUserGroupId int64) ApiListFSUsersRequest {
	r.notFsUserGroupId = &notFsUserGroupId
	return r
}

// id of dfs smb share users not in
func (r ApiListFSUsersRequest) NotDfsSmbShareId(notDfsSmbShareId int64) ApiListFSUsersRequest {
	r.notDfsSmbShareId = &notDfsSmbShareId
	return r
}

// id of dfs hdfs users not in
func (r ApiListFSUsersRequest) NotDfsHdfsId(notDfsHdfsId int64) ApiListFSUsersRequest {
	r.notDfsHdfsId = &notDfsHdfsId
	return r
}

// value must be true, means available add to ftp share
func (r ApiListFSUsersRequest) NotDfsFtpShare(notDfsFtpShare bool) ApiListFSUsersRequest {
	r.notDfsFtpShare = &notDfsFtpShare
	return r
}

// dfs gateway group id, used with not_dfs_ftp_share
func (r ApiListFSUsersRequest) DfsGatewayGroupId(dfsGatewayGroupId int64) ApiListFSUsersRequest {
	r.dfsGatewayGroupId = &dfsGatewayGroupId
	return r
}

// is s3 enabled
func (r ApiListFSUsersRequest) S3Enabled(s3Enabled bool) ApiListFSUsersRequest {
	r.s3Enabled = &s3Enabled
	return r
}

// user id
func (r ApiListFSUsersRequest) UserId(userId int64) ApiListFSUsersRequest {
	r.userId = &userId
	return r
}

func (r ApiListFSUsersRequest) Execute() (*FSUsersResp, *http.Response, error) {
	return r.ApiService.ListFSUsersExecute(r)
}

/*
ListFSUsers Method for ListFSUsers

List file storage users

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListFSUsersRequest
*/
func (a *FsUsersAPIService) ListFSUsers(ctx context.Context) ApiListFSUsersRequest {
	return ApiListFSUsersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FSUsersResp
func (a *FsUsersAPIService) ListFSUsersExecute(r ApiListFSUsersRequest) (*FSUsersResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FSUsersResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FsUsersAPIService.ListFSUsers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fs-users/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.clusterId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_id", r.clusterId, "form", "")
	}
	if r.security != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "security", r.security, "form", "")
	}
	if r.fsUserGroupId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fs_user_group_id", r.fsUserGroupId, "form", "")
	}
	if r.notFsUserGroupId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "not_fs_user_group_id", r.notFsUserGroupId, "form", "")
	}
	if r.notDfsSmbShareId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "not_dfs_smb_share_id", r.notDfsSmbShareId, "form", "")
	}
	if r.notDfsHdfsId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "not_dfs_hdfs_id", r.notDfsHdfsId, "form", "")
	}
	if r.notDfsFtpShare != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "not_dfs_ftp_share", r.notDfsFtpShare, "form", "")
	}
	if r.dfsGatewayGroupId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dfs_gateway_group_id", r.dfsGatewayGroupId, "form", "")
	}
	if r.s3Enabled != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "s3_enabled", r.s3Enabled, "form", "")
	}
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "user_id", r.userId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateFSUserRequest struct {
	ctx context.Context
	ApiService *FsUsersAPIService
	fsUserId int64
	body *FSUserUpdateReq
	allowPathCreate *bool
}

// user info
func (r ApiUpdateFSUserRequest) Body(body FSUserUpdateReq) ApiUpdateFSUserRequest {
	r.body = &body
	return r
}

// allow create path for s3 when not existed
func (r ApiUpdateFSUserRequest) AllowPathCreate(allowPathCreate bool) ApiUpdateFSUserRequest {
	r.allowPathCreate = &allowPathCreate
	return r
}

func (r ApiUpdateFSUserRequest) Execute() (*FSUserResp, *http.Response, error) {
	return r.ApiService.UpdateFSUserExecute(r)
}

/*
UpdateFSUser Method for UpdateFSUser

update file storage user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param fsUserId user id
 @return ApiUpdateFSUserRequest
*/
func (a *FsUsersAPIService) UpdateFSUser(ctx context.Context, fsUserId int64) ApiUpdateFSUserRequest {
	return ApiUpdateFSUserRequest{
		ApiService: a,
		ctx: ctx,
		fsUserId: fsUserId,
	}
}

// Execute executes the request
//  @return FSUserResp
func (a *FsUsersAPIService) UpdateFSUserExecute(r ApiUpdateFSUserRequest) (*FSUserResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FSUserResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FsUsersAPIService.UpdateFSUser")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fs-users/{fs_user_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"fs_user_id"+"}", url.PathEscape(parameterValueToString(r.fsUserId, "fsUserId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.allowPathCreate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allow_path_create", r.allowPathCreate, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateFSUserSecondaryGroupsRequest struct {
	ctx context.Context
	ApiService *FsUsersAPIService
	fsUserId int64
	body *FSUserUpdateSecondaryGroupsReq
}

// user info
func (r ApiUpdateFSUserSecondaryGroupsRequest) Body(body FSUserUpdateSecondaryGroupsReq) ApiUpdateFSUserSecondaryGroupsRequest {
	r.body = &body
	return r
}

func (r ApiUpdateFSUserSecondaryGroupsRequest) Execute() (*FSUserResp, *http.Response, error) {
	return r.ApiService.UpdateFSUserSecondaryGroupsExecute(r)
}

/*
UpdateFSUserSecondaryGroups Method for UpdateFSUserSecondaryGroups

update file storage user secondary group and primary group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param fsUserId user id
 @return ApiUpdateFSUserSecondaryGroupsRequest
*/
func (a *FsUsersAPIService) UpdateFSUserSecondaryGroups(ctx context.Context, fsUserId int64) ApiUpdateFSUserSecondaryGroupsRequest {
	return ApiUpdateFSUserSecondaryGroupsRequest{
		ApiService: a,
		ctx: ctx,
		fsUserId: fsUserId,
	}
}

// Execute executes the request
//  @return FSUserResp
func (a *FsUsersAPIService) UpdateFSUserSecondaryGroupsExecute(r ApiUpdateFSUserSecondaryGroupsRequest) (*FSUserResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FSUserResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FsUsersAPIService.UpdateFSUserSecondaryGroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fs-users/{fs_user_id}:update-secondary-groups"
	localVarPath = strings.Replace(localVarPath, "{"+"fs_user_id"+"}", url.PathEscape(parameterValueToString(r.fsUserId, "fsUserId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVerifyFSUserRequest struct {
	ctx context.Context
	ApiService *FsUsersAPIService
	body *FSUserVerifyReq
}

// the identity credential
func (r ApiVerifyFSUserRequest) Body(body FSUserVerifyReq) ApiVerifyFSUserRequest {
	r.body = &body
	return r
}

func (r ApiVerifyFSUserRequest) Execute() (*FSUserResp, *http.Response, error) {
	return r.ApiService.VerifyFSUserExecute(r)
}

/*
VerifyFSUser Method for VerifyFSUser

verify fs user password

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVerifyFSUserRequest
*/
func (a *FsUsersAPIService) VerifyFSUser(ctx context.Context) ApiVerifyFSUserRequest {
	return ApiVerifyFSUserRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FSUserResp
func (a *FsUsersAPIService) VerifyFSUserExecute(r ApiVerifyFSUserRequest) (*FSUserResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FSUserResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FsUsersAPIService.VerifyFSUser")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fs-users/:verify"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
