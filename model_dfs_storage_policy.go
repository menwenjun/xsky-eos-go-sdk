/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the DfsStoragePolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsStoragePolicy{}

// DfsStoragePolicy DfsStoragePolicy defines model of dfs storage policy
type DfsStoragePolicy struct {
	ActionStatus *string `json:"action_status,omitempty"`
	Cluster *ClusterNestview `json:"cluster,omitempty"`
	Create *time.Time `json:"create,omitempty"`
	Description *string `json:"description,omitempty"`
	DfsPaths []DfsPathNestview `json:"dfs_paths,omitempty"`
	DfsRootfs *DfsRootfs `json:"dfs_rootfs,omitempty"`
	DfsStorageClass *DfsTier `json:"dfs_storage_class,omitempty"`
	FileCreate *time.Time `json:"file_Create,omitempty"`
	// useless fields, for compatability
	FileName *string `json:"file_name,omitempty"`
	FilePath *string `json:"file_path,omitempty"`
	Filter *DfsPolicyFilter `json:"filter,omitempty"`
	FsUser *FSUser `json:"fs_user,omitempty"`
	FsUserGroup *FSUserGroup `json:"fs_user_group,omitempty"`
	Id *int64 `json:"id,omitempty"`
	// common properties
	IsDefault *bool `json:"is_default,omitempty"`
	Name *string `json:"name,omitempty"`
	PathNum *int64 `json:"path_num,omitempty"`
	Status *string `json:"status,omitempty"`
	// indicate that all pools under this policy is stretched pool
	Stretched *bool `json:"stretched,omitempty"`
	Type *string `json:"type,omitempty"`
	Update *time.Time `json:"update,omitempty"`
}

// NewDfsStoragePolicy instantiates a new DfsStoragePolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsStoragePolicy() *DfsStoragePolicy {
	this := DfsStoragePolicy{}
	return &this
}

// NewDfsStoragePolicyWithDefaults instantiates a new DfsStoragePolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsStoragePolicyWithDefaults() *DfsStoragePolicy {
	this := DfsStoragePolicy{}
	return &this
}

// GetActionStatus returns the ActionStatus field value if set, zero value otherwise.
func (o *DfsStoragePolicy) GetActionStatus() string {
	if o == nil || IsNil(o.ActionStatus) {
		var ret string
		return ret
	}
	return *o.ActionStatus
}

// GetActionStatusOk returns a tuple with the ActionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsStoragePolicy) GetActionStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ActionStatus) {
		return nil, false
	}
	return o.ActionStatus, true
}

// HasActionStatus returns a boolean if a field has been set.
func (o *DfsStoragePolicy) HasActionStatus() bool {
	if o != nil && !IsNil(o.ActionStatus) {
		return true
	}

	return false
}

// SetActionStatus gets a reference to the given string and assigns it to the ActionStatus field.
func (o *DfsStoragePolicy) SetActionStatus(v string) {
	o.ActionStatus = &v
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *DfsStoragePolicy) GetCluster() ClusterNestview {
	if o == nil || IsNil(o.Cluster) {
		var ret ClusterNestview
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsStoragePolicy) GetClusterOk() (*ClusterNestview, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *DfsStoragePolicy) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given ClusterNestview and assigns it to the Cluster field.
func (o *DfsStoragePolicy) SetCluster(v ClusterNestview) {
	o.Cluster = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *DfsStoragePolicy) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsStoragePolicy) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *DfsStoragePolicy) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *DfsStoragePolicy) SetCreate(v time.Time) {
	o.Create = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DfsStoragePolicy) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsStoragePolicy) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DfsStoragePolicy) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DfsStoragePolicy) SetDescription(v string) {
	o.Description = &v
}

// GetDfsPaths returns the DfsPaths field value if set, zero value otherwise.
func (o *DfsStoragePolicy) GetDfsPaths() []DfsPathNestview {
	if o == nil || IsNil(o.DfsPaths) {
		var ret []DfsPathNestview
		return ret
	}
	return o.DfsPaths
}

// GetDfsPathsOk returns a tuple with the DfsPaths field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsStoragePolicy) GetDfsPathsOk() ([]DfsPathNestview, bool) {
	if o == nil || IsNil(o.DfsPaths) {
		return nil, false
	}
	return o.DfsPaths, true
}

// HasDfsPaths returns a boolean if a field has been set.
func (o *DfsStoragePolicy) HasDfsPaths() bool {
	if o != nil && !IsNil(o.DfsPaths) {
		return true
	}

	return false
}

// SetDfsPaths gets a reference to the given []DfsPathNestview and assigns it to the DfsPaths field.
func (o *DfsStoragePolicy) SetDfsPaths(v []DfsPathNestview) {
	o.DfsPaths = v
}

// GetDfsRootfs returns the DfsRootfs field value if set, zero value otherwise.
func (o *DfsStoragePolicy) GetDfsRootfs() DfsRootfs {
	if o == nil || IsNil(o.DfsRootfs) {
		var ret DfsRootfs
		return ret
	}
	return *o.DfsRootfs
}

// GetDfsRootfsOk returns a tuple with the DfsRootfs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsStoragePolicy) GetDfsRootfsOk() (*DfsRootfs, bool) {
	if o == nil || IsNil(o.DfsRootfs) {
		return nil, false
	}
	return o.DfsRootfs, true
}

// HasDfsRootfs returns a boolean if a field has been set.
func (o *DfsStoragePolicy) HasDfsRootfs() bool {
	if o != nil && !IsNil(o.DfsRootfs) {
		return true
	}

	return false
}

// SetDfsRootfs gets a reference to the given DfsRootfs and assigns it to the DfsRootfs field.
func (o *DfsStoragePolicy) SetDfsRootfs(v DfsRootfs) {
	o.DfsRootfs = &v
}

// GetDfsStorageClass returns the DfsStorageClass field value if set, zero value otherwise.
func (o *DfsStoragePolicy) GetDfsStorageClass() DfsTier {
	if o == nil || IsNil(o.DfsStorageClass) {
		var ret DfsTier
		return ret
	}
	return *o.DfsStorageClass
}

// GetDfsStorageClassOk returns a tuple with the DfsStorageClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsStoragePolicy) GetDfsStorageClassOk() (*DfsTier, bool) {
	if o == nil || IsNil(o.DfsStorageClass) {
		return nil, false
	}
	return o.DfsStorageClass, true
}

// HasDfsStorageClass returns a boolean if a field has been set.
func (o *DfsStoragePolicy) HasDfsStorageClass() bool {
	if o != nil && !IsNil(o.DfsStorageClass) {
		return true
	}

	return false
}

// SetDfsStorageClass gets a reference to the given DfsTier and assigns it to the DfsStorageClass field.
func (o *DfsStoragePolicy) SetDfsStorageClass(v DfsTier) {
	o.DfsStorageClass = &v
}

// GetFileCreate returns the FileCreate field value if set, zero value otherwise.
func (o *DfsStoragePolicy) GetFileCreate() time.Time {
	if o == nil || IsNil(o.FileCreate) {
		var ret time.Time
		return ret
	}
	return *o.FileCreate
}

// GetFileCreateOk returns a tuple with the FileCreate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsStoragePolicy) GetFileCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.FileCreate) {
		return nil, false
	}
	return o.FileCreate, true
}

// HasFileCreate returns a boolean if a field has been set.
func (o *DfsStoragePolicy) HasFileCreate() bool {
	if o != nil && !IsNil(o.FileCreate) {
		return true
	}

	return false
}

// SetFileCreate gets a reference to the given time.Time and assigns it to the FileCreate field.
func (o *DfsStoragePolicy) SetFileCreate(v time.Time) {
	o.FileCreate = &v
}

// GetFileName returns the FileName field value if set, zero value otherwise.
func (o *DfsStoragePolicy) GetFileName() string {
	if o == nil || IsNil(o.FileName) {
		var ret string
		return ret
	}
	return *o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsStoragePolicy) GetFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.FileName) {
		return nil, false
	}
	return o.FileName, true
}

// HasFileName returns a boolean if a field has been set.
func (o *DfsStoragePolicy) HasFileName() bool {
	if o != nil && !IsNil(o.FileName) {
		return true
	}

	return false
}

// SetFileName gets a reference to the given string and assigns it to the FileName field.
func (o *DfsStoragePolicy) SetFileName(v string) {
	o.FileName = &v
}

// GetFilePath returns the FilePath field value if set, zero value otherwise.
func (o *DfsStoragePolicy) GetFilePath() string {
	if o == nil || IsNil(o.FilePath) {
		var ret string
		return ret
	}
	return *o.FilePath
}

// GetFilePathOk returns a tuple with the FilePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsStoragePolicy) GetFilePathOk() (*string, bool) {
	if o == nil || IsNil(o.FilePath) {
		return nil, false
	}
	return o.FilePath, true
}

// HasFilePath returns a boolean if a field has been set.
func (o *DfsStoragePolicy) HasFilePath() bool {
	if o != nil && !IsNil(o.FilePath) {
		return true
	}

	return false
}

// SetFilePath gets a reference to the given string and assigns it to the FilePath field.
func (o *DfsStoragePolicy) SetFilePath(v string) {
	o.FilePath = &v
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *DfsStoragePolicy) GetFilter() DfsPolicyFilter {
	if o == nil || IsNil(o.Filter) {
		var ret DfsPolicyFilter
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsStoragePolicy) GetFilterOk() (*DfsPolicyFilter, bool) {
	if o == nil || IsNil(o.Filter) {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *DfsStoragePolicy) HasFilter() bool {
	if o != nil && !IsNil(o.Filter) {
		return true
	}

	return false
}

// SetFilter gets a reference to the given DfsPolicyFilter and assigns it to the Filter field.
func (o *DfsStoragePolicy) SetFilter(v DfsPolicyFilter) {
	o.Filter = &v
}

// GetFsUser returns the FsUser field value if set, zero value otherwise.
func (o *DfsStoragePolicy) GetFsUser() FSUser {
	if o == nil || IsNil(o.FsUser) {
		var ret FSUser
		return ret
	}
	return *o.FsUser
}

// GetFsUserOk returns a tuple with the FsUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsStoragePolicy) GetFsUserOk() (*FSUser, bool) {
	if o == nil || IsNil(o.FsUser) {
		return nil, false
	}
	return o.FsUser, true
}

// HasFsUser returns a boolean if a field has been set.
func (o *DfsStoragePolicy) HasFsUser() bool {
	if o != nil && !IsNil(o.FsUser) {
		return true
	}

	return false
}

// SetFsUser gets a reference to the given FSUser and assigns it to the FsUser field.
func (o *DfsStoragePolicy) SetFsUser(v FSUser) {
	o.FsUser = &v
}

// GetFsUserGroup returns the FsUserGroup field value if set, zero value otherwise.
func (o *DfsStoragePolicy) GetFsUserGroup() FSUserGroup {
	if o == nil || IsNil(o.FsUserGroup) {
		var ret FSUserGroup
		return ret
	}
	return *o.FsUserGroup
}

// GetFsUserGroupOk returns a tuple with the FsUserGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsStoragePolicy) GetFsUserGroupOk() (*FSUserGroup, bool) {
	if o == nil || IsNil(o.FsUserGroup) {
		return nil, false
	}
	return o.FsUserGroup, true
}

// HasFsUserGroup returns a boolean if a field has been set.
func (o *DfsStoragePolicy) HasFsUserGroup() bool {
	if o != nil && !IsNil(o.FsUserGroup) {
		return true
	}

	return false
}

// SetFsUserGroup gets a reference to the given FSUserGroup and assigns it to the FsUserGroup field.
func (o *DfsStoragePolicy) SetFsUserGroup(v FSUserGroup) {
	o.FsUserGroup = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DfsStoragePolicy) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsStoragePolicy) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DfsStoragePolicy) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *DfsStoragePolicy) SetId(v int64) {
	o.Id = &v
}

// GetIsDefault returns the IsDefault field value if set, zero value otherwise.
func (o *DfsStoragePolicy) GetIsDefault() bool {
	if o == nil || IsNil(o.IsDefault) {
		var ret bool
		return ret
	}
	return *o.IsDefault
}

// GetIsDefaultOk returns a tuple with the IsDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsStoragePolicy) GetIsDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDefault) {
		return nil, false
	}
	return o.IsDefault, true
}

// HasIsDefault returns a boolean if a field has been set.
func (o *DfsStoragePolicy) HasIsDefault() bool {
	if o != nil && !IsNil(o.IsDefault) {
		return true
	}

	return false
}

// SetIsDefault gets a reference to the given bool and assigns it to the IsDefault field.
func (o *DfsStoragePolicy) SetIsDefault(v bool) {
	o.IsDefault = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DfsStoragePolicy) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsStoragePolicy) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DfsStoragePolicy) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DfsStoragePolicy) SetName(v string) {
	o.Name = &v
}

// GetPathNum returns the PathNum field value if set, zero value otherwise.
func (o *DfsStoragePolicy) GetPathNum() int64 {
	if o == nil || IsNil(o.PathNum) {
		var ret int64
		return ret
	}
	return *o.PathNum
}

// GetPathNumOk returns a tuple with the PathNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsStoragePolicy) GetPathNumOk() (*int64, bool) {
	if o == nil || IsNil(o.PathNum) {
		return nil, false
	}
	return o.PathNum, true
}

// HasPathNum returns a boolean if a field has been set.
func (o *DfsStoragePolicy) HasPathNum() bool {
	if o != nil && !IsNil(o.PathNum) {
		return true
	}

	return false
}

// SetPathNum gets a reference to the given int64 and assigns it to the PathNum field.
func (o *DfsStoragePolicy) SetPathNum(v int64) {
	o.PathNum = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DfsStoragePolicy) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsStoragePolicy) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DfsStoragePolicy) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *DfsStoragePolicy) SetStatus(v string) {
	o.Status = &v
}

// GetStretched returns the Stretched field value if set, zero value otherwise.
func (o *DfsStoragePolicy) GetStretched() bool {
	if o == nil || IsNil(o.Stretched) {
		var ret bool
		return ret
	}
	return *o.Stretched
}

// GetStretchedOk returns a tuple with the Stretched field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsStoragePolicy) GetStretchedOk() (*bool, bool) {
	if o == nil || IsNil(o.Stretched) {
		return nil, false
	}
	return o.Stretched, true
}

// HasStretched returns a boolean if a field has been set.
func (o *DfsStoragePolicy) HasStretched() bool {
	if o != nil && !IsNil(o.Stretched) {
		return true
	}

	return false
}

// SetStretched gets a reference to the given bool and assigns it to the Stretched field.
func (o *DfsStoragePolicy) SetStretched(v bool) {
	o.Stretched = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DfsStoragePolicy) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsStoragePolicy) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DfsStoragePolicy) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DfsStoragePolicy) SetType(v string) {
	o.Type = &v
}

// GetUpdate returns the Update field value if set, zero value otherwise.
func (o *DfsStoragePolicy) GetUpdate() time.Time {
	if o == nil || IsNil(o.Update) {
		var ret time.Time
		return ret
	}
	return *o.Update
}

// GetUpdateOk returns a tuple with the Update field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsStoragePolicy) GetUpdateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Update) {
		return nil, false
	}
	return o.Update, true
}

// HasUpdate returns a boolean if a field has been set.
func (o *DfsStoragePolicy) HasUpdate() bool {
	if o != nil && !IsNil(o.Update) {
		return true
	}

	return false
}

// SetUpdate gets a reference to the given time.Time and assigns it to the Update field.
func (o *DfsStoragePolicy) SetUpdate(v time.Time) {
	o.Update = &v
}

func (o DfsStoragePolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsStoragePolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActionStatus) {
		toSerialize["action_status"] = o.ActionStatus
	}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DfsPaths) {
		toSerialize["dfs_paths"] = o.DfsPaths
	}
	if !IsNil(o.DfsRootfs) {
		toSerialize["dfs_rootfs"] = o.DfsRootfs
	}
	if !IsNil(o.DfsStorageClass) {
		toSerialize["dfs_storage_class"] = o.DfsStorageClass
	}
	if !IsNil(o.FileCreate) {
		toSerialize["file_Create"] = o.FileCreate
	}
	if !IsNil(o.FileName) {
		toSerialize["file_name"] = o.FileName
	}
	if !IsNil(o.FilePath) {
		toSerialize["file_path"] = o.FilePath
	}
	if !IsNil(o.Filter) {
		toSerialize["filter"] = o.Filter
	}
	if !IsNil(o.FsUser) {
		toSerialize["fs_user"] = o.FsUser
	}
	if !IsNil(o.FsUserGroup) {
		toSerialize["fs_user_group"] = o.FsUserGroup
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IsDefault) {
		toSerialize["is_default"] = o.IsDefault
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.PathNum) {
		toSerialize["path_num"] = o.PathNum
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Stretched) {
		toSerialize["stretched"] = o.Stretched
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Update) {
		toSerialize["update"] = o.Update
	}
	return toSerialize, nil
}

type NullableDfsStoragePolicy struct {
	value *DfsStoragePolicy
	isSet bool
}

func (v NullableDfsStoragePolicy) Get() *DfsStoragePolicy {
	return v.value
}

func (v *NullableDfsStoragePolicy) Set(val *DfsStoragePolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsStoragePolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsStoragePolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsStoragePolicy(val *DfsStoragePolicy) *NullableDfsStoragePolicy {
	return &NullableDfsStoragePolicy{value: val, isSet: true}
}

func (v NullableDfsStoragePolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsStoragePolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


