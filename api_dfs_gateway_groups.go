/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DfsGatewayGroupsAPIService DfsGatewayGroupsAPI service
type DfsGatewayGroupsAPIService service

type ApiAddDfsGatewaysRequest struct {
	ctx context.Context
	ApiService *DfsGatewayGroupsAPIService
	dfsGatewayGroupId int64
	body *DfsGatewayGroupAddGatewaysReq
}

// gateways info
func (r ApiAddDfsGatewaysRequest) Body(body DfsGatewayGroupAddGatewaysReq) ApiAddDfsGatewaysRequest {
	r.body = &body
	return r
}

func (r ApiAddDfsGatewaysRequest) Execute() (*DfsGatewayGroupResp, *http.Response, error) {
	return r.ApiService.AddDfsGatewaysExecute(r)
}

/*
AddDfsGateways Method for AddDfsGateways

add dfs gateways

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dfsGatewayGroupId gateway group id
 @return ApiAddDfsGatewaysRequest
*/
func (a *DfsGatewayGroupsAPIService) AddDfsGateways(ctx context.Context, dfsGatewayGroupId int64) ApiAddDfsGatewaysRequest {
	return ApiAddDfsGatewaysRequest{
		ApiService: a,
		ctx: ctx,
		dfsGatewayGroupId: dfsGatewayGroupId,
	}
}

// Execute executes the request
//  @return DfsGatewayGroupResp
func (a *DfsGatewayGroupsAPIService) AddDfsGatewaysExecute(r ApiAddDfsGatewaysRequest) (*DfsGatewayGroupResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsGatewayGroupResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsGatewayGroupsAPIService.AddDfsGateways")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-gateway-groups/{dfs_gateway_group_id}:add-gateways"
	localVarPath = strings.Replace(localVarPath, "{"+"dfs_gateway_group_id"+"}", url.PathEscape(parameterValueToString(r.dfsGatewayGroupId, "dfsGatewayGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateDfsGatewayGroupRequest struct {
	ctx context.Context
	ApiService *DfsGatewayGroupsAPIService
	body *DfsGatewayGroupCreateReq
	clusterId *string
}

// gateway group info
func (r ApiCreateDfsGatewayGroupRequest) Body(body DfsGatewayGroupCreateReq) ApiCreateDfsGatewayGroupRequest {
	r.body = &body
	return r
}

// cluster id
func (r ApiCreateDfsGatewayGroupRequest) ClusterId(clusterId string) ApiCreateDfsGatewayGroupRequest {
	r.clusterId = &clusterId
	return r
}

func (r ApiCreateDfsGatewayGroupRequest) Execute() (*DfsGatewayGroupResp, *http.Response, error) {
	return r.ApiService.CreateDfsGatewayGroupExecute(r)
}

/*
CreateDfsGatewayGroup Method for CreateDfsGatewayGroup

Create dfs gateway group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateDfsGatewayGroupRequest
*/
func (a *DfsGatewayGroupsAPIService) CreateDfsGatewayGroup(ctx context.Context) ApiCreateDfsGatewayGroupRequest {
	return ApiCreateDfsGatewayGroupRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DfsGatewayGroupResp
func (a *DfsGatewayGroupsAPIService) CreateDfsGatewayGroupExecute(r ApiCreateDfsGatewayGroupRequest) (*DfsGatewayGroupResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsGatewayGroupResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsGatewayGroupsAPIService.CreateDfsGatewayGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-gateway-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.clusterId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_id", r.clusterId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteDfsGatewayGroupRequest struct {
	ctx context.Context
	ApiService *DfsGatewayGroupsAPIService
	dfsGatewayGroupId int64
	force *bool
}

// force delete or not
func (r ApiDeleteDfsGatewayGroupRequest) Force(force bool) ApiDeleteDfsGatewayGroupRequest {
	r.force = &force
	return r
}

func (r ApiDeleteDfsGatewayGroupRequest) Execute() (*DfsGatewayGroupResp, *http.Response, error) {
	return r.ApiService.DeleteDfsGatewayGroupExecute(r)
}

/*
DeleteDfsGatewayGroup Method for DeleteDfsGatewayGroup

delete dfs gateway group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dfsGatewayGroupId gateway group id
 @return ApiDeleteDfsGatewayGroupRequest
*/
func (a *DfsGatewayGroupsAPIService) DeleteDfsGatewayGroup(ctx context.Context, dfsGatewayGroupId int64) ApiDeleteDfsGatewayGroupRequest {
	return ApiDeleteDfsGatewayGroupRequest{
		ApiService: a,
		ctx: ctx,
		dfsGatewayGroupId: dfsGatewayGroupId,
	}
}

// Execute executes the request
//  @return DfsGatewayGroupResp
func (a *DfsGatewayGroupsAPIService) DeleteDfsGatewayGroupExecute(r ApiDeleteDfsGatewayGroupRequest) (*DfsGatewayGroupResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsGatewayGroupResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsGatewayGroupsAPIService.DeleteDfsGatewayGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-gateway-groups/{dfs_gateway_group_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"dfs_gateway_group_id"+"}", url.PathEscape(parameterValueToString(r.dfsGatewayGroupId, "dfsGatewayGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.force != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "force", r.force, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDfsGatewayGroupRequest struct {
	ctx context.Context
	ApiService *DfsGatewayGroupsAPIService
	dfsGatewayGroupId int64
}

func (r ApiGetDfsGatewayGroupRequest) Execute() (*DfsGatewayGroupResp, *http.Response, error) {
	return r.ApiService.GetDfsGatewayGroupExecute(r)
}

/*
GetDfsGatewayGroup Method for GetDfsGatewayGroup

Get dfs gateway group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dfsGatewayGroupId gateway group id
 @return ApiGetDfsGatewayGroupRequest
*/
func (a *DfsGatewayGroupsAPIService) GetDfsGatewayGroup(ctx context.Context, dfsGatewayGroupId int64) ApiGetDfsGatewayGroupRequest {
	return ApiGetDfsGatewayGroupRequest{
		ApiService: a,
		ctx: ctx,
		dfsGatewayGroupId: dfsGatewayGroupId,
	}
}

// Execute executes the request
//  @return DfsGatewayGroupResp
func (a *DfsGatewayGroupsAPIService) GetDfsGatewayGroupExecute(r ApiGetDfsGatewayGroupRequest) (*DfsGatewayGroupResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsGatewayGroupResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsGatewayGroupsAPIService.GetDfsGatewayGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-gateway-groups/{dfs_gateway_group_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"dfs_gateway_group_id"+"}", url.PathEscape(parameterValueToString(r.dfsGatewayGroupId, "dfsGatewayGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListDfsGatewayGroupsRequest struct {
	ctx context.Context
	ApiService *DfsGatewayGroupsAPIService
	limit *int64
	offset *int64
	clusterId *string
	type_ *string
	security *string
	q *string
	sort *string
}

// paging param
func (r ApiListDfsGatewayGroupsRequest) Limit(limit int64) ApiListDfsGatewayGroupsRequest {
	r.limit = &limit
	return r
}

// paging param
func (r ApiListDfsGatewayGroupsRequest) Offset(offset int64) ApiListDfsGatewayGroupsRequest {
	r.offset = &offset
	return r
}

// cluster id
func (r ApiListDfsGatewayGroupsRequest) ClusterId(clusterId string) ApiListDfsGatewayGroupsRequest {
	r.clusterId = &clusterId
	return r
}

// type of dfs gateway group
func (r ApiListDfsGatewayGroupsRequest) Type_(type_ string) ApiListDfsGatewayGroupsRequest {
	r.type_ = &type_
	return r
}

// security of dfs gateway group
func (r ApiListDfsGatewayGroupsRequest) Security(security string) ApiListDfsGatewayGroupsRequest {
	r.security = &security
	return r
}

// query param of search
func (r ApiListDfsGatewayGroupsRequest) Q(q string) ApiListDfsGatewayGroupsRequest {
	r.q = &q
	return r
}

// sort param of search
func (r ApiListDfsGatewayGroupsRequest) Sort(sort string) ApiListDfsGatewayGroupsRequest {
	r.sort = &sort
	return r
}

func (r ApiListDfsGatewayGroupsRequest) Execute() (*DfsGatewayGroupsResp, *http.Response, error) {
	return r.ApiService.ListDfsGatewayGroupsExecute(r)
}

/*
ListDfsGatewayGroups Method for ListDfsGatewayGroups

List dfs gateway groups

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListDfsGatewayGroupsRequest
*/
func (a *DfsGatewayGroupsAPIService) ListDfsGatewayGroups(ctx context.Context) ApiListDfsGatewayGroupsRequest {
	return ApiListDfsGatewayGroupsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DfsGatewayGroupsResp
func (a *DfsGatewayGroupsAPIService) ListDfsGatewayGroupsExecute(r ApiListDfsGatewayGroupsRequest) (*DfsGatewayGroupsResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsGatewayGroupsResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsGatewayGroupsAPIService.ListDfsGatewayGroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-gateway-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.clusterId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_id", r.clusterId, "form", "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "form", "")
	}
	if r.security != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "security", r.security, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRebuildDfsGatewaysRequest struct {
	ctx context.Context
	ApiService *DfsGatewayGroupsAPIService
	dfsGatewayGroupId int64
	body *DfsGatewayGroupRebuildGatewaysReq
}

// gateways info
func (r ApiRebuildDfsGatewaysRequest) Body(body DfsGatewayGroupRebuildGatewaysReq) ApiRebuildDfsGatewaysRequest {
	r.body = &body
	return r
}

func (r ApiRebuildDfsGatewaysRequest) Execute() (*DfsGatewayGroupResp, *http.Response, error) {
	return r.ApiService.RebuildDfsGatewaysExecute(r)
}

/*
RebuildDfsGateways Method for RebuildDfsGateways

rebuild gateways in gateway group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dfsGatewayGroupId gateway group id
 @return ApiRebuildDfsGatewaysRequest
*/
func (a *DfsGatewayGroupsAPIService) RebuildDfsGateways(ctx context.Context, dfsGatewayGroupId int64) ApiRebuildDfsGatewaysRequest {
	return ApiRebuildDfsGatewaysRequest{
		ApiService: a,
		ctx: ctx,
		dfsGatewayGroupId: dfsGatewayGroupId,
	}
}

// Execute executes the request
//  @return DfsGatewayGroupResp
func (a *DfsGatewayGroupsAPIService) RebuildDfsGatewaysExecute(r ApiRebuildDfsGatewaysRequest) (*DfsGatewayGroupResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsGatewayGroupResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsGatewayGroupsAPIService.RebuildDfsGateways")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-gateway-groups/{dfs_gateway_group_id}:rebuild-gateways"
	localVarPath = strings.Replace(localVarPath, "{"+"dfs_gateway_group_id"+"}", url.PathEscape(parameterValueToString(r.dfsGatewayGroupId, "dfsGatewayGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRemoveDfsGatewaysRequest struct {
	ctx context.Context
	ApiService *DfsGatewayGroupsAPIService
	dfsGatewayGroupId int64
	body *DfsGatewayGroupRemoveGatewaysReq
	force *bool
}

// gateways info
func (r ApiRemoveDfsGatewaysRequest) Body(body DfsGatewayGroupRemoveGatewaysReq) ApiRemoveDfsGatewaysRequest {
	r.body = &body
	return r
}

// force delete or not
func (r ApiRemoveDfsGatewaysRequest) Force(force bool) ApiRemoveDfsGatewaysRequest {
	r.force = &force
	return r
}

func (r ApiRemoveDfsGatewaysRequest) Execute() (*DfsGatewayGroupResp, *http.Response, error) {
	return r.ApiService.RemoveDfsGatewaysExecute(r)
}

/*
RemoveDfsGateways Method for RemoveDfsGateways

remove gateways from gateway group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dfsGatewayGroupId gateway group id
 @return ApiRemoveDfsGatewaysRequest
*/
func (a *DfsGatewayGroupsAPIService) RemoveDfsGateways(ctx context.Context, dfsGatewayGroupId int64) ApiRemoveDfsGatewaysRequest {
	return ApiRemoveDfsGatewaysRequest{
		ApiService: a,
		ctx: ctx,
		dfsGatewayGroupId: dfsGatewayGroupId,
	}
}

// Execute executes the request
//  @return DfsGatewayGroupResp
func (a *DfsGatewayGroupsAPIService) RemoveDfsGatewaysExecute(r ApiRemoveDfsGatewaysRequest) (*DfsGatewayGroupResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsGatewayGroupResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsGatewayGroupsAPIService.RemoveDfsGateways")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-gateway-groups/{dfs_gateway_group_id}:remove-gateways"
	localVarPath = strings.Replace(localVarPath, "{"+"dfs_gateway_group_id"+"}", url.PathEscape(parameterValueToString(r.dfsGatewayGroupId, "dfsGatewayGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.force != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "force", r.force, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateDfsGatewayGroupRequest struct {
	ctx context.Context
	ApiService *DfsGatewayGroupsAPIService
	dfsGatewayGroupId int64
	body *DfsGatewayGroupUpdateReq
}

// gateway group info
func (r ApiUpdateDfsGatewayGroupRequest) Body(body DfsGatewayGroupUpdateReq) ApiUpdateDfsGatewayGroupRequest {
	r.body = &body
	return r
}

func (r ApiUpdateDfsGatewayGroupRequest) Execute() (*DfsGatewayGroupResp, *http.Response, error) {
	return r.ApiService.UpdateDfsGatewayGroupExecute(r)
}

/*
UpdateDfsGatewayGroup Method for UpdateDfsGatewayGroup

Update dfs gateway group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dfsGatewayGroupId gateway group id
 @return ApiUpdateDfsGatewayGroupRequest
*/
func (a *DfsGatewayGroupsAPIService) UpdateDfsGatewayGroup(ctx context.Context, dfsGatewayGroupId int64) ApiUpdateDfsGatewayGroupRequest {
	return ApiUpdateDfsGatewayGroupRequest{
		ApiService: a,
		ctx: ctx,
		dfsGatewayGroupId: dfsGatewayGroupId,
	}
}

// Execute executes the request
//  @return DfsGatewayGroupResp
func (a *DfsGatewayGroupsAPIService) UpdateDfsGatewayGroupExecute(r ApiUpdateDfsGatewayGroupRequest) (*DfsGatewayGroupResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsGatewayGroupResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsGatewayGroupsAPIService.UpdateDfsGatewayGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-gateway-groups/{dfs_gateway_group_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"dfs_gateway_group_id"+"}", url.PathEscape(parameterValueToString(r.dfsGatewayGroupId, "dfsGatewayGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateDfsGatewayGroupTypesRequest struct {
	ctx context.Context
	ApiService *DfsGatewayGroupsAPIService
	dfsGatewayGroupId int64
	body *DfsGatewayGroupUpdateTypesReq
}

// gateway group info
func (r ApiUpdateDfsGatewayGroupTypesRequest) Body(body DfsGatewayGroupUpdateTypesReq) ApiUpdateDfsGatewayGroupTypesRequest {
	r.body = &body
	return r
}

func (r ApiUpdateDfsGatewayGroupTypesRequest) Execute() (*DfsGatewayGroupResp, *http.Response, error) {
	return r.ApiService.UpdateDfsGatewayGroupTypesExecute(r)
}

/*
UpdateDfsGatewayGroupTypes Method for UpdateDfsGatewayGroupTypes

Update protocal types of dfs gateway group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dfsGatewayGroupId gateway group id
 @return ApiUpdateDfsGatewayGroupTypesRequest
*/
func (a *DfsGatewayGroupsAPIService) UpdateDfsGatewayGroupTypes(ctx context.Context, dfsGatewayGroupId int64) ApiUpdateDfsGatewayGroupTypesRequest {
	return ApiUpdateDfsGatewayGroupTypesRequest{
		ApiService: a,
		ctx: ctx,
		dfsGatewayGroupId: dfsGatewayGroupId,
	}
}

// Execute executes the request
//  @return DfsGatewayGroupResp
func (a *DfsGatewayGroupsAPIService) UpdateDfsGatewayGroupTypesExecute(r ApiUpdateDfsGatewayGroupTypesRequest) (*DfsGatewayGroupResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsGatewayGroupResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsGatewayGroupsAPIService.UpdateDfsGatewayGroupTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-gateway-groups/{dfs_gateway_group_id}:update-types"
	localVarPath = strings.Replace(localVarPath, "{"+"dfs_gateway_group_id"+"}", url.PathEscape(parameterValueToString(r.dfsGatewayGroupId, "dfsGatewayGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateDfsGatewayGroupVIPsRequest struct {
	ctx context.Context
	ApiService *DfsGatewayGroupsAPIService
	dfsGatewayGroupId int64
	body *DfsGatewayGroupUpdateVIPsReq
}

// gateway group info
func (r ApiUpdateDfsGatewayGroupVIPsRequest) Body(body DfsGatewayGroupUpdateVIPsReq) ApiUpdateDfsGatewayGroupVIPsRequest {
	r.body = &body
	return r
}

func (r ApiUpdateDfsGatewayGroupVIPsRequest) Execute() (*DfsGatewayGroupResp, *http.Response, error) {
	return r.ApiService.UpdateDfsGatewayGroupVIPsExecute(r)
}

/*
UpdateDfsGatewayGroupVIPs Method for UpdateDfsGatewayGroupVIPs

Update VIPs of dfs gateway group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dfsGatewayGroupId gateway group id
 @return ApiUpdateDfsGatewayGroupVIPsRequest
*/
func (a *DfsGatewayGroupsAPIService) UpdateDfsGatewayGroupVIPs(ctx context.Context, dfsGatewayGroupId int64) ApiUpdateDfsGatewayGroupVIPsRequest {
	return ApiUpdateDfsGatewayGroupVIPsRequest{
		ApiService: a,
		ctx: ctx,
		dfsGatewayGroupId: dfsGatewayGroupId,
	}
}

// Execute executes the request
//  @return DfsGatewayGroupResp
func (a *DfsGatewayGroupsAPIService) UpdateDfsGatewayGroupVIPsExecute(r ApiUpdateDfsGatewayGroupVIPsRequest) (*DfsGatewayGroupResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsGatewayGroupResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsGatewayGroupsAPIService.UpdateDfsGatewayGroupVIPs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-gateway-groups/{dfs_gateway_group_id}:update-vips"
	localVarPath = strings.Replace(localVarPath, "{"+"dfs_gateway_group_id"+"}", url.PathEscape(parameterValueToString(r.dfsGatewayGroupId, "dfsGatewayGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
