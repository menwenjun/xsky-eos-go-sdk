/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DfsListFilesWithResourcesResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsListFilesWithResourcesResp{}

// DfsListFilesWithResourcesResp struct for DfsListFilesWithResourcesResp
type DfsListFilesWithResourcesResp struct {
	// dfs file list
	DfsFiles []DfsFile `json:"dfs_files,omitempty"`
}

// NewDfsListFilesWithResourcesResp instantiates a new DfsListFilesWithResourcesResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsListFilesWithResourcesResp() *DfsListFilesWithResourcesResp {
	this := DfsListFilesWithResourcesResp{}
	return &this
}

// NewDfsListFilesWithResourcesRespWithDefaults instantiates a new DfsListFilesWithResourcesResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsListFilesWithResourcesRespWithDefaults() *DfsListFilesWithResourcesResp {
	this := DfsListFilesWithResourcesResp{}
	return &this
}

// GetDfsFiles returns the DfsFiles field value if set, zero value otherwise.
func (o *DfsListFilesWithResourcesResp) GetDfsFiles() []DfsFile {
	if o == nil || IsNil(o.DfsFiles) {
		var ret []DfsFile
		return ret
	}
	return o.DfsFiles
}

// GetDfsFilesOk returns a tuple with the DfsFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsListFilesWithResourcesResp) GetDfsFilesOk() ([]DfsFile, bool) {
	if o == nil || IsNil(o.DfsFiles) {
		return nil, false
	}
	return o.DfsFiles, true
}

// HasDfsFiles returns a boolean if a field has been set.
func (o *DfsListFilesWithResourcesResp) HasDfsFiles() bool {
	if o != nil && !IsNil(o.DfsFiles) {
		return true
	}

	return false
}

// SetDfsFiles gets a reference to the given []DfsFile and assigns it to the DfsFiles field.
func (o *DfsListFilesWithResourcesResp) SetDfsFiles(v []DfsFile) {
	o.DfsFiles = v
}

func (o DfsListFilesWithResourcesResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsListFilesWithResourcesResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DfsFiles) {
		toSerialize["dfs_files"] = o.DfsFiles
	}
	return toSerialize, nil
}

type NullableDfsListFilesWithResourcesResp struct {
	value *DfsListFilesWithResourcesResp
	isSet bool
}

func (v NullableDfsListFilesWithResourcesResp) Get() *DfsListFilesWithResourcesResp {
	return v.value
}

func (v *NullableDfsListFilesWithResourcesResp) Set(val *DfsListFilesWithResourcesResp) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsListFilesWithResourcesResp) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsListFilesWithResourcesResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsListFilesWithResourcesResp(val *DfsListFilesWithResourcesResp) *NullableDfsListFilesWithResourcesResp {
	return &NullableDfsListFilesWithResourcesResp{value: val, isSet: true}
}

func (v NullableDfsListFilesWithResourcesResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsListFilesWithResourcesResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


