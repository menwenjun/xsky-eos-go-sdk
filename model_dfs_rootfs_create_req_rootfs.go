/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DfsRootfsCreateReqRootfs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsRootfsCreateReqRootfs{}

// DfsRootfsCreateReqRootfs struct for DfsRootfsCreateReqRootfs
type DfsRootfsCreateReqRootfs struct {
	// id array of active pools
	ActivePoolIds []int64 `json:"active_pool_ids,omitempty"`
	// name of default class
	DefaultClassName *string `json:"default_class_name,omitempty"`
	// write policy of default class
	DefaultClassWritePolicy *string `json:"default_class_write_policy,omitempty"`
	// description of rootfs
	Description *string `json:"description,omitempty"`
	DfsAuditLog DfsRootfsCreateReqRootfsAuditLog `json:"dfs_audit_log"`
	// metadata cluster id
	MetadataClusterId int64 `json:"metadata_cluster_id"`
	// name of rootfs
	Name string `json:"name"`
	// id array of pools
	PoolIds []int64 `json:"pool_ids,omitempty"`
	// active pool policy array of default class
	PoolPolicies []PoolPolicy `json:"pool_policies,omitempty"`
	// CustomStorageClasses create custom dfs storage class
	StorageClasses []CustomStorageClass `json:"storage_classes,omitempty"`
}

type _DfsRootfsCreateReqRootfs DfsRootfsCreateReqRootfs

// NewDfsRootfsCreateReqRootfs instantiates a new DfsRootfsCreateReqRootfs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsRootfsCreateReqRootfs(dfsAuditLog DfsRootfsCreateReqRootfsAuditLog, metadataClusterId int64, name string) *DfsRootfsCreateReqRootfs {
	this := DfsRootfsCreateReqRootfs{}
	this.DfsAuditLog = dfsAuditLog
	this.MetadataClusterId = metadataClusterId
	this.Name = name
	return &this
}

// NewDfsRootfsCreateReqRootfsWithDefaults instantiates a new DfsRootfsCreateReqRootfs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsRootfsCreateReqRootfsWithDefaults() *DfsRootfsCreateReqRootfs {
	this := DfsRootfsCreateReqRootfs{}
	return &this
}

// GetActivePoolIds returns the ActivePoolIds field value if set, zero value otherwise.
func (o *DfsRootfsCreateReqRootfs) GetActivePoolIds() []int64 {
	if o == nil || IsNil(o.ActivePoolIds) {
		var ret []int64
		return ret
	}
	return o.ActivePoolIds
}

// GetActivePoolIdsOk returns a tuple with the ActivePoolIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsRootfsCreateReqRootfs) GetActivePoolIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.ActivePoolIds) {
		return nil, false
	}
	return o.ActivePoolIds, true
}

// HasActivePoolIds returns a boolean if a field has been set.
func (o *DfsRootfsCreateReqRootfs) HasActivePoolIds() bool {
	if o != nil && !IsNil(o.ActivePoolIds) {
		return true
	}

	return false
}

// SetActivePoolIds gets a reference to the given []int64 and assigns it to the ActivePoolIds field.
func (o *DfsRootfsCreateReqRootfs) SetActivePoolIds(v []int64) {
	o.ActivePoolIds = v
}

// GetDefaultClassName returns the DefaultClassName field value if set, zero value otherwise.
func (o *DfsRootfsCreateReqRootfs) GetDefaultClassName() string {
	if o == nil || IsNil(o.DefaultClassName) {
		var ret string
		return ret
	}
	return *o.DefaultClassName
}

// GetDefaultClassNameOk returns a tuple with the DefaultClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsRootfsCreateReqRootfs) GetDefaultClassNameOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultClassName) {
		return nil, false
	}
	return o.DefaultClassName, true
}

// HasDefaultClassName returns a boolean if a field has been set.
func (o *DfsRootfsCreateReqRootfs) HasDefaultClassName() bool {
	if o != nil && !IsNil(o.DefaultClassName) {
		return true
	}

	return false
}

// SetDefaultClassName gets a reference to the given string and assigns it to the DefaultClassName field.
func (o *DfsRootfsCreateReqRootfs) SetDefaultClassName(v string) {
	o.DefaultClassName = &v
}

// GetDefaultClassWritePolicy returns the DefaultClassWritePolicy field value if set, zero value otherwise.
func (o *DfsRootfsCreateReqRootfs) GetDefaultClassWritePolicy() string {
	if o == nil || IsNil(o.DefaultClassWritePolicy) {
		var ret string
		return ret
	}
	return *o.DefaultClassWritePolicy
}

// GetDefaultClassWritePolicyOk returns a tuple with the DefaultClassWritePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsRootfsCreateReqRootfs) GetDefaultClassWritePolicyOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultClassWritePolicy) {
		return nil, false
	}
	return o.DefaultClassWritePolicy, true
}

// HasDefaultClassWritePolicy returns a boolean if a field has been set.
func (o *DfsRootfsCreateReqRootfs) HasDefaultClassWritePolicy() bool {
	if o != nil && !IsNil(o.DefaultClassWritePolicy) {
		return true
	}

	return false
}

// SetDefaultClassWritePolicy gets a reference to the given string and assigns it to the DefaultClassWritePolicy field.
func (o *DfsRootfsCreateReqRootfs) SetDefaultClassWritePolicy(v string) {
	o.DefaultClassWritePolicy = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DfsRootfsCreateReqRootfs) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsRootfsCreateReqRootfs) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DfsRootfsCreateReqRootfs) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DfsRootfsCreateReqRootfs) SetDescription(v string) {
	o.Description = &v
}

// GetDfsAuditLog returns the DfsAuditLog field value
func (o *DfsRootfsCreateReqRootfs) GetDfsAuditLog() DfsRootfsCreateReqRootfsAuditLog {
	if o == nil {
		var ret DfsRootfsCreateReqRootfsAuditLog
		return ret
	}

	return o.DfsAuditLog
}

// GetDfsAuditLogOk returns a tuple with the DfsAuditLog field value
// and a boolean to check if the value has been set.
func (o *DfsRootfsCreateReqRootfs) GetDfsAuditLogOk() (*DfsRootfsCreateReqRootfsAuditLog, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DfsAuditLog, true
}

// SetDfsAuditLog sets field value
func (o *DfsRootfsCreateReqRootfs) SetDfsAuditLog(v DfsRootfsCreateReqRootfsAuditLog) {
	o.DfsAuditLog = v
}

// GetMetadataClusterId returns the MetadataClusterId field value
func (o *DfsRootfsCreateReqRootfs) GetMetadataClusterId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MetadataClusterId
}

// GetMetadataClusterIdOk returns a tuple with the MetadataClusterId field value
// and a boolean to check if the value has been set.
func (o *DfsRootfsCreateReqRootfs) GetMetadataClusterIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetadataClusterId, true
}

// SetMetadataClusterId sets field value
func (o *DfsRootfsCreateReqRootfs) SetMetadataClusterId(v int64) {
	o.MetadataClusterId = v
}

// GetName returns the Name field value
func (o *DfsRootfsCreateReqRootfs) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DfsRootfsCreateReqRootfs) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DfsRootfsCreateReqRootfs) SetName(v string) {
	o.Name = v
}

// GetPoolIds returns the PoolIds field value if set, zero value otherwise.
func (o *DfsRootfsCreateReqRootfs) GetPoolIds() []int64 {
	if o == nil || IsNil(o.PoolIds) {
		var ret []int64
		return ret
	}
	return o.PoolIds
}

// GetPoolIdsOk returns a tuple with the PoolIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsRootfsCreateReqRootfs) GetPoolIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.PoolIds) {
		return nil, false
	}
	return o.PoolIds, true
}

// HasPoolIds returns a boolean if a field has been set.
func (o *DfsRootfsCreateReqRootfs) HasPoolIds() bool {
	if o != nil && !IsNil(o.PoolIds) {
		return true
	}

	return false
}

// SetPoolIds gets a reference to the given []int64 and assigns it to the PoolIds field.
func (o *DfsRootfsCreateReqRootfs) SetPoolIds(v []int64) {
	o.PoolIds = v
}

// GetPoolPolicies returns the PoolPolicies field value if set, zero value otherwise.
func (o *DfsRootfsCreateReqRootfs) GetPoolPolicies() []PoolPolicy {
	if o == nil || IsNil(o.PoolPolicies) {
		var ret []PoolPolicy
		return ret
	}
	return o.PoolPolicies
}

// GetPoolPoliciesOk returns a tuple with the PoolPolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsRootfsCreateReqRootfs) GetPoolPoliciesOk() ([]PoolPolicy, bool) {
	if o == nil || IsNil(o.PoolPolicies) {
		return nil, false
	}
	return o.PoolPolicies, true
}

// HasPoolPolicies returns a boolean if a field has been set.
func (o *DfsRootfsCreateReqRootfs) HasPoolPolicies() bool {
	if o != nil && !IsNil(o.PoolPolicies) {
		return true
	}

	return false
}

// SetPoolPolicies gets a reference to the given []PoolPolicy and assigns it to the PoolPolicies field.
func (o *DfsRootfsCreateReqRootfs) SetPoolPolicies(v []PoolPolicy) {
	o.PoolPolicies = v
}

// GetStorageClasses returns the StorageClasses field value if set, zero value otherwise.
func (o *DfsRootfsCreateReqRootfs) GetStorageClasses() []CustomStorageClass {
	if o == nil || IsNil(o.StorageClasses) {
		var ret []CustomStorageClass
		return ret
	}
	return o.StorageClasses
}

// GetStorageClassesOk returns a tuple with the StorageClasses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsRootfsCreateReqRootfs) GetStorageClassesOk() ([]CustomStorageClass, bool) {
	if o == nil || IsNil(o.StorageClasses) {
		return nil, false
	}
	return o.StorageClasses, true
}

// HasStorageClasses returns a boolean if a field has been set.
func (o *DfsRootfsCreateReqRootfs) HasStorageClasses() bool {
	if o != nil && !IsNil(o.StorageClasses) {
		return true
	}

	return false
}

// SetStorageClasses gets a reference to the given []CustomStorageClass and assigns it to the StorageClasses field.
func (o *DfsRootfsCreateReqRootfs) SetStorageClasses(v []CustomStorageClass) {
	o.StorageClasses = v
}

func (o DfsRootfsCreateReqRootfs) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsRootfsCreateReqRootfs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActivePoolIds) {
		toSerialize["active_pool_ids"] = o.ActivePoolIds
	}
	if !IsNil(o.DefaultClassName) {
		toSerialize["default_class_name"] = o.DefaultClassName
	}
	if !IsNil(o.DefaultClassWritePolicy) {
		toSerialize["default_class_write_policy"] = o.DefaultClassWritePolicy
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["dfs_audit_log"] = o.DfsAuditLog
	toSerialize["metadata_cluster_id"] = o.MetadataClusterId
	toSerialize["name"] = o.Name
	if !IsNil(o.PoolIds) {
		toSerialize["pool_ids"] = o.PoolIds
	}
	if !IsNil(o.PoolPolicies) {
		toSerialize["pool_policies"] = o.PoolPolicies
	}
	if !IsNil(o.StorageClasses) {
		toSerialize["storage_classes"] = o.StorageClasses
	}
	return toSerialize, nil
}

func (o *DfsRootfsCreateReqRootfs) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dfs_audit_log",
		"metadata_cluster_id",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDfsRootfsCreateReqRootfs := _DfsRootfsCreateReqRootfs{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDfsRootfsCreateReqRootfs)

	if err != nil {
		return err
	}

	*o = DfsRootfsCreateReqRootfs(varDfsRootfsCreateReqRootfs)

	return err
}

type NullableDfsRootfsCreateReqRootfs struct {
	value *DfsRootfsCreateReqRootfs
	isSet bool
}

func (v NullableDfsRootfsCreateReqRootfs) Get() *DfsRootfsCreateReqRootfs {
	return v.value
}

func (v *NullableDfsRootfsCreateReqRootfs) Set(val *DfsRootfsCreateReqRootfs) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsRootfsCreateReqRootfs) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsRootfsCreateReqRootfs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsRootfsCreateReqRootfs(val *DfsRootfsCreateReqRootfs) *NullableDfsRootfsCreateReqRootfs {
	return &NullableDfsRootfsCreateReqRootfs{value: val, isSet: true}
}

func (v NullableDfsRootfsCreateReqRootfs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsRootfsCreateReqRootfs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


