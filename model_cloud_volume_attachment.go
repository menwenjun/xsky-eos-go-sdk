/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the CloudVolumeAttachment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CloudVolumeAttachment{}

// CloudVolumeAttachment CloudVolumeAttachment defines volume attachment relationship with cloud instances
type CloudVolumeAttachment struct {
	BlockVolume *VolumeNestview `json:"block_volume,omitempty"`
	CloudInstance *CloudInstanceNestview `json:"cloud_instance,omitempty"`
	CloudVolume *CloudVolumeNestview `json:"cloud_volume,omitempty"`
	Create *time.Time `json:"create,omitempty"`
	Device *string `json:"device,omitempty"`
	Id *int64 `json:"id,omitempty"`
	Update *time.Time `json:"update,omitempty"`
}

// NewCloudVolumeAttachment instantiates a new CloudVolumeAttachment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCloudVolumeAttachment() *CloudVolumeAttachment {
	this := CloudVolumeAttachment{}
	return &this
}

// NewCloudVolumeAttachmentWithDefaults instantiates a new CloudVolumeAttachment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCloudVolumeAttachmentWithDefaults() *CloudVolumeAttachment {
	this := CloudVolumeAttachment{}
	return &this
}

// GetBlockVolume returns the BlockVolume field value if set, zero value otherwise.
func (o *CloudVolumeAttachment) GetBlockVolume() VolumeNestview {
	if o == nil || IsNil(o.BlockVolume) {
		var ret VolumeNestview
		return ret
	}
	return *o.BlockVolume
}

// GetBlockVolumeOk returns a tuple with the BlockVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudVolumeAttachment) GetBlockVolumeOk() (*VolumeNestview, bool) {
	if o == nil || IsNil(o.BlockVolume) {
		return nil, false
	}
	return o.BlockVolume, true
}

// HasBlockVolume returns a boolean if a field has been set.
func (o *CloudVolumeAttachment) HasBlockVolume() bool {
	if o != nil && !IsNil(o.BlockVolume) {
		return true
	}

	return false
}

// SetBlockVolume gets a reference to the given VolumeNestview and assigns it to the BlockVolume field.
func (o *CloudVolumeAttachment) SetBlockVolume(v VolumeNestview) {
	o.BlockVolume = &v
}

// GetCloudInstance returns the CloudInstance field value if set, zero value otherwise.
func (o *CloudVolumeAttachment) GetCloudInstance() CloudInstanceNestview {
	if o == nil || IsNil(o.CloudInstance) {
		var ret CloudInstanceNestview
		return ret
	}
	return *o.CloudInstance
}

// GetCloudInstanceOk returns a tuple with the CloudInstance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudVolumeAttachment) GetCloudInstanceOk() (*CloudInstanceNestview, bool) {
	if o == nil || IsNil(o.CloudInstance) {
		return nil, false
	}
	return o.CloudInstance, true
}

// HasCloudInstance returns a boolean if a field has been set.
func (o *CloudVolumeAttachment) HasCloudInstance() bool {
	if o != nil && !IsNil(o.CloudInstance) {
		return true
	}

	return false
}

// SetCloudInstance gets a reference to the given CloudInstanceNestview and assigns it to the CloudInstance field.
func (o *CloudVolumeAttachment) SetCloudInstance(v CloudInstanceNestview) {
	o.CloudInstance = &v
}

// GetCloudVolume returns the CloudVolume field value if set, zero value otherwise.
func (o *CloudVolumeAttachment) GetCloudVolume() CloudVolumeNestview {
	if o == nil || IsNil(o.CloudVolume) {
		var ret CloudVolumeNestview
		return ret
	}
	return *o.CloudVolume
}

// GetCloudVolumeOk returns a tuple with the CloudVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudVolumeAttachment) GetCloudVolumeOk() (*CloudVolumeNestview, bool) {
	if o == nil || IsNil(o.CloudVolume) {
		return nil, false
	}
	return o.CloudVolume, true
}

// HasCloudVolume returns a boolean if a field has been set.
func (o *CloudVolumeAttachment) HasCloudVolume() bool {
	if o != nil && !IsNil(o.CloudVolume) {
		return true
	}

	return false
}

// SetCloudVolume gets a reference to the given CloudVolumeNestview and assigns it to the CloudVolume field.
func (o *CloudVolumeAttachment) SetCloudVolume(v CloudVolumeNestview) {
	o.CloudVolume = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *CloudVolumeAttachment) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudVolumeAttachment) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *CloudVolumeAttachment) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *CloudVolumeAttachment) SetCreate(v time.Time) {
	o.Create = &v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *CloudVolumeAttachment) GetDevice() string {
	if o == nil || IsNil(o.Device) {
		var ret string
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudVolumeAttachment) GetDeviceOk() (*string, bool) {
	if o == nil || IsNil(o.Device) {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *CloudVolumeAttachment) HasDevice() bool {
	if o != nil && !IsNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given string and assigns it to the Device field.
func (o *CloudVolumeAttachment) SetDevice(v string) {
	o.Device = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CloudVolumeAttachment) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudVolumeAttachment) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CloudVolumeAttachment) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *CloudVolumeAttachment) SetId(v int64) {
	o.Id = &v
}

// GetUpdate returns the Update field value if set, zero value otherwise.
func (o *CloudVolumeAttachment) GetUpdate() time.Time {
	if o == nil || IsNil(o.Update) {
		var ret time.Time
		return ret
	}
	return *o.Update
}

// GetUpdateOk returns a tuple with the Update field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudVolumeAttachment) GetUpdateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Update) {
		return nil, false
	}
	return o.Update, true
}

// HasUpdate returns a boolean if a field has been set.
func (o *CloudVolumeAttachment) HasUpdate() bool {
	if o != nil && !IsNil(o.Update) {
		return true
	}

	return false
}

// SetUpdate gets a reference to the given time.Time and assigns it to the Update field.
func (o *CloudVolumeAttachment) SetUpdate(v time.Time) {
	o.Update = &v
}

func (o CloudVolumeAttachment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CloudVolumeAttachment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlockVolume) {
		toSerialize["block_volume"] = o.BlockVolume
	}
	if !IsNil(o.CloudInstance) {
		toSerialize["cloud_instance"] = o.CloudInstance
	}
	if !IsNil(o.CloudVolume) {
		toSerialize["cloud_volume"] = o.CloudVolume
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Update) {
		toSerialize["update"] = o.Update
	}
	return toSerialize, nil
}

type NullableCloudVolumeAttachment struct {
	value *CloudVolumeAttachment
	isSet bool
}

func (v NullableCloudVolumeAttachment) Get() *CloudVolumeAttachment {
	return v.value
}

func (v *NullableCloudVolumeAttachment) Set(val *CloudVolumeAttachment) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudVolumeAttachment) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudVolumeAttachment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudVolumeAttachment(val *CloudVolumeAttachment) *NullableCloudVolumeAttachment {
	return &NullableCloudVolumeAttachment{value: val, isSet: true}
}

func (v NullableCloudVolumeAttachment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudVolumeAttachment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


