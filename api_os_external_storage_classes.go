/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// OsExternalStorageClassesAPIService OsExternalStorageClassesAPI service
type OsExternalStorageClassesAPIService service

type ApiCreateExternalStorageClassRequest struct {
	ctx context.Context
	ApiService *OsExternalStorageClassesAPIService
	body *OSExternalStorageClassCreateReq
	clusterId *string
}

// external storage class info
func (r ApiCreateExternalStorageClassRequest) Body(body OSExternalStorageClassCreateReq) ApiCreateExternalStorageClassRequest {
	r.body = &body
	return r
}

// cluster id
func (r ApiCreateExternalStorageClassRequest) ClusterId(clusterId string) ApiCreateExternalStorageClassRequest {
	r.clusterId = &clusterId
	return r
}

func (r ApiCreateExternalStorageClassRequest) Execute() (*OSExternalStorageClassResp, *http.Response, error) {
	return r.ApiService.CreateExternalStorageClassExecute(r)
}

/*
CreateExternalStorageClass Method for CreateExternalStorageClass

Create os external storage class

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateExternalStorageClassRequest
*/
func (a *OsExternalStorageClassesAPIService) CreateExternalStorageClass(ctx context.Context) ApiCreateExternalStorageClassRequest {
	return ApiCreateExternalStorageClassRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return OSExternalStorageClassResp
func (a *OsExternalStorageClassesAPIService) CreateExternalStorageClassExecute(r ApiCreateExternalStorageClassRequest) (*OSExternalStorageClassResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OSExternalStorageClassResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OsExternalStorageClassesAPIService.CreateExternalStorageClass")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/os-external-storage-classes/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.clusterId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_id", r.clusterId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteOSExternalStorageClassRequest struct {
	ctx context.Context
	ApiService *OsExternalStorageClassesAPIService
	externalStorageClassId int64
	clusterId *string
}

// cluster id
func (r ApiDeleteOSExternalStorageClassRequest) ClusterId(clusterId string) ApiDeleteOSExternalStorageClassRequest {
	r.clusterId = &clusterId
	return r
}

func (r ApiDeleteOSExternalStorageClassRequest) Execute() (*OSExternalStorageClassResp, *http.Response, error) {
	return r.ApiService.DeleteOSExternalStorageClassExecute(r)
}

/*
DeleteOSExternalStorageClass Method for DeleteOSExternalStorageClass

Delete an os external storage class

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param externalStorageClassId external storage class id
 @return ApiDeleteOSExternalStorageClassRequest
*/
func (a *OsExternalStorageClassesAPIService) DeleteOSExternalStorageClass(ctx context.Context, externalStorageClassId int64) ApiDeleteOSExternalStorageClassRequest {
	return ApiDeleteOSExternalStorageClassRequest{
		ApiService: a,
		ctx: ctx,
		externalStorageClassId: externalStorageClassId,
	}
}

// Execute executes the request
//  @return OSExternalStorageClassResp
func (a *OsExternalStorageClassesAPIService) DeleteOSExternalStorageClassExecute(r ApiDeleteOSExternalStorageClassRequest) (*OSExternalStorageClassResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OSExternalStorageClassResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OsExternalStorageClassesAPIService.DeleteOSExternalStorageClass")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/os-external-storage-classes/{external_storage_class_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"external_storage_class_id"+"}", url.PathEscape(parameterValueToString(r.externalStorageClassId, "externalStorageClassId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.clusterId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_id", r.clusterId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetOSExternalStorageClassRequest struct {
	ctx context.Context
	ApiService *OsExternalStorageClassesAPIService
	externalStorageClassId int64
}

func (r ApiGetOSExternalStorageClassRequest) Execute() (*OSExternalStorageClassResp, *http.Response, error) {
	return r.ApiService.GetOSExternalStorageClassExecute(r)
}

/*
GetOSExternalStorageClass Method for GetOSExternalStorageClass

Get a os external storage class

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param externalStorageClassId external storage class id
 @return ApiGetOSExternalStorageClassRequest
*/
func (a *OsExternalStorageClassesAPIService) GetOSExternalStorageClass(ctx context.Context, externalStorageClassId int64) ApiGetOSExternalStorageClassRequest {
	return ApiGetOSExternalStorageClassRequest{
		ApiService: a,
		ctx: ctx,
		externalStorageClassId: externalStorageClassId,
	}
}

// Execute executes the request
//  @return OSExternalStorageClassResp
func (a *OsExternalStorageClassesAPIService) GetOSExternalStorageClassExecute(r ApiGetOSExternalStorageClassRequest) (*OSExternalStorageClassResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OSExternalStorageClassResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OsExternalStorageClassesAPIService.GetOSExternalStorageClass")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/os-external-storage-classes/{external_storage_class_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"external_storage_class_id"+"}", url.PathEscape(parameterValueToString(r.externalStorageClassId, "externalStorageClassId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListOSExternalStorageClassesRequest struct {
	ctx context.Context
	ApiService *OsExternalStorageClassesAPIService
	limit *int64
	offset *int64
	osPolicyId *int64
	generalStatus *bool
	clusterId *string
}

// paging param
func (r ApiListOSExternalStorageClassesRequest) Limit(limit int64) ApiListOSExternalStorageClassesRequest {
	r.limit = &limit
	return r
}

// paging param
func (r ApiListOSExternalStorageClassesRequest) Offset(offset int64) ApiListOSExternalStorageClassesRequest {
	r.offset = &offset
	return r
}

// os policy id
func (r ApiListOSExternalStorageClassesRequest) OsPolicyId(osPolicyId int64) ApiListOSExternalStorageClassesRequest {
	r.osPolicyId = &osPolicyId
	return r
}

// query records with active or error status
func (r ApiListOSExternalStorageClassesRequest) GeneralStatus(generalStatus bool) ApiListOSExternalStorageClassesRequest {
	r.generalStatus = &generalStatus
	return r
}

// cluster id
func (r ApiListOSExternalStorageClassesRequest) ClusterId(clusterId string) ApiListOSExternalStorageClassesRequest {
	r.clusterId = &clusterId
	return r
}

func (r ApiListOSExternalStorageClassesRequest) Execute() (*OSExternalStorageClassesResp, *http.Response, error) {
	return r.ApiService.ListOSExternalStorageClassesExecute(r)
}

/*
ListOSExternalStorageClasses Method for ListOSExternalStorageClasses

List os external storage classes

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListOSExternalStorageClassesRequest
*/
func (a *OsExternalStorageClassesAPIService) ListOSExternalStorageClasses(ctx context.Context) ApiListOSExternalStorageClassesRequest {
	return ApiListOSExternalStorageClassesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return OSExternalStorageClassesResp
func (a *OsExternalStorageClassesAPIService) ListOSExternalStorageClassesExecute(r ApiListOSExternalStorageClassesRequest) (*OSExternalStorageClassesResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OSExternalStorageClassesResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OsExternalStorageClassesAPIService.ListOSExternalStorageClasses")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/os-external-storage-classes/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.osPolicyId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "os_policy_id", r.osPolicyId, "form", "")
	}
	if r.generalStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "general_status", r.generalStatus, "form", "")
	}
	if r.clusterId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_id", r.clusterId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateOSExternalStorageClassRequest struct {
	ctx context.Context
	ApiService *OsExternalStorageClassesAPIService
	externalStorageClassId int64
	body *OSExternalStorageClassUpdateReq
	clusterId *string
}

// external storage class info
func (r ApiUpdateOSExternalStorageClassRequest) Body(body OSExternalStorageClassUpdateReq) ApiUpdateOSExternalStorageClassRequest {
	r.body = &body
	return r
}

// cluster id
func (r ApiUpdateOSExternalStorageClassRequest) ClusterId(clusterId string) ApiUpdateOSExternalStorageClassRequest {
	r.clusterId = &clusterId
	return r
}

func (r ApiUpdateOSExternalStorageClassRequest) Execute() (*OSExternalStorageClassResp, *http.Response, error) {
	return r.ApiService.UpdateOSExternalStorageClassExecute(r)
}

/*
UpdateOSExternalStorageClass Method for UpdateOSExternalStorageClass

update os external storage class

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param externalStorageClassId external storage class id
 @return ApiUpdateOSExternalStorageClassRequest
*/
func (a *OsExternalStorageClassesAPIService) UpdateOSExternalStorageClass(ctx context.Context, externalStorageClassId int64) ApiUpdateOSExternalStorageClassRequest {
	return ApiUpdateOSExternalStorageClassRequest{
		ApiService: a,
		ctx: ctx,
		externalStorageClassId: externalStorageClassId,
	}
}

// Execute executes the request
//  @return OSExternalStorageClassResp
func (a *OsExternalStorageClassesAPIService) UpdateOSExternalStorageClassExecute(r ApiUpdateOSExternalStorageClassRequest) (*OSExternalStorageClassResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OSExternalStorageClassResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OsExternalStorageClassesAPIService.UpdateOSExternalStorageClass")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/os-external-storage-classes/{external_storage_class_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"external_storage_class_id"+"}", url.PathEscape(parameterValueToString(r.externalStorageClassId, "externalStorageClassId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.clusterId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_id", r.clusterId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
