/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ApplicationUpdateReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplicationUpdateReq{}

// ApplicationUpdateReq struct for ApplicationUpdateReq
type ApplicationUpdateReq struct {
	Application *ApplicationUpdateReqApplication `json:"application,omitempty"`
}

// NewApplicationUpdateReq instantiates a new ApplicationUpdateReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationUpdateReq() *ApplicationUpdateReq {
	this := ApplicationUpdateReq{}
	return &this
}

// NewApplicationUpdateReqWithDefaults instantiates a new ApplicationUpdateReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationUpdateReqWithDefaults() *ApplicationUpdateReq {
	this := ApplicationUpdateReq{}
	return &this
}

// GetApplication returns the Application field value if set, zero value otherwise.
func (o *ApplicationUpdateReq) GetApplication() ApplicationUpdateReqApplication {
	if o == nil || IsNil(o.Application) {
		var ret ApplicationUpdateReqApplication
		return ret
	}
	return *o.Application
}

// GetApplicationOk returns a tuple with the Application field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationUpdateReq) GetApplicationOk() (*ApplicationUpdateReqApplication, bool) {
	if o == nil || IsNil(o.Application) {
		return nil, false
	}
	return o.Application, true
}

// HasApplication returns a boolean if a field has been set.
func (o *ApplicationUpdateReq) HasApplication() bool {
	if o != nil && !IsNil(o.Application) {
		return true
	}

	return false
}

// SetApplication gets a reference to the given ApplicationUpdateReqApplication and assigns it to the Application field.
func (o *ApplicationUpdateReq) SetApplication(v ApplicationUpdateReqApplication) {
	o.Application = &v
}

func (o ApplicationUpdateReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplicationUpdateReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Application) {
		toSerialize["application"] = o.Application
	}
	return toSerialize, nil
}

type NullableApplicationUpdateReq struct {
	value *ApplicationUpdateReq
	isSet bool
}

func (v NullableApplicationUpdateReq) Get() *ApplicationUpdateReq {
	return v.value
}

func (v *NullableApplicationUpdateReq) Set(val *ApplicationUpdateReq) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationUpdateReq) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationUpdateReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationUpdateReq(val *ApplicationUpdateReq) *NullableApplicationUpdateReq {
	return &NullableApplicationUpdateReq{value: val, isSet: true}
}

func (v NullableApplicationUpdateReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationUpdateReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


