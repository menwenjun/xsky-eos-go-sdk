/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HostEncSpecsResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HostEncSpecsResp{}

// HostEncSpecsResp struct for HostEncSpecsResp
type HostEncSpecsResp struct {
	// host enclosure specs
	HostEncSpecs []HostEncSpec `json:"host_enc_specs"`
}

type _HostEncSpecsResp HostEncSpecsResp

// NewHostEncSpecsResp instantiates a new HostEncSpecsResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHostEncSpecsResp(hostEncSpecs []HostEncSpec) *HostEncSpecsResp {
	this := HostEncSpecsResp{}
	this.HostEncSpecs = hostEncSpecs
	return &this
}

// NewHostEncSpecsRespWithDefaults instantiates a new HostEncSpecsResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHostEncSpecsRespWithDefaults() *HostEncSpecsResp {
	this := HostEncSpecsResp{}
	return &this
}

// GetHostEncSpecs returns the HostEncSpecs field value
func (o *HostEncSpecsResp) GetHostEncSpecs() []HostEncSpec {
	if o == nil {
		var ret []HostEncSpec
		return ret
	}

	return o.HostEncSpecs
}

// GetHostEncSpecsOk returns a tuple with the HostEncSpecs field value
// and a boolean to check if the value has been set.
func (o *HostEncSpecsResp) GetHostEncSpecsOk() ([]HostEncSpec, bool) {
	if o == nil {
		return nil, false
	}
	return o.HostEncSpecs, true
}

// SetHostEncSpecs sets field value
func (o *HostEncSpecsResp) SetHostEncSpecs(v []HostEncSpec) {
	o.HostEncSpecs = v
}

func (o HostEncSpecsResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HostEncSpecsResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["host_enc_specs"] = o.HostEncSpecs
	return toSerialize, nil
}

func (o *HostEncSpecsResp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"host_enc_specs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHostEncSpecsResp := _HostEncSpecsResp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHostEncSpecsResp)

	if err != nil {
		return err
	}

	*o = HostEncSpecsResp(varHostEncSpecsResp)

	return err
}

type NullableHostEncSpecsResp struct {
	value *HostEncSpecsResp
	isSet bool
}

func (v NullableHostEncSpecsResp) Get() *HostEncSpecsResp {
	return v.value
}

func (v *NullableHostEncSpecsResp) Set(val *HostEncSpecsResp) {
	v.value = val
	v.isSet = true
}

func (v NullableHostEncSpecsResp) IsSet() bool {
	return v.isSet
}

func (v *NullableHostEncSpecsResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHostEncSpecsResp(val *HostEncSpecsResp) *NullableHostEncSpecsResp {
	return &NullableHostEncSpecsResp{value: val, isSet: true}
}

func (v NullableHostEncSpecsResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHostEncSpecsResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


