/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OSZonePairsUpdateReqZoneTargetZonesElt type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OSZonePairsUpdateReqZoneTargetZonesElt{}

// OSZonePairsUpdateReqZoneTargetZonesElt struct for OSZonePairsUpdateReqZoneTargetZonesElt
type OSZonePairsUpdateReqZoneTargetZonesElt struct {
	ClockDiff int64 `json:"clock_diff"`
	ZoneUuid string `json:"zone_uuid"`
}

type _OSZonePairsUpdateReqZoneTargetZonesElt OSZonePairsUpdateReqZoneTargetZonesElt

// NewOSZonePairsUpdateReqZoneTargetZonesElt instantiates a new OSZonePairsUpdateReqZoneTargetZonesElt object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOSZonePairsUpdateReqZoneTargetZonesElt(clockDiff int64, zoneUuid string) *OSZonePairsUpdateReqZoneTargetZonesElt {
	this := OSZonePairsUpdateReqZoneTargetZonesElt{}
	this.ClockDiff = clockDiff
	this.ZoneUuid = zoneUuid
	return &this
}

// NewOSZonePairsUpdateReqZoneTargetZonesEltWithDefaults instantiates a new OSZonePairsUpdateReqZoneTargetZonesElt object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOSZonePairsUpdateReqZoneTargetZonesEltWithDefaults() *OSZonePairsUpdateReqZoneTargetZonesElt {
	this := OSZonePairsUpdateReqZoneTargetZonesElt{}
	return &this
}

// GetClockDiff returns the ClockDiff field value
func (o *OSZonePairsUpdateReqZoneTargetZonesElt) GetClockDiff() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ClockDiff
}

// GetClockDiffOk returns a tuple with the ClockDiff field value
// and a boolean to check if the value has been set.
func (o *OSZonePairsUpdateReqZoneTargetZonesElt) GetClockDiffOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClockDiff, true
}

// SetClockDiff sets field value
func (o *OSZonePairsUpdateReqZoneTargetZonesElt) SetClockDiff(v int64) {
	o.ClockDiff = v
}

// GetZoneUuid returns the ZoneUuid field value
func (o *OSZonePairsUpdateReqZoneTargetZonesElt) GetZoneUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ZoneUuid
}

// GetZoneUuidOk returns a tuple with the ZoneUuid field value
// and a boolean to check if the value has been set.
func (o *OSZonePairsUpdateReqZoneTargetZonesElt) GetZoneUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ZoneUuid, true
}

// SetZoneUuid sets field value
func (o *OSZonePairsUpdateReqZoneTargetZonesElt) SetZoneUuid(v string) {
	o.ZoneUuid = v
}

func (o OSZonePairsUpdateReqZoneTargetZonesElt) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OSZonePairsUpdateReqZoneTargetZonesElt) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["clock_diff"] = o.ClockDiff
	toSerialize["zone_uuid"] = o.ZoneUuid
	return toSerialize, nil
}

func (o *OSZonePairsUpdateReqZoneTargetZonesElt) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"clock_diff",
		"zone_uuid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOSZonePairsUpdateReqZoneTargetZonesElt := _OSZonePairsUpdateReqZoneTargetZonesElt{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOSZonePairsUpdateReqZoneTargetZonesElt)

	if err != nil {
		return err
	}

	*o = OSZonePairsUpdateReqZoneTargetZonesElt(varOSZonePairsUpdateReqZoneTargetZonesElt)

	return err
}

type NullableOSZonePairsUpdateReqZoneTargetZonesElt struct {
	value *OSZonePairsUpdateReqZoneTargetZonesElt
	isSet bool
}

func (v NullableOSZonePairsUpdateReqZoneTargetZonesElt) Get() *OSZonePairsUpdateReqZoneTargetZonesElt {
	return v.value
}

func (v *NullableOSZonePairsUpdateReqZoneTargetZonesElt) Set(val *OSZonePairsUpdateReqZoneTargetZonesElt) {
	v.value = val
	v.isSet = true
}

func (v NullableOSZonePairsUpdateReqZoneTargetZonesElt) IsSet() bool {
	return v.isSet
}

func (v *NullableOSZonePairsUpdateReqZoneTargetZonesElt) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOSZonePairsUpdateReqZoneTargetZonesElt(val *OSZonePairsUpdateReqZoneTargetZonesElt) *NullableOSZonePairsUpdateReqZoneTargetZonesElt {
	return &NullableOSZonePairsUpdateReqZoneTargetZonesElt{value: val, isSet: true}
}

func (v NullableOSZonePairsUpdateReqZoneTargetZonesElt) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOSZonePairsUpdateReqZoneTargetZonesElt) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


