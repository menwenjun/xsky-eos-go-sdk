/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the DomainUserGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DomainUserGroup{}

// DomainUserGroup DomainUserGroup defines model of domain user group +X:model:generate
type DomainUserGroup struct {
	Ad *FSActiveDirectory `json:"ad,omitempty"`
	Create *time.Time `json:"create,omitempty"`
	Description *string `json:"description,omitempty"`
	Id *int64 `json:"id,omitempty"`
	Ldap *FSLdap `json:"ldap,omitempty"`
	Name *string `json:"name,omitempty"`
	Security *string `json:"security,omitempty"`
	Update *time.Time `json:"update,omitempty"`
	UserGroupId *int64 `json:"user_group_id,omitempty"`
}

// NewDomainUserGroup instantiates a new DomainUserGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDomainUserGroup() *DomainUserGroup {
	this := DomainUserGroup{}
	return &this
}

// NewDomainUserGroupWithDefaults instantiates a new DomainUserGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDomainUserGroupWithDefaults() *DomainUserGroup {
	this := DomainUserGroup{}
	return &this
}

// GetAd returns the Ad field value if set, zero value otherwise.
func (o *DomainUserGroup) GetAd() FSActiveDirectory {
	if o == nil || IsNil(o.Ad) {
		var ret FSActiveDirectory
		return ret
	}
	return *o.Ad
}

// GetAdOk returns a tuple with the Ad field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainUserGroup) GetAdOk() (*FSActiveDirectory, bool) {
	if o == nil || IsNil(o.Ad) {
		return nil, false
	}
	return o.Ad, true
}

// HasAd returns a boolean if a field has been set.
func (o *DomainUserGroup) HasAd() bool {
	if o != nil && !IsNil(o.Ad) {
		return true
	}

	return false
}

// SetAd gets a reference to the given FSActiveDirectory and assigns it to the Ad field.
func (o *DomainUserGroup) SetAd(v FSActiveDirectory) {
	o.Ad = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *DomainUserGroup) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainUserGroup) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *DomainUserGroup) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *DomainUserGroup) SetCreate(v time.Time) {
	o.Create = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DomainUserGroup) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainUserGroup) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DomainUserGroup) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DomainUserGroup) SetDescription(v string) {
	o.Description = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DomainUserGroup) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainUserGroup) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DomainUserGroup) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *DomainUserGroup) SetId(v int64) {
	o.Id = &v
}

// GetLdap returns the Ldap field value if set, zero value otherwise.
func (o *DomainUserGroup) GetLdap() FSLdap {
	if o == nil || IsNil(o.Ldap) {
		var ret FSLdap
		return ret
	}
	return *o.Ldap
}

// GetLdapOk returns a tuple with the Ldap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainUserGroup) GetLdapOk() (*FSLdap, bool) {
	if o == nil || IsNil(o.Ldap) {
		return nil, false
	}
	return o.Ldap, true
}

// HasLdap returns a boolean if a field has been set.
func (o *DomainUserGroup) HasLdap() bool {
	if o != nil && !IsNil(o.Ldap) {
		return true
	}

	return false
}

// SetLdap gets a reference to the given FSLdap and assigns it to the Ldap field.
func (o *DomainUserGroup) SetLdap(v FSLdap) {
	o.Ldap = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DomainUserGroup) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainUserGroup) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DomainUserGroup) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DomainUserGroup) SetName(v string) {
	o.Name = &v
}

// GetSecurity returns the Security field value if set, zero value otherwise.
func (o *DomainUserGroup) GetSecurity() string {
	if o == nil || IsNil(o.Security) {
		var ret string
		return ret
	}
	return *o.Security
}

// GetSecurityOk returns a tuple with the Security field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainUserGroup) GetSecurityOk() (*string, bool) {
	if o == nil || IsNil(o.Security) {
		return nil, false
	}
	return o.Security, true
}

// HasSecurity returns a boolean if a field has been set.
func (o *DomainUserGroup) HasSecurity() bool {
	if o != nil && !IsNil(o.Security) {
		return true
	}

	return false
}

// SetSecurity gets a reference to the given string and assigns it to the Security field.
func (o *DomainUserGroup) SetSecurity(v string) {
	o.Security = &v
}

// GetUpdate returns the Update field value if set, zero value otherwise.
func (o *DomainUserGroup) GetUpdate() time.Time {
	if o == nil || IsNil(o.Update) {
		var ret time.Time
		return ret
	}
	return *o.Update
}

// GetUpdateOk returns a tuple with the Update field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainUserGroup) GetUpdateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Update) {
		return nil, false
	}
	return o.Update, true
}

// HasUpdate returns a boolean if a field has been set.
func (o *DomainUserGroup) HasUpdate() bool {
	if o != nil && !IsNil(o.Update) {
		return true
	}

	return false
}

// SetUpdate gets a reference to the given time.Time and assigns it to the Update field.
func (o *DomainUserGroup) SetUpdate(v time.Time) {
	o.Update = &v
}

// GetUserGroupId returns the UserGroupId field value if set, zero value otherwise.
func (o *DomainUserGroup) GetUserGroupId() int64 {
	if o == nil || IsNil(o.UserGroupId) {
		var ret int64
		return ret
	}
	return *o.UserGroupId
}

// GetUserGroupIdOk returns a tuple with the UserGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainUserGroup) GetUserGroupIdOk() (*int64, bool) {
	if o == nil || IsNil(o.UserGroupId) {
		return nil, false
	}
	return o.UserGroupId, true
}

// HasUserGroupId returns a boolean if a field has been set.
func (o *DomainUserGroup) HasUserGroupId() bool {
	if o != nil && !IsNil(o.UserGroupId) {
		return true
	}

	return false
}

// SetUserGroupId gets a reference to the given int64 and assigns it to the UserGroupId field.
func (o *DomainUserGroup) SetUserGroupId(v int64) {
	o.UserGroupId = &v
}

func (o DomainUserGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DomainUserGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ad) {
		toSerialize["ad"] = o.Ad
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Ldap) {
		toSerialize["ldap"] = o.Ldap
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Security) {
		toSerialize["security"] = o.Security
	}
	if !IsNil(o.Update) {
		toSerialize["update"] = o.Update
	}
	if !IsNil(o.UserGroupId) {
		toSerialize["user_group_id"] = o.UserGroupId
	}
	return toSerialize, nil
}

type NullableDomainUserGroup struct {
	value *DomainUserGroup
	isSet bool
}

func (v NullableDomainUserGroup) Get() *DomainUserGroup {
	return v.value
}

func (v *NullableDomainUserGroup) Set(val *DomainUserGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableDomainUserGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableDomainUserGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDomainUserGroup(val *DomainUserGroup) *NullableDomainUserGroup {
	return &NullableDomainUserGroup{value: val, isSet: true}
}

func (v NullableDomainUserGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDomainUserGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


