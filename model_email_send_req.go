/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EmailSendReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailSendReq{}

// EmailSendReq EmailSendReq defines the data of email sending
type EmailSendReq struct {
	Email *EmailSendReqEmail `json:"email,omitempty"`
	EmailConfig *EmailConfig `json:"email_config,omitempty"`
}

// NewEmailSendReq instantiates a new EmailSendReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailSendReq() *EmailSendReq {
	this := EmailSendReq{}
	return &this
}

// NewEmailSendReqWithDefaults instantiates a new EmailSendReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailSendReqWithDefaults() *EmailSendReq {
	this := EmailSendReq{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *EmailSendReq) GetEmail() EmailSendReqEmail {
	if o == nil || IsNil(o.Email) {
		var ret EmailSendReqEmail
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailSendReq) GetEmailOk() (*EmailSendReqEmail, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *EmailSendReq) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given EmailSendReqEmail and assigns it to the Email field.
func (o *EmailSendReq) SetEmail(v EmailSendReqEmail) {
	o.Email = &v
}

// GetEmailConfig returns the EmailConfig field value if set, zero value otherwise.
func (o *EmailSendReq) GetEmailConfig() EmailConfig {
	if o == nil || IsNil(o.EmailConfig) {
		var ret EmailConfig
		return ret
	}
	return *o.EmailConfig
}

// GetEmailConfigOk returns a tuple with the EmailConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailSendReq) GetEmailConfigOk() (*EmailConfig, bool) {
	if o == nil || IsNil(o.EmailConfig) {
		return nil, false
	}
	return o.EmailConfig, true
}

// HasEmailConfig returns a boolean if a field has been set.
func (o *EmailSendReq) HasEmailConfig() bool {
	if o != nil && !IsNil(o.EmailConfig) {
		return true
	}

	return false
}

// SetEmailConfig gets a reference to the given EmailConfig and assigns it to the EmailConfig field.
func (o *EmailSendReq) SetEmailConfig(v EmailConfig) {
	o.EmailConfig = &v
}

func (o EmailSendReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailSendReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.EmailConfig) {
		toSerialize["email_config"] = o.EmailConfig
	}
	return toSerialize, nil
}

type NullableEmailSendReq struct {
	value *EmailSendReq
	isSet bool
}

func (v NullableEmailSendReq) Get() *EmailSendReq {
	return v.value
}

func (v *NullableEmailSendReq) Set(val *EmailSendReq) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailSendReq) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailSendReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailSendReq(val *EmailSendReq) *NullableEmailSendReq {
	return &NullableEmailSendReq{value: val, isSet: true}
}

func (v NullableEmailSendReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailSendReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


