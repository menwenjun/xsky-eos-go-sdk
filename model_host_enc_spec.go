/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the HostEncSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HostEncSpec{}

// HostEncSpec HostEncSpec defines host enclosure specification
type HostEncSpec struct {
	Create *time.Time `json:"create,omitempty"`
	Enclosures []Enclosure `json:"enclosures,omitempty"`
	Id *int64 `json:"id,omitempty"`
	Model *string `json:"model,omitempty"`
	Update *time.Time `json:"update,omitempty"`
	Vendor *string `json:"vendor,omitempty"`
}

// NewHostEncSpec instantiates a new HostEncSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHostEncSpec() *HostEncSpec {
	this := HostEncSpec{}
	return &this
}

// NewHostEncSpecWithDefaults instantiates a new HostEncSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHostEncSpecWithDefaults() *HostEncSpec {
	this := HostEncSpec{}
	return &this
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *HostEncSpec) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostEncSpec) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *HostEncSpec) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *HostEncSpec) SetCreate(v time.Time) {
	o.Create = &v
}

// GetEnclosures returns the Enclosures field value if set, zero value otherwise.
func (o *HostEncSpec) GetEnclosures() []Enclosure {
	if o == nil || IsNil(o.Enclosures) {
		var ret []Enclosure
		return ret
	}
	return o.Enclosures
}

// GetEnclosuresOk returns a tuple with the Enclosures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostEncSpec) GetEnclosuresOk() ([]Enclosure, bool) {
	if o == nil || IsNil(o.Enclosures) {
		return nil, false
	}
	return o.Enclosures, true
}

// HasEnclosures returns a boolean if a field has been set.
func (o *HostEncSpec) HasEnclosures() bool {
	if o != nil && !IsNil(o.Enclosures) {
		return true
	}

	return false
}

// SetEnclosures gets a reference to the given []Enclosure and assigns it to the Enclosures field.
func (o *HostEncSpec) SetEnclosures(v []Enclosure) {
	o.Enclosures = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *HostEncSpec) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostEncSpec) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *HostEncSpec) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *HostEncSpec) SetId(v int64) {
	o.Id = &v
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *HostEncSpec) GetModel() string {
	if o == nil || IsNil(o.Model) {
		var ret string
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostEncSpec) GetModelOk() (*string, bool) {
	if o == nil || IsNil(o.Model) {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *HostEncSpec) HasModel() bool {
	if o != nil && !IsNil(o.Model) {
		return true
	}

	return false
}

// SetModel gets a reference to the given string and assigns it to the Model field.
func (o *HostEncSpec) SetModel(v string) {
	o.Model = &v
}

// GetUpdate returns the Update field value if set, zero value otherwise.
func (o *HostEncSpec) GetUpdate() time.Time {
	if o == nil || IsNil(o.Update) {
		var ret time.Time
		return ret
	}
	return *o.Update
}

// GetUpdateOk returns a tuple with the Update field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostEncSpec) GetUpdateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Update) {
		return nil, false
	}
	return o.Update, true
}

// HasUpdate returns a boolean if a field has been set.
func (o *HostEncSpec) HasUpdate() bool {
	if o != nil && !IsNil(o.Update) {
		return true
	}

	return false
}

// SetUpdate gets a reference to the given time.Time and assigns it to the Update field.
func (o *HostEncSpec) SetUpdate(v time.Time) {
	o.Update = &v
}

// GetVendor returns the Vendor field value if set, zero value otherwise.
func (o *HostEncSpec) GetVendor() string {
	if o == nil || IsNil(o.Vendor) {
		var ret string
		return ret
	}
	return *o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostEncSpec) GetVendorOk() (*string, bool) {
	if o == nil || IsNil(o.Vendor) {
		return nil, false
	}
	return o.Vendor, true
}

// HasVendor returns a boolean if a field has been set.
func (o *HostEncSpec) HasVendor() bool {
	if o != nil && !IsNil(o.Vendor) {
		return true
	}

	return false
}

// SetVendor gets a reference to the given string and assigns it to the Vendor field.
func (o *HostEncSpec) SetVendor(v string) {
	o.Vendor = &v
}

func (o HostEncSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HostEncSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.Enclosures) {
		toSerialize["enclosures"] = o.Enclosures
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Model) {
		toSerialize["model"] = o.Model
	}
	if !IsNil(o.Update) {
		toSerialize["update"] = o.Update
	}
	if !IsNil(o.Vendor) {
		toSerialize["vendor"] = o.Vendor
	}
	return toSerialize, nil
}

type NullableHostEncSpec struct {
	value *HostEncSpec
	isSet bool
}

func (v NullableHostEncSpec) Get() *HostEncSpec {
	return v.value
}

func (v *NullableHostEncSpec) Set(val *HostEncSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableHostEncSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableHostEncSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHostEncSpec(val *HostEncSpec) *NullableHostEncSpec {
	return &NullableHostEncSpec{value: val, isSet: true}
}

func (v NullableHostEncSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHostEncSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


