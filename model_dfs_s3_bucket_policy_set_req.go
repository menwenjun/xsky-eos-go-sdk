/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DfsS3BucketPolicySetReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsS3BucketPolicySetReq{}

// DfsS3BucketPolicySetReq struct for DfsS3BucketPolicySetReq
type DfsS3BucketPolicySetReq struct {
	DfsS3Bucket *DfsS3BucketPolicySetReqBucket `json:"dfs_s3_bucket,omitempty"`
}

// NewDfsS3BucketPolicySetReq instantiates a new DfsS3BucketPolicySetReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsS3BucketPolicySetReq() *DfsS3BucketPolicySetReq {
	this := DfsS3BucketPolicySetReq{}
	return &this
}

// NewDfsS3BucketPolicySetReqWithDefaults instantiates a new DfsS3BucketPolicySetReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsS3BucketPolicySetReqWithDefaults() *DfsS3BucketPolicySetReq {
	this := DfsS3BucketPolicySetReq{}
	return &this
}

// GetDfsS3Bucket returns the DfsS3Bucket field value if set, zero value otherwise.
func (o *DfsS3BucketPolicySetReq) GetDfsS3Bucket() DfsS3BucketPolicySetReqBucket {
	if o == nil || IsNil(o.DfsS3Bucket) {
		var ret DfsS3BucketPolicySetReqBucket
		return ret
	}
	return *o.DfsS3Bucket
}

// GetDfsS3BucketOk returns a tuple with the DfsS3Bucket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsS3BucketPolicySetReq) GetDfsS3BucketOk() (*DfsS3BucketPolicySetReqBucket, bool) {
	if o == nil || IsNil(o.DfsS3Bucket) {
		return nil, false
	}
	return o.DfsS3Bucket, true
}

// HasDfsS3Bucket returns a boolean if a field has been set.
func (o *DfsS3BucketPolicySetReq) HasDfsS3Bucket() bool {
	if o != nil && !IsNil(o.DfsS3Bucket) {
		return true
	}

	return false
}

// SetDfsS3Bucket gets a reference to the given DfsS3BucketPolicySetReqBucket and assigns it to the DfsS3Bucket field.
func (o *DfsS3BucketPolicySetReq) SetDfsS3Bucket(v DfsS3BucketPolicySetReqBucket) {
	o.DfsS3Bucket = &v
}

func (o DfsS3BucketPolicySetReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsS3BucketPolicySetReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DfsS3Bucket) {
		toSerialize["dfs_s3_bucket"] = o.DfsS3Bucket
	}
	return toSerialize, nil
}

type NullableDfsS3BucketPolicySetReq struct {
	value *DfsS3BucketPolicySetReq
	isSet bool
}

func (v NullableDfsS3BucketPolicySetReq) Get() *DfsS3BucketPolicySetReq {
	return v.value
}

func (v *NullableDfsS3BucketPolicySetReq) Set(val *DfsS3BucketPolicySetReq) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsS3BucketPolicySetReq) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsS3BucketPolicySetReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsS3BucketPolicySetReq(val *DfsS3BucketPolicySetReq) *NullableDfsS3BucketPolicySetReq {
	return &NullableDfsS3BucketPolicySetReq{value: val, isSet: true}
}

func (v NullableDfsS3BucketPolicySetReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsS3BucketPolicySetReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


