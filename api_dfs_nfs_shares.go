/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DfsNfsSharesAPIService DfsNfsSharesAPI service
type DfsNfsSharesAPIService service

type ApiAddDfsNFSShareACLsRequest struct {
	ctx context.Context
	ApiService *DfsNfsSharesAPIService
	dfsNfsShareId int64
	body *DfsNFSShareAddACLsReq
}

// share acls info
func (r ApiAddDfsNFSShareACLsRequest) Body(body DfsNFSShareAddACLsReq) ApiAddDfsNFSShareACLsRequest {
	r.body = &body
	return r
}

func (r ApiAddDfsNFSShareACLsRequest) Execute() (*DfsNFSShareResp, *http.Response, error) {
	return r.ApiService.AddDfsNFSShareACLsExecute(r)
}

/*
AddDfsNFSShareACLs Method for AddDfsNFSShareACLs

Add dfs nfs shares acls

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dfsNfsShareId dfs nfs shares id
 @return ApiAddDfsNFSShareACLsRequest
*/
func (a *DfsNfsSharesAPIService) AddDfsNFSShareACLs(ctx context.Context, dfsNfsShareId int64) ApiAddDfsNFSShareACLsRequest {
	return ApiAddDfsNFSShareACLsRequest{
		ApiService: a,
		ctx: ctx,
		dfsNfsShareId: dfsNfsShareId,
	}
}

// Execute executes the request
//  @return DfsNFSShareResp
func (a *DfsNfsSharesAPIService) AddDfsNFSShareACLsExecute(r ApiAddDfsNFSShareACLsRequest) (*DfsNFSShareResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsNFSShareResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsNfsSharesAPIService.AddDfsNFSShareACLs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-nfs-shares/{dfs_nfs_share_id}:add-acls"
	localVarPath = strings.Replace(localVarPath, "{"+"dfs_nfs_share_id"+"}", url.PathEscape(parameterValueToString(r.dfsNfsShareId, "dfsNfsShareId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateDfsNFSShareRequest struct {
	ctx context.Context
	ApiService *DfsNfsSharesAPIService
	body *DfsNFSShareCreateReq
	allowPathCreate *bool
}

// share info
func (r ApiCreateDfsNFSShareRequest) Body(body DfsNFSShareCreateReq) ApiCreateDfsNFSShareRequest {
	r.body = &body
	return r
}

// allow create path when not existed
func (r ApiCreateDfsNFSShareRequest) AllowPathCreate(allowPathCreate bool) ApiCreateDfsNFSShareRequest {
	r.allowPathCreate = &allowPathCreate
	return r
}

func (r ApiCreateDfsNFSShareRequest) Execute() (*DfsNFSShareResp, *http.Response, error) {
	return r.ApiService.CreateDfsNFSShareExecute(r)
}

/*
CreateDfsNFSShare Method for CreateDfsNFSShare

Create dfs nfs shares

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateDfsNFSShareRequest
*/
func (a *DfsNfsSharesAPIService) CreateDfsNFSShare(ctx context.Context) ApiCreateDfsNFSShareRequest {
	return ApiCreateDfsNFSShareRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DfsNFSShareResp
func (a *DfsNfsSharesAPIService) CreateDfsNFSShareExecute(r ApiCreateDfsNFSShareRequest) (*DfsNFSShareResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsNFSShareResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsNfsSharesAPIService.CreateDfsNFSShare")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-nfs-shares/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.allowPathCreate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allow_path_create", r.allowPathCreate, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteDfsNFSShareRequest struct {
	ctx context.Context
	ApiService *DfsNfsSharesAPIService
	dfsNfsShareId int64
	force *bool
	withDirectory *bool
}

// force delete or not
func (r ApiDeleteDfsNFSShareRequest) Force(force bool) ApiDeleteDfsNFSShareRequest {
	r.force = &force
	return r
}

// also delete directory
func (r ApiDeleteDfsNFSShareRequest) WithDirectory(withDirectory bool) ApiDeleteDfsNFSShareRequest {
	r.withDirectory = &withDirectory
	return r
}

func (r ApiDeleteDfsNFSShareRequest) Execute() (*DfsNFSShareResp, *http.Response, error) {
	return r.ApiService.DeleteDfsNFSShareExecute(r)
}

/*
DeleteDfsNFSShare Method for DeleteDfsNFSShare

delete dfs nfs shares

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dfsNfsShareId share id
 @return ApiDeleteDfsNFSShareRequest
*/
func (a *DfsNfsSharesAPIService) DeleteDfsNFSShare(ctx context.Context, dfsNfsShareId int64) ApiDeleteDfsNFSShareRequest {
	return ApiDeleteDfsNFSShareRequest{
		ApiService: a,
		ctx: ctx,
		dfsNfsShareId: dfsNfsShareId,
	}
}

// Execute executes the request
//  @return DfsNFSShareResp
func (a *DfsNfsSharesAPIService) DeleteDfsNFSShareExecute(r ApiDeleteDfsNFSShareRequest) (*DfsNFSShareResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsNFSShareResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsNfsSharesAPIService.DeleteDfsNFSShare")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-nfs-shares/{dfs_nfs_share_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"dfs_nfs_share_id"+"}", url.PathEscape(parameterValueToString(r.dfsNfsShareId, "dfsNfsShareId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.force != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "force", r.force, "form", "")
	}
	if r.withDirectory != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "with_directory", r.withDirectory, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDfsNFSShareRequest struct {
	ctx context.Context
	ApiService *DfsNfsSharesAPIService
	dfsNfsShareId int64
}

func (r ApiGetDfsNFSShareRequest) Execute() (*DfsNFSShareResp, *http.Response, error) {
	return r.ApiService.GetDfsNFSShareExecute(r)
}

/*
GetDfsNFSShare Method for GetDfsNFSShare

Get dfs nfs shares

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dfsNfsShareId share id
 @return ApiGetDfsNFSShareRequest
*/
func (a *DfsNfsSharesAPIService) GetDfsNFSShare(ctx context.Context, dfsNfsShareId int64) ApiGetDfsNFSShareRequest {
	return ApiGetDfsNFSShareRequest{
		ApiService: a,
		ctx: ctx,
		dfsNfsShareId: dfsNfsShareId,
	}
}

// Execute executes the request
//  @return DfsNFSShareResp
func (a *DfsNfsSharesAPIService) GetDfsNFSShareExecute(r ApiGetDfsNFSShareRequest) (*DfsNFSShareResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsNFSShareResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsNfsSharesAPIService.GetDfsNFSShare")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-nfs-shares/{dfs_nfs_share_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"dfs_nfs_share_id"+"}", url.PathEscape(parameterValueToString(r.dfsNfsShareId, "dfsNfsShareId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListDfsNFSSharesRequest struct {
	ctx context.Context
	ApiService *DfsNfsSharesAPIService
	limit *int64
	offset *int64
	dfsRootfsId *int64
	path *string
	dfsGatewayGroupId *int64
	nfsVersions *string
	q *string
	sort *string
	clusterId *string
}

// paging param
func (r ApiListDfsNFSSharesRequest) Limit(limit int64) ApiListDfsNFSSharesRequest {
	r.limit = &limit
	return r
}

// paging param
func (r ApiListDfsNFSSharesRequest) Offset(offset int64) ApiListDfsNFSSharesRequest {
	r.offset = &offset
	return r
}

// dfs rootfs id
func (r ApiListDfsNFSSharesRequest) DfsRootfsId(dfsRootfsId int64) ApiListDfsNFSSharesRequest {
	r.dfsRootfsId = &dfsRootfsId
	return r
}

// related dfs path
func (r ApiListDfsNFSSharesRequest) Path(path string) ApiListDfsNFSSharesRequest {
	r.path = &path
	return r
}

// dfs gateway group id
func (r ApiListDfsNFSSharesRequest) DfsGatewayGroupId(dfsGatewayGroupId int64) ApiListDfsNFSSharesRequest {
	r.dfsGatewayGroupId = &dfsGatewayGroupId
	return r
}

// nfs share version
func (r ApiListDfsNFSSharesRequest) NfsVersions(nfsVersions string) ApiListDfsNFSSharesRequest {
	r.nfsVersions = &nfsVersions
	return r
}

// query param of search
func (r ApiListDfsNFSSharesRequest) Q(q string) ApiListDfsNFSSharesRequest {
	r.q = &q
	return r
}

// sort param of search
func (r ApiListDfsNFSSharesRequest) Sort(sort string) ApiListDfsNFSSharesRequest {
	r.sort = &sort
	return r
}

// cluster id
func (r ApiListDfsNFSSharesRequest) ClusterId(clusterId string) ApiListDfsNFSSharesRequest {
	r.clusterId = &clusterId
	return r
}

func (r ApiListDfsNFSSharesRequest) Execute() (*DfsNFSSharesResp, *http.Response, error) {
	return r.ApiService.ListDfsNFSSharesExecute(r)
}

/*
ListDfsNFSShares Method for ListDfsNFSShares

List dfs nfs sharess

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListDfsNFSSharesRequest
*/
func (a *DfsNfsSharesAPIService) ListDfsNFSShares(ctx context.Context) ApiListDfsNFSSharesRequest {
	return ApiListDfsNFSSharesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DfsNFSSharesResp
func (a *DfsNfsSharesAPIService) ListDfsNFSSharesExecute(r ApiListDfsNFSSharesRequest) (*DfsNFSSharesResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsNFSSharesResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsNfsSharesAPIService.ListDfsNFSShares")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-nfs-shares/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.dfsRootfsId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dfs_rootfs_id", r.dfsRootfsId, "form", "")
	}
	if r.path != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "path", r.path, "form", "")
	}
	if r.dfsGatewayGroupId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dfs_gateway_group_id", r.dfsGatewayGroupId, "form", "")
	}
	if r.nfsVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nfs_versions", r.nfsVersions, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.clusterId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_id", r.clusterId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRemoveDfsNFSShareACLsRequest struct {
	ctx context.Context
	ApiService *DfsNfsSharesAPIService
	dfsNfsShareId int64
	body *DfsNFSShareRemoveACLsReq
}

// share acls info
func (r ApiRemoveDfsNFSShareACLsRequest) Body(body DfsNFSShareRemoveACLsReq) ApiRemoveDfsNFSShareACLsRequest {
	r.body = &body
	return r
}

func (r ApiRemoveDfsNFSShareACLsRequest) Execute() (*DfsNFSShareResp, *http.Response, error) {
	return r.ApiService.RemoveDfsNFSShareACLsExecute(r)
}

/*
RemoveDfsNFSShareACLs Method for RemoveDfsNFSShareACLs

remove dfs nfs shares acls

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dfsNfsShareId dfs nfs shares id
 @return ApiRemoveDfsNFSShareACLsRequest
*/
func (a *DfsNfsSharesAPIService) RemoveDfsNFSShareACLs(ctx context.Context, dfsNfsShareId int64) ApiRemoveDfsNFSShareACLsRequest {
	return ApiRemoveDfsNFSShareACLsRequest{
		ApiService: a,
		ctx: ctx,
		dfsNfsShareId: dfsNfsShareId,
	}
}

// Execute executes the request
//  @return DfsNFSShareResp
func (a *DfsNfsSharesAPIService) RemoveDfsNFSShareACLsExecute(r ApiRemoveDfsNFSShareACLsRequest) (*DfsNFSShareResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsNFSShareResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsNfsSharesAPIService.RemoveDfsNFSShareACLs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-nfs-shares/{dfs_nfs_share_id}:remove-acls"
	localVarPath = strings.Replace(localVarPath, "{"+"dfs_nfs_share_id"+"}", url.PathEscape(parameterValueToString(r.dfsNfsShareId, "dfsNfsShareId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSetDfsNFSShareACLsRequest struct {
	ctx context.Context
	ApiService *DfsNfsSharesAPIService
	dfsNfsShareId int64
	body *DfsNFSShareSetACLsReq
}

// share info
func (r ApiSetDfsNFSShareACLsRequest) Body(body DfsNFSShareSetACLsReq) ApiSetDfsNFSShareACLsRequest {
	r.body = &body
	return r
}

func (r ApiSetDfsNFSShareACLsRequest) Execute() (*DfsNFSShareResp, *http.Response, error) {
	return r.ApiService.SetDfsNFSShareACLsExecute(r)
}

/*
SetDfsNFSShareACLs Method for SetDfsNFSShareACLs

Set all acls of dfs nfs share

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dfsNfsShareId share id
 @return ApiSetDfsNFSShareACLsRequest
*/
func (a *DfsNfsSharesAPIService) SetDfsNFSShareACLs(ctx context.Context, dfsNfsShareId int64) ApiSetDfsNFSShareACLsRequest {
	return ApiSetDfsNFSShareACLsRequest{
		ApiService: a,
		ctx: ctx,
		dfsNfsShareId: dfsNfsShareId,
	}
}

// Execute executes the request
//  @return DfsNFSShareResp
func (a *DfsNfsSharesAPIService) SetDfsNFSShareACLsExecute(r ApiSetDfsNFSShareACLsRequest) (*DfsNFSShareResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsNFSShareResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsNfsSharesAPIService.SetDfsNFSShareACLs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-nfs-shares/{dfs_nfs_share_id}:set-acls"
	localVarPath = strings.Replace(localVarPath, "{"+"dfs_nfs_share_id"+"}", url.PathEscape(parameterValueToString(r.dfsNfsShareId, "dfsNfsShareId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateDfsNFSShareRequest struct {
	ctx context.Context
	ApiService *DfsNfsSharesAPIService
	dfsNfsShareId int64
	body *DfsNFSShareUpdateReq
}

// share info
func (r ApiUpdateDfsNFSShareRequest) Body(body DfsNFSShareUpdateReq) ApiUpdateDfsNFSShareRequest {
	r.body = &body
	return r
}

func (r ApiUpdateDfsNFSShareRequest) Execute() (*DfsNFSShareResp, *http.Response, error) {
	return r.ApiService.UpdateDfsNFSShareExecute(r)
}

/*
UpdateDfsNFSShare Method for UpdateDfsNFSShare

update dfs nfs shares

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dfsNfsShareId share id
 @return ApiUpdateDfsNFSShareRequest
*/
func (a *DfsNfsSharesAPIService) UpdateDfsNFSShare(ctx context.Context, dfsNfsShareId int64) ApiUpdateDfsNFSShareRequest {
	return ApiUpdateDfsNFSShareRequest{
		ApiService: a,
		ctx: ctx,
		dfsNfsShareId: dfsNfsShareId,
	}
}

// Execute executes the request
//  @return DfsNFSShareResp
func (a *DfsNfsSharesAPIService) UpdateDfsNFSShareExecute(r ApiUpdateDfsNFSShareRequest) (*DfsNFSShareResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsNFSShareResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsNfsSharesAPIService.UpdateDfsNFSShare")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-nfs-shares/{dfs_nfs_share_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"dfs_nfs_share_id"+"}", url.PathEscape(parameterValueToString(r.dfsNfsShareId, "dfsNfsShareId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateDfsNFSShareACLsRequest struct {
	ctx context.Context
	ApiService *DfsNfsSharesAPIService
	dfsNfsShareId int64
	body *DfsNFSShareUpdateACLsReq
}

// share info
func (r ApiUpdateDfsNFSShareACLsRequest) Body(body DfsNFSShareUpdateACLsReq) ApiUpdateDfsNFSShareACLsRequest {
	r.body = &body
	return r
}

func (r ApiUpdateDfsNFSShareACLsRequest) Execute() (*DfsNFSShareResp, *http.Response, error) {
	return r.ApiService.UpdateDfsNFSShareACLsExecute(r)
}

/*
UpdateDfsNFSShareACLs Method for UpdateDfsNFSShareACLs

Update dfs nfs share acls

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dfsNfsShareId share id
 @return ApiUpdateDfsNFSShareACLsRequest
*/
func (a *DfsNfsSharesAPIService) UpdateDfsNFSShareACLs(ctx context.Context, dfsNfsShareId int64) ApiUpdateDfsNFSShareACLsRequest {
	return ApiUpdateDfsNFSShareACLsRequest{
		ApiService: a,
		ctx: ctx,
		dfsNfsShareId: dfsNfsShareId,
	}
}

// Execute executes the request
//  @return DfsNFSShareResp
func (a *DfsNfsSharesAPIService) UpdateDfsNFSShareACLsExecute(r ApiUpdateDfsNFSShareACLsRequest) (*DfsNFSShareResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsNFSShareResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsNfsSharesAPIService.UpdateDfsNFSShareACLs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-nfs-shares/{dfs_nfs_share_id}:update-acls"
	localVarPath = strings.Replace(localVarPath, "{"+"dfs_nfs_share_id"+"}", url.PathEscape(parameterValueToString(r.dfsNfsShareId, "dfsNfsShareId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
