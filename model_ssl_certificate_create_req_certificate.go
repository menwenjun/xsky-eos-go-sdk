/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SSLCertificateCreateReqCertificate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SSLCertificateCreateReqCertificate{}

// SSLCertificateCreateReqCertificate struct for SSLCertificateCreateReqCertificate
type SSLCertificateCreateReqCertificate struct {
	// certificate in pem
	Certificate string `json:"certificate"`
	// certificate description
	Description *string `json:"description,omitempty"`
	// certificate name
	Name string `json:"name"`
	// private key in pem
	PrivateKey string `json:"private_key"`
}

type _SSLCertificateCreateReqCertificate SSLCertificateCreateReqCertificate

// NewSSLCertificateCreateReqCertificate instantiates a new SSLCertificateCreateReqCertificate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSSLCertificateCreateReqCertificate(certificate string, name string, privateKey string) *SSLCertificateCreateReqCertificate {
	this := SSLCertificateCreateReqCertificate{}
	this.Certificate = certificate
	this.Name = name
	this.PrivateKey = privateKey
	return &this
}

// NewSSLCertificateCreateReqCertificateWithDefaults instantiates a new SSLCertificateCreateReqCertificate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSSLCertificateCreateReqCertificateWithDefaults() *SSLCertificateCreateReqCertificate {
	this := SSLCertificateCreateReqCertificate{}
	return &this
}

// GetCertificate returns the Certificate field value
func (o *SSLCertificateCreateReqCertificate) GetCertificate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value
// and a boolean to check if the value has been set.
func (o *SSLCertificateCreateReqCertificate) GetCertificateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Certificate, true
}

// SetCertificate sets field value
func (o *SSLCertificateCreateReqCertificate) SetCertificate(v string) {
	o.Certificate = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SSLCertificateCreateReqCertificate) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLCertificateCreateReqCertificate) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SSLCertificateCreateReqCertificate) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SSLCertificateCreateReqCertificate) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value
func (o *SSLCertificateCreateReqCertificate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SSLCertificateCreateReqCertificate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SSLCertificateCreateReqCertificate) SetName(v string) {
	o.Name = v
}

// GetPrivateKey returns the PrivateKey field value
func (o *SSLCertificateCreateReqCertificate) GetPrivateKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PrivateKey
}

// GetPrivateKeyOk returns a tuple with the PrivateKey field value
// and a boolean to check if the value has been set.
func (o *SSLCertificateCreateReqCertificate) GetPrivateKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrivateKey, true
}

// SetPrivateKey sets field value
func (o *SSLCertificateCreateReqCertificate) SetPrivateKey(v string) {
	o.PrivateKey = v
}

func (o SSLCertificateCreateReqCertificate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SSLCertificateCreateReqCertificate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["certificate"] = o.Certificate
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["name"] = o.Name
	toSerialize["private_key"] = o.PrivateKey
	return toSerialize, nil
}

func (o *SSLCertificateCreateReqCertificate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"certificate",
		"name",
		"private_key",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSSLCertificateCreateReqCertificate := _SSLCertificateCreateReqCertificate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSSLCertificateCreateReqCertificate)

	if err != nil {
		return err
	}

	*o = SSLCertificateCreateReqCertificate(varSSLCertificateCreateReqCertificate)

	return err
}

type NullableSSLCertificateCreateReqCertificate struct {
	value *SSLCertificateCreateReqCertificate
	isSet bool
}

func (v NullableSSLCertificateCreateReqCertificate) Get() *SSLCertificateCreateReqCertificate {
	return v.value
}

func (v *NullableSSLCertificateCreateReqCertificate) Set(val *SSLCertificateCreateReqCertificate) {
	v.value = val
	v.isSet = true
}

func (v NullableSSLCertificateCreateReqCertificate) IsSet() bool {
	return v.isSet
}

func (v *NullableSSLCertificateCreateReqCertificate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSSLCertificateCreateReqCertificate(val *SSLCertificateCreateReqCertificate) *NullableSSLCertificateCreateReqCertificate {
	return &NullableSSLCertificateCreateReqCertificate{value: val, isSet: true}
}

func (v NullableSSLCertificateCreateReqCertificate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSSLCertificateCreateReqCertificate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


