/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SnapshotResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SnapshotResp{}

// SnapshotResp struct for SnapshotResp
type SnapshotResp struct {
	BlockSnapshot Snapshot `json:"block_snapshot"`
}

type _SnapshotResp SnapshotResp

// NewSnapshotResp instantiates a new SnapshotResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnapshotResp(blockSnapshot Snapshot) *SnapshotResp {
	this := SnapshotResp{}
	this.BlockSnapshot = blockSnapshot
	return &this
}

// NewSnapshotRespWithDefaults instantiates a new SnapshotResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnapshotRespWithDefaults() *SnapshotResp {
	this := SnapshotResp{}
	return &this
}

// GetBlockSnapshot returns the BlockSnapshot field value
func (o *SnapshotResp) GetBlockSnapshot() Snapshot {
	if o == nil {
		var ret Snapshot
		return ret
	}

	return o.BlockSnapshot
}

// GetBlockSnapshotOk returns a tuple with the BlockSnapshot field value
// and a boolean to check if the value has been set.
func (o *SnapshotResp) GetBlockSnapshotOk() (*Snapshot, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BlockSnapshot, true
}

// SetBlockSnapshot sets field value
func (o *SnapshotResp) SetBlockSnapshot(v Snapshot) {
	o.BlockSnapshot = v
}

func (o SnapshotResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnapshotResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["block_snapshot"] = o.BlockSnapshot
	return toSerialize, nil
}

func (o *SnapshotResp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"block_snapshot",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSnapshotResp := _SnapshotResp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSnapshotResp)

	if err != nil {
		return err
	}

	*o = SnapshotResp(varSnapshotResp)

	return err
}

type NullableSnapshotResp struct {
	value *SnapshotResp
	isSet bool
}

func (v NullableSnapshotResp) Get() *SnapshotResp {
	return v.value
}

func (v *NullableSnapshotResp) Set(val *SnapshotResp) {
	v.value = val
	v.isSet = true
}

func (v NullableSnapshotResp) IsSet() bool {
	return v.isSet
}

func (v *NullableSnapshotResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnapshotResp(val *SnapshotResp) *NullableSnapshotResp {
	return &NullableSnapshotResp{value: val, isSet: true}
}

func (v NullableSnapshotResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnapshotResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


