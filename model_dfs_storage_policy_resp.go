/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DfsStoragePolicyResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsStoragePolicyResp{}

// DfsStoragePolicyResp struct for DfsStoragePolicyResp
type DfsStoragePolicyResp struct {
	DfsStoragePolicy DfsStoragePolicy `json:"dfs_storage_policy"`
	// link path info
	LinkPathInfo []PolicyLinkPathInfo `json:"link_path_info,omitempty"`
}

type _DfsStoragePolicyResp DfsStoragePolicyResp

// NewDfsStoragePolicyResp instantiates a new DfsStoragePolicyResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsStoragePolicyResp(dfsStoragePolicy DfsStoragePolicy) *DfsStoragePolicyResp {
	this := DfsStoragePolicyResp{}
	this.DfsStoragePolicy = dfsStoragePolicy
	return &this
}

// NewDfsStoragePolicyRespWithDefaults instantiates a new DfsStoragePolicyResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsStoragePolicyRespWithDefaults() *DfsStoragePolicyResp {
	this := DfsStoragePolicyResp{}
	return &this
}

// GetDfsStoragePolicy returns the DfsStoragePolicy field value
func (o *DfsStoragePolicyResp) GetDfsStoragePolicy() DfsStoragePolicy {
	if o == nil {
		var ret DfsStoragePolicy
		return ret
	}

	return o.DfsStoragePolicy
}

// GetDfsStoragePolicyOk returns a tuple with the DfsStoragePolicy field value
// and a boolean to check if the value has been set.
func (o *DfsStoragePolicyResp) GetDfsStoragePolicyOk() (*DfsStoragePolicy, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DfsStoragePolicy, true
}

// SetDfsStoragePolicy sets field value
func (o *DfsStoragePolicyResp) SetDfsStoragePolicy(v DfsStoragePolicy) {
	o.DfsStoragePolicy = v
}

// GetLinkPathInfo returns the LinkPathInfo field value if set, zero value otherwise.
func (o *DfsStoragePolicyResp) GetLinkPathInfo() []PolicyLinkPathInfo {
	if o == nil || IsNil(o.LinkPathInfo) {
		var ret []PolicyLinkPathInfo
		return ret
	}
	return o.LinkPathInfo
}

// GetLinkPathInfoOk returns a tuple with the LinkPathInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsStoragePolicyResp) GetLinkPathInfoOk() ([]PolicyLinkPathInfo, bool) {
	if o == nil || IsNil(o.LinkPathInfo) {
		return nil, false
	}
	return o.LinkPathInfo, true
}

// HasLinkPathInfo returns a boolean if a field has been set.
func (o *DfsStoragePolicyResp) HasLinkPathInfo() bool {
	if o != nil && !IsNil(o.LinkPathInfo) {
		return true
	}

	return false
}

// SetLinkPathInfo gets a reference to the given []PolicyLinkPathInfo and assigns it to the LinkPathInfo field.
func (o *DfsStoragePolicyResp) SetLinkPathInfo(v []PolicyLinkPathInfo) {
	o.LinkPathInfo = v
}

func (o DfsStoragePolicyResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsStoragePolicyResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dfs_storage_policy"] = o.DfsStoragePolicy
	if !IsNil(o.LinkPathInfo) {
		toSerialize["link_path_info"] = o.LinkPathInfo
	}
	return toSerialize, nil
}

func (o *DfsStoragePolicyResp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dfs_storage_policy",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDfsStoragePolicyResp := _DfsStoragePolicyResp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDfsStoragePolicyResp)

	if err != nil {
		return err
	}

	*o = DfsStoragePolicyResp(varDfsStoragePolicyResp)

	return err
}

type NullableDfsStoragePolicyResp struct {
	value *DfsStoragePolicyResp
	isSet bool
}

func (v NullableDfsStoragePolicyResp) Get() *DfsStoragePolicyResp {
	return v.value
}

func (v *NullableDfsStoragePolicyResp) Set(val *DfsStoragePolicyResp) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsStoragePolicyResp) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsStoragePolicyResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsStoragePolicyResp(val *DfsStoragePolicyResp) *NullableDfsStoragePolicyResp {
	return &NullableDfsStoragePolicyResp{value: val, isSet: true}
}

func (v NullableDfsStoragePolicyResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsStoragePolicyResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


