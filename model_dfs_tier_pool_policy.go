/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DfsTierPoolPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsTierPoolPolicy{}

// DfsTierPoolPolicy DfsTierPoolPolicy define relation between pool and dfs tier
type DfsTierPoolPolicy struct {
	Active *bool `json:"active,omitempty"`
	DfsStorageClass *DfsTierNestview `json:"dfs_storage_class,omitempty"`
	Id *int64 `json:"id,omitempty"`
	Pool *PoolNestview `json:"pool,omitempty"`
	Threshold *int64 `json:"threshold,omitempty"`
}

// NewDfsTierPoolPolicy instantiates a new DfsTierPoolPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsTierPoolPolicy() *DfsTierPoolPolicy {
	this := DfsTierPoolPolicy{}
	return &this
}

// NewDfsTierPoolPolicyWithDefaults instantiates a new DfsTierPoolPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsTierPoolPolicyWithDefaults() *DfsTierPoolPolicy {
	this := DfsTierPoolPolicy{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *DfsTierPoolPolicy) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTierPoolPolicy) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *DfsTierPoolPolicy) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *DfsTierPoolPolicy) SetActive(v bool) {
	o.Active = &v
}

// GetDfsStorageClass returns the DfsStorageClass field value if set, zero value otherwise.
func (o *DfsTierPoolPolicy) GetDfsStorageClass() DfsTierNestview {
	if o == nil || IsNil(o.DfsStorageClass) {
		var ret DfsTierNestview
		return ret
	}
	return *o.DfsStorageClass
}

// GetDfsStorageClassOk returns a tuple with the DfsStorageClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTierPoolPolicy) GetDfsStorageClassOk() (*DfsTierNestview, bool) {
	if o == nil || IsNil(o.DfsStorageClass) {
		return nil, false
	}
	return o.DfsStorageClass, true
}

// HasDfsStorageClass returns a boolean if a field has been set.
func (o *DfsTierPoolPolicy) HasDfsStorageClass() bool {
	if o != nil && !IsNil(o.DfsStorageClass) {
		return true
	}

	return false
}

// SetDfsStorageClass gets a reference to the given DfsTierNestview and assigns it to the DfsStorageClass field.
func (o *DfsTierPoolPolicy) SetDfsStorageClass(v DfsTierNestview) {
	o.DfsStorageClass = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DfsTierPoolPolicy) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTierPoolPolicy) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DfsTierPoolPolicy) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *DfsTierPoolPolicy) SetId(v int64) {
	o.Id = &v
}

// GetPool returns the Pool field value if set, zero value otherwise.
func (o *DfsTierPoolPolicy) GetPool() PoolNestview {
	if o == nil || IsNil(o.Pool) {
		var ret PoolNestview
		return ret
	}
	return *o.Pool
}

// GetPoolOk returns a tuple with the Pool field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTierPoolPolicy) GetPoolOk() (*PoolNestview, bool) {
	if o == nil || IsNil(o.Pool) {
		return nil, false
	}
	return o.Pool, true
}

// HasPool returns a boolean if a field has been set.
func (o *DfsTierPoolPolicy) HasPool() bool {
	if o != nil && !IsNil(o.Pool) {
		return true
	}

	return false
}

// SetPool gets a reference to the given PoolNestview and assigns it to the Pool field.
func (o *DfsTierPoolPolicy) SetPool(v PoolNestview) {
	o.Pool = &v
}

// GetThreshold returns the Threshold field value if set, zero value otherwise.
func (o *DfsTierPoolPolicy) GetThreshold() int64 {
	if o == nil || IsNil(o.Threshold) {
		var ret int64
		return ret
	}
	return *o.Threshold
}

// GetThresholdOk returns a tuple with the Threshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTierPoolPolicy) GetThresholdOk() (*int64, bool) {
	if o == nil || IsNil(o.Threshold) {
		return nil, false
	}
	return o.Threshold, true
}

// HasThreshold returns a boolean if a field has been set.
func (o *DfsTierPoolPolicy) HasThreshold() bool {
	if o != nil && !IsNil(o.Threshold) {
		return true
	}

	return false
}

// SetThreshold gets a reference to the given int64 and assigns it to the Threshold field.
func (o *DfsTierPoolPolicy) SetThreshold(v int64) {
	o.Threshold = &v
}

func (o DfsTierPoolPolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsTierPoolPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.DfsStorageClass) {
		toSerialize["dfs_storage_class"] = o.DfsStorageClass
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Pool) {
		toSerialize["pool"] = o.Pool
	}
	if !IsNil(o.Threshold) {
		toSerialize["threshold"] = o.Threshold
	}
	return toSerialize, nil
}

type NullableDfsTierPoolPolicy struct {
	value *DfsTierPoolPolicy
	isSet bool
}

func (v NullableDfsTierPoolPolicy) Get() *DfsTierPoolPolicy {
	return v.value
}

func (v *NullableDfsTierPoolPolicy) Set(val *DfsTierPoolPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsTierPoolPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsTierPoolPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsTierPoolPolicy(val *DfsTierPoolPolicy) *NullableDfsTierPoolPolicy {
	return &NullableDfsTierPoolPolicy{value: val, isSet: true}
}

func (v NullableDfsTierPoolPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsTierPoolPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


