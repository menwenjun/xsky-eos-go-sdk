/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DpBlockBackupPolicyUpdateReqPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DpBlockBackupPolicyUpdateReqPolicy{}

// DpBlockBackupPolicyUpdateReqPolicy struct for DpBlockBackupPolicyUpdateReqPolicy
type DpBlockBackupPolicyUpdateReqPolicy struct {
	// encrypted or not
	Encrypted *bool `json:"encrypted,omitempty"`
	// cron expression for full backup
	FullCronExpr *string `json:"full_cron_expr,omitempty"`
	// cron expression for increment backup
	IncCronExpr *string `json:"inc_cron_expr,omitempty"`
	// name
	Name *string `json:"name,omitempty"`
	// retained max number of backups
	RetainedMax *int64 `json:"retained_max,omitempty"`
}

// NewDpBlockBackupPolicyUpdateReqPolicy instantiates a new DpBlockBackupPolicyUpdateReqPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDpBlockBackupPolicyUpdateReqPolicy() *DpBlockBackupPolicyUpdateReqPolicy {
	this := DpBlockBackupPolicyUpdateReqPolicy{}
	return &this
}

// NewDpBlockBackupPolicyUpdateReqPolicyWithDefaults instantiates a new DpBlockBackupPolicyUpdateReqPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDpBlockBackupPolicyUpdateReqPolicyWithDefaults() *DpBlockBackupPolicyUpdateReqPolicy {
	this := DpBlockBackupPolicyUpdateReqPolicy{}
	return &this
}

// GetEncrypted returns the Encrypted field value if set, zero value otherwise.
func (o *DpBlockBackupPolicyUpdateReqPolicy) GetEncrypted() bool {
	if o == nil || IsNil(o.Encrypted) {
		var ret bool
		return ret
	}
	return *o.Encrypted
}

// GetEncryptedOk returns a tuple with the Encrypted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockBackupPolicyUpdateReqPolicy) GetEncryptedOk() (*bool, bool) {
	if o == nil || IsNil(o.Encrypted) {
		return nil, false
	}
	return o.Encrypted, true
}

// HasEncrypted returns a boolean if a field has been set.
func (o *DpBlockBackupPolicyUpdateReqPolicy) HasEncrypted() bool {
	if o != nil && !IsNil(o.Encrypted) {
		return true
	}

	return false
}

// SetEncrypted gets a reference to the given bool and assigns it to the Encrypted field.
func (o *DpBlockBackupPolicyUpdateReqPolicy) SetEncrypted(v bool) {
	o.Encrypted = &v
}

// GetFullCronExpr returns the FullCronExpr field value if set, zero value otherwise.
func (o *DpBlockBackupPolicyUpdateReqPolicy) GetFullCronExpr() string {
	if o == nil || IsNil(o.FullCronExpr) {
		var ret string
		return ret
	}
	return *o.FullCronExpr
}

// GetFullCronExprOk returns a tuple with the FullCronExpr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockBackupPolicyUpdateReqPolicy) GetFullCronExprOk() (*string, bool) {
	if o == nil || IsNil(o.FullCronExpr) {
		return nil, false
	}
	return o.FullCronExpr, true
}

// HasFullCronExpr returns a boolean if a field has been set.
func (o *DpBlockBackupPolicyUpdateReqPolicy) HasFullCronExpr() bool {
	if o != nil && !IsNil(o.FullCronExpr) {
		return true
	}

	return false
}

// SetFullCronExpr gets a reference to the given string and assigns it to the FullCronExpr field.
func (o *DpBlockBackupPolicyUpdateReqPolicy) SetFullCronExpr(v string) {
	o.FullCronExpr = &v
}

// GetIncCronExpr returns the IncCronExpr field value if set, zero value otherwise.
func (o *DpBlockBackupPolicyUpdateReqPolicy) GetIncCronExpr() string {
	if o == nil || IsNil(o.IncCronExpr) {
		var ret string
		return ret
	}
	return *o.IncCronExpr
}

// GetIncCronExprOk returns a tuple with the IncCronExpr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockBackupPolicyUpdateReqPolicy) GetIncCronExprOk() (*string, bool) {
	if o == nil || IsNil(o.IncCronExpr) {
		return nil, false
	}
	return o.IncCronExpr, true
}

// HasIncCronExpr returns a boolean if a field has been set.
func (o *DpBlockBackupPolicyUpdateReqPolicy) HasIncCronExpr() bool {
	if o != nil && !IsNil(o.IncCronExpr) {
		return true
	}

	return false
}

// SetIncCronExpr gets a reference to the given string and assigns it to the IncCronExpr field.
func (o *DpBlockBackupPolicyUpdateReqPolicy) SetIncCronExpr(v string) {
	o.IncCronExpr = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DpBlockBackupPolicyUpdateReqPolicy) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockBackupPolicyUpdateReqPolicy) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DpBlockBackupPolicyUpdateReqPolicy) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DpBlockBackupPolicyUpdateReqPolicy) SetName(v string) {
	o.Name = &v
}

// GetRetainedMax returns the RetainedMax field value if set, zero value otherwise.
func (o *DpBlockBackupPolicyUpdateReqPolicy) GetRetainedMax() int64 {
	if o == nil || IsNil(o.RetainedMax) {
		var ret int64
		return ret
	}
	return *o.RetainedMax
}

// GetRetainedMaxOk returns a tuple with the RetainedMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockBackupPolicyUpdateReqPolicy) GetRetainedMaxOk() (*int64, bool) {
	if o == nil || IsNil(o.RetainedMax) {
		return nil, false
	}
	return o.RetainedMax, true
}

// HasRetainedMax returns a boolean if a field has been set.
func (o *DpBlockBackupPolicyUpdateReqPolicy) HasRetainedMax() bool {
	if o != nil && !IsNil(o.RetainedMax) {
		return true
	}

	return false
}

// SetRetainedMax gets a reference to the given int64 and assigns it to the RetainedMax field.
func (o *DpBlockBackupPolicyUpdateReqPolicy) SetRetainedMax(v int64) {
	o.RetainedMax = &v
}

func (o DpBlockBackupPolicyUpdateReqPolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DpBlockBackupPolicyUpdateReqPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Encrypted) {
		toSerialize["encrypted"] = o.Encrypted
	}
	if !IsNil(o.FullCronExpr) {
		toSerialize["full_cron_expr"] = o.FullCronExpr
	}
	if !IsNil(o.IncCronExpr) {
		toSerialize["inc_cron_expr"] = o.IncCronExpr
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.RetainedMax) {
		toSerialize["retained_max"] = o.RetainedMax
	}
	return toSerialize, nil
}

type NullableDpBlockBackupPolicyUpdateReqPolicy struct {
	value *DpBlockBackupPolicyUpdateReqPolicy
	isSet bool
}

func (v NullableDpBlockBackupPolicyUpdateReqPolicy) Get() *DpBlockBackupPolicyUpdateReqPolicy {
	return v.value
}

func (v *NullableDpBlockBackupPolicyUpdateReqPolicy) Set(val *DpBlockBackupPolicyUpdateReqPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableDpBlockBackupPolicyUpdateReqPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableDpBlockBackupPolicyUpdateReqPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDpBlockBackupPolicyUpdateReqPolicy(val *DpBlockBackupPolicyUpdateReqPolicy) *NullableDpBlockBackupPolicyUpdateReqPolicy {
	return &NullableDpBlockBackupPolicyUpdateReqPolicy{value: val, isSet: true}
}

func (v NullableDpBlockBackupPolicyUpdateReqPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDpBlockBackupPolicyUpdateReqPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


