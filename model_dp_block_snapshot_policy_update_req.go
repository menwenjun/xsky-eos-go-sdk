/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DpBlockSnapshotPolicyUpdateReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DpBlockSnapshotPolicyUpdateReq{}

// DpBlockSnapshotPolicyUpdateReq struct for DpBlockSnapshotPolicyUpdateReq
type DpBlockSnapshotPolicyUpdateReq struct {
	DpBlockSnapshotPolicy DpBlockSnapshotPolicyUpdateReqPolicy `json:"dp_block_snapshot_policy"`
}

type _DpBlockSnapshotPolicyUpdateReq DpBlockSnapshotPolicyUpdateReq

// NewDpBlockSnapshotPolicyUpdateReq instantiates a new DpBlockSnapshotPolicyUpdateReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDpBlockSnapshotPolicyUpdateReq(dpBlockSnapshotPolicy DpBlockSnapshotPolicyUpdateReqPolicy) *DpBlockSnapshotPolicyUpdateReq {
	this := DpBlockSnapshotPolicyUpdateReq{}
	this.DpBlockSnapshotPolicy = dpBlockSnapshotPolicy
	return &this
}

// NewDpBlockSnapshotPolicyUpdateReqWithDefaults instantiates a new DpBlockSnapshotPolicyUpdateReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDpBlockSnapshotPolicyUpdateReqWithDefaults() *DpBlockSnapshotPolicyUpdateReq {
	this := DpBlockSnapshotPolicyUpdateReq{}
	return &this
}

// GetDpBlockSnapshotPolicy returns the DpBlockSnapshotPolicy field value
func (o *DpBlockSnapshotPolicyUpdateReq) GetDpBlockSnapshotPolicy() DpBlockSnapshotPolicyUpdateReqPolicy {
	if o == nil {
		var ret DpBlockSnapshotPolicyUpdateReqPolicy
		return ret
	}

	return o.DpBlockSnapshotPolicy
}

// GetDpBlockSnapshotPolicyOk returns a tuple with the DpBlockSnapshotPolicy field value
// and a boolean to check if the value has been set.
func (o *DpBlockSnapshotPolicyUpdateReq) GetDpBlockSnapshotPolicyOk() (*DpBlockSnapshotPolicyUpdateReqPolicy, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DpBlockSnapshotPolicy, true
}

// SetDpBlockSnapshotPolicy sets field value
func (o *DpBlockSnapshotPolicyUpdateReq) SetDpBlockSnapshotPolicy(v DpBlockSnapshotPolicyUpdateReqPolicy) {
	o.DpBlockSnapshotPolicy = v
}

func (o DpBlockSnapshotPolicyUpdateReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DpBlockSnapshotPolicyUpdateReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dp_block_snapshot_policy"] = o.DpBlockSnapshotPolicy
	return toSerialize, nil
}

func (o *DpBlockSnapshotPolicyUpdateReq) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dp_block_snapshot_policy",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDpBlockSnapshotPolicyUpdateReq := _DpBlockSnapshotPolicyUpdateReq{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDpBlockSnapshotPolicyUpdateReq)

	if err != nil {
		return err
	}

	*o = DpBlockSnapshotPolicyUpdateReq(varDpBlockSnapshotPolicyUpdateReq)

	return err
}

type NullableDpBlockSnapshotPolicyUpdateReq struct {
	value *DpBlockSnapshotPolicyUpdateReq
	isSet bool
}

func (v NullableDpBlockSnapshotPolicyUpdateReq) Get() *DpBlockSnapshotPolicyUpdateReq {
	return v.value
}

func (v *NullableDpBlockSnapshotPolicyUpdateReq) Set(val *DpBlockSnapshotPolicyUpdateReq) {
	v.value = val
	v.isSet = true
}

func (v NullableDpBlockSnapshotPolicyUpdateReq) IsSet() bool {
	return v.isSet
}

func (v *NullableDpBlockSnapshotPolicyUpdateReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDpBlockSnapshotPolicyUpdateReq(val *DpBlockSnapshotPolicyUpdateReq) *NullableDpBlockSnapshotPolicyUpdateReq {
	return &NullableDpBlockSnapshotPolicyUpdateReq{value: val, isSet: true}
}

func (v NullableDpBlockSnapshotPolicyUpdateReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDpBlockSnapshotPolicyUpdateReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


