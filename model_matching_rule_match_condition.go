/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MatchingRuleMatchCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchingRuleMatchCondition{}

// MatchingRuleMatchCondition struct for MatchingRuleMatchCondition
type MatchingRuleMatchCondition struct {
	CondOperator *string `json:"cond_operator,omitempty"`
	Conditions []Condition `json:"conditions,omitempty"`
}

// NewMatchingRuleMatchCondition instantiates a new MatchingRuleMatchCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchingRuleMatchCondition() *MatchingRuleMatchCondition {
	this := MatchingRuleMatchCondition{}
	return &this
}

// NewMatchingRuleMatchConditionWithDefaults instantiates a new MatchingRuleMatchCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchingRuleMatchConditionWithDefaults() *MatchingRuleMatchCondition {
	this := MatchingRuleMatchCondition{}
	return &this
}

// GetCondOperator returns the CondOperator field value if set, zero value otherwise.
func (o *MatchingRuleMatchCondition) GetCondOperator() string {
	if o == nil || IsNil(o.CondOperator) {
		var ret string
		return ret
	}
	return *o.CondOperator
}

// GetCondOperatorOk returns a tuple with the CondOperator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchingRuleMatchCondition) GetCondOperatorOk() (*string, bool) {
	if o == nil || IsNil(o.CondOperator) {
		return nil, false
	}
	return o.CondOperator, true
}

// HasCondOperator returns a boolean if a field has been set.
func (o *MatchingRuleMatchCondition) HasCondOperator() bool {
	if o != nil && !IsNil(o.CondOperator) {
		return true
	}

	return false
}

// SetCondOperator gets a reference to the given string and assigns it to the CondOperator field.
func (o *MatchingRuleMatchCondition) SetCondOperator(v string) {
	o.CondOperator = &v
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *MatchingRuleMatchCondition) GetConditions() []Condition {
	if o == nil || IsNil(o.Conditions) {
		var ret []Condition
		return ret
	}
	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchingRuleMatchCondition) GetConditionsOk() ([]Condition, bool) {
	if o == nil || IsNil(o.Conditions) {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *MatchingRuleMatchCondition) HasConditions() bool {
	if o != nil && !IsNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given []Condition and assigns it to the Conditions field.
func (o *MatchingRuleMatchCondition) SetConditions(v []Condition) {
	o.Conditions = v
}

func (o MatchingRuleMatchCondition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchingRuleMatchCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CondOperator) {
		toSerialize["cond_operator"] = o.CondOperator
	}
	if !IsNil(o.Conditions) {
		toSerialize["conditions"] = o.Conditions
	}
	return toSerialize, nil
}

type NullableMatchingRuleMatchCondition struct {
	value *MatchingRuleMatchCondition
	isSet bool
}

func (v NullableMatchingRuleMatchCondition) Get() *MatchingRuleMatchCondition {
	return v.value
}

func (v *NullableMatchingRuleMatchCondition) Set(val *MatchingRuleMatchCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchingRuleMatchCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchingRuleMatchCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchingRuleMatchCondition(val *MatchingRuleMatchCondition) *NullableMatchingRuleMatchCondition {
	return &NullableMatchingRuleMatchCondition{value: val, isSet: true}
}

func (v NullableMatchingRuleMatchCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchingRuleMatchCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


