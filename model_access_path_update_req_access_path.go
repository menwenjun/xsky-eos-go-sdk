/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AccessPathUpdateReqAccessPath type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccessPathUpdateReqAccessPath{}

// AccessPathUpdateReqAccessPath struct for AccessPathUpdateReqAccessPath
type AccessPathUpdateReqAccessPath struct {
	Chap *bool `json:"chap,omitempty"`
	Description *string `json:"description,omitempty"`
	Name *string `json:"name,omitempty"`
	Tname *string `json:"tname,omitempty"`
	Tsecret *string `json:"tsecret,omitempty"`
}

// NewAccessPathUpdateReqAccessPath instantiates a new AccessPathUpdateReqAccessPath object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessPathUpdateReqAccessPath() *AccessPathUpdateReqAccessPath {
	this := AccessPathUpdateReqAccessPath{}
	return &this
}

// NewAccessPathUpdateReqAccessPathWithDefaults instantiates a new AccessPathUpdateReqAccessPath object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessPathUpdateReqAccessPathWithDefaults() *AccessPathUpdateReqAccessPath {
	this := AccessPathUpdateReqAccessPath{}
	return &this
}

// GetChap returns the Chap field value if set, zero value otherwise.
func (o *AccessPathUpdateReqAccessPath) GetChap() bool {
	if o == nil || IsNil(o.Chap) {
		var ret bool
		return ret
	}
	return *o.Chap
}

// GetChapOk returns a tuple with the Chap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPathUpdateReqAccessPath) GetChapOk() (*bool, bool) {
	if o == nil || IsNil(o.Chap) {
		return nil, false
	}
	return o.Chap, true
}

// HasChap returns a boolean if a field has been set.
func (o *AccessPathUpdateReqAccessPath) HasChap() bool {
	if o != nil && !IsNil(o.Chap) {
		return true
	}

	return false
}

// SetChap gets a reference to the given bool and assigns it to the Chap field.
func (o *AccessPathUpdateReqAccessPath) SetChap(v bool) {
	o.Chap = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AccessPathUpdateReqAccessPath) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPathUpdateReqAccessPath) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AccessPathUpdateReqAccessPath) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AccessPathUpdateReqAccessPath) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AccessPathUpdateReqAccessPath) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPathUpdateReqAccessPath) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AccessPathUpdateReqAccessPath) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AccessPathUpdateReqAccessPath) SetName(v string) {
	o.Name = &v
}

// GetTname returns the Tname field value if set, zero value otherwise.
func (o *AccessPathUpdateReqAccessPath) GetTname() string {
	if o == nil || IsNil(o.Tname) {
		var ret string
		return ret
	}
	return *o.Tname
}

// GetTnameOk returns a tuple with the Tname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPathUpdateReqAccessPath) GetTnameOk() (*string, bool) {
	if o == nil || IsNil(o.Tname) {
		return nil, false
	}
	return o.Tname, true
}

// HasTname returns a boolean if a field has been set.
func (o *AccessPathUpdateReqAccessPath) HasTname() bool {
	if o != nil && !IsNil(o.Tname) {
		return true
	}

	return false
}

// SetTname gets a reference to the given string and assigns it to the Tname field.
func (o *AccessPathUpdateReqAccessPath) SetTname(v string) {
	o.Tname = &v
}

// GetTsecret returns the Tsecret field value if set, zero value otherwise.
func (o *AccessPathUpdateReqAccessPath) GetTsecret() string {
	if o == nil || IsNil(o.Tsecret) {
		var ret string
		return ret
	}
	return *o.Tsecret
}

// GetTsecretOk returns a tuple with the Tsecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPathUpdateReqAccessPath) GetTsecretOk() (*string, bool) {
	if o == nil || IsNil(o.Tsecret) {
		return nil, false
	}
	return o.Tsecret, true
}

// HasTsecret returns a boolean if a field has been set.
func (o *AccessPathUpdateReqAccessPath) HasTsecret() bool {
	if o != nil && !IsNil(o.Tsecret) {
		return true
	}

	return false
}

// SetTsecret gets a reference to the given string and assigns it to the Tsecret field.
func (o *AccessPathUpdateReqAccessPath) SetTsecret(v string) {
	o.Tsecret = &v
}

func (o AccessPathUpdateReqAccessPath) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccessPathUpdateReqAccessPath) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Chap) {
		toSerialize["chap"] = o.Chap
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Tname) {
		toSerialize["tname"] = o.Tname
	}
	if !IsNil(o.Tsecret) {
		toSerialize["tsecret"] = o.Tsecret
	}
	return toSerialize, nil
}

type NullableAccessPathUpdateReqAccessPath struct {
	value *AccessPathUpdateReqAccessPath
	isSet bool
}

func (v NullableAccessPathUpdateReqAccessPath) Get() *AccessPathUpdateReqAccessPath {
	return v.value
}

func (v *NullableAccessPathUpdateReqAccessPath) Set(val *AccessPathUpdateReqAccessPath) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessPathUpdateReqAccessPath) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessPathUpdateReqAccessPath) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessPathUpdateReqAccessPath(val *AccessPathUpdateReqAccessPath) *NullableAccessPathUpdateReqAccessPath {
	return &NullableAccessPathUpdateReqAccessPath{value: val, isSet: true}
}

func (v NullableAccessPathUpdateReqAccessPath) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessPathUpdateReqAccessPath) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


