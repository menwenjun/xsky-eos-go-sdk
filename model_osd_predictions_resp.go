/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OsdPredictionsResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OsdPredictionsResp{}

// OsdPredictionsResp struct for OsdPredictionsResp
type OsdPredictionsResp struct {
	// osd predictions
	OsdPredictions []DiskPrediction `json:"osd_predictions"`
}

type _OsdPredictionsResp OsdPredictionsResp

// NewOsdPredictionsResp instantiates a new OsdPredictionsResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOsdPredictionsResp(osdPredictions []DiskPrediction) *OsdPredictionsResp {
	this := OsdPredictionsResp{}
	this.OsdPredictions = osdPredictions
	return &this
}

// NewOsdPredictionsRespWithDefaults instantiates a new OsdPredictionsResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOsdPredictionsRespWithDefaults() *OsdPredictionsResp {
	this := OsdPredictionsResp{}
	return &this
}

// GetOsdPredictions returns the OsdPredictions field value
func (o *OsdPredictionsResp) GetOsdPredictions() []DiskPrediction {
	if o == nil {
		var ret []DiskPrediction
		return ret
	}

	return o.OsdPredictions
}

// GetOsdPredictionsOk returns a tuple with the OsdPredictions field value
// and a boolean to check if the value has been set.
func (o *OsdPredictionsResp) GetOsdPredictionsOk() ([]DiskPrediction, bool) {
	if o == nil {
		return nil, false
	}
	return o.OsdPredictions, true
}

// SetOsdPredictions sets field value
func (o *OsdPredictionsResp) SetOsdPredictions(v []DiskPrediction) {
	o.OsdPredictions = v
}

func (o OsdPredictionsResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OsdPredictionsResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["osd_predictions"] = o.OsdPredictions
	return toSerialize, nil
}

func (o *OsdPredictionsResp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"osd_predictions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOsdPredictionsResp := _OsdPredictionsResp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOsdPredictionsResp)

	if err != nil {
		return err
	}

	*o = OsdPredictionsResp(varOsdPredictionsResp)

	return err
}

type NullableOsdPredictionsResp struct {
	value *OsdPredictionsResp
	isSet bool
}

func (v NullableOsdPredictionsResp) Get() *OsdPredictionsResp {
	return v.value
}

func (v *NullableOsdPredictionsResp) Set(val *OsdPredictionsResp) {
	v.value = val
	v.isSet = true
}

func (v NullableOsdPredictionsResp) IsSet() bool {
	return v.isSet
}

func (v *NullableOsdPredictionsResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOsdPredictionsResp(val *OsdPredictionsResp) *NullableOsdPredictionsResp {
	return &NullableOsdPredictionsResp{value: val, isSet: true}
}

func (v NullableOsdPredictionsResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOsdPredictionsResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


