/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SourcesResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SourcesResp{}

// SourcesResp struct for SourcesResp
type SourcesResp struct {
	Sources []SourceRecord `json:"sources,omitempty"`
}

// NewSourcesResp instantiates a new SourcesResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourcesResp() *SourcesResp {
	this := SourcesResp{}
	return &this
}

// NewSourcesRespWithDefaults instantiates a new SourcesResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourcesRespWithDefaults() *SourcesResp {
	this := SourcesResp{}
	return &this
}

// GetSources returns the Sources field value if set, zero value otherwise.
func (o *SourcesResp) GetSources() []SourceRecord {
	if o == nil || IsNil(o.Sources) {
		var ret []SourceRecord
		return ret
	}
	return o.Sources
}

// GetSourcesOk returns a tuple with the Sources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourcesResp) GetSourcesOk() ([]SourceRecord, bool) {
	if o == nil || IsNil(o.Sources) {
		return nil, false
	}
	return o.Sources, true
}

// HasSources returns a boolean if a field has been set.
func (o *SourcesResp) HasSources() bool {
	if o != nil && !IsNil(o.Sources) {
		return true
	}

	return false
}

// SetSources gets a reference to the given []SourceRecord and assigns it to the Sources field.
func (o *SourcesResp) SetSources(v []SourceRecord) {
	o.Sources = v
}

func (o SourcesResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SourcesResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Sources) {
		toSerialize["sources"] = o.Sources
	}
	return toSerialize, nil
}

type NullableSourcesResp struct {
	value *SourcesResp
	isSet bool
}

func (v NullableSourcesResp) Get() *SourcesResp {
	return v.value
}

func (v *NullableSourcesResp) Set(val *SourcesResp) {
	v.value = val
	v.isSet = true
}

func (v NullableSourcesResp) IsSet() bool {
	return v.isSet
}

func (v *NullableSourcesResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourcesResp(val *SourcesResp) *NullableSourcesResp {
	return &NullableSourcesResp{value: val, isSet: true}
}

func (v NullableSourcesResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourcesResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


