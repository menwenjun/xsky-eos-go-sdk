/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DpBlockReplicationPolicyResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DpBlockReplicationPolicyResp{}

// DpBlockReplicationPolicyResp struct for DpBlockReplicationPolicyResp
type DpBlockReplicationPolicyResp struct {
	DpBlockReplicationPolicy *DpBlockReplicationPolicy `json:"dp_block_replication_policy,omitempty"`
}

// NewDpBlockReplicationPolicyResp instantiates a new DpBlockReplicationPolicyResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDpBlockReplicationPolicyResp() *DpBlockReplicationPolicyResp {
	this := DpBlockReplicationPolicyResp{}
	return &this
}

// NewDpBlockReplicationPolicyRespWithDefaults instantiates a new DpBlockReplicationPolicyResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDpBlockReplicationPolicyRespWithDefaults() *DpBlockReplicationPolicyResp {
	this := DpBlockReplicationPolicyResp{}
	return &this
}

// GetDpBlockReplicationPolicy returns the DpBlockReplicationPolicy field value if set, zero value otherwise.
func (o *DpBlockReplicationPolicyResp) GetDpBlockReplicationPolicy() DpBlockReplicationPolicy {
	if o == nil || IsNil(o.DpBlockReplicationPolicy) {
		var ret DpBlockReplicationPolicy
		return ret
	}
	return *o.DpBlockReplicationPolicy
}

// GetDpBlockReplicationPolicyOk returns a tuple with the DpBlockReplicationPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockReplicationPolicyResp) GetDpBlockReplicationPolicyOk() (*DpBlockReplicationPolicy, bool) {
	if o == nil || IsNil(o.DpBlockReplicationPolicy) {
		return nil, false
	}
	return o.DpBlockReplicationPolicy, true
}

// HasDpBlockReplicationPolicy returns a boolean if a field has been set.
func (o *DpBlockReplicationPolicyResp) HasDpBlockReplicationPolicy() bool {
	if o != nil && !IsNil(o.DpBlockReplicationPolicy) {
		return true
	}

	return false
}

// SetDpBlockReplicationPolicy gets a reference to the given DpBlockReplicationPolicy and assigns it to the DpBlockReplicationPolicy field.
func (o *DpBlockReplicationPolicyResp) SetDpBlockReplicationPolicy(v DpBlockReplicationPolicy) {
	o.DpBlockReplicationPolicy = &v
}

func (o DpBlockReplicationPolicyResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DpBlockReplicationPolicyResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DpBlockReplicationPolicy) {
		toSerialize["dp_block_replication_policy"] = o.DpBlockReplicationPolicy
	}
	return toSerialize, nil
}

type NullableDpBlockReplicationPolicyResp struct {
	value *DpBlockReplicationPolicyResp
	isSet bool
}

func (v NullableDpBlockReplicationPolicyResp) Get() *DpBlockReplicationPolicyResp {
	return v.value
}

func (v *NullableDpBlockReplicationPolicyResp) Set(val *DpBlockReplicationPolicyResp) {
	v.value = val
	v.isSet = true
}

func (v NullableDpBlockReplicationPolicyResp) IsSet() bool {
	return v.isSet
}

func (v *NullableDpBlockReplicationPolicyResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDpBlockReplicationPolicyResp(val *DpBlockReplicationPolicyResp) *NullableDpBlockReplicationPolicyResp {
	return &NullableDpBlockReplicationPolicyResp{value: val, isSet: true}
}

func (v NullableDpBlockReplicationPolicyResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDpBlockReplicationPolicyResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


