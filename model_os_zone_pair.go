/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the OSZonePair type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OSZonePair{}

// OSZonePair OSZonePair contains relation info from source zone to target zone
type OSZonePair struct {
	ID *int64 `json:"ID,omitempty"`
	ClockDiff *int64 `json:"clock_diff,omitempty"`
	Cluster *ClusterNestview `json:"cluster,omitempty"`
	Create *time.Time `json:"create,omitempty"`
	SourceZoneUuid *string `json:"source_zone_uuid,omitempty"`
	TargetZoneUuid *string `json:"target_zone_uuid,omitempty"`
	Update *time.Time `json:"update,omitempty"`
}

// NewOSZonePair instantiates a new OSZonePair object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOSZonePair() *OSZonePair {
	this := OSZonePair{}
	return &this
}

// NewOSZonePairWithDefaults instantiates a new OSZonePair object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOSZonePairWithDefaults() *OSZonePair {
	this := OSZonePair{}
	return &this
}

// GetID returns the ID field value if set, zero value otherwise.
func (o *OSZonePair) GetID() int64 {
	if o == nil || IsNil(o.ID) {
		var ret int64
		return ret
	}
	return *o.ID
}

// GetIDOk returns a tuple with the ID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSZonePair) GetIDOk() (*int64, bool) {
	if o == nil || IsNil(o.ID) {
		return nil, false
	}
	return o.ID, true
}

// HasID returns a boolean if a field has been set.
func (o *OSZonePair) HasID() bool {
	if o != nil && !IsNil(o.ID) {
		return true
	}

	return false
}

// SetID gets a reference to the given int64 and assigns it to the ID field.
func (o *OSZonePair) SetID(v int64) {
	o.ID = &v
}

// GetClockDiff returns the ClockDiff field value if set, zero value otherwise.
func (o *OSZonePair) GetClockDiff() int64 {
	if o == nil || IsNil(o.ClockDiff) {
		var ret int64
		return ret
	}
	return *o.ClockDiff
}

// GetClockDiffOk returns a tuple with the ClockDiff field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSZonePair) GetClockDiffOk() (*int64, bool) {
	if o == nil || IsNil(o.ClockDiff) {
		return nil, false
	}
	return o.ClockDiff, true
}

// HasClockDiff returns a boolean if a field has been set.
func (o *OSZonePair) HasClockDiff() bool {
	if o != nil && !IsNil(o.ClockDiff) {
		return true
	}

	return false
}

// SetClockDiff gets a reference to the given int64 and assigns it to the ClockDiff field.
func (o *OSZonePair) SetClockDiff(v int64) {
	o.ClockDiff = &v
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *OSZonePair) GetCluster() ClusterNestview {
	if o == nil || IsNil(o.Cluster) {
		var ret ClusterNestview
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSZonePair) GetClusterOk() (*ClusterNestview, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *OSZonePair) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given ClusterNestview and assigns it to the Cluster field.
func (o *OSZonePair) SetCluster(v ClusterNestview) {
	o.Cluster = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *OSZonePair) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSZonePair) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *OSZonePair) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *OSZonePair) SetCreate(v time.Time) {
	o.Create = &v
}

// GetSourceZoneUuid returns the SourceZoneUuid field value if set, zero value otherwise.
func (o *OSZonePair) GetSourceZoneUuid() string {
	if o == nil || IsNil(o.SourceZoneUuid) {
		var ret string
		return ret
	}
	return *o.SourceZoneUuid
}

// GetSourceZoneUuidOk returns a tuple with the SourceZoneUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSZonePair) GetSourceZoneUuidOk() (*string, bool) {
	if o == nil || IsNil(o.SourceZoneUuid) {
		return nil, false
	}
	return o.SourceZoneUuid, true
}

// HasSourceZoneUuid returns a boolean if a field has been set.
func (o *OSZonePair) HasSourceZoneUuid() bool {
	if o != nil && !IsNil(o.SourceZoneUuid) {
		return true
	}

	return false
}

// SetSourceZoneUuid gets a reference to the given string and assigns it to the SourceZoneUuid field.
func (o *OSZonePair) SetSourceZoneUuid(v string) {
	o.SourceZoneUuid = &v
}

// GetTargetZoneUuid returns the TargetZoneUuid field value if set, zero value otherwise.
func (o *OSZonePair) GetTargetZoneUuid() string {
	if o == nil || IsNil(o.TargetZoneUuid) {
		var ret string
		return ret
	}
	return *o.TargetZoneUuid
}

// GetTargetZoneUuidOk returns a tuple with the TargetZoneUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSZonePair) GetTargetZoneUuidOk() (*string, bool) {
	if o == nil || IsNil(o.TargetZoneUuid) {
		return nil, false
	}
	return o.TargetZoneUuid, true
}

// HasTargetZoneUuid returns a boolean if a field has been set.
func (o *OSZonePair) HasTargetZoneUuid() bool {
	if o != nil && !IsNil(o.TargetZoneUuid) {
		return true
	}

	return false
}

// SetTargetZoneUuid gets a reference to the given string and assigns it to the TargetZoneUuid field.
func (o *OSZonePair) SetTargetZoneUuid(v string) {
	o.TargetZoneUuid = &v
}

// GetUpdate returns the Update field value if set, zero value otherwise.
func (o *OSZonePair) GetUpdate() time.Time {
	if o == nil || IsNil(o.Update) {
		var ret time.Time
		return ret
	}
	return *o.Update
}

// GetUpdateOk returns a tuple with the Update field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSZonePair) GetUpdateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Update) {
		return nil, false
	}
	return o.Update, true
}

// HasUpdate returns a boolean if a field has been set.
func (o *OSZonePair) HasUpdate() bool {
	if o != nil && !IsNil(o.Update) {
		return true
	}

	return false
}

// SetUpdate gets a reference to the given time.Time and assigns it to the Update field.
func (o *OSZonePair) SetUpdate(v time.Time) {
	o.Update = &v
}

func (o OSZonePair) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OSZonePair) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ID) {
		toSerialize["ID"] = o.ID
	}
	if !IsNil(o.ClockDiff) {
		toSerialize["clock_diff"] = o.ClockDiff
	}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.SourceZoneUuid) {
		toSerialize["source_zone_uuid"] = o.SourceZoneUuid
	}
	if !IsNil(o.TargetZoneUuid) {
		toSerialize["target_zone_uuid"] = o.TargetZoneUuid
	}
	if !IsNil(o.Update) {
		toSerialize["update"] = o.Update
	}
	return toSerialize, nil
}

type NullableOSZonePair struct {
	value *OSZonePair
	isSet bool
}

func (v NullableOSZonePair) Get() *OSZonePair {
	return v.value
}

func (v *NullableOSZonePair) Set(val *OSZonePair) {
	v.value = val
	v.isSet = true
}

func (v NullableOSZonePair) IsSet() bool {
	return v.isSet
}

func (v *NullableOSZonePair) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOSZonePair(val *OSZonePair) *NullableOSZonePair {
	return &NullableOSZonePair{value: val, isSet: true}
}

func (v NullableOSZonePair) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOSZonePair) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


