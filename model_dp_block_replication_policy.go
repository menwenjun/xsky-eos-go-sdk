/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the DpBlockReplicationPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DpBlockReplicationPolicy{}

// DpBlockReplicationPolicy DpBlockReplicationPolicy protects a block volume by sync replication
type DpBlockReplicationPolicy struct {
	Cluster *Cluster `json:"cluster,omitempty"`
	Create *time.Time `json:"create,omitempty"`
	DpSite *DpSiteNestview `json:"dp_site,omitempty"`
	Id *int64 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Status *string `json:"status,omitempty"`
	TimeoutSeconds *int64 `json:"timeout_seconds,omitempty"`
	Update *time.Time `json:"update,omitempty"`
}

// NewDpBlockReplicationPolicy instantiates a new DpBlockReplicationPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDpBlockReplicationPolicy() *DpBlockReplicationPolicy {
	this := DpBlockReplicationPolicy{}
	return &this
}

// NewDpBlockReplicationPolicyWithDefaults instantiates a new DpBlockReplicationPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDpBlockReplicationPolicyWithDefaults() *DpBlockReplicationPolicy {
	this := DpBlockReplicationPolicy{}
	return &this
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *DpBlockReplicationPolicy) GetCluster() Cluster {
	if o == nil || IsNil(o.Cluster) {
		var ret Cluster
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockReplicationPolicy) GetClusterOk() (*Cluster, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *DpBlockReplicationPolicy) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given Cluster and assigns it to the Cluster field.
func (o *DpBlockReplicationPolicy) SetCluster(v Cluster) {
	o.Cluster = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *DpBlockReplicationPolicy) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockReplicationPolicy) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *DpBlockReplicationPolicy) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *DpBlockReplicationPolicy) SetCreate(v time.Time) {
	o.Create = &v
}

// GetDpSite returns the DpSite field value if set, zero value otherwise.
func (o *DpBlockReplicationPolicy) GetDpSite() DpSiteNestview {
	if o == nil || IsNil(o.DpSite) {
		var ret DpSiteNestview
		return ret
	}
	return *o.DpSite
}

// GetDpSiteOk returns a tuple with the DpSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockReplicationPolicy) GetDpSiteOk() (*DpSiteNestview, bool) {
	if o == nil || IsNil(o.DpSite) {
		return nil, false
	}
	return o.DpSite, true
}

// HasDpSite returns a boolean if a field has been set.
func (o *DpBlockReplicationPolicy) HasDpSite() bool {
	if o != nil && !IsNil(o.DpSite) {
		return true
	}

	return false
}

// SetDpSite gets a reference to the given DpSiteNestview and assigns it to the DpSite field.
func (o *DpBlockReplicationPolicy) SetDpSite(v DpSiteNestview) {
	o.DpSite = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DpBlockReplicationPolicy) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockReplicationPolicy) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DpBlockReplicationPolicy) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *DpBlockReplicationPolicy) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DpBlockReplicationPolicy) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockReplicationPolicy) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DpBlockReplicationPolicy) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DpBlockReplicationPolicy) SetName(v string) {
	o.Name = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DpBlockReplicationPolicy) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockReplicationPolicy) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DpBlockReplicationPolicy) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *DpBlockReplicationPolicy) SetStatus(v string) {
	o.Status = &v
}

// GetTimeoutSeconds returns the TimeoutSeconds field value if set, zero value otherwise.
func (o *DpBlockReplicationPolicy) GetTimeoutSeconds() int64 {
	if o == nil || IsNil(o.TimeoutSeconds) {
		var ret int64
		return ret
	}
	return *o.TimeoutSeconds
}

// GetTimeoutSecondsOk returns a tuple with the TimeoutSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockReplicationPolicy) GetTimeoutSecondsOk() (*int64, bool) {
	if o == nil || IsNil(o.TimeoutSeconds) {
		return nil, false
	}
	return o.TimeoutSeconds, true
}

// HasTimeoutSeconds returns a boolean if a field has been set.
func (o *DpBlockReplicationPolicy) HasTimeoutSeconds() bool {
	if o != nil && !IsNil(o.TimeoutSeconds) {
		return true
	}

	return false
}

// SetTimeoutSeconds gets a reference to the given int64 and assigns it to the TimeoutSeconds field.
func (o *DpBlockReplicationPolicy) SetTimeoutSeconds(v int64) {
	o.TimeoutSeconds = &v
}

// GetUpdate returns the Update field value if set, zero value otherwise.
func (o *DpBlockReplicationPolicy) GetUpdate() time.Time {
	if o == nil || IsNil(o.Update) {
		var ret time.Time
		return ret
	}
	return *o.Update
}

// GetUpdateOk returns a tuple with the Update field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockReplicationPolicy) GetUpdateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Update) {
		return nil, false
	}
	return o.Update, true
}

// HasUpdate returns a boolean if a field has been set.
func (o *DpBlockReplicationPolicy) HasUpdate() bool {
	if o != nil && !IsNil(o.Update) {
		return true
	}

	return false
}

// SetUpdate gets a reference to the given time.Time and assigns it to the Update field.
func (o *DpBlockReplicationPolicy) SetUpdate(v time.Time) {
	o.Update = &v
}

func (o DpBlockReplicationPolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DpBlockReplicationPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.DpSite) {
		toSerialize["dp_site"] = o.DpSite
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.TimeoutSeconds) {
		toSerialize["timeout_seconds"] = o.TimeoutSeconds
	}
	if !IsNil(o.Update) {
		toSerialize["update"] = o.Update
	}
	return toSerialize, nil
}

type NullableDpBlockReplicationPolicy struct {
	value *DpBlockReplicationPolicy
	isSet bool
}

func (v NullableDpBlockReplicationPolicy) Get() *DpBlockReplicationPolicy {
	return v.value
}

func (v *NullableDpBlockReplicationPolicy) Set(val *DpBlockReplicationPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableDpBlockReplicationPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableDpBlockReplicationPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDpBlockReplicationPolicy(val *DpBlockReplicationPolicy) *NullableDpBlockReplicationPolicy {
	return &NullableDpBlockReplicationPolicy{value: val, isSet: true}
}

func (v NullableDpBlockReplicationPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDpBlockReplicationPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


