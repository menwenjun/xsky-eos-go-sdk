/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PlacementNodeNestview type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlacementNodeNestview{}

// PlacementNodeNestview struct for PlacementNodeNestview
type PlacementNodeNestview struct {
	// id of placement node
	Id *int64 `json:"id,omitempty"`
	// name of placement node
	Name *string `json:"name,omitempty"`
	// old id of placement node
	OrigId *int64 `json:"orig_id,omitempty"`
	Parent *PlacementNodeNestviewParent `json:"parent,omitempty"`
}

// NewPlacementNodeNestview instantiates a new PlacementNodeNestview object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlacementNodeNestview() *PlacementNodeNestview {
	this := PlacementNodeNestview{}
	return &this
}

// NewPlacementNodeNestviewWithDefaults instantiates a new PlacementNodeNestview object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlacementNodeNestviewWithDefaults() *PlacementNodeNestview {
	this := PlacementNodeNestview{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PlacementNodeNestview) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlacementNodeNestview) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PlacementNodeNestview) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *PlacementNodeNestview) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PlacementNodeNestview) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlacementNodeNestview) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PlacementNodeNestview) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PlacementNodeNestview) SetName(v string) {
	o.Name = &v
}

// GetOrigId returns the OrigId field value if set, zero value otherwise.
func (o *PlacementNodeNestview) GetOrigId() int64 {
	if o == nil || IsNil(o.OrigId) {
		var ret int64
		return ret
	}
	return *o.OrigId
}

// GetOrigIdOk returns a tuple with the OrigId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlacementNodeNestview) GetOrigIdOk() (*int64, bool) {
	if o == nil || IsNil(o.OrigId) {
		return nil, false
	}
	return o.OrigId, true
}

// HasOrigId returns a boolean if a field has been set.
func (o *PlacementNodeNestview) HasOrigId() bool {
	if o != nil && !IsNil(o.OrigId) {
		return true
	}

	return false
}

// SetOrigId gets a reference to the given int64 and assigns it to the OrigId field.
func (o *PlacementNodeNestview) SetOrigId(v int64) {
	o.OrigId = &v
}

// GetParent returns the Parent field value if set, zero value otherwise.
func (o *PlacementNodeNestview) GetParent() PlacementNodeNestviewParent {
	if o == nil || IsNil(o.Parent) {
		var ret PlacementNodeNestviewParent
		return ret
	}
	return *o.Parent
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlacementNodeNestview) GetParentOk() (*PlacementNodeNestviewParent, bool) {
	if o == nil || IsNil(o.Parent) {
		return nil, false
	}
	return o.Parent, true
}

// HasParent returns a boolean if a field has been set.
func (o *PlacementNodeNestview) HasParent() bool {
	if o != nil && !IsNil(o.Parent) {
		return true
	}

	return false
}

// SetParent gets a reference to the given PlacementNodeNestviewParent and assigns it to the Parent field.
func (o *PlacementNodeNestview) SetParent(v PlacementNodeNestviewParent) {
	o.Parent = &v
}

func (o PlacementNodeNestview) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlacementNodeNestview) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.OrigId) {
		toSerialize["orig_id"] = o.OrigId
	}
	if !IsNil(o.Parent) {
		toSerialize["parent"] = o.Parent
	}
	return toSerialize, nil
}

type NullablePlacementNodeNestview struct {
	value *PlacementNodeNestview
	isSet bool
}

func (v NullablePlacementNodeNestview) Get() *PlacementNodeNestview {
	return v.value
}

func (v *NullablePlacementNodeNestview) Set(val *PlacementNodeNestview) {
	v.value = val
	v.isSet = true
}

func (v NullablePlacementNodeNestview) IsSet() bool {
	return v.isSet
}

func (v *NullablePlacementNodeNestview) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlacementNodeNestview(val *PlacementNodeNestview) *NullablePlacementNodeNestview {
	return &NullablePlacementNodeNestview{value: val, isSet: true}
}

func (v NullablePlacementNodeNestview) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlacementNodeNestview) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


