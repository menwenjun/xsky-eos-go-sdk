/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DfsPathPerformanceSamplesResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsPathPerformanceSamplesResp{}

// DfsPathPerformanceSamplesResp struct for DfsPathPerformanceSamplesResp
type DfsPathPerformanceSamplesResp struct {
	DfsPathPerformanceSamples []DfsPathPerformanceStat `json:"dfs_path_performance_samples,omitempty"`
}

// NewDfsPathPerformanceSamplesResp instantiates a new DfsPathPerformanceSamplesResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsPathPerformanceSamplesResp() *DfsPathPerformanceSamplesResp {
	this := DfsPathPerformanceSamplesResp{}
	return &this
}

// NewDfsPathPerformanceSamplesRespWithDefaults instantiates a new DfsPathPerformanceSamplesResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsPathPerformanceSamplesRespWithDefaults() *DfsPathPerformanceSamplesResp {
	this := DfsPathPerformanceSamplesResp{}
	return &this
}

// GetDfsPathPerformanceSamples returns the DfsPathPerformanceSamples field value if set, zero value otherwise.
func (o *DfsPathPerformanceSamplesResp) GetDfsPathPerformanceSamples() []DfsPathPerformanceStat {
	if o == nil || IsNil(o.DfsPathPerformanceSamples) {
		var ret []DfsPathPerformanceStat
		return ret
	}
	return o.DfsPathPerformanceSamples
}

// GetDfsPathPerformanceSamplesOk returns a tuple with the DfsPathPerformanceSamples field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsPathPerformanceSamplesResp) GetDfsPathPerformanceSamplesOk() ([]DfsPathPerformanceStat, bool) {
	if o == nil || IsNil(o.DfsPathPerformanceSamples) {
		return nil, false
	}
	return o.DfsPathPerformanceSamples, true
}

// HasDfsPathPerformanceSamples returns a boolean if a field has been set.
func (o *DfsPathPerformanceSamplesResp) HasDfsPathPerformanceSamples() bool {
	if o != nil && !IsNil(o.DfsPathPerformanceSamples) {
		return true
	}

	return false
}

// SetDfsPathPerformanceSamples gets a reference to the given []DfsPathPerformanceStat and assigns it to the DfsPathPerformanceSamples field.
func (o *DfsPathPerformanceSamplesResp) SetDfsPathPerformanceSamples(v []DfsPathPerformanceStat) {
	o.DfsPathPerformanceSamples = v
}

func (o DfsPathPerformanceSamplesResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsPathPerformanceSamplesResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DfsPathPerformanceSamples) {
		toSerialize["dfs_path_performance_samples"] = o.DfsPathPerformanceSamples
	}
	return toSerialize, nil
}

type NullableDfsPathPerformanceSamplesResp struct {
	value *DfsPathPerformanceSamplesResp
	isSet bool
}

func (v NullableDfsPathPerformanceSamplesResp) Get() *DfsPathPerformanceSamplesResp {
	return v.value
}

func (v *NullableDfsPathPerformanceSamplesResp) Set(val *DfsPathPerformanceSamplesResp) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsPathPerformanceSamplesResp) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsPathPerformanceSamplesResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsPathPerformanceSamplesResp(val *DfsPathPerformanceSamplesResp) *NullableDfsPathPerformanceSamplesResp {
	return &NullableDfsPathPerformanceSamplesResp{value: val, isSet: true}
}

func (v NullableDfsPathPerformanceSamplesResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsPathPerformanceSamplesResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


