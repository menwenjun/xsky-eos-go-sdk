/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SsoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SsoType{}

// SsoType struct for SsoType
type SsoType struct {
	Type *string `json:"type,omitempty"`
	Vendors []string `json:"vendors,omitempty"`
}

// NewSsoType instantiates a new SsoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSsoType() *SsoType {
	this := SsoType{}
	return &this
}

// NewSsoTypeWithDefaults instantiates a new SsoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSsoTypeWithDefaults() *SsoType {
	this := SsoType{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SsoType) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SsoType) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SsoType) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SsoType) SetType(v string) {
	o.Type = &v
}

// GetVendors returns the Vendors field value if set, zero value otherwise.
func (o *SsoType) GetVendors() []string {
	if o == nil || IsNil(o.Vendors) {
		var ret []string
		return ret
	}
	return o.Vendors
}

// GetVendorsOk returns a tuple with the Vendors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SsoType) GetVendorsOk() ([]string, bool) {
	if o == nil || IsNil(o.Vendors) {
		return nil, false
	}
	return o.Vendors, true
}

// HasVendors returns a boolean if a field has been set.
func (o *SsoType) HasVendors() bool {
	if o != nil && !IsNil(o.Vendors) {
		return true
	}

	return false
}

// SetVendors gets a reference to the given []string and assigns it to the Vendors field.
func (o *SsoType) SetVendors(v []string) {
	o.Vendors = v
}

func (o SsoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SsoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Vendors) {
		toSerialize["vendors"] = o.Vendors
	}
	return toSerialize, nil
}

type NullableSsoType struct {
	value *SsoType
	isSet bool
}

func (v NullableSsoType) Get() *SsoType {
	return v.value
}

func (v *NullableSsoType) Set(val *SsoType) {
	v.value = val
	v.isSet = true
}

func (v NullableSsoType) IsSet() bool {
	return v.isSet
}

func (v *NullableSsoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSsoType(val *SsoType) *NullableSsoType {
	return &NullableSsoType{value: val, isSet: true}
}

func (v NullableSsoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSsoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


