/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PoolFullCheckResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PoolFullCheckResp{}

// PoolFullCheckResp struct for PoolFullCheckResp
type PoolFullCheckResp struct {
	BackfillFullPoolIds []int64 `json:"backfill_full_pool_ids,omitempty"`
	FullPoolIds []int64 `json:"full_pool_ids,omitempty"`
	NearFullPoolIds []int64 `json:"near_full_pool_ids,omitempty"`
}

// NewPoolFullCheckResp instantiates a new PoolFullCheckResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPoolFullCheckResp() *PoolFullCheckResp {
	this := PoolFullCheckResp{}
	return &this
}

// NewPoolFullCheckRespWithDefaults instantiates a new PoolFullCheckResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPoolFullCheckRespWithDefaults() *PoolFullCheckResp {
	this := PoolFullCheckResp{}
	return &this
}

// GetBackfillFullPoolIds returns the BackfillFullPoolIds field value if set, zero value otherwise.
func (o *PoolFullCheckResp) GetBackfillFullPoolIds() []int64 {
	if o == nil || IsNil(o.BackfillFullPoolIds) {
		var ret []int64
		return ret
	}
	return o.BackfillFullPoolIds
}

// GetBackfillFullPoolIdsOk returns a tuple with the BackfillFullPoolIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolFullCheckResp) GetBackfillFullPoolIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.BackfillFullPoolIds) {
		return nil, false
	}
	return o.BackfillFullPoolIds, true
}

// HasBackfillFullPoolIds returns a boolean if a field has been set.
func (o *PoolFullCheckResp) HasBackfillFullPoolIds() bool {
	if o != nil && !IsNil(o.BackfillFullPoolIds) {
		return true
	}

	return false
}

// SetBackfillFullPoolIds gets a reference to the given []int64 and assigns it to the BackfillFullPoolIds field.
func (o *PoolFullCheckResp) SetBackfillFullPoolIds(v []int64) {
	o.BackfillFullPoolIds = v
}

// GetFullPoolIds returns the FullPoolIds field value if set, zero value otherwise.
func (o *PoolFullCheckResp) GetFullPoolIds() []int64 {
	if o == nil || IsNil(o.FullPoolIds) {
		var ret []int64
		return ret
	}
	return o.FullPoolIds
}

// GetFullPoolIdsOk returns a tuple with the FullPoolIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolFullCheckResp) GetFullPoolIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.FullPoolIds) {
		return nil, false
	}
	return o.FullPoolIds, true
}

// HasFullPoolIds returns a boolean if a field has been set.
func (o *PoolFullCheckResp) HasFullPoolIds() bool {
	if o != nil && !IsNil(o.FullPoolIds) {
		return true
	}

	return false
}

// SetFullPoolIds gets a reference to the given []int64 and assigns it to the FullPoolIds field.
func (o *PoolFullCheckResp) SetFullPoolIds(v []int64) {
	o.FullPoolIds = v
}

// GetNearFullPoolIds returns the NearFullPoolIds field value if set, zero value otherwise.
func (o *PoolFullCheckResp) GetNearFullPoolIds() []int64 {
	if o == nil || IsNil(o.NearFullPoolIds) {
		var ret []int64
		return ret
	}
	return o.NearFullPoolIds
}

// GetNearFullPoolIdsOk returns a tuple with the NearFullPoolIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolFullCheckResp) GetNearFullPoolIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.NearFullPoolIds) {
		return nil, false
	}
	return o.NearFullPoolIds, true
}

// HasNearFullPoolIds returns a boolean if a field has been set.
func (o *PoolFullCheckResp) HasNearFullPoolIds() bool {
	if o != nil && !IsNil(o.NearFullPoolIds) {
		return true
	}

	return false
}

// SetNearFullPoolIds gets a reference to the given []int64 and assigns it to the NearFullPoolIds field.
func (o *PoolFullCheckResp) SetNearFullPoolIds(v []int64) {
	o.NearFullPoolIds = v
}

func (o PoolFullCheckResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PoolFullCheckResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BackfillFullPoolIds) {
		toSerialize["backfill_full_pool_ids"] = o.BackfillFullPoolIds
	}
	if !IsNil(o.FullPoolIds) {
		toSerialize["full_pool_ids"] = o.FullPoolIds
	}
	if !IsNil(o.NearFullPoolIds) {
		toSerialize["near_full_pool_ids"] = o.NearFullPoolIds
	}
	return toSerialize, nil
}

type NullablePoolFullCheckResp struct {
	value *PoolFullCheckResp
	isSet bool
}

func (v NullablePoolFullCheckResp) Get() *PoolFullCheckResp {
	return v.value
}

func (v *NullablePoolFullCheckResp) Set(val *PoolFullCheckResp) {
	v.value = val
	v.isSet = true
}

func (v NullablePoolFullCheckResp) IsSet() bool {
	return v.isSet
}

func (v *NullablePoolFullCheckResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePoolFullCheckResp(val *PoolFullCheckResp) *NullablePoolFullCheckResp {
	return &NullablePoolFullCheckResp{value: val, isSet: true}
}

func (v NullablePoolFullCheckResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePoolFullCheckResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


