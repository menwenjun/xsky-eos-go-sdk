/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AuthSecurityPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthSecurityPolicy{}

// AuthSecurityPolicy AuthSecurityPolicy defines auth security policy
type AuthSecurityPolicy struct {
	Enabled *bool `json:"enabled,omitempty"`
	EnhancedPassword *bool `json:"enhanced_password,omitempty"`
	ExpirationTime *int64 `json:"expiration_time,omitempty"`
	// unit: second
	FreezeDuration *int64 `json:"freeze_duration,omitempty"`
	MaxAttempts *int64 `json:"max_attempts,omitempty"`
	OneSessionOnly *bool `json:"one_session_only,omitempty"`
	PasswordExpirationWarning *bool `json:"password_expiration_warning,omitempty"`
	// unit: second
	PasswordLifetime *int64 `json:"password_lifetime,omitempty"`
	TwoFactor *bool `json:"two_factor,omitempty"`
}

// NewAuthSecurityPolicy instantiates a new AuthSecurityPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthSecurityPolicy() *AuthSecurityPolicy {
	this := AuthSecurityPolicy{}
	return &this
}

// NewAuthSecurityPolicyWithDefaults instantiates a new AuthSecurityPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthSecurityPolicyWithDefaults() *AuthSecurityPolicy {
	this := AuthSecurityPolicy{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *AuthSecurityPolicy) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthSecurityPolicy) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *AuthSecurityPolicy) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *AuthSecurityPolicy) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetEnhancedPassword returns the EnhancedPassword field value if set, zero value otherwise.
func (o *AuthSecurityPolicy) GetEnhancedPassword() bool {
	if o == nil || IsNil(o.EnhancedPassword) {
		var ret bool
		return ret
	}
	return *o.EnhancedPassword
}

// GetEnhancedPasswordOk returns a tuple with the EnhancedPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthSecurityPolicy) GetEnhancedPasswordOk() (*bool, bool) {
	if o == nil || IsNil(o.EnhancedPassword) {
		return nil, false
	}
	return o.EnhancedPassword, true
}

// HasEnhancedPassword returns a boolean if a field has been set.
func (o *AuthSecurityPolicy) HasEnhancedPassword() bool {
	if o != nil && !IsNil(o.EnhancedPassword) {
		return true
	}

	return false
}

// SetEnhancedPassword gets a reference to the given bool and assigns it to the EnhancedPassword field.
func (o *AuthSecurityPolicy) SetEnhancedPassword(v bool) {
	o.EnhancedPassword = &v
}

// GetExpirationTime returns the ExpirationTime field value if set, zero value otherwise.
func (o *AuthSecurityPolicy) GetExpirationTime() int64 {
	if o == nil || IsNil(o.ExpirationTime) {
		var ret int64
		return ret
	}
	return *o.ExpirationTime
}

// GetExpirationTimeOk returns a tuple with the ExpirationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthSecurityPolicy) GetExpirationTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.ExpirationTime) {
		return nil, false
	}
	return o.ExpirationTime, true
}

// HasExpirationTime returns a boolean if a field has been set.
func (o *AuthSecurityPolicy) HasExpirationTime() bool {
	if o != nil && !IsNil(o.ExpirationTime) {
		return true
	}

	return false
}

// SetExpirationTime gets a reference to the given int64 and assigns it to the ExpirationTime field.
func (o *AuthSecurityPolicy) SetExpirationTime(v int64) {
	o.ExpirationTime = &v
}

// GetFreezeDuration returns the FreezeDuration field value if set, zero value otherwise.
func (o *AuthSecurityPolicy) GetFreezeDuration() int64 {
	if o == nil || IsNil(o.FreezeDuration) {
		var ret int64
		return ret
	}
	return *o.FreezeDuration
}

// GetFreezeDurationOk returns a tuple with the FreezeDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthSecurityPolicy) GetFreezeDurationOk() (*int64, bool) {
	if o == nil || IsNil(o.FreezeDuration) {
		return nil, false
	}
	return o.FreezeDuration, true
}

// HasFreezeDuration returns a boolean if a field has been set.
func (o *AuthSecurityPolicy) HasFreezeDuration() bool {
	if o != nil && !IsNil(o.FreezeDuration) {
		return true
	}

	return false
}

// SetFreezeDuration gets a reference to the given int64 and assigns it to the FreezeDuration field.
func (o *AuthSecurityPolicy) SetFreezeDuration(v int64) {
	o.FreezeDuration = &v
}

// GetMaxAttempts returns the MaxAttempts field value if set, zero value otherwise.
func (o *AuthSecurityPolicy) GetMaxAttempts() int64 {
	if o == nil || IsNil(o.MaxAttempts) {
		var ret int64
		return ret
	}
	return *o.MaxAttempts
}

// GetMaxAttemptsOk returns a tuple with the MaxAttempts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthSecurityPolicy) GetMaxAttemptsOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxAttempts) {
		return nil, false
	}
	return o.MaxAttempts, true
}

// HasMaxAttempts returns a boolean if a field has been set.
func (o *AuthSecurityPolicy) HasMaxAttempts() bool {
	if o != nil && !IsNil(o.MaxAttempts) {
		return true
	}

	return false
}

// SetMaxAttempts gets a reference to the given int64 and assigns it to the MaxAttempts field.
func (o *AuthSecurityPolicy) SetMaxAttempts(v int64) {
	o.MaxAttempts = &v
}

// GetOneSessionOnly returns the OneSessionOnly field value if set, zero value otherwise.
func (o *AuthSecurityPolicy) GetOneSessionOnly() bool {
	if o == nil || IsNil(o.OneSessionOnly) {
		var ret bool
		return ret
	}
	return *o.OneSessionOnly
}

// GetOneSessionOnlyOk returns a tuple with the OneSessionOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthSecurityPolicy) GetOneSessionOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.OneSessionOnly) {
		return nil, false
	}
	return o.OneSessionOnly, true
}

// HasOneSessionOnly returns a boolean if a field has been set.
func (o *AuthSecurityPolicy) HasOneSessionOnly() bool {
	if o != nil && !IsNil(o.OneSessionOnly) {
		return true
	}

	return false
}

// SetOneSessionOnly gets a reference to the given bool and assigns it to the OneSessionOnly field.
func (o *AuthSecurityPolicy) SetOneSessionOnly(v bool) {
	o.OneSessionOnly = &v
}

// GetPasswordExpirationWarning returns the PasswordExpirationWarning field value if set, zero value otherwise.
func (o *AuthSecurityPolicy) GetPasswordExpirationWarning() bool {
	if o == nil || IsNil(o.PasswordExpirationWarning) {
		var ret bool
		return ret
	}
	return *o.PasswordExpirationWarning
}

// GetPasswordExpirationWarningOk returns a tuple with the PasswordExpirationWarning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthSecurityPolicy) GetPasswordExpirationWarningOk() (*bool, bool) {
	if o == nil || IsNil(o.PasswordExpirationWarning) {
		return nil, false
	}
	return o.PasswordExpirationWarning, true
}

// HasPasswordExpirationWarning returns a boolean if a field has been set.
func (o *AuthSecurityPolicy) HasPasswordExpirationWarning() bool {
	if o != nil && !IsNil(o.PasswordExpirationWarning) {
		return true
	}

	return false
}

// SetPasswordExpirationWarning gets a reference to the given bool and assigns it to the PasswordExpirationWarning field.
func (o *AuthSecurityPolicy) SetPasswordExpirationWarning(v bool) {
	o.PasswordExpirationWarning = &v
}

// GetPasswordLifetime returns the PasswordLifetime field value if set, zero value otherwise.
func (o *AuthSecurityPolicy) GetPasswordLifetime() int64 {
	if o == nil || IsNil(o.PasswordLifetime) {
		var ret int64
		return ret
	}
	return *o.PasswordLifetime
}

// GetPasswordLifetimeOk returns a tuple with the PasswordLifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthSecurityPolicy) GetPasswordLifetimeOk() (*int64, bool) {
	if o == nil || IsNil(o.PasswordLifetime) {
		return nil, false
	}
	return o.PasswordLifetime, true
}

// HasPasswordLifetime returns a boolean if a field has been set.
func (o *AuthSecurityPolicy) HasPasswordLifetime() bool {
	if o != nil && !IsNil(o.PasswordLifetime) {
		return true
	}

	return false
}

// SetPasswordLifetime gets a reference to the given int64 and assigns it to the PasswordLifetime field.
func (o *AuthSecurityPolicy) SetPasswordLifetime(v int64) {
	o.PasswordLifetime = &v
}

// GetTwoFactor returns the TwoFactor field value if set, zero value otherwise.
func (o *AuthSecurityPolicy) GetTwoFactor() bool {
	if o == nil || IsNil(o.TwoFactor) {
		var ret bool
		return ret
	}
	return *o.TwoFactor
}

// GetTwoFactorOk returns a tuple with the TwoFactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthSecurityPolicy) GetTwoFactorOk() (*bool, bool) {
	if o == nil || IsNil(o.TwoFactor) {
		return nil, false
	}
	return o.TwoFactor, true
}

// HasTwoFactor returns a boolean if a field has been set.
func (o *AuthSecurityPolicy) HasTwoFactor() bool {
	if o != nil && !IsNil(o.TwoFactor) {
		return true
	}

	return false
}

// SetTwoFactor gets a reference to the given bool and assigns it to the TwoFactor field.
func (o *AuthSecurityPolicy) SetTwoFactor(v bool) {
	o.TwoFactor = &v
}

func (o AuthSecurityPolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthSecurityPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.EnhancedPassword) {
		toSerialize["enhanced_password"] = o.EnhancedPassword
	}
	if !IsNil(o.ExpirationTime) {
		toSerialize["expiration_time"] = o.ExpirationTime
	}
	if !IsNil(o.FreezeDuration) {
		toSerialize["freeze_duration"] = o.FreezeDuration
	}
	if !IsNil(o.MaxAttempts) {
		toSerialize["max_attempts"] = o.MaxAttempts
	}
	if !IsNil(o.OneSessionOnly) {
		toSerialize["one_session_only"] = o.OneSessionOnly
	}
	if !IsNil(o.PasswordExpirationWarning) {
		toSerialize["password_expiration_warning"] = o.PasswordExpirationWarning
	}
	if !IsNil(o.PasswordLifetime) {
		toSerialize["password_lifetime"] = o.PasswordLifetime
	}
	if !IsNil(o.TwoFactor) {
		toSerialize["two_factor"] = o.TwoFactor
	}
	return toSerialize, nil
}

type NullableAuthSecurityPolicy struct {
	value *AuthSecurityPolicy
	isSet bool
}

func (v NullableAuthSecurityPolicy) Get() *AuthSecurityPolicy {
	return v.value
}

func (v *NullableAuthSecurityPolicy) Set(val *AuthSecurityPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthSecurityPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthSecurityPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthSecurityPolicy(val *AuthSecurityPolicy) *NullableAuthSecurityPolicy {
	return &NullableAuthSecurityPolicy{value: val, isSet: true}
}

func (v NullableAuthSecurityPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthSecurityPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


