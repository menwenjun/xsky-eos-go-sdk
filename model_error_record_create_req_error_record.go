/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ErrorRecordCreateReqErrorRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrorRecordCreateReqErrorRecord{}

// ErrorRecordCreateReqErrorRecord struct for ErrorRecordCreateReqErrorRecord
type ErrorRecordCreateReqErrorRecord struct {
	ActionLogId *int64 `json:"action_log_id,omitempty"`
	AlertId *int64 `json:"alert_id,omitempty"`
	HostId *int64 `json:"host_id,omitempty"`
	Message string `json:"message"`
}

type _ErrorRecordCreateReqErrorRecord ErrorRecordCreateReqErrorRecord

// NewErrorRecordCreateReqErrorRecord instantiates a new ErrorRecordCreateReqErrorRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorRecordCreateReqErrorRecord(message string) *ErrorRecordCreateReqErrorRecord {
	this := ErrorRecordCreateReqErrorRecord{}
	this.Message = message
	return &this
}

// NewErrorRecordCreateReqErrorRecordWithDefaults instantiates a new ErrorRecordCreateReqErrorRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorRecordCreateReqErrorRecordWithDefaults() *ErrorRecordCreateReqErrorRecord {
	this := ErrorRecordCreateReqErrorRecord{}
	return &this
}

// GetActionLogId returns the ActionLogId field value if set, zero value otherwise.
func (o *ErrorRecordCreateReqErrorRecord) GetActionLogId() int64 {
	if o == nil || IsNil(o.ActionLogId) {
		var ret int64
		return ret
	}
	return *o.ActionLogId
}

// GetActionLogIdOk returns a tuple with the ActionLogId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorRecordCreateReqErrorRecord) GetActionLogIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ActionLogId) {
		return nil, false
	}
	return o.ActionLogId, true
}

// HasActionLogId returns a boolean if a field has been set.
func (o *ErrorRecordCreateReqErrorRecord) HasActionLogId() bool {
	if o != nil && !IsNil(o.ActionLogId) {
		return true
	}

	return false
}

// SetActionLogId gets a reference to the given int64 and assigns it to the ActionLogId field.
func (o *ErrorRecordCreateReqErrorRecord) SetActionLogId(v int64) {
	o.ActionLogId = &v
}

// GetAlertId returns the AlertId field value if set, zero value otherwise.
func (o *ErrorRecordCreateReqErrorRecord) GetAlertId() int64 {
	if o == nil || IsNil(o.AlertId) {
		var ret int64
		return ret
	}
	return *o.AlertId
}

// GetAlertIdOk returns a tuple with the AlertId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorRecordCreateReqErrorRecord) GetAlertIdOk() (*int64, bool) {
	if o == nil || IsNil(o.AlertId) {
		return nil, false
	}
	return o.AlertId, true
}

// HasAlertId returns a boolean if a field has been set.
func (o *ErrorRecordCreateReqErrorRecord) HasAlertId() bool {
	if o != nil && !IsNil(o.AlertId) {
		return true
	}

	return false
}

// SetAlertId gets a reference to the given int64 and assigns it to the AlertId field.
func (o *ErrorRecordCreateReqErrorRecord) SetAlertId(v int64) {
	o.AlertId = &v
}

// GetHostId returns the HostId field value if set, zero value otherwise.
func (o *ErrorRecordCreateReqErrorRecord) GetHostId() int64 {
	if o == nil || IsNil(o.HostId) {
		var ret int64
		return ret
	}
	return *o.HostId
}

// GetHostIdOk returns a tuple with the HostId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorRecordCreateReqErrorRecord) GetHostIdOk() (*int64, bool) {
	if o == nil || IsNil(o.HostId) {
		return nil, false
	}
	return o.HostId, true
}

// HasHostId returns a boolean if a field has been set.
func (o *ErrorRecordCreateReqErrorRecord) HasHostId() bool {
	if o != nil && !IsNil(o.HostId) {
		return true
	}

	return false
}

// SetHostId gets a reference to the given int64 and assigns it to the HostId field.
func (o *ErrorRecordCreateReqErrorRecord) SetHostId(v int64) {
	o.HostId = &v
}

// GetMessage returns the Message field value
func (o *ErrorRecordCreateReqErrorRecord) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *ErrorRecordCreateReqErrorRecord) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *ErrorRecordCreateReqErrorRecord) SetMessage(v string) {
	o.Message = v
}

func (o ErrorRecordCreateReqErrorRecord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrorRecordCreateReqErrorRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActionLogId) {
		toSerialize["action_log_id"] = o.ActionLogId
	}
	if !IsNil(o.AlertId) {
		toSerialize["alert_id"] = o.AlertId
	}
	if !IsNil(o.HostId) {
		toSerialize["host_id"] = o.HostId
	}
	toSerialize["message"] = o.Message
	return toSerialize, nil
}

func (o *ErrorRecordCreateReqErrorRecord) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"message",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varErrorRecordCreateReqErrorRecord := _ErrorRecordCreateReqErrorRecord{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varErrorRecordCreateReqErrorRecord)

	if err != nil {
		return err
	}

	*o = ErrorRecordCreateReqErrorRecord(varErrorRecordCreateReqErrorRecord)

	return err
}

type NullableErrorRecordCreateReqErrorRecord struct {
	value *ErrorRecordCreateReqErrorRecord
	isSet bool
}

func (v NullableErrorRecordCreateReqErrorRecord) Get() *ErrorRecordCreateReqErrorRecord {
	return v.value
}

func (v *NullableErrorRecordCreateReqErrorRecord) Set(val *ErrorRecordCreateReqErrorRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorRecordCreateReqErrorRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorRecordCreateReqErrorRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorRecordCreateReqErrorRecord(val *ErrorRecordCreateReqErrorRecord) *NullableErrorRecordCreateReqErrorRecord {
	return &NullableErrorRecordCreateReqErrorRecord{value: val, isSet: true}
}

func (v NullableErrorRecordCreateReqErrorRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorRecordCreateReqErrorRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


