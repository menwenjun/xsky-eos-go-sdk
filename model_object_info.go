/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ObjectInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectInfo{}

// ObjectInfo ObjectInfo defines object info
type ObjectInfo struct {
	Summary *string `json:"summary,omitempty"`
	UrlInfo []URLInfo `json:"url_info,omitempty"`
}

// NewObjectInfo instantiates a new ObjectInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectInfo() *ObjectInfo {
	this := ObjectInfo{}
	return &this
}

// NewObjectInfoWithDefaults instantiates a new ObjectInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectInfoWithDefaults() *ObjectInfo {
	this := ObjectInfo{}
	return &this
}

// GetSummary returns the Summary field value if set, zero value otherwise.
func (o *ObjectInfo) GetSummary() string {
	if o == nil || IsNil(o.Summary) {
		var ret string
		return ret
	}
	return *o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectInfo) GetSummaryOk() (*string, bool) {
	if o == nil || IsNil(o.Summary) {
		return nil, false
	}
	return o.Summary, true
}

// HasSummary returns a boolean if a field has been set.
func (o *ObjectInfo) HasSummary() bool {
	if o != nil && !IsNil(o.Summary) {
		return true
	}

	return false
}

// SetSummary gets a reference to the given string and assigns it to the Summary field.
func (o *ObjectInfo) SetSummary(v string) {
	o.Summary = &v
}

// GetUrlInfo returns the UrlInfo field value if set, zero value otherwise.
func (o *ObjectInfo) GetUrlInfo() []URLInfo {
	if o == nil || IsNil(o.UrlInfo) {
		var ret []URLInfo
		return ret
	}
	return o.UrlInfo
}

// GetUrlInfoOk returns a tuple with the UrlInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectInfo) GetUrlInfoOk() ([]URLInfo, bool) {
	if o == nil || IsNil(o.UrlInfo) {
		return nil, false
	}
	return o.UrlInfo, true
}

// HasUrlInfo returns a boolean if a field has been set.
func (o *ObjectInfo) HasUrlInfo() bool {
	if o != nil && !IsNil(o.UrlInfo) {
		return true
	}

	return false
}

// SetUrlInfo gets a reference to the given []URLInfo and assigns it to the UrlInfo field.
func (o *ObjectInfo) SetUrlInfo(v []URLInfo) {
	o.UrlInfo = v
}

func (o ObjectInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Summary) {
		toSerialize["summary"] = o.Summary
	}
	if !IsNil(o.UrlInfo) {
		toSerialize["url_info"] = o.UrlInfo
	}
	return toSerialize, nil
}

type NullableObjectInfo struct {
	value *ObjectInfo
	isSet bool
}

func (v NullableObjectInfo) Get() *ObjectInfo {
	return v.value
}

func (v *NullableObjectInfo) Set(val *ObjectInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectInfo(val *ObjectInfo) *NullableObjectInfo {
	return &NullableObjectInfo{value: val, isSet: true}
}

func (v NullableObjectInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


