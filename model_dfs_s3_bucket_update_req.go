/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DfsS3BucketUpdateReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsS3BucketUpdateReq{}

// DfsS3BucketUpdateReq struct for DfsS3BucketUpdateReq
type DfsS3BucketUpdateReq struct {
	DfsS3Bucket *DfsS3BucketUpdateReqBucket `json:"dfs_s3_bucket,omitempty"`
}

// NewDfsS3BucketUpdateReq instantiates a new DfsS3BucketUpdateReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsS3BucketUpdateReq() *DfsS3BucketUpdateReq {
	this := DfsS3BucketUpdateReq{}
	return &this
}

// NewDfsS3BucketUpdateReqWithDefaults instantiates a new DfsS3BucketUpdateReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsS3BucketUpdateReqWithDefaults() *DfsS3BucketUpdateReq {
	this := DfsS3BucketUpdateReq{}
	return &this
}

// GetDfsS3Bucket returns the DfsS3Bucket field value if set, zero value otherwise.
func (o *DfsS3BucketUpdateReq) GetDfsS3Bucket() DfsS3BucketUpdateReqBucket {
	if o == nil || IsNil(o.DfsS3Bucket) {
		var ret DfsS3BucketUpdateReqBucket
		return ret
	}
	return *o.DfsS3Bucket
}

// GetDfsS3BucketOk returns a tuple with the DfsS3Bucket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsS3BucketUpdateReq) GetDfsS3BucketOk() (*DfsS3BucketUpdateReqBucket, bool) {
	if o == nil || IsNil(o.DfsS3Bucket) {
		return nil, false
	}
	return o.DfsS3Bucket, true
}

// HasDfsS3Bucket returns a boolean if a field has been set.
func (o *DfsS3BucketUpdateReq) HasDfsS3Bucket() bool {
	if o != nil && !IsNil(o.DfsS3Bucket) {
		return true
	}

	return false
}

// SetDfsS3Bucket gets a reference to the given DfsS3BucketUpdateReqBucket and assigns it to the DfsS3Bucket field.
func (o *DfsS3BucketUpdateReq) SetDfsS3Bucket(v DfsS3BucketUpdateReqBucket) {
	o.DfsS3Bucket = &v
}

func (o DfsS3BucketUpdateReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsS3BucketUpdateReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DfsS3Bucket) {
		toSerialize["dfs_s3_bucket"] = o.DfsS3Bucket
	}
	return toSerialize, nil
}

type NullableDfsS3BucketUpdateReq struct {
	value *DfsS3BucketUpdateReq
	isSet bool
}

func (v NullableDfsS3BucketUpdateReq) Get() *DfsS3BucketUpdateReq {
	return v.value
}

func (v *NullableDfsS3BucketUpdateReq) Set(val *DfsS3BucketUpdateReq) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsS3BucketUpdateReq) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsS3BucketUpdateReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsS3BucketUpdateReq(val *DfsS3BucketUpdateReq) *NullableDfsS3BucketUpdateReq {
	return &NullableDfsS3BucketUpdateReq{value: val, isSet: true}
}

func (v NullableDfsS3BucketUpdateReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsS3BucketUpdateReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


