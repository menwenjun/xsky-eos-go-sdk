/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FSActiveDirectoryUpdateReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FSActiveDirectoryUpdateReq{}

// FSActiveDirectoryUpdateReq struct for FSActiveDirectoryUpdateReq
type FSActiveDirectoryUpdateReq struct {
	FsActiveDirectory FSActiveDirectoryUpdateReqInfo `json:"fs_active_directory"`
}

type _FSActiveDirectoryUpdateReq FSActiveDirectoryUpdateReq

// NewFSActiveDirectoryUpdateReq instantiates a new FSActiveDirectoryUpdateReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFSActiveDirectoryUpdateReq(fsActiveDirectory FSActiveDirectoryUpdateReqInfo) *FSActiveDirectoryUpdateReq {
	this := FSActiveDirectoryUpdateReq{}
	this.FsActiveDirectory = fsActiveDirectory
	return &this
}

// NewFSActiveDirectoryUpdateReqWithDefaults instantiates a new FSActiveDirectoryUpdateReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFSActiveDirectoryUpdateReqWithDefaults() *FSActiveDirectoryUpdateReq {
	this := FSActiveDirectoryUpdateReq{}
	return &this
}

// GetFsActiveDirectory returns the FsActiveDirectory field value
func (o *FSActiveDirectoryUpdateReq) GetFsActiveDirectory() FSActiveDirectoryUpdateReqInfo {
	if o == nil {
		var ret FSActiveDirectoryUpdateReqInfo
		return ret
	}

	return o.FsActiveDirectory
}

// GetFsActiveDirectoryOk returns a tuple with the FsActiveDirectory field value
// and a boolean to check if the value has been set.
func (o *FSActiveDirectoryUpdateReq) GetFsActiveDirectoryOk() (*FSActiveDirectoryUpdateReqInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FsActiveDirectory, true
}

// SetFsActiveDirectory sets field value
func (o *FSActiveDirectoryUpdateReq) SetFsActiveDirectory(v FSActiveDirectoryUpdateReqInfo) {
	o.FsActiveDirectory = v
}

func (o FSActiveDirectoryUpdateReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FSActiveDirectoryUpdateReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fs_active_directory"] = o.FsActiveDirectory
	return toSerialize, nil
}

func (o *FSActiveDirectoryUpdateReq) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fs_active_directory",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFSActiveDirectoryUpdateReq := _FSActiveDirectoryUpdateReq{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFSActiveDirectoryUpdateReq)

	if err != nil {
		return err
	}

	*o = FSActiveDirectoryUpdateReq(varFSActiveDirectoryUpdateReq)

	return err
}

type NullableFSActiveDirectoryUpdateReq struct {
	value *FSActiveDirectoryUpdateReq
	isSet bool
}

func (v NullableFSActiveDirectoryUpdateReq) Get() *FSActiveDirectoryUpdateReq {
	return v.value
}

func (v *NullableFSActiveDirectoryUpdateReq) Set(val *FSActiveDirectoryUpdateReq) {
	v.value = val
	v.isSet = true
}

func (v NullableFSActiveDirectoryUpdateReq) IsSet() bool {
	return v.isSet
}

func (v *NullableFSActiveDirectoryUpdateReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFSActiveDirectoryUpdateReq(val *FSActiveDirectoryUpdateReq) *NullableFSActiveDirectoryUpdateReq {
	return &NullableFSActiveDirectoryUpdateReq{value: val, isSet: true}
}

func (v NullableFSActiveDirectoryUpdateReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFSActiveDirectoryUpdateReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


