/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// BlockVolumeGroupsAPIService BlockVolumeGroupsAPI service
type BlockVolumeGroupsAPIService service

type ApiCreateBlockVolumeGroupRequest struct {
	ctx context.Context
	ApiService *BlockVolumeGroupsAPIService
	body *VolumeGroupCreateReq
	clusterId *string
}

// volume group info
func (r ApiCreateBlockVolumeGroupRequest) Body(body VolumeGroupCreateReq) ApiCreateBlockVolumeGroupRequest {
	r.body = &body
	return r
}

// cluster id
func (r ApiCreateBlockVolumeGroupRequest) ClusterId(clusterId string) ApiCreateBlockVolumeGroupRequest {
	r.clusterId = &clusterId
	return r
}

func (r ApiCreateBlockVolumeGroupRequest) Execute() (*VolumeGroupResp, *http.Response, error) {
	return r.ApiService.CreateBlockVolumeGroupExecute(r)
}

/*
CreateBlockVolumeGroup Method for CreateBlockVolumeGroup

Create block volume group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateBlockVolumeGroupRequest
*/
func (a *BlockVolumeGroupsAPIService) CreateBlockVolumeGroup(ctx context.Context) ApiCreateBlockVolumeGroupRequest {
	return ApiCreateBlockVolumeGroupRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return VolumeGroupResp
func (a *BlockVolumeGroupsAPIService) CreateBlockVolumeGroupExecute(r ApiCreateBlockVolumeGroupRequest) (*VolumeGroupResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VolumeGroupResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockVolumeGroupsAPIService.CreateBlockVolumeGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/block-volume-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.clusterId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_id", r.clusterId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteBlockVolumeGroupRequest struct {
	ctx context.Context
	ApiService *BlockVolumeGroupsAPIService
	blockVolumeGroupId int64
}

func (r ApiDeleteBlockVolumeGroupRequest) Execute() (*VolumeGroupResp, *http.Response, error) {
	return r.ApiService.DeleteBlockVolumeGroupExecute(r)
}

/*
DeleteBlockVolumeGroup Method for DeleteBlockVolumeGroup

Delete a block volume group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param blockVolumeGroupId block volume group id
 @return ApiDeleteBlockVolumeGroupRequest
*/
func (a *BlockVolumeGroupsAPIService) DeleteBlockVolumeGroup(ctx context.Context, blockVolumeGroupId int64) ApiDeleteBlockVolumeGroupRequest {
	return ApiDeleteBlockVolumeGroupRequest{
		ApiService: a,
		ctx: ctx,
		blockVolumeGroupId: blockVolumeGroupId,
	}
}

// Execute executes the request
//  @return VolumeGroupResp
func (a *BlockVolumeGroupsAPIService) DeleteBlockVolumeGroupExecute(r ApiDeleteBlockVolumeGroupRequest) (*VolumeGroupResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VolumeGroupResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockVolumeGroupsAPIService.DeleteBlockVolumeGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/block-volume-groups/{block_volume_group_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"block_volume_group_id"+"}", url.PathEscape(parameterValueToString(r.blockVolumeGroupId, "blockVolumeGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetBlockVolumeGroupRequest struct {
	ctx context.Context
	ApiService *BlockVolumeGroupsAPIService
	blockVolumeGroupId int64
}

func (r ApiGetBlockVolumeGroupRequest) Execute() (*VolumeGroupResp, *http.Response, error) {
	return r.ApiService.GetBlockVolumeGroupExecute(r)
}

/*
GetBlockVolumeGroup Method for GetBlockVolumeGroup

get a block volume group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param blockVolumeGroupId block volume group id
 @return ApiGetBlockVolumeGroupRequest
*/
func (a *BlockVolumeGroupsAPIService) GetBlockVolumeGroup(ctx context.Context, blockVolumeGroupId int64) ApiGetBlockVolumeGroupRequest {
	return ApiGetBlockVolumeGroupRequest{
		ApiService: a,
		ctx: ctx,
		blockVolumeGroupId: blockVolumeGroupId,
	}
}

// Execute executes the request
//  @return VolumeGroupResp
func (a *BlockVolumeGroupsAPIService) GetBlockVolumeGroupExecute(r ApiGetBlockVolumeGroupRequest) (*VolumeGroupResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VolumeGroupResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockVolumeGroupsAPIService.GetBlockVolumeGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/block-volume-groups/{block_volume_group_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"block_volume_group_id"+"}", url.PathEscape(parameterValueToString(r.blockVolumeGroupId, "blockVolumeGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListBlockVolumeGroupsRequest struct {
	ctx context.Context
	ApiService *BlockVolumeGroupsAPIService
	clusterId *string
	passive *bool
	name *string
	limit *int64
	offset *int64
	q *string
	sort *string
	dpVolumeGroupSnapshotReplicationPolicyId *int64
}

// cluster id
func (r ApiListBlockVolumeGroupsRequest) ClusterId(clusterId string) ApiListBlockVolumeGroupsRequest {
	r.clusterId = &clusterId
	return r
}

// passive or not
func (r ApiListBlockVolumeGroupsRequest) Passive(passive bool) ApiListBlockVolumeGroupsRequest {
	r.passive = &passive
	return r
}

// name of volume group
func (r ApiListBlockVolumeGroupsRequest) Name(name string) ApiListBlockVolumeGroupsRequest {
	r.name = &name
	return r
}

// paging param
func (r ApiListBlockVolumeGroupsRequest) Limit(limit int64) ApiListBlockVolumeGroupsRequest {
	r.limit = &limit
	return r
}

// paging param
func (r ApiListBlockVolumeGroupsRequest) Offset(offset int64) ApiListBlockVolumeGroupsRequest {
	r.offset = &offset
	return r
}

// query param of search
func (r ApiListBlockVolumeGroupsRequest) Q(q string) ApiListBlockVolumeGroupsRequest {
	r.q = &q
	return r
}

// sort param of search
func (r ApiListBlockVolumeGroupsRequest) Sort(sort string) ApiListBlockVolumeGroupsRequest {
	r.sort = &sort
	return r
}

// show volume groups of specific dp block async replication policy
func (r ApiListBlockVolumeGroupsRequest) DpVolumeGroupSnapshotReplicationPolicyId(dpVolumeGroupSnapshotReplicationPolicyId int64) ApiListBlockVolumeGroupsRequest {
	r.dpVolumeGroupSnapshotReplicationPolicyId = &dpVolumeGroupSnapshotReplicationPolicyId
	return r
}

func (r ApiListBlockVolumeGroupsRequest) Execute() (*VolumeGroupsResp, *http.Response, error) {
	return r.ApiService.ListBlockVolumeGroupsExecute(r)
}

/*
ListBlockVolumeGroups Method for ListBlockVolumeGroups

List block volume groups

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListBlockVolumeGroupsRequest
*/
func (a *BlockVolumeGroupsAPIService) ListBlockVolumeGroups(ctx context.Context) ApiListBlockVolumeGroupsRequest {
	return ApiListBlockVolumeGroupsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return VolumeGroupsResp
func (a *BlockVolumeGroupsAPIService) ListBlockVolumeGroupsExecute(r ApiListBlockVolumeGroupsRequest) (*VolumeGroupsResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VolumeGroupsResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockVolumeGroupsAPIService.ListBlockVolumeGroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/block-volume-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.clusterId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_id", r.clusterId, "form", "")
	}
	if r.passive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "passive", r.passive, "form", "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.dpVolumeGroupSnapshotReplicationPolicyId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dp_volume_group_snapshot_replication_policy_id", r.dpVolumeGroupSnapshotReplicationPolicyId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRollbackVolumeGroupRequest struct {
	ctx context.Context
	ApiService *BlockVolumeGroupsAPIService
	blockVolumeGroupId int64
	body *VolumeGroupRollbackReq
}

// rollback info
func (r ApiRollbackVolumeGroupRequest) Body(body VolumeGroupRollbackReq) ApiRollbackVolumeGroupRequest {
	r.body = &body
	return r
}

func (r ApiRollbackVolumeGroupRequest) Execute() (*VolumeGroupResp, *http.Response, error) {
	return r.ApiService.RollbackVolumeGroupExecute(r)
}

/*
RollbackVolumeGroup Method for RollbackVolumeGroup

Rollback volume group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param blockVolumeGroupId block volume group id
 @return ApiRollbackVolumeGroupRequest
*/
func (a *BlockVolumeGroupsAPIService) RollbackVolumeGroup(ctx context.Context, blockVolumeGroupId int64) ApiRollbackVolumeGroupRequest {
	return ApiRollbackVolumeGroupRequest{
		ApiService: a,
		ctx: ctx,
		blockVolumeGroupId: blockVolumeGroupId,
	}
}

// Execute executes the request
//  @return VolumeGroupResp
func (a *BlockVolumeGroupsAPIService) RollbackVolumeGroupExecute(r ApiRollbackVolumeGroupRequest) (*VolumeGroupResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VolumeGroupResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockVolumeGroupsAPIService.RollbackVolumeGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/block-volume-groups/{block_volume_group_id}:rollback"
	localVarPath = strings.Replace(localVarPath, "{"+"block_volume_group_id"+"}", url.PathEscape(parameterValueToString(r.blockVolumeGroupId, "blockVolumeGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSetVolumeGroupSnapshotReplicationProtectionRequest struct {
	ctx context.Context
	ApiService *BlockVolumeGroupsAPIService
	blockVolumeGroupId int64
	body *VolumeGroupSnapshotReplicationProtectionReq
}

// request info
func (r ApiSetVolumeGroupSnapshotReplicationProtectionRequest) Body(body VolumeGroupSnapshotReplicationProtectionReq) ApiSetVolumeGroupSnapshotReplicationProtectionRequest {
	r.body = &body
	return r
}

func (r ApiSetVolumeGroupSnapshotReplicationProtectionRequest) Execute() (*VolumeGroupResp, *http.Response, error) {
	return r.ApiService.SetVolumeGroupSnapshotReplicationProtectionExecute(r)
}

/*
SetVolumeGroupSnapshotReplicationProtection Method for SetVolumeGroupSnapshotReplicationProtection

Set snapshot replication protection for a volume group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param blockVolumeGroupId the block volume group id
 @return ApiSetVolumeGroupSnapshotReplicationProtectionRequest
*/
func (a *BlockVolumeGroupsAPIService) SetVolumeGroupSnapshotReplicationProtection(ctx context.Context, blockVolumeGroupId int64) ApiSetVolumeGroupSnapshotReplicationProtectionRequest {
	return ApiSetVolumeGroupSnapshotReplicationProtectionRequest{
		ApiService: a,
		ctx: ctx,
		blockVolumeGroupId: blockVolumeGroupId,
	}
}

// Execute executes the request
//  @return VolumeGroupResp
func (a *BlockVolumeGroupsAPIService) SetVolumeGroupSnapshotReplicationProtectionExecute(r ApiSetVolumeGroupSnapshotReplicationProtectionRequest) (*VolumeGroupResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VolumeGroupResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockVolumeGroupsAPIService.SetVolumeGroupSnapshotReplicationProtection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/block-volume-groups/{block_volume_group_id}:set-snapshot-replication-protection"
	localVarPath = strings.Replace(localVarPath, "{"+"block_volume_group_id"+"}", url.PathEscape(parameterValueToString(r.blockVolumeGroupId, "blockVolumeGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUnsetVolumeGroupSnapshotReplicationProtectionRequest struct {
	ctx context.Context
	ApiService *BlockVolumeGroupsAPIService
	blockVolumeGroupId int64
	force *bool
	reserveVolumeGroup *bool
}

// force unset or not
func (r ApiUnsetVolumeGroupSnapshotReplicationProtectionRequest) Force(force bool) ApiUnsetVolumeGroupSnapshotReplicationProtectionRequest {
	r.force = &force
	return r
}

// reserve replicated volume group or not
func (r ApiUnsetVolumeGroupSnapshotReplicationProtectionRequest) ReserveVolumeGroup(reserveVolumeGroup bool) ApiUnsetVolumeGroupSnapshotReplicationProtectionRequest {
	r.reserveVolumeGroup = &reserveVolumeGroup
	return r
}

func (r ApiUnsetVolumeGroupSnapshotReplicationProtectionRequest) Execute() (*VolumeGroupResp, *http.Response, error) {
	return r.ApiService.UnsetVolumeGroupSnapshotReplicationProtectionExecute(r)
}

/*
UnsetVolumeGroupSnapshotReplicationProtection Method for UnsetVolumeGroupSnapshotReplicationProtection

Unset volume group snapshot replication protection for a volume group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param blockVolumeGroupId the volume group id
 @return ApiUnsetVolumeGroupSnapshotReplicationProtectionRequest
*/
func (a *BlockVolumeGroupsAPIService) UnsetVolumeGroupSnapshotReplicationProtection(ctx context.Context, blockVolumeGroupId int64) ApiUnsetVolumeGroupSnapshotReplicationProtectionRequest {
	return ApiUnsetVolumeGroupSnapshotReplicationProtectionRequest{
		ApiService: a,
		ctx: ctx,
		blockVolumeGroupId: blockVolumeGroupId,
	}
}

// Execute executes the request
//  @return VolumeGroupResp
func (a *BlockVolumeGroupsAPIService) UnsetVolumeGroupSnapshotReplicationProtectionExecute(r ApiUnsetVolumeGroupSnapshotReplicationProtectionRequest) (*VolumeGroupResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VolumeGroupResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockVolumeGroupsAPIService.UnsetVolumeGroupSnapshotReplicationProtection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/block-volume-groups/{block_volume_group_id}:unset-snapshot-replication-protection"
	localVarPath = strings.Replace(localVarPath, "{"+"block_volume_group_id"+"}", url.PathEscape(parameterValueToString(r.blockVolumeGroupId, "blockVolumeGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.force != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "force", r.force, "form", "")
	}
	if r.reserveVolumeGroup != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reserve_volume_group", r.reserveVolumeGroup, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateBlockVolumeGroupRequest struct {
	ctx context.Context
	ApiService *BlockVolumeGroupsAPIService
	blockVolumeGroupId int64
	body *VolumeGroupUpdateReq
}

// volume group info
func (r ApiUpdateBlockVolumeGroupRequest) Body(body VolumeGroupUpdateReq) ApiUpdateBlockVolumeGroupRequest {
	r.body = &body
	return r
}

func (r ApiUpdateBlockVolumeGroupRequest) Execute() (*VolumeGroupResp, *http.Response, error) {
	return r.ApiService.UpdateBlockVolumeGroupExecute(r)
}

/*
UpdateBlockVolumeGroup Method for UpdateBlockVolumeGroup

Update block volume group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param blockVolumeGroupId block volume group id
 @return ApiUpdateBlockVolumeGroupRequest
*/
func (a *BlockVolumeGroupsAPIService) UpdateBlockVolumeGroup(ctx context.Context, blockVolumeGroupId int64) ApiUpdateBlockVolumeGroupRequest {
	return ApiUpdateBlockVolumeGroupRequest{
		ApiService: a,
		ctx: ctx,
		blockVolumeGroupId: blockVolumeGroupId,
	}
}

// Execute executes the request
//  @return VolumeGroupResp
func (a *BlockVolumeGroupsAPIService) UpdateBlockVolumeGroupExecute(r ApiUpdateBlockVolumeGroupRequest) (*VolumeGroupResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VolumeGroupResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockVolumeGroupsAPIService.UpdateBlockVolumeGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/block-volume-groups/{block_volume_group_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"block_volume_group_id"+"}", url.PathEscape(parameterValueToString(r.blockVolumeGroupId, "blockVolumeGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
