/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the NetworkAddressResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkAddressResp{}

// NetworkAddressResp struct for NetworkAddressResp
type NetworkAddressResp struct {
	NetworkAddress *NetworkAddress `json:"network_address,omitempty"`
}

// NewNetworkAddressResp instantiates a new NetworkAddressResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkAddressResp() *NetworkAddressResp {
	this := NetworkAddressResp{}
	return &this
}

// NewNetworkAddressRespWithDefaults instantiates a new NetworkAddressResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkAddressRespWithDefaults() *NetworkAddressResp {
	this := NetworkAddressResp{}
	return &this
}

// GetNetworkAddress returns the NetworkAddress field value if set, zero value otherwise.
func (o *NetworkAddressResp) GetNetworkAddress() NetworkAddress {
	if o == nil || IsNil(o.NetworkAddress) {
		var ret NetworkAddress
		return ret
	}
	return *o.NetworkAddress
}

// GetNetworkAddressOk returns a tuple with the NetworkAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkAddressResp) GetNetworkAddressOk() (*NetworkAddress, bool) {
	if o == nil || IsNil(o.NetworkAddress) {
		return nil, false
	}
	return o.NetworkAddress, true
}

// HasNetworkAddress returns a boolean if a field has been set.
func (o *NetworkAddressResp) HasNetworkAddress() bool {
	if o != nil && !IsNil(o.NetworkAddress) {
		return true
	}

	return false
}

// SetNetworkAddress gets a reference to the given NetworkAddress and assigns it to the NetworkAddress field.
func (o *NetworkAddressResp) SetNetworkAddress(v NetworkAddress) {
	o.NetworkAddress = &v
}

func (o NetworkAddressResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkAddressResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NetworkAddress) {
		toSerialize["network_address"] = o.NetworkAddress
	}
	return toSerialize, nil
}

type NullableNetworkAddressResp struct {
	value *NetworkAddressResp
	isSet bool
}

func (v NullableNetworkAddressResp) Get() *NetworkAddressResp {
	return v.value
}

func (v *NullableNetworkAddressResp) Set(val *NetworkAddressResp) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkAddressResp) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkAddressResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkAddressResp(val *NetworkAddressResp) *NullableNetworkAddressResp {
	return &NullableNetworkAddressResp{value: val, isSet: true}
}

func (v NullableNetworkAddressResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkAddressResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


