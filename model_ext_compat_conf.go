/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ExtCompatConf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExtCompatConf{}

// ExtCompatConf ExtCompatConf defines compat config for external interface +X:model:generate;
type ExtCompatConf struct {
	// script or fake data content
	Data *string `json:"data,omitempty"`
	ExtName *string `json:"ext_name,omitempty"`
	FuncName *string `json:"func_name,omitempty"`
	// 0 for all hosts
	HostId *int64 `json:"host_id,omitempty"`
	Policy *string `json:"policy,omitempty"`
}

// NewExtCompatConf instantiates a new ExtCompatConf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtCompatConf() *ExtCompatConf {
	this := ExtCompatConf{}
	return &this
}

// NewExtCompatConfWithDefaults instantiates a new ExtCompatConf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtCompatConfWithDefaults() *ExtCompatConf {
	this := ExtCompatConf{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ExtCompatConf) GetData() string {
	if o == nil || IsNil(o.Data) {
		var ret string
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtCompatConf) GetDataOk() (*string, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ExtCompatConf) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given string and assigns it to the Data field.
func (o *ExtCompatConf) SetData(v string) {
	o.Data = &v
}

// GetExtName returns the ExtName field value if set, zero value otherwise.
func (o *ExtCompatConf) GetExtName() string {
	if o == nil || IsNil(o.ExtName) {
		var ret string
		return ret
	}
	return *o.ExtName
}

// GetExtNameOk returns a tuple with the ExtName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtCompatConf) GetExtNameOk() (*string, bool) {
	if o == nil || IsNil(o.ExtName) {
		return nil, false
	}
	return o.ExtName, true
}

// HasExtName returns a boolean if a field has been set.
func (o *ExtCompatConf) HasExtName() bool {
	if o != nil && !IsNil(o.ExtName) {
		return true
	}

	return false
}

// SetExtName gets a reference to the given string and assigns it to the ExtName field.
func (o *ExtCompatConf) SetExtName(v string) {
	o.ExtName = &v
}

// GetFuncName returns the FuncName field value if set, zero value otherwise.
func (o *ExtCompatConf) GetFuncName() string {
	if o == nil || IsNil(o.FuncName) {
		var ret string
		return ret
	}
	return *o.FuncName
}

// GetFuncNameOk returns a tuple with the FuncName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtCompatConf) GetFuncNameOk() (*string, bool) {
	if o == nil || IsNil(o.FuncName) {
		return nil, false
	}
	return o.FuncName, true
}

// HasFuncName returns a boolean if a field has been set.
func (o *ExtCompatConf) HasFuncName() bool {
	if o != nil && !IsNil(o.FuncName) {
		return true
	}

	return false
}

// SetFuncName gets a reference to the given string and assigns it to the FuncName field.
func (o *ExtCompatConf) SetFuncName(v string) {
	o.FuncName = &v
}

// GetHostId returns the HostId field value if set, zero value otherwise.
func (o *ExtCompatConf) GetHostId() int64 {
	if o == nil || IsNil(o.HostId) {
		var ret int64
		return ret
	}
	return *o.HostId
}

// GetHostIdOk returns a tuple with the HostId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtCompatConf) GetHostIdOk() (*int64, bool) {
	if o == nil || IsNil(o.HostId) {
		return nil, false
	}
	return o.HostId, true
}

// HasHostId returns a boolean if a field has been set.
func (o *ExtCompatConf) HasHostId() bool {
	if o != nil && !IsNil(o.HostId) {
		return true
	}

	return false
}

// SetHostId gets a reference to the given int64 and assigns it to the HostId field.
func (o *ExtCompatConf) SetHostId(v int64) {
	o.HostId = &v
}

// GetPolicy returns the Policy field value if set, zero value otherwise.
func (o *ExtCompatConf) GetPolicy() string {
	if o == nil || IsNil(o.Policy) {
		var ret string
		return ret
	}
	return *o.Policy
}

// GetPolicyOk returns a tuple with the Policy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtCompatConf) GetPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.Policy) {
		return nil, false
	}
	return o.Policy, true
}

// HasPolicy returns a boolean if a field has been set.
func (o *ExtCompatConf) HasPolicy() bool {
	if o != nil && !IsNil(o.Policy) {
		return true
	}

	return false
}

// SetPolicy gets a reference to the given string and assigns it to the Policy field.
func (o *ExtCompatConf) SetPolicy(v string) {
	o.Policy = &v
}

func (o ExtCompatConf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExtCompatConf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.ExtName) {
		toSerialize["ext_name"] = o.ExtName
	}
	if !IsNil(o.FuncName) {
		toSerialize["func_name"] = o.FuncName
	}
	if !IsNil(o.HostId) {
		toSerialize["host_id"] = o.HostId
	}
	if !IsNil(o.Policy) {
		toSerialize["policy"] = o.Policy
	}
	return toSerialize, nil
}

type NullableExtCompatConf struct {
	value *ExtCompatConf
	isSet bool
}

func (v NullableExtCompatConf) Get() *ExtCompatConf {
	return v.value
}

func (v *NullableExtCompatConf) Set(val *ExtCompatConf) {
	v.value = val
	v.isSet = true
}

func (v NullableExtCompatConf) IsSet() bool {
	return v.isSet
}

func (v *NullableExtCompatConf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtCompatConf(val *ExtCompatConf) *NullableExtCompatConf {
	return &NullableExtCompatConf{value: val, isSet: true}
}

func (v NullableExtCompatConf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtCompatConf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


