/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DfsHdfsProxyUserReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsHdfsProxyUserReq{}

// DfsHdfsProxyUserReq struct for DfsHdfsProxyUserReq
type DfsHdfsProxyUserReq struct {
	// host node that allows access to hdfs through proxy
	Host *string `json:"host,omitempty"`
	// proxy user name of hdfs
	ProxyUserName *string `json:"proxy_user_name,omitempty"`
	// users allowed to proxy
	User *string `json:"user,omitempty"`
	// users group allowed to proxy
	UserGroup *string `json:"user_group,omitempty"`
}

// NewDfsHdfsProxyUserReq instantiates a new DfsHdfsProxyUserReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsHdfsProxyUserReq() *DfsHdfsProxyUserReq {
	this := DfsHdfsProxyUserReq{}
	return &this
}

// NewDfsHdfsProxyUserReqWithDefaults instantiates a new DfsHdfsProxyUserReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsHdfsProxyUserReqWithDefaults() *DfsHdfsProxyUserReq {
	this := DfsHdfsProxyUserReq{}
	return &this
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *DfsHdfsProxyUserReq) GetHost() string {
	if o == nil || IsNil(o.Host) {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsHdfsProxyUserReq) GetHostOk() (*string, bool) {
	if o == nil || IsNil(o.Host) {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *DfsHdfsProxyUserReq) HasHost() bool {
	if o != nil && !IsNil(o.Host) {
		return true
	}

	return false
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *DfsHdfsProxyUserReq) SetHost(v string) {
	o.Host = &v
}

// GetProxyUserName returns the ProxyUserName field value if set, zero value otherwise.
func (o *DfsHdfsProxyUserReq) GetProxyUserName() string {
	if o == nil || IsNil(o.ProxyUserName) {
		var ret string
		return ret
	}
	return *o.ProxyUserName
}

// GetProxyUserNameOk returns a tuple with the ProxyUserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsHdfsProxyUserReq) GetProxyUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.ProxyUserName) {
		return nil, false
	}
	return o.ProxyUserName, true
}

// HasProxyUserName returns a boolean if a field has been set.
func (o *DfsHdfsProxyUserReq) HasProxyUserName() bool {
	if o != nil && !IsNil(o.ProxyUserName) {
		return true
	}

	return false
}

// SetProxyUserName gets a reference to the given string and assigns it to the ProxyUserName field.
func (o *DfsHdfsProxyUserReq) SetProxyUserName(v string) {
	o.ProxyUserName = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *DfsHdfsProxyUserReq) GetUser() string {
	if o == nil || IsNil(o.User) {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsHdfsProxyUserReq) GetUserOk() (*string, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *DfsHdfsProxyUserReq) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *DfsHdfsProxyUserReq) SetUser(v string) {
	o.User = &v
}

// GetUserGroup returns the UserGroup field value if set, zero value otherwise.
func (o *DfsHdfsProxyUserReq) GetUserGroup() string {
	if o == nil || IsNil(o.UserGroup) {
		var ret string
		return ret
	}
	return *o.UserGroup
}

// GetUserGroupOk returns a tuple with the UserGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsHdfsProxyUserReq) GetUserGroupOk() (*string, bool) {
	if o == nil || IsNil(o.UserGroup) {
		return nil, false
	}
	return o.UserGroup, true
}

// HasUserGroup returns a boolean if a field has been set.
func (o *DfsHdfsProxyUserReq) HasUserGroup() bool {
	if o != nil && !IsNil(o.UserGroup) {
		return true
	}

	return false
}

// SetUserGroup gets a reference to the given string and assigns it to the UserGroup field.
func (o *DfsHdfsProxyUserReq) SetUserGroup(v string) {
	o.UserGroup = &v
}

func (o DfsHdfsProxyUserReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsHdfsProxyUserReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Host) {
		toSerialize["host"] = o.Host
	}
	if !IsNil(o.ProxyUserName) {
		toSerialize["proxy_user_name"] = o.ProxyUserName
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.UserGroup) {
		toSerialize["user_group"] = o.UserGroup
	}
	return toSerialize, nil
}

type NullableDfsHdfsProxyUserReq struct {
	value *DfsHdfsProxyUserReq
	isSet bool
}

func (v NullableDfsHdfsProxyUserReq) Get() *DfsHdfsProxyUserReq {
	return v.value
}

func (v *NullableDfsHdfsProxyUserReq) Set(val *DfsHdfsProxyUserReq) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsHdfsProxyUserReq) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsHdfsProxyUserReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsHdfsProxyUserReq(val *DfsHdfsProxyUserReq) *NullableDfsHdfsProxyUserReq {
	return &NullableDfsHdfsProxyUserReq{value: val, isSet: true}
}

func (v NullableDfsHdfsProxyUserReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsHdfsProxyUserReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


