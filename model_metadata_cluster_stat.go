/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the MetadataClusterStat type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetadataClusterStat{}

// MetadataClusterStat MetadataClusterStat defines the basic info of a metadata cluster
type MetadataClusterStat struct {
	AvailableDataKbyte *int64 `json:"available_data_kbyte,omitempty"`
	Create *time.Time `json:"create,omitempty"`
	DeleteLatencyUs *float64 `json:"delete_latency_us,omitempty"`
	DeleteOps *float64 `json:"delete_ops,omitempty"`
	GcDataKbyte *int64 `json:"gc_data_kbyte,omitempty"`
	ListLatencyUs *float64 `json:"list_latency_us,omitempty"`
	ListOps *float64 `json:"list_ops,omitempty"`
	NumAvailableInodes *int64 `json:"num_available_inodes,omitempty"`
	NumGcInodes *int64 `json:"num_gc_inodes,omitempty"`
	NumInodes *int64 `json:"num_inodes,omitempty"`
	NumUsedInodes *int64 `json:"num_used_inodes,omitempty"`
	ReadLatencyUs *float64 `json:"read_latency_us,omitempty"`
	// primary metadata service stat
	ReadOps *float64 `json:"read_ops,omitempty"`
	// data kbyte used by user, different from UsedDataKbyte
	RecordedDataKbyte *int64 `json:"recorded_data_kbyte,omitempty"`
	RecoveryDone *int64 `json:"recovery_done,omitempty"`
	RecoveryLeftSecond *float64 `json:"recovery_left_second,omitempty"`
	RecoveryOps *float64 `json:"recovery_ops,omitempty"`
	RecoveryTotal *int64 `json:"recovery_total,omitempty"`
	TotalDataKbyte *int64 `json:"total_data_kbyte,omitempty"`
	TotalKbyte *int64 `json:"total_kbyte,omitempty"`
	TrashFiles *int64 `json:"trash_files,omitempty"`
	TrashKbyte *int64 `json:"trash_kbyte,omitempty"`
	UsedDataKbyte *int64 `json:"used_data_kbyte,omitempty"`
	UsedKbyte *int64 `json:"used_kbyte,omitempty"`
	WriteLatencyUs *float64 `json:"write_latency_us,omitempty"`
	WriteOps *float64 `json:"write_ops,omitempty"`
}

// NewMetadataClusterStat instantiates a new MetadataClusterStat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetadataClusterStat() *MetadataClusterStat {
	this := MetadataClusterStat{}
	return &this
}

// NewMetadataClusterStatWithDefaults instantiates a new MetadataClusterStat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetadataClusterStatWithDefaults() *MetadataClusterStat {
	this := MetadataClusterStat{}
	return &this
}

// GetAvailableDataKbyte returns the AvailableDataKbyte field value if set, zero value otherwise.
func (o *MetadataClusterStat) GetAvailableDataKbyte() int64 {
	if o == nil || IsNil(o.AvailableDataKbyte) {
		var ret int64
		return ret
	}
	return *o.AvailableDataKbyte
}

// GetAvailableDataKbyteOk returns a tuple with the AvailableDataKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataClusterStat) GetAvailableDataKbyteOk() (*int64, bool) {
	if o == nil || IsNil(o.AvailableDataKbyte) {
		return nil, false
	}
	return o.AvailableDataKbyte, true
}

// HasAvailableDataKbyte returns a boolean if a field has been set.
func (o *MetadataClusterStat) HasAvailableDataKbyte() bool {
	if o != nil && !IsNil(o.AvailableDataKbyte) {
		return true
	}

	return false
}

// SetAvailableDataKbyte gets a reference to the given int64 and assigns it to the AvailableDataKbyte field.
func (o *MetadataClusterStat) SetAvailableDataKbyte(v int64) {
	o.AvailableDataKbyte = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *MetadataClusterStat) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataClusterStat) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *MetadataClusterStat) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *MetadataClusterStat) SetCreate(v time.Time) {
	o.Create = &v
}

// GetDeleteLatencyUs returns the DeleteLatencyUs field value if set, zero value otherwise.
func (o *MetadataClusterStat) GetDeleteLatencyUs() float64 {
	if o == nil || IsNil(o.DeleteLatencyUs) {
		var ret float64
		return ret
	}
	return *o.DeleteLatencyUs
}

// GetDeleteLatencyUsOk returns a tuple with the DeleteLatencyUs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataClusterStat) GetDeleteLatencyUsOk() (*float64, bool) {
	if o == nil || IsNil(o.DeleteLatencyUs) {
		return nil, false
	}
	return o.DeleteLatencyUs, true
}

// HasDeleteLatencyUs returns a boolean if a field has been set.
func (o *MetadataClusterStat) HasDeleteLatencyUs() bool {
	if o != nil && !IsNil(o.DeleteLatencyUs) {
		return true
	}

	return false
}

// SetDeleteLatencyUs gets a reference to the given float64 and assigns it to the DeleteLatencyUs field.
func (o *MetadataClusterStat) SetDeleteLatencyUs(v float64) {
	o.DeleteLatencyUs = &v
}

// GetDeleteOps returns the DeleteOps field value if set, zero value otherwise.
func (o *MetadataClusterStat) GetDeleteOps() float64 {
	if o == nil || IsNil(o.DeleteOps) {
		var ret float64
		return ret
	}
	return *o.DeleteOps
}

// GetDeleteOpsOk returns a tuple with the DeleteOps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataClusterStat) GetDeleteOpsOk() (*float64, bool) {
	if o == nil || IsNil(o.DeleteOps) {
		return nil, false
	}
	return o.DeleteOps, true
}

// HasDeleteOps returns a boolean if a field has been set.
func (o *MetadataClusterStat) HasDeleteOps() bool {
	if o != nil && !IsNil(o.DeleteOps) {
		return true
	}

	return false
}

// SetDeleteOps gets a reference to the given float64 and assigns it to the DeleteOps field.
func (o *MetadataClusterStat) SetDeleteOps(v float64) {
	o.DeleteOps = &v
}

// GetGcDataKbyte returns the GcDataKbyte field value if set, zero value otherwise.
func (o *MetadataClusterStat) GetGcDataKbyte() int64 {
	if o == nil || IsNil(o.GcDataKbyte) {
		var ret int64
		return ret
	}
	return *o.GcDataKbyte
}

// GetGcDataKbyteOk returns a tuple with the GcDataKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataClusterStat) GetGcDataKbyteOk() (*int64, bool) {
	if o == nil || IsNil(o.GcDataKbyte) {
		return nil, false
	}
	return o.GcDataKbyte, true
}

// HasGcDataKbyte returns a boolean if a field has been set.
func (o *MetadataClusterStat) HasGcDataKbyte() bool {
	if o != nil && !IsNil(o.GcDataKbyte) {
		return true
	}

	return false
}

// SetGcDataKbyte gets a reference to the given int64 and assigns it to the GcDataKbyte field.
func (o *MetadataClusterStat) SetGcDataKbyte(v int64) {
	o.GcDataKbyte = &v
}

// GetListLatencyUs returns the ListLatencyUs field value if set, zero value otherwise.
func (o *MetadataClusterStat) GetListLatencyUs() float64 {
	if o == nil || IsNil(o.ListLatencyUs) {
		var ret float64
		return ret
	}
	return *o.ListLatencyUs
}

// GetListLatencyUsOk returns a tuple with the ListLatencyUs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataClusterStat) GetListLatencyUsOk() (*float64, bool) {
	if o == nil || IsNil(o.ListLatencyUs) {
		return nil, false
	}
	return o.ListLatencyUs, true
}

// HasListLatencyUs returns a boolean if a field has been set.
func (o *MetadataClusterStat) HasListLatencyUs() bool {
	if o != nil && !IsNil(o.ListLatencyUs) {
		return true
	}

	return false
}

// SetListLatencyUs gets a reference to the given float64 and assigns it to the ListLatencyUs field.
func (o *MetadataClusterStat) SetListLatencyUs(v float64) {
	o.ListLatencyUs = &v
}

// GetListOps returns the ListOps field value if set, zero value otherwise.
func (o *MetadataClusterStat) GetListOps() float64 {
	if o == nil || IsNil(o.ListOps) {
		var ret float64
		return ret
	}
	return *o.ListOps
}

// GetListOpsOk returns a tuple with the ListOps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataClusterStat) GetListOpsOk() (*float64, bool) {
	if o == nil || IsNil(o.ListOps) {
		return nil, false
	}
	return o.ListOps, true
}

// HasListOps returns a boolean if a field has been set.
func (o *MetadataClusterStat) HasListOps() bool {
	if o != nil && !IsNil(o.ListOps) {
		return true
	}

	return false
}

// SetListOps gets a reference to the given float64 and assigns it to the ListOps field.
func (o *MetadataClusterStat) SetListOps(v float64) {
	o.ListOps = &v
}

// GetNumAvailableInodes returns the NumAvailableInodes field value if set, zero value otherwise.
func (o *MetadataClusterStat) GetNumAvailableInodes() int64 {
	if o == nil || IsNil(o.NumAvailableInodes) {
		var ret int64
		return ret
	}
	return *o.NumAvailableInodes
}

// GetNumAvailableInodesOk returns a tuple with the NumAvailableInodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataClusterStat) GetNumAvailableInodesOk() (*int64, bool) {
	if o == nil || IsNil(o.NumAvailableInodes) {
		return nil, false
	}
	return o.NumAvailableInodes, true
}

// HasNumAvailableInodes returns a boolean if a field has been set.
func (o *MetadataClusterStat) HasNumAvailableInodes() bool {
	if o != nil && !IsNil(o.NumAvailableInodes) {
		return true
	}

	return false
}

// SetNumAvailableInodes gets a reference to the given int64 and assigns it to the NumAvailableInodes field.
func (o *MetadataClusterStat) SetNumAvailableInodes(v int64) {
	o.NumAvailableInodes = &v
}

// GetNumGcInodes returns the NumGcInodes field value if set, zero value otherwise.
func (o *MetadataClusterStat) GetNumGcInodes() int64 {
	if o == nil || IsNil(o.NumGcInodes) {
		var ret int64
		return ret
	}
	return *o.NumGcInodes
}

// GetNumGcInodesOk returns a tuple with the NumGcInodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataClusterStat) GetNumGcInodesOk() (*int64, bool) {
	if o == nil || IsNil(o.NumGcInodes) {
		return nil, false
	}
	return o.NumGcInodes, true
}

// HasNumGcInodes returns a boolean if a field has been set.
func (o *MetadataClusterStat) HasNumGcInodes() bool {
	if o != nil && !IsNil(o.NumGcInodes) {
		return true
	}

	return false
}

// SetNumGcInodes gets a reference to the given int64 and assigns it to the NumGcInodes field.
func (o *MetadataClusterStat) SetNumGcInodes(v int64) {
	o.NumGcInodes = &v
}

// GetNumInodes returns the NumInodes field value if set, zero value otherwise.
func (o *MetadataClusterStat) GetNumInodes() int64 {
	if o == nil || IsNil(o.NumInodes) {
		var ret int64
		return ret
	}
	return *o.NumInodes
}

// GetNumInodesOk returns a tuple with the NumInodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataClusterStat) GetNumInodesOk() (*int64, bool) {
	if o == nil || IsNil(o.NumInodes) {
		return nil, false
	}
	return o.NumInodes, true
}

// HasNumInodes returns a boolean if a field has been set.
func (o *MetadataClusterStat) HasNumInodes() bool {
	if o != nil && !IsNil(o.NumInodes) {
		return true
	}

	return false
}

// SetNumInodes gets a reference to the given int64 and assigns it to the NumInodes field.
func (o *MetadataClusterStat) SetNumInodes(v int64) {
	o.NumInodes = &v
}

// GetNumUsedInodes returns the NumUsedInodes field value if set, zero value otherwise.
func (o *MetadataClusterStat) GetNumUsedInodes() int64 {
	if o == nil || IsNil(o.NumUsedInodes) {
		var ret int64
		return ret
	}
	return *o.NumUsedInodes
}

// GetNumUsedInodesOk returns a tuple with the NumUsedInodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataClusterStat) GetNumUsedInodesOk() (*int64, bool) {
	if o == nil || IsNil(o.NumUsedInodes) {
		return nil, false
	}
	return o.NumUsedInodes, true
}

// HasNumUsedInodes returns a boolean if a field has been set.
func (o *MetadataClusterStat) HasNumUsedInodes() bool {
	if o != nil && !IsNil(o.NumUsedInodes) {
		return true
	}

	return false
}

// SetNumUsedInodes gets a reference to the given int64 and assigns it to the NumUsedInodes field.
func (o *MetadataClusterStat) SetNumUsedInodes(v int64) {
	o.NumUsedInodes = &v
}

// GetReadLatencyUs returns the ReadLatencyUs field value if set, zero value otherwise.
func (o *MetadataClusterStat) GetReadLatencyUs() float64 {
	if o == nil || IsNil(o.ReadLatencyUs) {
		var ret float64
		return ret
	}
	return *o.ReadLatencyUs
}

// GetReadLatencyUsOk returns a tuple with the ReadLatencyUs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataClusterStat) GetReadLatencyUsOk() (*float64, bool) {
	if o == nil || IsNil(o.ReadLatencyUs) {
		return nil, false
	}
	return o.ReadLatencyUs, true
}

// HasReadLatencyUs returns a boolean if a field has been set.
func (o *MetadataClusterStat) HasReadLatencyUs() bool {
	if o != nil && !IsNil(o.ReadLatencyUs) {
		return true
	}

	return false
}

// SetReadLatencyUs gets a reference to the given float64 and assigns it to the ReadLatencyUs field.
func (o *MetadataClusterStat) SetReadLatencyUs(v float64) {
	o.ReadLatencyUs = &v
}

// GetReadOps returns the ReadOps field value if set, zero value otherwise.
func (o *MetadataClusterStat) GetReadOps() float64 {
	if o == nil || IsNil(o.ReadOps) {
		var ret float64
		return ret
	}
	return *o.ReadOps
}

// GetReadOpsOk returns a tuple with the ReadOps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataClusterStat) GetReadOpsOk() (*float64, bool) {
	if o == nil || IsNil(o.ReadOps) {
		return nil, false
	}
	return o.ReadOps, true
}

// HasReadOps returns a boolean if a field has been set.
func (o *MetadataClusterStat) HasReadOps() bool {
	if o != nil && !IsNil(o.ReadOps) {
		return true
	}

	return false
}

// SetReadOps gets a reference to the given float64 and assigns it to the ReadOps field.
func (o *MetadataClusterStat) SetReadOps(v float64) {
	o.ReadOps = &v
}

// GetRecordedDataKbyte returns the RecordedDataKbyte field value if set, zero value otherwise.
func (o *MetadataClusterStat) GetRecordedDataKbyte() int64 {
	if o == nil || IsNil(o.RecordedDataKbyte) {
		var ret int64
		return ret
	}
	return *o.RecordedDataKbyte
}

// GetRecordedDataKbyteOk returns a tuple with the RecordedDataKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataClusterStat) GetRecordedDataKbyteOk() (*int64, bool) {
	if o == nil || IsNil(o.RecordedDataKbyte) {
		return nil, false
	}
	return o.RecordedDataKbyte, true
}

// HasRecordedDataKbyte returns a boolean if a field has been set.
func (o *MetadataClusterStat) HasRecordedDataKbyte() bool {
	if o != nil && !IsNil(o.RecordedDataKbyte) {
		return true
	}

	return false
}

// SetRecordedDataKbyte gets a reference to the given int64 and assigns it to the RecordedDataKbyte field.
func (o *MetadataClusterStat) SetRecordedDataKbyte(v int64) {
	o.RecordedDataKbyte = &v
}

// GetRecoveryDone returns the RecoveryDone field value if set, zero value otherwise.
func (o *MetadataClusterStat) GetRecoveryDone() int64 {
	if o == nil || IsNil(o.RecoveryDone) {
		var ret int64
		return ret
	}
	return *o.RecoveryDone
}

// GetRecoveryDoneOk returns a tuple with the RecoveryDone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataClusterStat) GetRecoveryDoneOk() (*int64, bool) {
	if o == nil || IsNil(o.RecoveryDone) {
		return nil, false
	}
	return o.RecoveryDone, true
}

// HasRecoveryDone returns a boolean if a field has been set.
func (o *MetadataClusterStat) HasRecoveryDone() bool {
	if o != nil && !IsNil(o.RecoveryDone) {
		return true
	}

	return false
}

// SetRecoveryDone gets a reference to the given int64 and assigns it to the RecoveryDone field.
func (o *MetadataClusterStat) SetRecoveryDone(v int64) {
	o.RecoveryDone = &v
}

// GetRecoveryLeftSecond returns the RecoveryLeftSecond field value if set, zero value otherwise.
func (o *MetadataClusterStat) GetRecoveryLeftSecond() float64 {
	if o == nil || IsNil(o.RecoveryLeftSecond) {
		var ret float64
		return ret
	}
	return *o.RecoveryLeftSecond
}

// GetRecoveryLeftSecondOk returns a tuple with the RecoveryLeftSecond field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataClusterStat) GetRecoveryLeftSecondOk() (*float64, bool) {
	if o == nil || IsNil(o.RecoveryLeftSecond) {
		return nil, false
	}
	return o.RecoveryLeftSecond, true
}

// HasRecoveryLeftSecond returns a boolean if a field has been set.
func (o *MetadataClusterStat) HasRecoveryLeftSecond() bool {
	if o != nil && !IsNil(o.RecoveryLeftSecond) {
		return true
	}

	return false
}

// SetRecoveryLeftSecond gets a reference to the given float64 and assigns it to the RecoveryLeftSecond field.
func (o *MetadataClusterStat) SetRecoveryLeftSecond(v float64) {
	o.RecoveryLeftSecond = &v
}

// GetRecoveryOps returns the RecoveryOps field value if set, zero value otherwise.
func (o *MetadataClusterStat) GetRecoveryOps() float64 {
	if o == nil || IsNil(o.RecoveryOps) {
		var ret float64
		return ret
	}
	return *o.RecoveryOps
}

// GetRecoveryOpsOk returns a tuple with the RecoveryOps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataClusterStat) GetRecoveryOpsOk() (*float64, bool) {
	if o == nil || IsNil(o.RecoveryOps) {
		return nil, false
	}
	return o.RecoveryOps, true
}

// HasRecoveryOps returns a boolean if a field has been set.
func (o *MetadataClusterStat) HasRecoveryOps() bool {
	if o != nil && !IsNil(o.RecoveryOps) {
		return true
	}

	return false
}

// SetRecoveryOps gets a reference to the given float64 and assigns it to the RecoveryOps field.
func (o *MetadataClusterStat) SetRecoveryOps(v float64) {
	o.RecoveryOps = &v
}

// GetRecoveryTotal returns the RecoveryTotal field value if set, zero value otherwise.
func (o *MetadataClusterStat) GetRecoveryTotal() int64 {
	if o == nil || IsNil(o.RecoveryTotal) {
		var ret int64
		return ret
	}
	return *o.RecoveryTotal
}

// GetRecoveryTotalOk returns a tuple with the RecoveryTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataClusterStat) GetRecoveryTotalOk() (*int64, bool) {
	if o == nil || IsNil(o.RecoveryTotal) {
		return nil, false
	}
	return o.RecoveryTotal, true
}

// HasRecoveryTotal returns a boolean if a field has been set.
func (o *MetadataClusterStat) HasRecoveryTotal() bool {
	if o != nil && !IsNil(o.RecoveryTotal) {
		return true
	}

	return false
}

// SetRecoveryTotal gets a reference to the given int64 and assigns it to the RecoveryTotal field.
func (o *MetadataClusterStat) SetRecoveryTotal(v int64) {
	o.RecoveryTotal = &v
}

// GetTotalDataKbyte returns the TotalDataKbyte field value if set, zero value otherwise.
func (o *MetadataClusterStat) GetTotalDataKbyte() int64 {
	if o == nil || IsNil(o.TotalDataKbyte) {
		var ret int64
		return ret
	}
	return *o.TotalDataKbyte
}

// GetTotalDataKbyteOk returns a tuple with the TotalDataKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataClusterStat) GetTotalDataKbyteOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalDataKbyte) {
		return nil, false
	}
	return o.TotalDataKbyte, true
}

// HasTotalDataKbyte returns a boolean if a field has been set.
func (o *MetadataClusterStat) HasTotalDataKbyte() bool {
	if o != nil && !IsNil(o.TotalDataKbyte) {
		return true
	}

	return false
}

// SetTotalDataKbyte gets a reference to the given int64 and assigns it to the TotalDataKbyte field.
func (o *MetadataClusterStat) SetTotalDataKbyte(v int64) {
	o.TotalDataKbyte = &v
}

// GetTotalKbyte returns the TotalKbyte field value if set, zero value otherwise.
func (o *MetadataClusterStat) GetTotalKbyte() int64 {
	if o == nil || IsNil(o.TotalKbyte) {
		var ret int64
		return ret
	}
	return *o.TotalKbyte
}

// GetTotalKbyteOk returns a tuple with the TotalKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataClusterStat) GetTotalKbyteOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalKbyte) {
		return nil, false
	}
	return o.TotalKbyte, true
}

// HasTotalKbyte returns a boolean if a field has been set.
func (o *MetadataClusterStat) HasTotalKbyte() bool {
	if o != nil && !IsNil(o.TotalKbyte) {
		return true
	}

	return false
}

// SetTotalKbyte gets a reference to the given int64 and assigns it to the TotalKbyte field.
func (o *MetadataClusterStat) SetTotalKbyte(v int64) {
	o.TotalKbyte = &v
}

// GetTrashFiles returns the TrashFiles field value if set, zero value otherwise.
func (o *MetadataClusterStat) GetTrashFiles() int64 {
	if o == nil || IsNil(o.TrashFiles) {
		var ret int64
		return ret
	}
	return *o.TrashFiles
}

// GetTrashFilesOk returns a tuple with the TrashFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataClusterStat) GetTrashFilesOk() (*int64, bool) {
	if o == nil || IsNil(o.TrashFiles) {
		return nil, false
	}
	return o.TrashFiles, true
}

// HasTrashFiles returns a boolean if a field has been set.
func (o *MetadataClusterStat) HasTrashFiles() bool {
	if o != nil && !IsNil(o.TrashFiles) {
		return true
	}

	return false
}

// SetTrashFiles gets a reference to the given int64 and assigns it to the TrashFiles field.
func (o *MetadataClusterStat) SetTrashFiles(v int64) {
	o.TrashFiles = &v
}

// GetTrashKbyte returns the TrashKbyte field value if set, zero value otherwise.
func (o *MetadataClusterStat) GetTrashKbyte() int64 {
	if o == nil || IsNil(o.TrashKbyte) {
		var ret int64
		return ret
	}
	return *o.TrashKbyte
}

// GetTrashKbyteOk returns a tuple with the TrashKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataClusterStat) GetTrashKbyteOk() (*int64, bool) {
	if o == nil || IsNil(o.TrashKbyte) {
		return nil, false
	}
	return o.TrashKbyte, true
}

// HasTrashKbyte returns a boolean if a field has been set.
func (o *MetadataClusterStat) HasTrashKbyte() bool {
	if o != nil && !IsNil(o.TrashKbyte) {
		return true
	}

	return false
}

// SetTrashKbyte gets a reference to the given int64 and assigns it to the TrashKbyte field.
func (o *MetadataClusterStat) SetTrashKbyte(v int64) {
	o.TrashKbyte = &v
}

// GetUsedDataKbyte returns the UsedDataKbyte field value if set, zero value otherwise.
func (o *MetadataClusterStat) GetUsedDataKbyte() int64 {
	if o == nil || IsNil(o.UsedDataKbyte) {
		var ret int64
		return ret
	}
	return *o.UsedDataKbyte
}

// GetUsedDataKbyteOk returns a tuple with the UsedDataKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataClusterStat) GetUsedDataKbyteOk() (*int64, bool) {
	if o == nil || IsNil(o.UsedDataKbyte) {
		return nil, false
	}
	return o.UsedDataKbyte, true
}

// HasUsedDataKbyte returns a boolean if a field has been set.
func (o *MetadataClusterStat) HasUsedDataKbyte() bool {
	if o != nil && !IsNil(o.UsedDataKbyte) {
		return true
	}

	return false
}

// SetUsedDataKbyte gets a reference to the given int64 and assigns it to the UsedDataKbyte field.
func (o *MetadataClusterStat) SetUsedDataKbyte(v int64) {
	o.UsedDataKbyte = &v
}

// GetUsedKbyte returns the UsedKbyte field value if set, zero value otherwise.
func (o *MetadataClusterStat) GetUsedKbyte() int64 {
	if o == nil || IsNil(o.UsedKbyte) {
		var ret int64
		return ret
	}
	return *o.UsedKbyte
}

// GetUsedKbyteOk returns a tuple with the UsedKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataClusterStat) GetUsedKbyteOk() (*int64, bool) {
	if o == nil || IsNil(o.UsedKbyte) {
		return nil, false
	}
	return o.UsedKbyte, true
}

// HasUsedKbyte returns a boolean if a field has been set.
func (o *MetadataClusterStat) HasUsedKbyte() bool {
	if o != nil && !IsNil(o.UsedKbyte) {
		return true
	}

	return false
}

// SetUsedKbyte gets a reference to the given int64 and assigns it to the UsedKbyte field.
func (o *MetadataClusterStat) SetUsedKbyte(v int64) {
	o.UsedKbyte = &v
}

// GetWriteLatencyUs returns the WriteLatencyUs field value if set, zero value otherwise.
func (o *MetadataClusterStat) GetWriteLatencyUs() float64 {
	if o == nil || IsNil(o.WriteLatencyUs) {
		var ret float64
		return ret
	}
	return *o.WriteLatencyUs
}

// GetWriteLatencyUsOk returns a tuple with the WriteLatencyUs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataClusterStat) GetWriteLatencyUsOk() (*float64, bool) {
	if o == nil || IsNil(o.WriteLatencyUs) {
		return nil, false
	}
	return o.WriteLatencyUs, true
}

// HasWriteLatencyUs returns a boolean if a field has been set.
func (o *MetadataClusterStat) HasWriteLatencyUs() bool {
	if o != nil && !IsNil(o.WriteLatencyUs) {
		return true
	}

	return false
}

// SetWriteLatencyUs gets a reference to the given float64 and assigns it to the WriteLatencyUs field.
func (o *MetadataClusterStat) SetWriteLatencyUs(v float64) {
	o.WriteLatencyUs = &v
}

// GetWriteOps returns the WriteOps field value if set, zero value otherwise.
func (o *MetadataClusterStat) GetWriteOps() float64 {
	if o == nil || IsNil(o.WriteOps) {
		var ret float64
		return ret
	}
	return *o.WriteOps
}

// GetWriteOpsOk returns a tuple with the WriteOps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataClusterStat) GetWriteOpsOk() (*float64, bool) {
	if o == nil || IsNil(o.WriteOps) {
		return nil, false
	}
	return o.WriteOps, true
}

// HasWriteOps returns a boolean if a field has been set.
func (o *MetadataClusterStat) HasWriteOps() bool {
	if o != nil && !IsNil(o.WriteOps) {
		return true
	}

	return false
}

// SetWriteOps gets a reference to the given float64 and assigns it to the WriteOps field.
func (o *MetadataClusterStat) SetWriteOps(v float64) {
	o.WriteOps = &v
}

func (o MetadataClusterStat) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetadataClusterStat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AvailableDataKbyte) {
		toSerialize["available_data_kbyte"] = o.AvailableDataKbyte
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.DeleteLatencyUs) {
		toSerialize["delete_latency_us"] = o.DeleteLatencyUs
	}
	if !IsNil(o.DeleteOps) {
		toSerialize["delete_ops"] = o.DeleteOps
	}
	if !IsNil(o.GcDataKbyte) {
		toSerialize["gc_data_kbyte"] = o.GcDataKbyte
	}
	if !IsNil(o.ListLatencyUs) {
		toSerialize["list_latency_us"] = o.ListLatencyUs
	}
	if !IsNil(o.ListOps) {
		toSerialize["list_ops"] = o.ListOps
	}
	if !IsNil(o.NumAvailableInodes) {
		toSerialize["num_available_inodes"] = o.NumAvailableInodes
	}
	if !IsNil(o.NumGcInodes) {
		toSerialize["num_gc_inodes"] = o.NumGcInodes
	}
	if !IsNil(o.NumInodes) {
		toSerialize["num_inodes"] = o.NumInodes
	}
	if !IsNil(o.NumUsedInodes) {
		toSerialize["num_used_inodes"] = o.NumUsedInodes
	}
	if !IsNil(o.ReadLatencyUs) {
		toSerialize["read_latency_us"] = o.ReadLatencyUs
	}
	if !IsNil(o.ReadOps) {
		toSerialize["read_ops"] = o.ReadOps
	}
	if !IsNil(o.RecordedDataKbyte) {
		toSerialize["recorded_data_kbyte"] = o.RecordedDataKbyte
	}
	if !IsNil(o.RecoveryDone) {
		toSerialize["recovery_done"] = o.RecoveryDone
	}
	if !IsNil(o.RecoveryLeftSecond) {
		toSerialize["recovery_left_second"] = o.RecoveryLeftSecond
	}
	if !IsNil(o.RecoveryOps) {
		toSerialize["recovery_ops"] = o.RecoveryOps
	}
	if !IsNil(o.RecoveryTotal) {
		toSerialize["recovery_total"] = o.RecoveryTotal
	}
	if !IsNil(o.TotalDataKbyte) {
		toSerialize["total_data_kbyte"] = o.TotalDataKbyte
	}
	if !IsNil(o.TotalKbyte) {
		toSerialize["total_kbyte"] = o.TotalKbyte
	}
	if !IsNil(o.TrashFiles) {
		toSerialize["trash_files"] = o.TrashFiles
	}
	if !IsNil(o.TrashKbyte) {
		toSerialize["trash_kbyte"] = o.TrashKbyte
	}
	if !IsNil(o.UsedDataKbyte) {
		toSerialize["used_data_kbyte"] = o.UsedDataKbyte
	}
	if !IsNil(o.UsedKbyte) {
		toSerialize["used_kbyte"] = o.UsedKbyte
	}
	if !IsNil(o.WriteLatencyUs) {
		toSerialize["write_latency_us"] = o.WriteLatencyUs
	}
	if !IsNil(o.WriteOps) {
		toSerialize["write_ops"] = o.WriteOps
	}
	return toSerialize, nil
}

type NullableMetadataClusterStat struct {
	value *MetadataClusterStat
	isSet bool
}

func (v NullableMetadataClusterStat) Get() *MetadataClusterStat {
	return v.value
}

func (v *NullableMetadataClusterStat) Set(val *MetadataClusterStat) {
	v.value = val
	v.isSet = true
}

func (v NullableMetadataClusterStat) IsSet() bool {
	return v.isSet
}

func (v *NullableMetadataClusterStat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetadataClusterStat(val *MetadataClusterStat) *NullableMetadataClusterStat {
	return &NullableMetadataClusterStat{value: val, isSet: true}
}

func (v NullableMetadataClusterStat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetadataClusterStat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


