/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VolumeCrcSetReqVolume type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VolumeCrcSetReqVolume{}

// VolumeCrcSetReqVolume struct for VolumeCrcSetReqVolume
type VolumeCrcSetReqVolume struct {
	CrcCheck bool `json:"crc_check"`
}

type _VolumeCrcSetReqVolume VolumeCrcSetReqVolume

// NewVolumeCrcSetReqVolume instantiates a new VolumeCrcSetReqVolume object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumeCrcSetReqVolume(crcCheck bool) *VolumeCrcSetReqVolume {
	this := VolumeCrcSetReqVolume{}
	this.CrcCheck = crcCheck
	return &this
}

// NewVolumeCrcSetReqVolumeWithDefaults instantiates a new VolumeCrcSetReqVolume object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeCrcSetReqVolumeWithDefaults() *VolumeCrcSetReqVolume {
	this := VolumeCrcSetReqVolume{}
	return &this
}

// GetCrcCheck returns the CrcCheck field value
func (o *VolumeCrcSetReqVolume) GetCrcCheck() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.CrcCheck
}

// GetCrcCheckOk returns a tuple with the CrcCheck field value
// and a boolean to check if the value has been set.
func (o *VolumeCrcSetReqVolume) GetCrcCheckOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CrcCheck, true
}

// SetCrcCheck sets field value
func (o *VolumeCrcSetReqVolume) SetCrcCheck(v bool) {
	o.CrcCheck = v
}

func (o VolumeCrcSetReqVolume) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VolumeCrcSetReqVolume) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["crc_check"] = o.CrcCheck
	return toSerialize, nil
}

func (o *VolumeCrcSetReqVolume) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"crc_check",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVolumeCrcSetReqVolume := _VolumeCrcSetReqVolume{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVolumeCrcSetReqVolume)

	if err != nil {
		return err
	}

	*o = VolumeCrcSetReqVolume(varVolumeCrcSetReqVolume)

	return err
}

type NullableVolumeCrcSetReqVolume struct {
	value *VolumeCrcSetReqVolume
	isSet bool
}

func (v NullableVolumeCrcSetReqVolume) Get() *VolumeCrcSetReqVolume {
	return v.value
}

func (v *NullableVolumeCrcSetReqVolume) Set(val *VolumeCrcSetReqVolume) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeCrcSetReqVolume) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeCrcSetReqVolume) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeCrcSetReqVolume(val *VolumeCrcSetReqVolume) *NullableVolumeCrcSetReqVolume {
	return &NullableVolumeCrcSetReqVolume{value: val, isSet: true}
}

func (v NullableVolumeCrcSetReqVolume) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeCrcSetReqVolume) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


