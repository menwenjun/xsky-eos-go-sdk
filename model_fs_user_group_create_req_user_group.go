/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FSUserGroupCreateReqUserGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FSUserGroupCreateReqUserGroup{}

// FSUserGroupCreateReqUserGroup struct for FSUserGroupCreateReqUserGroup
type FSUserGroupCreateReqUserGroup struct {
	// description of user group
	Description *string `json:"description,omitempty"`
	// ids of users, which are required when type is smb or ftp
	FsUserIds []int64 `json:"fs_user_ids,omitempty"`
	// gid of user group
	GroupId *int64 `json:"group_id,omitempty"`
	// name of user group
	Name string `json:"name"`
}

type _FSUserGroupCreateReqUserGroup FSUserGroupCreateReqUserGroup

// NewFSUserGroupCreateReqUserGroup instantiates a new FSUserGroupCreateReqUserGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFSUserGroupCreateReqUserGroup(name string) *FSUserGroupCreateReqUserGroup {
	this := FSUserGroupCreateReqUserGroup{}
	this.Name = name
	return &this
}

// NewFSUserGroupCreateReqUserGroupWithDefaults instantiates a new FSUserGroupCreateReqUserGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFSUserGroupCreateReqUserGroupWithDefaults() *FSUserGroupCreateReqUserGroup {
	this := FSUserGroupCreateReqUserGroup{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *FSUserGroupCreateReqUserGroup) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSUserGroupCreateReqUserGroup) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *FSUserGroupCreateReqUserGroup) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *FSUserGroupCreateReqUserGroup) SetDescription(v string) {
	o.Description = &v
}

// GetFsUserIds returns the FsUserIds field value if set, zero value otherwise.
func (o *FSUserGroupCreateReqUserGroup) GetFsUserIds() []int64 {
	if o == nil || IsNil(o.FsUserIds) {
		var ret []int64
		return ret
	}
	return o.FsUserIds
}

// GetFsUserIdsOk returns a tuple with the FsUserIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSUserGroupCreateReqUserGroup) GetFsUserIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.FsUserIds) {
		return nil, false
	}
	return o.FsUserIds, true
}

// HasFsUserIds returns a boolean if a field has been set.
func (o *FSUserGroupCreateReqUserGroup) HasFsUserIds() bool {
	if o != nil && !IsNil(o.FsUserIds) {
		return true
	}

	return false
}

// SetFsUserIds gets a reference to the given []int64 and assigns it to the FsUserIds field.
func (o *FSUserGroupCreateReqUserGroup) SetFsUserIds(v []int64) {
	o.FsUserIds = v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *FSUserGroupCreateReqUserGroup) GetGroupId() int64 {
	if o == nil || IsNil(o.GroupId) {
		var ret int64
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSUserGroupCreateReqUserGroup) GetGroupIdOk() (*int64, bool) {
	if o == nil || IsNil(o.GroupId) {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *FSUserGroupCreateReqUserGroup) HasGroupId() bool {
	if o != nil && !IsNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given int64 and assigns it to the GroupId field.
func (o *FSUserGroupCreateReqUserGroup) SetGroupId(v int64) {
	o.GroupId = &v
}

// GetName returns the Name field value
func (o *FSUserGroupCreateReqUserGroup) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FSUserGroupCreateReqUserGroup) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FSUserGroupCreateReqUserGroup) SetName(v string) {
	o.Name = v
}

func (o FSUserGroupCreateReqUserGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FSUserGroupCreateReqUserGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.FsUserIds) {
		toSerialize["fs_user_ids"] = o.FsUserIds
	}
	if !IsNil(o.GroupId) {
		toSerialize["group_id"] = o.GroupId
	}
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

func (o *FSUserGroupCreateReqUserGroup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFSUserGroupCreateReqUserGroup := _FSUserGroupCreateReqUserGroup{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFSUserGroupCreateReqUserGroup)

	if err != nil {
		return err
	}

	*o = FSUserGroupCreateReqUserGroup(varFSUserGroupCreateReqUserGroup)

	return err
}

type NullableFSUserGroupCreateReqUserGroup struct {
	value *FSUserGroupCreateReqUserGroup
	isSet bool
}

func (v NullableFSUserGroupCreateReqUserGroup) Get() *FSUserGroupCreateReqUserGroup {
	return v.value
}

func (v *NullableFSUserGroupCreateReqUserGroup) Set(val *FSUserGroupCreateReqUserGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableFSUserGroupCreateReqUserGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableFSUserGroupCreateReqUserGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFSUserGroupCreateReqUserGroup(val *FSUserGroupCreateReqUserGroup) *NullableFSUserGroupCreateReqUserGroup {
	return &NullableFSUserGroupCreateReqUserGroup{value: val, isSet: true}
}

func (v NullableFSUserGroupCreateReqUserGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFSUserGroupCreateReqUserGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


