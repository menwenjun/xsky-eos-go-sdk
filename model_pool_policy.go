/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PoolPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PoolPolicy{}

// PoolPolicy struct for PoolPolicy
type PoolPolicy struct {
	// is active pool
	Active *bool `json:"active,omitempty"`
	// judge the source of the add pool
	FromDefault *bool `json:"from_default,omitempty"`
	// pool id
	PoolId *int64 `json:"pool_id,omitempty"`
	// threshold for auto active pool
	Threshold *int64 `json:"threshold,omitempty"`
}

// NewPoolPolicy instantiates a new PoolPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPoolPolicy() *PoolPolicy {
	this := PoolPolicy{}
	return &this
}

// NewPoolPolicyWithDefaults instantiates a new PoolPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPoolPolicyWithDefaults() *PoolPolicy {
	this := PoolPolicy{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *PoolPolicy) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolPolicy) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *PoolPolicy) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *PoolPolicy) SetActive(v bool) {
	o.Active = &v
}

// GetFromDefault returns the FromDefault field value if set, zero value otherwise.
func (o *PoolPolicy) GetFromDefault() bool {
	if o == nil || IsNil(o.FromDefault) {
		var ret bool
		return ret
	}
	return *o.FromDefault
}

// GetFromDefaultOk returns a tuple with the FromDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolPolicy) GetFromDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.FromDefault) {
		return nil, false
	}
	return o.FromDefault, true
}

// HasFromDefault returns a boolean if a field has been set.
func (o *PoolPolicy) HasFromDefault() bool {
	if o != nil && !IsNil(o.FromDefault) {
		return true
	}

	return false
}

// SetFromDefault gets a reference to the given bool and assigns it to the FromDefault field.
func (o *PoolPolicy) SetFromDefault(v bool) {
	o.FromDefault = &v
}

// GetPoolId returns the PoolId field value if set, zero value otherwise.
func (o *PoolPolicy) GetPoolId() int64 {
	if o == nil || IsNil(o.PoolId) {
		var ret int64
		return ret
	}
	return *o.PoolId
}

// GetPoolIdOk returns a tuple with the PoolId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolPolicy) GetPoolIdOk() (*int64, bool) {
	if o == nil || IsNil(o.PoolId) {
		return nil, false
	}
	return o.PoolId, true
}

// HasPoolId returns a boolean if a field has been set.
func (o *PoolPolicy) HasPoolId() bool {
	if o != nil && !IsNil(o.PoolId) {
		return true
	}

	return false
}

// SetPoolId gets a reference to the given int64 and assigns it to the PoolId field.
func (o *PoolPolicy) SetPoolId(v int64) {
	o.PoolId = &v
}

// GetThreshold returns the Threshold field value if set, zero value otherwise.
func (o *PoolPolicy) GetThreshold() int64 {
	if o == nil || IsNil(o.Threshold) {
		var ret int64
		return ret
	}
	return *o.Threshold
}

// GetThresholdOk returns a tuple with the Threshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolPolicy) GetThresholdOk() (*int64, bool) {
	if o == nil || IsNil(o.Threshold) {
		return nil, false
	}
	return o.Threshold, true
}

// HasThreshold returns a boolean if a field has been set.
func (o *PoolPolicy) HasThreshold() bool {
	if o != nil && !IsNil(o.Threshold) {
		return true
	}

	return false
}

// SetThreshold gets a reference to the given int64 and assigns it to the Threshold field.
func (o *PoolPolicy) SetThreshold(v int64) {
	o.Threshold = &v
}

func (o PoolPolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PoolPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.FromDefault) {
		toSerialize["from_default"] = o.FromDefault
	}
	if !IsNil(o.PoolId) {
		toSerialize["pool_id"] = o.PoolId
	}
	if !IsNil(o.Threshold) {
		toSerialize["threshold"] = o.Threshold
	}
	return toSerialize, nil
}

type NullablePoolPolicy struct {
	value *PoolPolicy
	isSet bool
}

func (v NullablePoolPolicy) Get() *PoolPolicy {
	return v.value
}

func (v *NullablePoolPolicy) Set(val *PoolPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullablePoolPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullablePoolPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePoolPolicy(val *PoolPolicy) *NullablePoolPolicy {
	return &NullablePoolPolicy{value: val, isSet: true}
}

func (v NullablePoolPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePoolPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


