/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DfsPathPerformanceCreateReqPathPerformance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsPathPerformanceCreateReqPathPerformance{}

// DfsPathPerformanceCreateReqPathPerformance struct for DfsPathPerformanceCreateReqPathPerformance
type DfsPathPerformanceCreateReqPathPerformance struct {
	// id of dfs rootfs
	DfsRootfsId int64 `json:"dfs_rootfs_id"`
	// path of performance
	Path string `json:"path"`
}

type _DfsPathPerformanceCreateReqPathPerformance DfsPathPerformanceCreateReqPathPerformance

// NewDfsPathPerformanceCreateReqPathPerformance instantiates a new DfsPathPerformanceCreateReqPathPerformance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsPathPerformanceCreateReqPathPerformance(dfsRootfsId int64, path string) *DfsPathPerformanceCreateReqPathPerformance {
	this := DfsPathPerformanceCreateReqPathPerformance{}
	this.DfsRootfsId = dfsRootfsId
	this.Path = path
	return &this
}

// NewDfsPathPerformanceCreateReqPathPerformanceWithDefaults instantiates a new DfsPathPerformanceCreateReqPathPerformance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsPathPerformanceCreateReqPathPerformanceWithDefaults() *DfsPathPerformanceCreateReqPathPerformance {
	this := DfsPathPerformanceCreateReqPathPerformance{}
	return &this
}

// GetDfsRootfsId returns the DfsRootfsId field value
func (o *DfsPathPerformanceCreateReqPathPerformance) GetDfsRootfsId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DfsRootfsId
}

// GetDfsRootfsIdOk returns a tuple with the DfsRootfsId field value
// and a boolean to check if the value has been set.
func (o *DfsPathPerformanceCreateReqPathPerformance) GetDfsRootfsIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DfsRootfsId, true
}

// SetDfsRootfsId sets field value
func (o *DfsPathPerformanceCreateReqPathPerformance) SetDfsRootfsId(v int64) {
	o.DfsRootfsId = v
}

// GetPath returns the Path field value
func (o *DfsPathPerformanceCreateReqPathPerformance) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *DfsPathPerformanceCreateReqPathPerformance) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *DfsPathPerformanceCreateReqPathPerformance) SetPath(v string) {
	o.Path = v
}

func (o DfsPathPerformanceCreateReqPathPerformance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsPathPerformanceCreateReqPathPerformance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dfs_rootfs_id"] = o.DfsRootfsId
	toSerialize["path"] = o.Path
	return toSerialize, nil
}

func (o *DfsPathPerformanceCreateReqPathPerformance) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dfs_rootfs_id",
		"path",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDfsPathPerformanceCreateReqPathPerformance := _DfsPathPerformanceCreateReqPathPerformance{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDfsPathPerformanceCreateReqPathPerformance)

	if err != nil {
		return err
	}

	*o = DfsPathPerformanceCreateReqPathPerformance(varDfsPathPerformanceCreateReqPathPerformance)

	return err
}

type NullableDfsPathPerformanceCreateReqPathPerformance struct {
	value *DfsPathPerformanceCreateReqPathPerformance
	isSet bool
}

func (v NullableDfsPathPerformanceCreateReqPathPerformance) Get() *DfsPathPerformanceCreateReqPathPerformance {
	return v.value
}

func (v *NullableDfsPathPerformanceCreateReqPathPerformance) Set(val *DfsPathPerformanceCreateReqPathPerformance) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsPathPerformanceCreateReqPathPerformance) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsPathPerformanceCreateReqPathPerformance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsPathPerformanceCreateReqPathPerformance(val *DfsPathPerformanceCreateReqPathPerformance) *NullableDfsPathPerformanceCreateReqPathPerformance {
	return &NullableDfsPathPerformanceCreateReqPathPerformance{value: val, isSet: true}
}

func (v NullableDfsPathPerformanceCreateReqPathPerformance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsPathPerformanceCreateReqPathPerformance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


