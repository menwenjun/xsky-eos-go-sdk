/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DfsHdfsUpdateReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsHdfsUpdateReq{}

// DfsHdfsUpdateReq struct for DfsHdfsUpdateReq
type DfsHdfsUpdateReq struct {
	DfsHdfs *DfsHdfsUpdateReqHdfs `json:"dfs_hdfs,omitempty"`
}

// NewDfsHdfsUpdateReq instantiates a new DfsHdfsUpdateReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsHdfsUpdateReq() *DfsHdfsUpdateReq {
	this := DfsHdfsUpdateReq{}
	return &this
}

// NewDfsHdfsUpdateReqWithDefaults instantiates a new DfsHdfsUpdateReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsHdfsUpdateReqWithDefaults() *DfsHdfsUpdateReq {
	this := DfsHdfsUpdateReq{}
	return &this
}

// GetDfsHdfs returns the DfsHdfs field value if set, zero value otherwise.
func (o *DfsHdfsUpdateReq) GetDfsHdfs() DfsHdfsUpdateReqHdfs {
	if o == nil || IsNil(o.DfsHdfs) {
		var ret DfsHdfsUpdateReqHdfs
		return ret
	}
	return *o.DfsHdfs
}

// GetDfsHdfsOk returns a tuple with the DfsHdfs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsHdfsUpdateReq) GetDfsHdfsOk() (*DfsHdfsUpdateReqHdfs, bool) {
	if o == nil || IsNil(o.DfsHdfs) {
		return nil, false
	}
	return o.DfsHdfs, true
}

// HasDfsHdfs returns a boolean if a field has been set.
func (o *DfsHdfsUpdateReq) HasDfsHdfs() bool {
	if o != nil && !IsNil(o.DfsHdfs) {
		return true
	}

	return false
}

// SetDfsHdfs gets a reference to the given DfsHdfsUpdateReqHdfs and assigns it to the DfsHdfs field.
func (o *DfsHdfsUpdateReq) SetDfsHdfs(v DfsHdfsUpdateReqHdfs) {
	o.DfsHdfs = &v
}

func (o DfsHdfsUpdateReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsHdfsUpdateReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DfsHdfs) {
		toSerialize["dfs_hdfs"] = o.DfsHdfs
	}
	return toSerialize, nil
}

type NullableDfsHdfsUpdateReq struct {
	value *DfsHdfsUpdateReq
	isSet bool
}

func (v NullableDfsHdfsUpdateReq) Get() *DfsHdfsUpdateReq {
	return v.value
}

func (v *NullableDfsHdfsUpdateReq) Set(val *DfsHdfsUpdateReq) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsHdfsUpdateReq) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsHdfsUpdateReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsHdfsUpdateReq(val *DfsHdfsUpdateReq) *NullableDfsHdfsUpdateReq {
	return &NullableDfsHdfsUpdateReq{value: val, isSet: true}
}

func (v NullableDfsHdfsUpdateReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsHdfsUpdateReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


