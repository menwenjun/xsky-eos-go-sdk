/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FSActiveDirectoryUpdateReqInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FSActiveDirectoryUpdateReqInfo{}

// FSActiveDirectoryUpdateReqInfo struct for FSActiveDirectoryUpdateReqInfo
type FSActiveDirectoryUpdateReqInfo struct {
	// ip of dns server
	Ip *string `json:"ip,omitempty"`
	// name of active directory
	Name *string `json:"name,omitempty"`
	// password of active directory
	Password *string `json:"password,omitempty"`
	// realm of active directory
	Realm *string `json:"realm,omitempty"`
	// username of active directory
	Username *string `json:"username,omitempty"`
	// workgroup of active directory
	Workgroup *string `json:"workgroup,omitempty"`
}

// NewFSActiveDirectoryUpdateReqInfo instantiates a new FSActiveDirectoryUpdateReqInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFSActiveDirectoryUpdateReqInfo() *FSActiveDirectoryUpdateReqInfo {
	this := FSActiveDirectoryUpdateReqInfo{}
	return &this
}

// NewFSActiveDirectoryUpdateReqInfoWithDefaults instantiates a new FSActiveDirectoryUpdateReqInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFSActiveDirectoryUpdateReqInfoWithDefaults() *FSActiveDirectoryUpdateReqInfo {
	this := FSActiveDirectoryUpdateReqInfo{}
	return &this
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *FSActiveDirectoryUpdateReqInfo) GetIp() string {
	if o == nil || IsNil(o.Ip) {
		var ret string
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSActiveDirectoryUpdateReqInfo) GetIpOk() (*string, bool) {
	if o == nil || IsNil(o.Ip) {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *FSActiveDirectoryUpdateReqInfo) HasIp() bool {
	if o != nil && !IsNil(o.Ip) {
		return true
	}

	return false
}

// SetIp gets a reference to the given string and assigns it to the Ip field.
func (o *FSActiveDirectoryUpdateReqInfo) SetIp(v string) {
	o.Ip = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FSActiveDirectoryUpdateReqInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSActiveDirectoryUpdateReqInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FSActiveDirectoryUpdateReqInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FSActiveDirectoryUpdateReqInfo) SetName(v string) {
	o.Name = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *FSActiveDirectoryUpdateReqInfo) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSActiveDirectoryUpdateReqInfo) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *FSActiveDirectoryUpdateReqInfo) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *FSActiveDirectoryUpdateReqInfo) SetPassword(v string) {
	o.Password = &v
}

// GetRealm returns the Realm field value if set, zero value otherwise.
func (o *FSActiveDirectoryUpdateReqInfo) GetRealm() string {
	if o == nil || IsNil(o.Realm) {
		var ret string
		return ret
	}
	return *o.Realm
}

// GetRealmOk returns a tuple with the Realm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSActiveDirectoryUpdateReqInfo) GetRealmOk() (*string, bool) {
	if o == nil || IsNil(o.Realm) {
		return nil, false
	}
	return o.Realm, true
}

// HasRealm returns a boolean if a field has been set.
func (o *FSActiveDirectoryUpdateReqInfo) HasRealm() bool {
	if o != nil && !IsNil(o.Realm) {
		return true
	}

	return false
}

// SetRealm gets a reference to the given string and assigns it to the Realm field.
func (o *FSActiveDirectoryUpdateReqInfo) SetRealm(v string) {
	o.Realm = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *FSActiveDirectoryUpdateReqInfo) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSActiveDirectoryUpdateReqInfo) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *FSActiveDirectoryUpdateReqInfo) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *FSActiveDirectoryUpdateReqInfo) SetUsername(v string) {
	o.Username = &v
}

// GetWorkgroup returns the Workgroup field value if set, zero value otherwise.
func (o *FSActiveDirectoryUpdateReqInfo) GetWorkgroup() string {
	if o == nil || IsNil(o.Workgroup) {
		var ret string
		return ret
	}
	return *o.Workgroup
}

// GetWorkgroupOk returns a tuple with the Workgroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSActiveDirectoryUpdateReqInfo) GetWorkgroupOk() (*string, bool) {
	if o == nil || IsNil(o.Workgroup) {
		return nil, false
	}
	return o.Workgroup, true
}

// HasWorkgroup returns a boolean if a field has been set.
func (o *FSActiveDirectoryUpdateReqInfo) HasWorkgroup() bool {
	if o != nil && !IsNil(o.Workgroup) {
		return true
	}

	return false
}

// SetWorkgroup gets a reference to the given string and assigns it to the Workgroup field.
func (o *FSActiveDirectoryUpdateReqInfo) SetWorkgroup(v string) {
	o.Workgroup = &v
}

func (o FSActiveDirectoryUpdateReqInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FSActiveDirectoryUpdateReqInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ip) {
		toSerialize["ip"] = o.Ip
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.Realm) {
		toSerialize["realm"] = o.Realm
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.Workgroup) {
		toSerialize["workgroup"] = o.Workgroup
	}
	return toSerialize, nil
}

type NullableFSActiveDirectoryUpdateReqInfo struct {
	value *FSActiveDirectoryUpdateReqInfo
	isSet bool
}

func (v NullableFSActiveDirectoryUpdateReqInfo) Get() *FSActiveDirectoryUpdateReqInfo {
	return v.value
}

func (v *NullableFSActiveDirectoryUpdateReqInfo) Set(val *FSActiveDirectoryUpdateReqInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableFSActiveDirectoryUpdateReqInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableFSActiveDirectoryUpdateReqInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFSActiveDirectoryUpdateReqInfo(val *FSActiveDirectoryUpdateReqInfo) *NullableFSActiveDirectoryUpdateReqInfo {
	return &NullableFSActiveDirectoryUpdateReqInfo{value: val, isSet: true}
}

func (v NullableFSActiveDirectoryUpdateReqInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFSActiveDirectoryUpdateReqInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


