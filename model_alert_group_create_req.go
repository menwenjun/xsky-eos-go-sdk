/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AlertGroupCreateReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlertGroupCreateReq{}

// AlertGroupCreateReq struct for AlertGroupCreateReq
type AlertGroupCreateReq struct {
	AlertGroup AlertGroupCreateReqAlertGroup `json:"alert_group"`
}

type _AlertGroupCreateReq AlertGroupCreateReq

// NewAlertGroupCreateReq instantiates a new AlertGroupCreateReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertGroupCreateReq(alertGroup AlertGroupCreateReqAlertGroup) *AlertGroupCreateReq {
	this := AlertGroupCreateReq{}
	this.AlertGroup = alertGroup
	return &this
}

// NewAlertGroupCreateReqWithDefaults instantiates a new AlertGroupCreateReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertGroupCreateReqWithDefaults() *AlertGroupCreateReq {
	this := AlertGroupCreateReq{}
	return &this
}

// GetAlertGroup returns the AlertGroup field value
func (o *AlertGroupCreateReq) GetAlertGroup() AlertGroupCreateReqAlertGroup {
	if o == nil {
		var ret AlertGroupCreateReqAlertGroup
		return ret
	}

	return o.AlertGroup
}

// GetAlertGroupOk returns a tuple with the AlertGroup field value
// and a boolean to check if the value has been set.
func (o *AlertGroupCreateReq) GetAlertGroupOk() (*AlertGroupCreateReqAlertGroup, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AlertGroup, true
}

// SetAlertGroup sets field value
func (o *AlertGroupCreateReq) SetAlertGroup(v AlertGroupCreateReqAlertGroup) {
	o.AlertGroup = v
}

func (o AlertGroupCreateReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlertGroupCreateReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["alert_group"] = o.AlertGroup
	return toSerialize, nil
}

func (o *AlertGroupCreateReq) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"alert_group",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAlertGroupCreateReq := _AlertGroupCreateReq{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAlertGroupCreateReq)

	if err != nil {
		return err
	}

	*o = AlertGroupCreateReq(varAlertGroupCreateReq)

	return err
}

type NullableAlertGroupCreateReq struct {
	value *AlertGroupCreateReq
	isSet bool
}

func (v NullableAlertGroupCreateReq) Get() *AlertGroupCreateReq {
	return v.value
}

func (v *NullableAlertGroupCreateReq) Set(val *AlertGroupCreateReq) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertGroupCreateReq) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertGroupCreateReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertGroupCreateReq(val *AlertGroupCreateReq) *NullableAlertGroupCreateReq {
	return &NullableAlertGroupCreateReq{value: val, isSet: true}
}

func (v NullableAlertGroupCreateReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertGroupCreateReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


