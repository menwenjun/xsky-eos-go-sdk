/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the VIPRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VIPRecord{}

// VIPRecord VIPRecord represents doc returned by API.
type VIPRecord struct {
	ActionStatus *string `json:"action_status,omitempty"`
	Create *time.Time `json:"create,omitempty"`
	Id *int64 `json:"id,omitempty"`
	Ip *string `json:"ip,omitempty"`
	MacAddress *string `json:"mac_address,omitempty"`
	Mask *int64 `json:"mask,omitempty"`
	Status *string `json:"status,omitempty"`
	Update *time.Time `json:"update,omitempty"`
	VipGroup *VIPGroupNestview `json:"vip_group,omitempty"`
	VirtualRouterId *int64 `json:"virtual_router_id,omitempty"`
	CurrentVipInstance *VIPInstanceNestview `json:"current_vip_instance,omitempty"`
	DefaultVipInstance *VIPInstanceNestview `json:"default_vip_instance,omitempty"`
}

// NewVIPRecord instantiates a new VIPRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVIPRecord() *VIPRecord {
	this := VIPRecord{}
	return &this
}

// NewVIPRecordWithDefaults instantiates a new VIPRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVIPRecordWithDefaults() *VIPRecord {
	this := VIPRecord{}
	return &this
}

// GetActionStatus returns the ActionStatus field value if set, zero value otherwise.
func (o *VIPRecord) GetActionStatus() string {
	if o == nil || IsNil(o.ActionStatus) {
		var ret string
		return ret
	}
	return *o.ActionStatus
}

// GetActionStatusOk returns a tuple with the ActionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VIPRecord) GetActionStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ActionStatus) {
		return nil, false
	}
	return o.ActionStatus, true
}

// HasActionStatus returns a boolean if a field has been set.
func (o *VIPRecord) HasActionStatus() bool {
	if o != nil && !IsNil(o.ActionStatus) {
		return true
	}

	return false
}

// SetActionStatus gets a reference to the given string and assigns it to the ActionStatus field.
func (o *VIPRecord) SetActionStatus(v string) {
	o.ActionStatus = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *VIPRecord) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VIPRecord) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *VIPRecord) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *VIPRecord) SetCreate(v time.Time) {
	o.Create = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *VIPRecord) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VIPRecord) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *VIPRecord) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *VIPRecord) SetId(v int64) {
	o.Id = &v
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *VIPRecord) GetIp() string {
	if o == nil || IsNil(o.Ip) {
		var ret string
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VIPRecord) GetIpOk() (*string, bool) {
	if o == nil || IsNil(o.Ip) {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *VIPRecord) HasIp() bool {
	if o != nil && !IsNil(o.Ip) {
		return true
	}

	return false
}

// SetIp gets a reference to the given string and assigns it to the Ip field.
func (o *VIPRecord) SetIp(v string) {
	o.Ip = &v
}

// GetMacAddress returns the MacAddress field value if set, zero value otherwise.
func (o *VIPRecord) GetMacAddress() string {
	if o == nil || IsNil(o.MacAddress) {
		var ret string
		return ret
	}
	return *o.MacAddress
}

// GetMacAddressOk returns a tuple with the MacAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VIPRecord) GetMacAddressOk() (*string, bool) {
	if o == nil || IsNil(o.MacAddress) {
		return nil, false
	}
	return o.MacAddress, true
}

// HasMacAddress returns a boolean if a field has been set.
func (o *VIPRecord) HasMacAddress() bool {
	if o != nil && !IsNil(o.MacAddress) {
		return true
	}

	return false
}

// SetMacAddress gets a reference to the given string and assigns it to the MacAddress field.
func (o *VIPRecord) SetMacAddress(v string) {
	o.MacAddress = &v
}

// GetMask returns the Mask field value if set, zero value otherwise.
func (o *VIPRecord) GetMask() int64 {
	if o == nil || IsNil(o.Mask) {
		var ret int64
		return ret
	}
	return *o.Mask
}

// GetMaskOk returns a tuple with the Mask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VIPRecord) GetMaskOk() (*int64, bool) {
	if o == nil || IsNil(o.Mask) {
		return nil, false
	}
	return o.Mask, true
}

// HasMask returns a boolean if a field has been set.
func (o *VIPRecord) HasMask() bool {
	if o != nil && !IsNil(o.Mask) {
		return true
	}

	return false
}

// SetMask gets a reference to the given int64 and assigns it to the Mask field.
func (o *VIPRecord) SetMask(v int64) {
	o.Mask = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *VIPRecord) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VIPRecord) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *VIPRecord) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *VIPRecord) SetStatus(v string) {
	o.Status = &v
}

// GetUpdate returns the Update field value if set, zero value otherwise.
func (o *VIPRecord) GetUpdate() time.Time {
	if o == nil || IsNil(o.Update) {
		var ret time.Time
		return ret
	}
	return *o.Update
}

// GetUpdateOk returns a tuple with the Update field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VIPRecord) GetUpdateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Update) {
		return nil, false
	}
	return o.Update, true
}

// HasUpdate returns a boolean if a field has been set.
func (o *VIPRecord) HasUpdate() bool {
	if o != nil && !IsNil(o.Update) {
		return true
	}

	return false
}

// SetUpdate gets a reference to the given time.Time and assigns it to the Update field.
func (o *VIPRecord) SetUpdate(v time.Time) {
	o.Update = &v
}

// GetVipGroup returns the VipGroup field value if set, zero value otherwise.
func (o *VIPRecord) GetVipGroup() VIPGroupNestview {
	if o == nil || IsNil(o.VipGroup) {
		var ret VIPGroupNestview
		return ret
	}
	return *o.VipGroup
}

// GetVipGroupOk returns a tuple with the VipGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VIPRecord) GetVipGroupOk() (*VIPGroupNestview, bool) {
	if o == nil || IsNil(o.VipGroup) {
		return nil, false
	}
	return o.VipGroup, true
}

// HasVipGroup returns a boolean if a field has been set.
func (o *VIPRecord) HasVipGroup() bool {
	if o != nil && !IsNil(o.VipGroup) {
		return true
	}

	return false
}

// SetVipGroup gets a reference to the given VIPGroupNestview and assigns it to the VipGroup field.
func (o *VIPRecord) SetVipGroup(v VIPGroupNestview) {
	o.VipGroup = &v
}

// GetVirtualRouterId returns the VirtualRouterId field value if set, zero value otherwise.
func (o *VIPRecord) GetVirtualRouterId() int64 {
	if o == nil || IsNil(o.VirtualRouterId) {
		var ret int64
		return ret
	}
	return *o.VirtualRouterId
}

// GetVirtualRouterIdOk returns a tuple with the VirtualRouterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VIPRecord) GetVirtualRouterIdOk() (*int64, bool) {
	if o == nil || IsNil(o.VirtualRouterId) {
		return nil, false
	}
	return o.VirtualRouterId, true
}

// HasVirtualRouterId returns a boolean if a field has been set.
func (o *VIPRecord) HasVirtualRouterId() bool {
	if o != nil && !IsNil(o.VirtualRouterId) {
		return true
	}

	return false
}

// SetVirtualRouterId gets a reference to the given int64 and assigns it to the VirtualRouterId field.
func (o *VIPRecord) SetVirtualRouterId(v int64) {
	o.VirtualRouterId = &v
}

// GetCurrentVipInstance returns the CurrentVipInstance field value if set, zero value otherwise.
func (o *VIPRecord) GetCurrentVipInstance() VIPInstanceNestview {
	if o == nil || IsNil(o.CurrentVipInstance) {
		var ret VIPInstanceNestview
		return ret
	}
	return *o.CurrentVipInstance
}

// GetCurrentVipInstanceOk returns a tuple with the CurrentVipInstance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VIPRecord) GetCurrentVipInstanceOk() (*VIPInstanceNestview, bool) {
	if o == nil || IsNil(o.CurrentVipInstance) {
		return nil, false
	}
	return o.CurrentVipInstance, true
}

// HasCurrentVipInstance returns a boolean if a field has been set.
func (o *VIPRecord) HasCurrentVipInstance() bool {
	if o != nil && !IsNil(o.CurrentVipInstance) {
		return true
	}

	return false
}

// SetCurrentVipInstance gets a reference to the given VIPInstanceNestview and assigns it to the CurrentVipInstance field.
func (o *VIPRecord) SetCurrentVipInstance(v VIPInstanceNestview) {
	o.CurrentVipInstance = &v
}

// GetDefaultVipInstance returns the DefaultVipInstance field value if set, zero value otherwise.
func (o *VIPRecord) GetDefaultVipInstance() VIPInstanceNestview {
	if o == nil || IsNil(o.DefaultVipInstance) {
		var ret VIPInstanceNestview
		return ret
	}
	return *o.DefaultVipInstance
}

// GetDefaultVipInstanceOk returns a tuple with the DefaultVipInstance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VIPRecord) GetDefaultVipInstanceOk() (*VIPInstanceNestview, bool) {
	if o == nil || IsNil(o.DefaultVipInstance) {
		return nil, false
	}
	return o.DefaultVipInstance, true
}

// HasDefaultVipInstance returns a boolean if a field has been set.
func (o *VIPRecord) HasDefaultVipInstance() bool {
	if o != nil && !IsNil(o.DefaultVipInstance) {
		return true
	}

	return false
}

// SetDefaultVipInstance gets a reference to the given VIPInstanceNestview and assigns it to the DefaultVipInstance field.
func (o *VIPRecord) SetDefaultVipInstance(v VIPInstanceNestview) {
	o.DefaultVipInstance = &v
}

func (o VIPRecord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VIPRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActionStatus) {
		toSerialize["action_status"] = o.ActionStatus
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Ip) {
		toSerialize["ip"] = o.Ip
	}
	if !IsNil(o.MacAddress) {
		toSerialize["mac_address"] = o.MacAddress
	}
	if !IsNil(o.Mask) {
		toSerialize["mask"] = o.Mask
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Update) {
		toSerialize["update"] = o.Update
	}
	if !IsNil(o.VipGroup) {
		toSerialize["vip_group"] = o.VipGroup
	}
	if !IsNil(o.VirtualRouterId) {
		toSerialize["virtual_router_id"] = o.VirtualRouterId
	}
	if !IsNil(o.CurrentVipInstance) {
		toSerialize["current_vip_instance"] = o.CurrentVipInstance
	}
	if !IsNil(o.DefaultVipInstance) {
		toSerialize["default_vip_instance"] = o.DefaultVipInstance
	}
	return toSerialize, nil
}

type NullableVIPRecord struct {
	value *VIPRecord
	isSet bool
}

func (v NullableVIPRecord) Get() *VIPRecord {
	return v.value
}

func (v *NullableVIPRecord) Set(val *VIPRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableVIPRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableVIPRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVIPRecord(val *VIPRecord) *NullableVIPRecord {
	return &NullableVIPRecord{value: val, isSet: true}
}

func (v NullableVIPRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVIPRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


