/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ConfItemResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfItemResp{}

// ConfItemResp struct for ConfItemResp
type ConfItemResp struct {
	Conf ConfItem `json:"conf"`
}

type _ConfItemResp ConfItemResp

// NewConfItemResp instantiates a new ConfItemResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfItemResp(conf ConfItem) *ConfItemResp {
	this := ConfItemResp{}
	this.Conf = conf
	return &this
}

// NewConfItemRespWithDefaults instantiates a new ConfItemResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfItemRespWithDefaults() *ConfItemResp {
	this := ConfItemResp{}
	return &this
}

// GetConf returns the Conf field value
func (o *ConfItemResp) GetConf() ConfItem {
	if o == nil {
		var ret ConfItem
		return ret
	}

	return o.Conf
}

// GetConfOk returns a tuple with the Conf field value
// and a boolean to check if the value has been set.
func (o *ConfItemResp) GetConfOk() (*ConfItem, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Conf, true
}

// SetConf sets field value
func (o *ConfItemResp) SetConf(v ConfItem) {
	o.Conf = v
}

func (o ConfItemResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfItemResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["conf"] = o.Conf
	return toSerialize, nil
}

func (o *ConfItemResp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"conf",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConfItemResp := _ConfItemResp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConfItemResp)

	if err != nil {
		return err
	}

	*o = ConfItemResp(varConfItemResp)

	return err
}

type NullableConfItemResp struct {
	value *ConfItemResp
	isSet bool
}

func (v NullableConfItemResp) Get() *ConfItemResp {
	return v.value
}

func (v *NullableConfItemResp) Set(val *ConfItemResp) {
	v.value = val
	v.isSet = true
}

func (v NullableConfItemResp) IsSet() bool {
	return v.isSet
}

func (v *NullableConfItemResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfItemResp(val *ConfItemResp) *NullableConfItemResp {
	return &NullableConfItemResp{value: val, isSet: true}
}

func (v NullableConfItemResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfItemResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


