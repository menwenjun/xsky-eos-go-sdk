/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ObjectStorageUserUpdateReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectStorageUserUpdateReq{}

// ObjectStorageUserUpdateReq struct for ObjectStorageUserUpdateReq
type ObjectStorageUserUpdateReq struct {
	OsUser *ObjectStorageUserUpdateReqInfo `json:"os_user,omitempty"`
}

// NewObjectStorageUserUpdateReq instantiates a new ObjectStorageUserUpdateReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectStorageUserUpdateReq() *ObjectStorageUserUpdateReq {
	this := ObjectStorageUserUpdateReq{}
	return &this
}

// NewObjectStorageUserUpdateReqWithDefaults instantiates a new ObjectStorageUserUpdateReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectStorageUserUpdateReqWithDefaults() *ObjectStorageUserUpdateReq {
	this := ObjectStorageUserUpdateReq{}
	return &this
}

// GetOsUser returns the OsUser field value if set, zero value otherwise.
func (o *ObjectStorageUserUpdateReq) GetOsUser() ObjectStorageUserUpdateReqInfo {
	if o == nil || IsNil(o.OsUser) {
		var ret ObjectStorageUserUpdateReqInfo
		return ret
	}
	return *o.OsUser
}

// GetOsUserOk returns a tuple with the OsUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageUserUpdateReq) GetOsUserOk() (*ObjectStorageUserUpdateReqInfo, bool) {
	if o == nil || IsNil(o.OsUser) {
		return nil, false
	}
	return o.OsUser, true
}

// HasOsUser returns a boolean if a field has been set.
func (o *ObjectStorageUserUpdateReq) HasOsUser() bool {
	if o != nil && !IsNil(o.OsUser) {
		return true
	}

	return false
}

// SetOsUser gets a reference to the given ObjectStorageUserUpdateReqInfo and assigns it to the OsUser field.
func (o *ObjectStorageUserUpdateReq) SetOsUser(v ObjectStorageUserUpdateReqInfo) {
	o.OsUser = &v
}

func (o ObjectStorageUserUpdateReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectStorageUserUpdateReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OsUser) {
		toSerialize["os_user"] = o.OsUser
	}
	return toSerialize, nil
}

type NullableObjectStorageUserUpdateReq struct {
	value *ObjectStorageUserUpdateReq
	isSet bool
}

func (v NullableObjectStorageUserUpdateReq) Get() *ObjectStorageUserUpdateReq {
	return v.value
}

func (v *NullableObjectStorageUserUpdateReq) Set(val *ObjectStorageUserUpdateReq) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectStorageUserUpdateReq) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectStorageUserUpdateReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectStorageUserUpdateReq(val *ObjectStorageUserUpdateReq) *NullableObjectStorageUserUpdateReq {
	return &NullableObjectStorageUserUpdateReq{value: val, isSet: true}
}

func (v NullableObjectStorageUserUpdateReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectStorageUserUpdateReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


