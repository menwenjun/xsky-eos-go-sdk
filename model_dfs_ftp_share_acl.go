/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the DfsFTPShareACL type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsFTPShareACL{}

// DfsFTPShareACL DfsFTPShareACL defines model of dfs ftp share ACL +X:model:generate;order_by=-ID
type DfsFTPShareACL struct {
	AdminEnabled *bool `json:"admin_enabled,omitempty"`
	Cluster *ClusterNestview `json:"cluster,omitempty"`
	Create *time.Time `json:"create,omitempty"`
	CreateEnabled *bool `json:"create_enabled,omitempty"`
	DeleteEnabled *bool `json:"delete_enabled,omitempty"`
	DfsFtpShare *DfsFTPShareNestview `json:"dfs_ftp_share,omitempty"`
	DownloadBandwidth *int64 `json:"download_bandwidth,omitempty"`
	DownloadEnabled *bool `json:"download_enabled,omitempty"`
	FsUser *FSUserNestview `json:"fs_user,omitempty"`
	Id *int64 `json:"id,omitempty"`
	ListEnabled *bool `json:"list_enabled,omitempty"`
	RenameEnabled *bool `json:"rename_enabled,omitempty"`
	Type *string `json:"type,omitempty"`
	Update *time.Time `json:"update,omitempty"`
	UploadBandwidth *int64 `json:"upload_bandwidth,omitempty"`
	UploadEnabled *bool `json:"upload_enabled,omitempty"`
}

// NewDfsFTPShareACL instantiates a new DfsFTPShareACL object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsFTPShareACL() *DfsFTPShareACL {
	this := DfsFTPShareACL{}
	return &this
}

// NewDfsFTPShareACLWithDefaults instantiates a new DfsFTPShareACL object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsFTPShareACLWithDefaults() *DfsFTPShareACL {
	this := DfsFTPShareACL{}
	return &this
}

// GetAdminEnabled returns the AdminEnabled field value if set, zero value otherwise.
func (o *DfsFTPShareACL) GetAdminEnabled() bool {
	if o == nil || IsNil(o.AdminEnabled) {
		var ret bool
		return ret
	}
	return *o.AdminEnabled
}

// GetAdminEnabledOk returns a tuple with the AdminEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFTPShareACL) GetAdminEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.AdminEnabled) {
		return nil, false
	}
	return o.AdminEnabled, true
}

// HasAdminEnabled returns a boolean if a field has been set.
func (o *DfsFTPShareACL) HasAdminEnabled() bool {
	if o != nil && !IsNil(o.AdminEnabled) {
		return true
	}

	return false
}

// SetAdminEnabled gets a reference to the given bool and assigns it to the AdminEnabled field.
func (o *DfsFTPShareACL) SetAdminEnabled(v bool) {
	o.AdminEnabled = &v
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *DfsFTPShareACL) GetCluster() ClusterNestview {
	if o == nil || IsNil(o.Cluster) {
		var ret ClusterNestview
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFTPShareACL) GetClusterOk() (*ClusterNestview, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *DfsFTPShareACL) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given ClusterNestview and assigns it to the Cluster field.
func (o *DfsFTPShareACL) SetCluster(v ClusterNestview) {
	o.Cluster = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *DfsFTPShareACL) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFTPShareACL) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *DfsFTPShareACL) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *DfsFTPShareACL) SetCreate(v time.Time) {
	o.Create = &v
}

// GetCreateEnabled returns the CreateEnabled field value if set, zero value otherwise.
func (o *DfsFTPShareACL) GetCreateEnabled() bool {
	if o == nil || IsNil(o.CreateEnabled) {
		var ret bool
		return ret
	}
	return *o.CreateEnabled
}

// GetCreateEnabledOk returns a tuple with the CreateEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFTPShareACL) GetCreateEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.CreateEnabled) {
		return nil, false
	}
	return o.CreateEnabled, true
}

// HasCreateEnabled returns a boolean if a field has been set.
func (o *DfsFTPShareACL) HasCreateEnabled() bool {
	if o != nil && !IsNil(o.CreateEnabled) {
		return true
	}

	return false
}

// SetCreateEnabled gets a reference to the given bool and assigns it to the CreateEnabled field.
func (o *DfsFTPShareACL) SetCreateEnabled(v bool) {
	o.CreateEnabled = &v
}

// GetDeleteEnabled returns the DeleteEnabled field value if set, zero value otherwise.
func (o *DfsFTPShareACL) GetDeleteEnabled() bool {
	if o == nil || IsNil(o.DeleteEnabled) {
		var ret bool
		return ret
	}
	return *o.DeleteEnabled
}

// GetDeleteEnabledOk returns a tuple with the DeleteEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFTPShareACL) GetDeleteEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.DeleteEnabled) {
		return nil, false
	}
	return o.DeleteEnabled, true
}

// HasDeleteEnabled returns a boolean if a field has been set.
func (o *DfsFTPShareACL) HasDeleteEnabled() bool {
	if o != nil && !IsNil(o.DeleteEnabled) {
		return true
	}

	return false
}

// SetDeleteEnabled gets a reference to the given bool and assigns it to the DeleteEnabled field.
func (o *DfsFTPShareACL) SetDeleteEnabled(v bool) {
	o.DeleteEnabled = &v
}

// GetDfsFtpShare returns the DfsFtpShare field value if set, zero value otherwise.
func (o *DfsFTPShareACL) GetDfsFtpShare() DfsFTPShareNestview {
	if o == nil || IsNil(o.DfsFtpShare) {
		var ret DfsFTPShareNestview
		return ret
	}
	return *o.DfsFtpShare
}

// GetDfsFtpShareOk returns a tuple with the DfsFtpShare field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFTPShareACL) GetDfsFtpShareOk() (*DfsFTPShareNestview, bool) {
	if o == nil || IsNil(o.DfsFtpShare) {
		return nil, false
	}
	return o.DfsFtpShare, true
}

// HasDfsFtpShare returns a boolean if a field has been set.
func (o *DfsFTPShareACL) HasDfsFtpShare() bool {
	if o != nil && !IsNil(o.DfsFtpShare) {
		return true
	}

	return false
}

// SetDfsFtpShare gets a reference to the given DfsFTPShareNestview and assigns it to the DfsFtpShare field.
func (o *DfsFTPShareACL) SetDfsFtpShare(v DfsFTPShareNestview) {
	o.DfsFtpShare = &v
}

// GetDownloadBandwidth returns the DownloadBandwidth field value if set, zero value otherwise.
func (o *DfsFTPShareACL) GetDownloadBandwidth() int64 {
	if o == nil || IsNil(o.DownloadBandwidth) {
		var ret int64
		return ret
	}
	return *o.DownloadBandwidth
}

// GetDownloadBandwidthOk returns a tuple with the DownloadBandwidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFTPShareACL) GetDownloadBandwidthOk() (*int64, bool) {
	if o == nil || IsNil(o.DownloadBandwidth) {
		return nil, false
	}
	return o.DownloadBandwidth, true
}

// HasDownloadBandwidth returns a boolean if a field has been set.
func (o *DfsFTPShareACL) HasDownloadBandwidth() bool {
	if o != nil && !IsNil(o.DownloadBandwidth) {
		return true
	}

	return false
}

// SetDownloadBandwidth gets a reference to the given int64 and assigns it to the DownloadBandwidth field.
func (o *DfsFTPShareACL) SetDownloadBandwidth(v int64) {
	o.DownloadBandwidth = &v
}

// GetDownloadEnabled returns the DownloadEnabled field value if set, zero value otherwise.
func (o *DfsFTPShareACL) GetDownloadEnabled() bool {
	if o == nil || IsNil(o.DownloadEnabled) {
		var ret bool
		return ret
	}
	return *o.DownloadEnabled
}

// GetDownloadEnabledOk returns a tuple with the DownloadEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFTPShareACL) GetDownloadEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.DownloadEnabled) {
		return nil, false
	}
	return o.DownloadEnabled, true
}

// HasDownloadEnabled returns a boolean if a field has been set.
func (o *DfsFTPShareACL) HasDownloadEnabled() bool {
	if o != nil && !IsNil(o.DownloadEnabled) {
		return true
	}

	return false
}

// SetDownloadEnabled gets a reference to the given bool and assigns it to the DownloadEnabled field.
func (o *DfsFTPShareACL) SetDownloadEnabled(v bool) {
	o.DownloadEnabled = &v
}

// GetFsUser returns the FsUser field value if set, zero value otherwise.
func (o *DfsFTPShareACL) GetFsUser() FSUserNestview {
	if o == nil || IsNil(o.FsUser) {
		var ret FSUserNestview
		return ret
	}
	return *o.FsUser
}

// GetFsUserOk returns a tuple with the FsUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFTPShareACL) GetFsUserOk() (*FSUserNestview, bool) {
	if o == nil || IsNil(o.FsUser) {
		return nil, false
	}
	return o.FsUser, true
}

// HasFsUser returns a boolean if a field has been set.
func (o *DfsFTPShareACL) HasFsUser() bool {
	if o != nil && !IsNil(o.FsUser) {
		return true
	}

	return false
}

// SetFsUser gets a reference to the given FSUserNestview and assigns it to the FsUser field.
func (o *DfsFTPShareACL) SetFsUser(v FSUserNestview) {
	o.FsUser = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DfsFTPShareACL) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFTPShareACL) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DfsFTPShareACL) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *DfsFTPShareACL) SetId(v int64) {
	o.Id = &v
}

// GetListEnabled returns the ListEnabled field value if set, zero value otherwise.
func (o *DfsFTPShareACL) GetListEnabled() bool {
	if o == nil || IsNil(o.ListEnabled) {
		var ret bool
		return ret
	}
	return *o.ListEnabled
}

// GetListEnabledOk returns a tuple with the ListEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFTPShareACL) GetListEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.ListEnabled) {
		return nil, false
	}
	return o.ListEnabled, true
}

// HasListEnabled returns a boolean if a field has been set.
func (o *DfsFTPShareACL) HasListEnabled() bool {
	if o != nil && !IsNil(o.ListEnabled) {
		return true
	}

	return false
}

// SetListEnabled gets a reference to the given bool and assigns it to the ListEnabled field.
func (o *DfsFTPShareACL) SetListEnabled(v bool) {
	o.ListEnabled = &v
}

// GetRenameEnabled returns the RenameEnabled field value if set, zero value otherwise.
func (o *DfsFTPShareACL) GetRenameEnabled() bool {
	if o == nil || IsNil(o.RenameEnabled) {
		var ret bool
		return ret
	}
	return *o.RenameEnabled
}

// GetRenameEnabledOk returns a tuple with the RenameEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFTPShareACL) GetRenameEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.RenameEnabled) {
		return nil, false
	}
	return o.RenameEnabled, true
}

// HasRenameEnabled returns a boolean if a field has been set.
func (o *DfsFTPShareACL) HasRenameEnabled() bool {
	if o != nil && !IsNil(o.RenameEnabled) {
		return true
	}

	return false
}

// SetRenameEnabled gets a reference to the given bool and assigns it to the RenameEnabled field.
func (o *DfsFTPShareACL) SetRenameEnabled(v bool) {
	o.RenameEnabled = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DfsFTPShareACL) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFTPShareACL) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DfsFTPShareACL) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DfsFTPShareACL) SetType(v string) {
	o.Type = &v
}

// GetUpdate returns the Update field value if set, zero value otherwise.
func (o *DfsFTPShareACL) GetUpdate() time.Time {
	if o == nil || IsNil(o.Update) {
		var ret time.Time
		return ret
	}
	return *o.Update
}

// GetUpdateOk returns a tuple with the Update field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFTPShareACL) GetUpdateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Update) {
		return nil, false
	}
	return o.Update, true
}

// HasUpdate returns a boolean if a field has been set.
func (o *DfsFTPShareACL) HasUpdate() bool {
	if o != nil && !IsNil(o.Update) {
		return true
	}

	return false
}

// SetUpdate gets a reference to the given time.Time and assigns it to the Update field.
func (o *DfsFTPShareACL) SetUpdate(v time.Time) {
	o.Update = &v
}

// GetUploadBandwidth returns the UploadBandwidth field value if set, zero value otherwise.
func (o *DfsFTPShareACL) GetUploadBandwidth() int64 {
	if o == nil || IsNil(o.UploadBandwidth) {
		var ret int64
		return ret
	}
	return *o.UploadBandwidth
}

// GetUploadBandwidthOk returns a tuple with the UploadBandwidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFTPShareACL) GetUploadBandwidthOk() (*int64, bool) {
	if o == nil || IsNil(o.UploadBandwidth) {
		return nil, false
	}
	return o.UploadBandwidth, true
}

// HasUploadBandwidth returns a boolean if a field has been set.
func (o *DfsFTPShareACL) HasUploadBandwidth() bool {
	if o != nil && !IsNil(o.UploadBandwidth) {
		return true
	}

	return false
}

// SetUploadBandwidth gets a reference to the given int64 and assigns it to the UploadBandwidth field.
func (o *DfsFTPShareACL) SetUploadBandwidth(v int64) {
	o.UploadBandwidth = &v
}

// GetUploadEnabled returns the UploadEnabled field value if set, zero value otherwise.
func (o *DfsFTPShareACL) GetUploadEnabled() bool {
	if o == nil || IsNil(o.UploadEnabled) {
		var ret bool
		return ret
	}
	return *o.UploadEnabled
}

// GetUploadEnabledOk returns a tuple with the UploadEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFTPShareACL) GetUploadEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.UploadEnabled) {
		return nil, false
	}
	return o.UploadEnabled, true
}

// HasUploadEnabled returns a boolean if a field has been set.
func (o *DfsFTPShareACL) HasUploadEnabled() bool {
	if o != nil && !IsNil(o.UploadEnabled) {
		return true
	}

	return false
}

// SetUploadEnabled gets a reference to the given bool and assigns it to the UploadEnabled field.
func (o *DfsFTPShareACL) SetUploadEnabled(v bool) {
	o.UploadEnabled = &v
}

func (o DfsFTPShareACL) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsFTPShareACL) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AdminEnabled) {
		toSerialize["admin_enabled"] = o.AdminEnabled
	}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.CreateEnabled) {
		toSerialize["create_enabled"] = o.CreateEnabled
	}
	if !IsNil(o.DeleteEnabled) {
		toSerialize["delete_enabled"] = o.DeleteEnabled
	}
	if !IsNil(o.DfsFtpShare) {
		toSerialize["dfs_ftp_share"] = o.DfsFtpShare
	}
	if !IsNil(o.DownloadBandwidth) {
		toSerialize["download_bandwidth"] = o.DownloadBandwidth
	}
	if !IsNil(o.DownloadEnabled) {
		toSerialize["download_enabled"] = o.DownloadEnabled
	}
	if !IsNil(o.FsUser) {
		toSerialize["fs_user"] = o.FsUser
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ListEnabled) {
		toSerialize["list_enabled"] = o.ListEnabled
	}
	if !IsNil(o.RenameEnabled) {
		toSerialize["rename_enabled"] = o.RenameEnabled
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Update) {
		toSerialize["update"] = o.Update
	}
	if !IsNil(o.UploadBandwidth) {
		toSerialize["upload_bandwidth"] = o.UploadBandwidth
	}
	if !IsNil(o.UploadEnabled) {
		toSerialize["upload_enabled"] = o.UploadEnabled
	}
	return toSerialize, nil
}

type NullableDfsFTPShareACL struct {
	value *DfsFTPShareACL
	isSet bool
}

func (v NullableDfsFTPShareACL) Get() *DfsFTPShareACL {
	return v.value
}

func (v *NullableDfsFTPShareACL) Set(val *DfsFTPShareACL) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsFTPShareACL) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsFTPShareACL) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsFTPShareACL(val *DfsFTPShareACL) *NullableDfsFTPShareACL {
	return &NullableDfsFTPShareACL{value: val, isSet: true}
}

func (v NullableDfsFTPShareACL) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsFTPShareACL) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


