/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OSRemotePolicyResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OSRemotePolicyResp{}

// OSRemotePolicyResp struct for OSRemotePolicyResp
type OSRemotePolicyResp struct {
	OsRemotePolicy *OSRemotePolicy `json:"os_remote_policy,omitempty"`
}

// NewOSRemotePolicyResp instantiates a new OSRemotePolicyResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOSRemotePolicyResp() *OSRemotePolicyResp {
	this := OSRemotePolicyResp{}
	return &this
}

// NewOSRemotePolicyRespWithDefaults instantiates a new OSRemotePolicyResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOSRemotePolicyRespWithDefaults() *OSRemotePolicyResp {
	this := OSRemotePolicyResp{}
	return &this
}

// GetOsRemotePolicy returns the OsRemotePolicy field value if set, zero value otherwise.
func (o *OSRemotePolicyResp) GetOsRemotePolicy() OSRemotePolicy {
	if o == nil || IsNil(o.OsRemotePolicy) {
		var ret OSRemotePolicy
		return ret
	}
	return *o.OsRemotePolicy
}

// GetOsRemotePolicyOk returns a tuple with the OsRemotePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSRemotePolicyResp) GetOsRemotePolicyOk() (*OSRemotePolicy, bool) {
	if o == nil || IsNil(o.OsRemotePolicy) {
		return nil, false
	}
	return o.OsRemotePolicy, true
}

// HasOsRemotePolicy returns a boolean if a field has been set.
func (o *OSRemotePolicyResp) HasOsRemotePolicy() bool {
	if o != nil && !IsNil(o.OsRemotePolicy) {
		return true
	}

	return false
}

// SetOsRemotePolicy gets a reference to the given OSRemotePolicy and assigns it to the OsRemotePolicy field.
func (o *OSRemotePolicyResp) SetOsRemotePolicy(v OSRemotePolicy) {
	o.OsRemotePolicy = &v
}

func (o OSRemotePolicyResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OSRemotePolicyResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OsRemotePolicy) {
		toSerialize["os_remote_policy"] = o.OsRemotePolicy
	}
	return toSerialize, nil
}

type NullableOSRemotePolicyResp struct {
	value *OSRemotePolicyResp
	isSet bool
}

func (v NullableOSRemotePolicyResp) Get() *OSRemotePolicyResp {
	return v.value
}

func (v *NullableOSRemotePolicyResp) Set(val *OSRemotePolicyResp) {
	v.value = val
	v.isSet = true
}

func (v NullableOSRemotePolicyResp) IsSet() bool {
	return v.isSet
}

func (v *NullableOSRemotePolicyResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOSRemotePolicyResp(val *OSRemotePolicyResp) *NullableOSRemotePolicyResp {
	return &NullableOSRemotePolicyResp{value: val, isSet: true}
}

func (v NullableOSRemotePolicyResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOSRemotePolicyResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


