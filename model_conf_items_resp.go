/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ConfItemsResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfItemsResp{}

// ConfItemsResp struct for ConfItemsResp
type ConfItemsResp struct {
	// conf items
	Confs []ConfItem `json:"confs"`
}

type _ConfItemsResp ConfItemsResp

// NewConfItemsResp instantiates a new ConfItemsResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfItemsResp(confs []ConfItem) *ConfItemsResp {
	this := ConfItemsResp{}
	this.Confs = confs
	return &this
}

// NewConfItemsRespWithDefaults instantiates a new ConfItemsResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfItemsRespWithDefaults() *ConfItemsResp {
	this := ConfItemsResp{}
	return &this
}

// GetConfs returns the Confs field value
func (o *ConfItemsResp) GetConfs() []ConfItem {
	if o == nil {
		var ret []ConfItem
		return ret
	}

	return o.Confs
}

// GetConfsOk returns a tuple with the Confs field value
// and a boolean to check if the value has been set.
func (o *ConfItemsResp) GetConfsOk() ([]ConfItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.Confs, true
}

// SetConfs sets field value
func (o *ConfItemsResp) SetConfs(v []ConfItem) {
	o.Confs = v
}

func (o ConfItemsResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfItemsResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["confs"] = o.Confs
	return toSerialize, nil
}

func (o *ConfItemsResp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"confs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConfItemsResp := _ConfItemsResp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConfItemsResp)

	if err != nil {
		return err
	}

	*o = ConfItemsResp(varConfItemsResp)

	return err
}

type NullableConfItemsResp struct {
	value *ConfItemsResp
	isSet bool
}

func (v NullableConfItemsResp) Get() *ConfItemsResp {
	return v.value
}

func (v *NullableConfItemsResp) Set(val *ConfItemsResp) {
	v.value = val
	v.isSet = true
}

func (v NullableConfItemsResp) IsSet() bool {
	return v.isSet
}

func (v *NullableConfItemsResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfItemsResp(val *ConfItemsResp) *NullableConfItemsResp {
	return &NullableConfItemsResp{value: val, isSet: true}
}

func (v NullableConfItemsResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfItemsResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


