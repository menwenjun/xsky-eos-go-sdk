/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the DfsTrashFileJob type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsTrashFileJob{}

// DfsTrashFileJob DfsTrashFileJob defines model of dfs trash file job
type DfsTrashFileJob struct {
	Action *string `json:"action,omitempty"`
	Create *time.Time `json:"create,omitempty"`
	Id *int64 `json:"id,omitempty"`
	Path *string `json:"path,omitempty"`
	Progress *float64 `json:"progress,omitempty"`
	ProgressInfo *ProgressInfo `json:"progress_info,omitempty"`
	Status *string `json:"status,omitempty"`
	Trash *DfsTrashNestview `json:"trash,omitempty"`
	Update *time.Time `json:"update,omitempty"`
}

// NewDfsTrashFileJob instantiates a new DfsTrashFileJob object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsTrashFileJob() *DfsTrashFileJob {
	this := DfsTrashFileJob{}
	return &this
}

// NewDfsTrashFileJobWithDefaults instantiates a new DfsTrashFileJob object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsTrashFileJobWithDefaults() *DfsTrashFileJob {
	this := DfsTrashFileJob{}
	return &this
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *DfsTrashFileJob) GetAction() string {
	if o == nil || IsNil(o.Action) {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTrashFileJob) GetActionOk() (*string, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *DfsTrashFileJob) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *DfsTrashFileJob) SetAction(v string) {
	o.Action = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *DfsTrashFileJob) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTrashFileJob) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *DfsTrashFileJob) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *DfsTrashFileJob) SetCreate(v time.Time) {
	o.Create = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DfsTrashFileJob) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTrashFileJob) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DfsTrashFileJob) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *DfsTrashFileJob) SetId(v int64) {
	o.Id = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *DfsTrashFileJob) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTrashFileJob) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *DfsTrashFileJob) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *DfsTrashFileJob) SetPath(v string) {
	o.Path = &v
}

// GetProgress returns the Progress field value if set, zero value otherwise.
func (o *DfsTrashFileJob) GetProgress() float64 {
	if o == nil || IsNil(o.Progress) {
		var ret float64
		return ret
	}
	return *o.Progress
}

// GetProgressOk returns a tuple with the Progress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTrashFileJob) GetProgressOk() (*float64, bool) {
	if o == nil || IsNil(o.Progress) {
		return nil, false
	}
	return o.Progress, true
}

// HasProgress returns a boolean if a field has been set.
func (o *DfsTrashFileJob) HasProgress() bool {
	if o != nil && !IsNil(o.Progress) {
		return true
	}

	return false
}

// SetProgress gets a reference to the given float64 and assigns it to the Progress field.
func (o *DfsTrashFileJob) SetProgress(v float64) {
	o.Progress = &v
}

// GetProgressInfo returns the ProgressInfo field value if set, zero value otherwise.
func (o *DfsTrashFileJob) GetProgressInfo() ProgressInfo {
	if o == nil || IsNil(o.ProgressInfo) {
		var ret ProgressInfo
		return ret
	}
	return *o.ProgressInfo
}

// GetProgressInfoOk returns a tuple with the ProgressInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTrashFileJob) GetProgressInfoOk() (*ProgressInfo, bool) {
	if o == nil || IsNil(o.ProgressInfo) {
		return nil, false
	}
	return o.ProgressInfo, true
}

// HasProgressInfo returns a boolean if a field has been set.
func (o *DfsTrashFileJob) HasProgressInfo() bool {
	if o != nil && !IsNil(o.ProgressInfo) {
		return true
	}

	return false
}

// SetProgressInfo gets a reference to the given ProgressInfo and assigns it to the ProgressInfo field.
func (o *DfsTrashFileJob) SetProgressInfo(v ProgressInfo) {
	o.ProgressInfo = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DfsTrashFileJob) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTrashFileJob) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DfsTrashFileJob) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *DfsTrashFileJob) SetStatus(v string) {
	o.Status = &v
}

// GetTrash returns the Trash field value if set, zero value otherwise.
func (o *DfsTrashFileJob) GetTrash() DfsTrashNestview {
	if o == nil || IsNil(o.Trash) {
		var ret DfsTrashNestview
		return ret
	}
	return *o.Trash
}

// GetTrashOk returns a tuple with the Trash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTrashFileJob) GetTrashOk() (*DfsTrashNestview, bool) {
	if o == nil || IsNil(o.Trash) {
		return nil, false
	}
	return o.Trash, true
}

// HasTrash returns a boolean if a field has been set.
func (o *DfsTrashFileJob) HasTrash() bool {
	if o != nil && !IsNil(o.Trash) {
		return true
	}

	return false
}

// SetTrash gets a reference to the given DfsTrashNestview and assigns it to the Trash field.
func (o *DfsTrashFileJob) SetTrash(v DfsTrashNestview) {
	o.Trash = &v
}

// GetUpdate returns the Update field value if set, zero value otherwise.
func (o *DfsTrashFileJob) GetUpdate() time.Time {
	if o == nil || IsNil(o.Update) {
		var ret time.Time
		return ret
	}
	return *o.Update
}

// GetUpdateOk returns a tuple with the Update field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTrashFileJob) GetUpdateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Update) {
		return nil, false
	}
	return o.Update, true
}

// HasUpdate returns a boolean if a field has been set.
func (o *DfsTrashFileJob) HasUpdate() bool {
	if o != nil && !IsNil(o.Update) {
		return true
	}

	return false
}

// SetUpdate gets a reference to the given time.Time and assigns it to the Update field.
func (o *DfsTrashFileJob) SetUpdate(v time.Time) {
	o.Update = &v
}

func (o DfsTrashFileJob) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsTrashFileJob) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.Progress) {
		toSerialize["progress"] = o.Progress
	}
	if !IsNil(o.ProgressInfo) {
		toSerialize["progress_info"] = o.ProgressInfo
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Trash) {
		toSerialize["trash"] = o.Trash
	}
	if !IsNil(o.Update) {
		toSerialize["update"] = o.Update
	}
	return toSerialize, nil
}

type NullableDfsTrashFileJob struct {
	value *DfsTrashFileJob
	isSet bool
}

func (v NullableDfsTrashFileJob) Get() *DfsTrashFileJob {
	return v.value
}

func (v *NullableDfsTrashFileJob) Set(val *DfsTrashFileJob) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsTrashFileJob) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsTrashFileJob) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsTrashFileJob(val *DfsTrashFileJob) *NullableDfsTrashFileJob {
	return &NullableDfsTrashFileJob{value: val, isSet: true}
}

func (v NullableDfsTrashFileJob) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsTrashFileJob) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


