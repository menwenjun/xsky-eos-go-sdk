/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ApplicationResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplicationResp{}

// ApplicationResp struct for ApplicationResp
type ApplicationResp struct {
	Application *Application `json:"application,omitempty"`
}

// NewApplicationResp instantiates a new ApplicationResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationResp() *ApplicationResp {
	this := ApplicationResp{}
	return &this
}

// NewApplicationRespWithDefaults instantiates a new ApplicationResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationRespWithDefaults() *ApplicationResp {
	this := ApplicationResp{}
	return &this
}

// GetApplication returns the Application field value if set, zero value otherwise.
func (o *ApplicationResp) GetApplication() Application {
	if o == nil || IsNil(o.Application) {
		var ret Application
		return ret
	}
	return *o.Application
}

// GetApplicationOk returns a tuple with the Application field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationResp) GetApplicationOk() (*Application, bool) {
	if o == nil || IsNil(o.Application) {
		return nil, false
	}
	return o.Application, true
}

// HasApplication returns a boolean if a field has been set.
func (o *ApplicationResp) HasApplication() bool {
	if o != nil && !IsNil(o.Application) {
		return true
	}

	return false
}

// SetApplication gets a reference to the given Application and assigns it to the Application field.
func (o *ApplicationResp) SetApplication(v Application) {
	o.Application = &v
}

func (o ApplicationResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplicationResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Application) {
		toSerialize["application"] = o.Application
	}
	return toSerialize, nil
}

type NullableApplicationResp struct {
	value *ApplicationResp
	isSet bool
}

func (v NullableApplicationResp) Get() *ApplicationResp {
	return v.value
}

func (v *NullableApplicationResp) Set(val *ApplicationResp) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationResp) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationResp(val *ApplicationResp) *NullableApplicationResp {
	return &NullableApplicationResp{value: val, isSet: true}
}

func (v NullableApplicationResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


