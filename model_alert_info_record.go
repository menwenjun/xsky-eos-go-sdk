/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the AlertInfoRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlertInfoRecord{}

// AlertInfoRecord AlertInfoRecord defines the response of alert info
type AlertInfoRecord struct {
	AckTime *time.Time `json:"ack_time,omitempty"`
	Acked *bool `json:"acked,omitempty"`
	Advice *ObjectInfo `json:"advice,omitempty"`
	AlarmId *string `json:"alarm_id,omitempty"`
	AlertValue *string `json:"alert_value,omitempty"`
	Cluster *ClusterNestview `json:"cluster,omitempty"`
	Create *time.Time `json:"create,omitempty"`
	Data map[string]interface{} `json:"data,omitempty"`
	Description *ObjectInfo `json:"description,omitempty"`
	ExportStatus *string `json:"export_status,omitempty"`
	ExtraData *string `json:"extra_data,omitempty"`
	Group *string `json:"group,omitempty"`
	Host *HostNestview `json:"host,omitempty"`
	Id *int64 `json:"id,omitempty"`
	Level *string `json:"level,omitempty"`
	Object *ObjectInfo `json:"object,omitempty"`
	OspCluster *ClusterNestview `json:"osp_cluster,omitempty"`
	Reason *string `json:"reason,omitempty"`
	RelatedResources []map[string]interface{} `json:"related_resources,omitempty"`
	ResolveTime *time.Time `json:"resolve_time,omitempty"`
	ResolveType *string `json:"resolve_type,omitempty"`
	Resolved *bool `json:"resolved,omitempty"`
	ResourceId *int64 `json:"resource_id,omitempty"`
	ResourceName *string `json:"resource_name,omitempty"`
	ResourceType *string `json:"resource_type,omitempty"`
	Status *string `json:"status,omitempty"`
	TriggerMode *string `json:"trigger_mode,omitempty"`
	TriggerPeriod *int64 `json:"trigger_period,omitempty"`
	TriggerValue *string `json:"trigger_value,omitempty"`
	Type *string `json:"type,omitempty"`
	Weight *int32 `json:"weight,omitempty"`
	ErrorRecords []ErrorRecord `json:"error_records,omitempty"`
}

// NewAlertInfoRecord instantiates a new AlertInfoRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertInfoRecord() *AlertInfoRecord {
	this := AlertInfoRecord{}
	return &this
}

// NewAlertInfoRecordWithDefaults instantiates a new AlertInfoRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertInfoRecordWithDefaults() *AlertInfoRecord {
	this := AlertInfoRecord{}
	return &this
}

// GetAckTime returns the AckTime field value if set, zero value otherwise.
func (o *AlertInfoRecord) GetAckTime() time.Time {
	if o == nil || IsNil(o.AckTime) {
		var ret time.Time
		return ret
	}
	return *o.AckTime
}

// GetAckTimeOk returns a tuple with the AckTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertInfoRecord) GetAckTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.AckTime) {
		return nil, false
	}
	return o.AckTime, true
}

// HasAckTime returns a boolean if a field has been set.
func (o *AlertInfoRecord) HasAckTime() bool {
	if o != nil && !IsNil(o.AckTime) {
		return true
	}

	return false
}

// SetAckTime gets a reference to the given time.Time and assigns it to the AckTime field.
func (o *AlertInfoRecord) SetAckTime(v time.Time) {
	o.AckTime = &v
}

// GetAcked returns the Acked field value if set, zero value otherwise.
func (o *AlertInfoRecord) GetAcked() bool {
	if o == nil || IsNil(o.Acked) {
		var ret bool
		return ret
	}
	return *o.Acked
}

// GetAckedOk returns a tuple with the Acked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertInfoRecord) GetAckedOk() (*bool, bool) {
	if o == nil || IsNil(o.Acked) {
		return nil, false
	}
	return o.Acked, true
}

// HasAcked returns a boolean if a field has been set.
func (o *AlertInfoRecord) HasAcked() bool {
	if o != nil && !IsNil(o.Acked) {
		return true
	}

	return false
}

// SetAcked gets a reference to the given bool and assigns it to the Acked field.
func (o *AlertInfoRecord) SetAcked(v bool) {
	o.Acked = &v
}

// GetAdvice returns the Advice field value if set, zero value otherwise.
func (o *AlertInfoRecord) GetAdvice() ObjectInfo {
	if o == nil || IsNil(o.Advice) {
		var ret ObjectInfo
		return ret
	}
	return *o.Advice
}

// GetAdviceOk returns a tuple with the Advice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertInfoRecord) GetAdviceOk() (*ObjectInfo, bool) {
	if o == nil || IsNil(o.Advice) {
		return nil, false
	}
	return o.Advice, true
}

// HasAdvice returns a boolean if a field has been set.
func (o *AlertInfoRecord) HasAdvice() bool {
	if o != nil && !IsNil(o.Advice) {
		return true
	}

	return false
}

// SetAdvice gets a reference to the given ObjectInfo and assigns it to the Advice field.
func (o *AlertInfoRecord) SetAdvice(v ObjectInfo) {
	o.Advice = &v
}

// GetAlarmId returns the AlarmId field value if set, zero value otherwise.
func (o *AlertInfoRecord) GetAlarmId() string {
	if o == nil || IsNil(o.AlarmId) {
		var ret string
		return ret
	}
	return *o.AlarmId
}

// GetAlarmIdOk returns a tuple with the AlarmId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertInfoRecord) GetAlarmIdOk() (*string, bool) {
	if o == nil || IsNil(o.AlarmId) {
		return nil, false
	}
	return o.AlarmId, true
}

// HasAlarmId returns a boolean if a field has been set.
func (o *AlertInfoRecord) HasAlarmId() bool {
	if o != nil && !IsNil(o.AlarmId) {
		return true
	}

	return false
}

// SetAlarmId gets a reference to the given string and assigns it to the AlarmId field.
func (o *AlertInfoRecord) SetAlarmId(v string) {
	o.AlarmId = &v
}

// GetAlertValue returns the AlertValue field value if set, zero value otherwise.
func (o *AlertInfoRecord) GetAlertValue() string {
	if o == nil || IsNil(o.AlertValue) {
		var ret string
		return ret
	}
	return *o.AlertValue
}

// GetAlertValueOk returns a tuple with the AlertValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertInfoRecord) GetAlertValueOk() (*string, bool) {
	if o == nil || IsNil(o.AlertValue) {
		return nil, false
	}
	return o.AlertValue, true
}

// HasAlertValue returns a boolean if a field has been set.
func (o *AlertInfoRecord) HasAlertValue() bool {
	if o != nil && !IsNil(o.AlertValue) {
		return true
	}

	return false
}

// SetAlertValue gets a reference to the given string and assigns it to the AlertValue field.
func (o *AlertInfoRecord) SetAlertValue(v string) {
	o.AlertValue = &v
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *AlertInfoRecord) GetCluster() ClusterNestview {
	if o == nil || IsNil(o.Cluster) {
		var ret ClusterNestview
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertInfoRecord) GetClusterOk() (*ClusterNestview, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *AlertInfoRecord) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given ClusterNestview and assigns it to the Cluster field.
func (o *AlertInfoRecord) SetCluster(v ClusterNestview) {
	o.Cluster = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *AlertInfoRecord) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertInfoRecord) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *AlertInfoRecord) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *AlertInfoRecord) SetCreate(v time.Time) {
	o.Create = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *AlertInfoRecord) GetData() map[string]interface{} {
	if o == nil || IsNil(o.Data) {
		var ret map[string]interface{}
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertInfoRecord) GetDataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Data) {
		return map[string]interface{}{}, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *AlertInfoRecord) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]interface{} and assigns it to the Data field.
func (o *AlertInfoRecord) SetData(v map[string]interface{}) {
	o.Data = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AlertInfoRecord) GetDescription() ObjectInfo {
	if o == nil || IsNil(o.Description) {
		var ret ObjectInfo
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertInfoRecord) GetDescriptionOk() (*ObjectInfo, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AlertInfoRecord) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given ObjectInfo and assigns it to the Description field.
func (o *AlertInfoRecord) SetDescription(v ObjectInfo) {
	o.Description = &v
}

// GetExportStatus returns the ExportStatus field value if set, zero value otherwise.
func (o *AlertInfoRecord) GetExportStatus() string {
	if o == nil || IsNil(o.ExportStatus) {
		var ret string
		return ret
	}
	return *o.ExportStatus
}

// GetExportStatusOk returns a tuple with the ExportStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertInfoRecord) GetExportStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ExportStatus) {
		return nil, false
	}
	return o.ExportStatus, true
}

// HasExportStatus returns a boolean if a field has been set.
func (o *AlertInfoRecord) HasExportStatus() bool {
	if o != nil && !IsNil(o.ExportStatus) {
		return true
	}

	return false
}

// SetExportStatus gets a reference to the given string and assigns it to the ExportStatus field.
func (o *AlertInfoRecord) SetExportStatus(v string) {
	o.ExportStatus = &v
}

// GetExtraData returns the ExtraData field value if set, zero value otherwise.
func (o *AlertInfoRecord) GetExtraData() string {
	if o == nil || IsNil(o.ExtraData) {
		var ret string
		return ret
	}
	return *o.ExtraData
}

// GetExtraDataOk returns a tuple with the ExtraData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertInfoRecord) GetExtraDataOk() (*string, bool) {
	if o == nil || IsNil(o.ExtraData) {
		return nil, false
	}
	return o.ExtraData, true
}

// HasExtraData returns a boolean if a field has been set.
func (o *AlertInfoRecord) HasExtraData() bool {
	if o != nil && !IsNil(o.ExtraData) {
		return true
	}

	return false
}

// SetExtraData gets a reference to the given string and assigns it to the ExtraData field.
func (o *AlertInfoRecord) SetExtraData(v string) {
	o.ExtraData = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *AlertInfoRecord) GetGroup() string {
	if o == nil || IsNil(o.Group) {
		var ret string
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertInfoRecord) GetGroupOk() (*string, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *AlertInfoRecord) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given string and assigns it to the Group field.
func (o *AlertInfoRecord) SetGroup(v string) {
	o.Group = &v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *AlertInfoRecord) GetHost() HostNestview {
	if o == nil || IsNil(o.Host) {
		var ret HostNestview
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertInfoRecord) GetHostOk() (*HostNestview, bool) {
	if o == nil || IsNil(o.Host) {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *AlertInfoRecord) HasHost() bool {
	if o != nil && !IsNil(o.Host) {
		return true
	}

	return false
}

// SetHost gets a reference to the given HostNestview and assigns it to the Host field.
func (o *AlertInfoRecord) SetHost(v HostNestview) {
	o.Host = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AlertInfoRecord) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertInfoRecord) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AlertInfoRecord) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *AlertInfoRecord) SetId(v int64) {
	o.Id = &v
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *AlertInfoRecord) GetLevel() string {
	if o == nil || IsNil(o.Level) {
		var ret string
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertInfoRecord) GetLevelOk() (*string, bool) {
	if o == nil || IsNil(o.Level) {
		return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *AlertInfoRecord) HasLevel() bool {
	if o != nil && !IsNil(o.Level) {
		return true
	}

	return false
}

// SetLevel gets a reference to the given string and assigns it to the Level field.
func (o *AlertInfoRecord) SetLevel(v string) {
	o.Level = &v
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *AlertInfoRecord) GetObject() ObjectInfo {
	if o == nil || IsNil(o.Object) {
		var ret ObjectInfo
		return ret
	}
	return *o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertInfoRecord) GetObjectOk() (*ObjectInfo, bool) {
	if o == nil || IsNil(o.Object) {
		return nil, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *AlertInfoRecord) HasObject() bool {
	if o != nil && !IsNil(o.Object) {
		return true
	}

	return false
}

// SetObject gets a reference to the given ObjectInfo and assigns it to the Object field.
func (o *AlertInfoRecord) SetObject(v ObjectInfo) {
	o.Object = &v
}

// GetOspCluster returns the OspCluster field value if set, zero value otherwise.
func (o *AlertInfoRecord) GetOspCluster() ClusterNestview {
	if o == nil || IsNil(o.OspCluster) {
		var ret ClusterNestview
		return ret
	}
	return *o.OspCluster
}

// GetOspClusterOk returns a tuple with the OspCluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertInfoRecord) GetOspClusterOk() (*ClusterNestview, bool) {
	if o == nil || IsNil(o.OspCluster) {
		return nil, false
	}
	return o.OspCluster, true
}

// HasOspCluster returns a boolean if a field has been set.
func (o *AlertInfoRecord) HasOspCluster() bool {
	if o != nil && !IsNil(o.OspCluster) {
		return true
	}

	return false
}

// SetOspCluster gets a reference to the given ClusterNestview and assigns it to the OspCluster field.
func (o *AlertInfoRecord) SetOspCluster(v ClusterNestview) {
	o.OspCluster = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *AlertInfoRecord) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertInfoRecord) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *AlertInfoRecord) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *AlertInfoRecord) SetReason(v string) {
	o.Reason = &v
}

// GetRelatedResources returns the RelatedResources field value if set, zero value otherwise.
func (o *AlertInfoRecord) GetRelatedResources() []map[string]interface{} {
	if o == nil || IsNil(o.RelatedResources) {
		var ret []map[string]interface{}
		return ret
	}
	return o.RelatedResources
}

// GetRelatedResourcesOk returns a tuple with the RelatedResources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertInfoRecord) GetRelatedResourcesOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.RelatedResources) {
		return nil, false
	}
	return o.RelatedResources, true
}

// HasRelatedResources returns a boolean if a field has been set.
func (o *AlertInfoRecord) HasRelatedResources() bool {
	if o != nil && !IsNil(o.RelatedResources) {
		return true
	}

	return false
}

// SetRelatedResources gets a reference to the given []map[string]interface{} and assigns it to the RelatedResources field.
func (o *AlertInfoRecord) SetRelatedResources(v []map[string]interface{}) {
	o.RelatedResources = v
}

// GetResolveTime returns the ResolveTime field value if set, zero value otherwise.
func (o *AlertInfoRecord) GetResolveTime() time.Time {
	if o == nil || IsNil(o.ResolveTime) {
		var ret time.Time
		return ret
	}
	return *o.ResolveTime
}

// GetResolveTimeOk returns a tuple with the ResolveTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertInfoRecord) GetResolveTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ResolveTime) {
		return nil, false
	}
	return o.ResolveTime, true
}

// HasResolveTime returns a boolean if a field has been set.
func (o *AlertInfoRecord) HasResolveTime() bool {
	if o != nil && !IsNil(o.ResolveTime) {
		return true
	}

	return false
}

// SetResolveTime gets a reference to the given time.Time and assigns it to the ResolveTime field.
func (o *AlertInfoRecord) SetResolveTime(v time.Time) {
	o.ResolveTime = &v
}

// GetResolveType returns the ResolveType field value if set, zero value otherwise.
func (o *AlertInfoRecord) GetResolveType() string {
	if o == nil || IsNil(o.ResolveType) {
		var ret string
		return ret
	}
	return *o.ResolveType
}

// GetResolveTypeOk returns a tuple with the ResolveType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertInfoRecord) GetResolveTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ResolveType) {
		return nil, false
	}
	return o.ResolveType, true
}

// HasResolveType returns a boolean if a field has been set.
func (o *AlertInfoRecord) HasResolveType() bool {
	if o != nil && !IsNil(o.ResolveType) {
		return true
	}

	return false
}

// SetResolveType gets a reference to the given string and assigns it to the ResolveType field.
func (o *AlertInfoRecord) SetResolveType(v string) {
	o.ResolveType = &v
}

// GetResolved returns the Resolved field value if set, zero value otherwise.
func (o *AlertInfoRecord) GetResolved() bool {
	if o == nil || IsNil(o.Resolved) {
		var ret bool
		return ret
	}
	return *o.Resolved
}

// GetResolvedOk returns a tuple with the Resolved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertInfoRecord) GetResolvedOk() (*bool, bool) {
	if o == nil || IsNil(o.Resolved) {
		return nil, false
	}
	return o.Resolved, true
}

// HasResolved returns a boolean if a field has been set.
func (o *AlertInfoRecord) HasResolved() bool {
	if o != nil && !IsNil(o.Resolved) {
		return true
	}

	return false
}

// SetResolved gets a reference to the given bool and assigns it to the Resolved field.
func (o *AlertInfoRecord) SetResolved(v bool) {
	o.Resolved = &v
}

// GetResourceId returns the ResourceId field value if set, zero value otherwise.
func (o *AlertInfoRecord) GetResourceId() int64 {
	if o == nil || IsNil(o.ResourceId) {
		var ret int64
		return ret
	}
	return *o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertInfoRecord) GetResourceIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ResourceId) {
		return nil, false
	}
	return o.ResourceId, true
}

// HasResourceId returns a boolean if a field has been set.
func (o *AlertInfoRecord) HasResourceId() bool {
	if o != nil && !IsNil(o.ResourceId) {
		return true
	}

	return false
}

// SetResourceId gets a reference to the given int64 and assigns it to the ResourceId field.
func (o *AlertInfoRecord) SetResourceId(v int64) {
	o.ResourceId = &v
}

// GetResourceName returns the ResourceName field value if set, zero value otherwise.
func (o *AlertInfoRecord) GetResourceName() string {
	if o == nil || IsNil(o.ResourceName) {
		var ret string
		return ret
	}
	return *o.ResourceName
}

// GetResourceNameOk returns a tuple with the ResourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertInfoRecord) GetResourceNameOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceName) {
		return nil, false
	}
	return o.ResourceName, true
}

// HasResourceName returns a boolean if a field has been set.
func (o *AlertInfoRecord) HasResourceName() bool {
	if o != nil && !IsNil(o.ResourceName) {
		return true
	}

	return false
}

// SetResourceName gets a reference to the given string and assigns it to the ResourceName field.
func (o *AlertInfoRecord) SetResourceName(v string) {
	o.ResourceName = &v
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *AlertInfoRecord) GetResourceType() string {
	if o == nil || IsNil(o.ResourceType) {
		var ret string
		return ret
	}
	return *o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertInfoRecord) GetResourceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceType) {
		return nil, false
	}
	return o.ResourceType, true
}

// HasResourceType returns a boolean if a field has been set.
func (o *AlertInfoRecord) HasResourceType() bool {
	if o != nil && !IsNil(o.ResourceType) {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given string and assigns it to the ResourceType field.
func (o *AlertInfoRecord) SetResourceType(v string) {
	o.ResourceType = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *AlertInfoRecord) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertInfoRecord) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *AlertInfoRecord) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *AlertInfoRecord) SetStatus(v string) {
	o.Status = &v
}

// GetTriggerMode returns the TriggerMode field value if set, zero value otherwise.
func (o *AlertInfoRecord) GetTriggerMode() string {
	if o == nil || IsNil(o.TriggerMode) {
		var ret string
		return ret
	}
	return *o.TriggerMode
}

// GetTriggerModeOk returns a tuple with the TriggerMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertInfoRecord) GetTriggerModeOk() (*string, bool) {
	if o == nil || IsNil(o.TriggerMode) {
		return nil, false
	}
	return o.TriggerMode, true
}

// HasTriggerMode returns a boolean if a field has been set.
func (o *AlertInfoRecord) HasTriggerMode() bool {
	if o != nil && !IsNil(o.TriggerMode) {
		return true
	}

	return false
}

// SetTriggerMode gets a reference to the given string and assigns it to the TriggerMode field.
func (o *AlertInfoRecord) SetTriggerMode(v string) {
	o.TriggerMode = &v
}

// GetTriggerPeriod returns the TriggerPeriod field value if set, zero value otherwise.
func (o *AlertInfoRecord) GetTriggerPeriod() int64 {
	if o == nil || IsNil(o.TriggerPeriod) {
		var ret int64
		return ret
	}
	return *o.TriggerPeriod
}

// GetTriggerPeriodOk returns a tuple with the TriggerPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertInfoRecord) GetTriggerPeriodOk() (*int64, bool) {
	if o == nil || IsNil(o.TriggerPeriod) {
		return nil, false
	}
	return o.TriggerPeriod, true
}

// HasTriggerPeriod returns a boolean if a field has been set.
func (o *AlertInfoRecord) HasTriggerPeriod() bool {
	if o != nil && !IsNil(o.TriggerPeriod) {
		return true
	}

	return false
}

// SetTriggerPeriod gets a reference to the given int64 and assigns it to the TriggerPeriod field.
func (o *AlertInfoRecord) SetTriggerPeriod(v int64) {
	o.TriggerPeriod = &v
}

// GetTriggerValue returns the TriggerValue field value if set, zero value otherwise.
func (o *AlertInfoRecord) GetTriggerValue() string {
	if o == nil || IsNil(o.TriggerValue) {
		var ret string
		return ret
	}
	return *o.TriggerValue
}

// GetTriggerValueOk returns a tuple with the TriggerValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertInfoRecord) GetTriggerValueOk() (*string, bool) {
	if o == nil || IsNil(o.TriggerValue) {
		return nil, false
	}
	return o.TriggerValue, true
}

// HasTriggerValue returns a boolean if a field has been set.
func (o *AlertInfoRecord) HasTriggerValue() bool {
	if o != nil && !IsNil(o.TriggerValue) {
		return true
	}

	return false
}

// SetTriggerValue gets a reference to the given string and assigns it to the TriggerValue field.
func (o *AlertInfoRecord) SetTriggerValue(v string) {
	o.TriggerValue = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AlertInfoRecord) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertInfoRecord) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AlertInfoRecord) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AlertInfoRecord) SetType(v string) {
	o.Type = &v
}

// GetWeight returns the Weight field value if set, zero value otherwise.
func (o *AlertInfoRecord) GetWeight() int32 {
	if o == nil || IsNil(o.Weight) {
		var ret int32
		return ret
	}
	return *o.Weight
}

// GetWeightOk returns a tuple with the Weight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertInfoRecord) GetWeightOk() (*int32, bool) {
	if o == nil || IsNil(o.Weight) {
		return nil, false
	}
	return o.Weight, true
}

// HasWeight returns a boolean if a field has been set.
func (o *AlertInfoRecord) HasWeight() bool {
	if o != nil && !IsNil(o.Weight) {
		return true
	}

	return false
}

// SetWeight gets a reference to the given int32 and assigns it to the Weight field.
func (o *AlertInfoRecord) SetWeight(v int32) {
	o.Weight = &v
}

// GetErrorRecords returns the ErrorRecords field value if set, zero value otherwise.
func (o *AlertInfoRecord) GetErrorRecords() []ErrorRecord {
	if o == nil || IsNil(o.ErrorRecords) {
		var ret []ErrorRecord
		return ret
	}
	return o.ErrorRecords
}

// GetErrorRecordsOk returns a tuple with the ErrorRecords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertInfoRecord) GetErrorRecordsOk() ([]ErrorRecord, bool) {
	if o == nil || IsNil(o.ErrorRecords) {
		return nil, false
	}
	return o.ErrorRecords, true
}

// HasErrorRecords returns a boolean if a field has been set.
func (o *AlertInfoRecord) HasErrorRecords() bool {
	if o != nil && !IsNil(o.ErrorRecords) {
		return true
	}

	return false
}

// SetErrorRecords gets a reference to the given []ErrorRecord and assigns it to the ErrorRecords field.
func (o *AlertInfoRecord) SetErrorRecords(v []ErrorRecord) {
	o.ErrorRecords = v
}

func (o AlertInfoRecord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlertInfoRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AckTime) {
		toSerialize["ack_time"] = o.AckTime
	}
	if !IsNil(o.Acked) {
		toSerialize["acked"] = o.Acked
	}
	if !IsNil(o.Advice) {
		toSerialize["advice"] = o.Advice
	}
	if !IsNil(o.AlarmId) {
		toSerialize["alarm_id"] = o.AlarmId
	}
	if !IsNil(o.AlertValue) {
		toSerialize["alert_value"] = o.AlertValue
	}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.ExportStatus) {
		toSerialize["export_status"] = o.ExportStatus
	}
	if !IsNil(o.ExtraData) {
		toSerialize["extra_data"] = o.ExtraData
	}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	if !IsNil(o.Host) {
		toSerialize["host"] = o.Host
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Level) {
		toSerialize["level"] = o.Level
	}
	if !IsNil(o.Object) {
		toSerialize["object"] = o.Object
	}
	if !IsNil(o.OspCluster) {
		toSerialize["osp_cluster"] = o.OspCluster
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !IsNil(o.RelatedResources) {
		toSerialize["related_resources"] = o.RelatedResources
	}
	if !IsNil(o.ResolveTime) {
		toSerialize["resolve_time"] = o.ResolveTime
	}
	if !IsNil(o.ResolveType) {
		toSerialize["resolve_type"] = o.ResolveType
	}
	if !IsNil(o.Resolved) {
		toSerialize["resolved"] = o.Resolved
	}
	if !IsNil(o.ResourceId) {
		toSerialize["resource_id"] = o.ResourceId
	}
	if !IsNil(o.ResourceName) {
		toSerialize["resource_name"] = o.ResourceName
	}
	if !IsNil(o.ResourceType) {
		toSerialize["resource_type"] = o.ResourceType
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.TriggerMode) {
		toSerialize["trigger_mode"] = o.TriggerMode
	}
	if !IsNil(o.TriggerPeriod) {
		toSerialize["trigger_period"] = o.TriggerPeriod
	}
	if !IsNil(o.TriggerValue) {
		toSerialize["trigger_value"] = o.TriggerValue
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Weight) {
		toSerialize["weight"] = o.Weight
	}
	if !IsNil(o.ErrorRecords) {
		toSerialize["error_records"] = o.ErrorRecords
	}
	return toSerialize, nil
}

type NullableAlertInfoRecord struct {
	value *AlertInfoRecord
	isSet bool
}

func (v NullableAlertInfoRecord) Get() *AlertInfoRecord {
	return v.value
}

func (v *NullableAlertInfoRecord) Set(val *AlertInfoRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertInfoRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertInfoRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertInfoRecord(val *AlertInfoRecord) *NullableAlertInfoRecord {
	return &NullableAlertInfoRecord{value: val, isSet: true}
}

func (v NullableAlertInfoRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertInfoRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


