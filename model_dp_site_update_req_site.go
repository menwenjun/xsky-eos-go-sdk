/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DpSiteUpdateReqSite type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DpSiteUpdateReqSite{}

// DpSiteUpdateReqSite struct for DpSiteUpdateReqSite
type DpSiteUpdateReqSite struct {
	Config *DpSiteConfig `json:"config,omitempty"`
	// dp site name
	Name *string `json:"name,omitempty"`
}

// NewDpSiteUpdateReqSite instantiates a new DpSiteUpdateReqSite object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDpSiteUpdateReqSite() *DpSiteUpdateReqSite {
	this := DpSiteUpdateReqSite{}
	return &this
}

// NewDpSiteUpdateReqSiteWithDefaults instantiates a new DpSiteUpdateReqSite object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDpSiteUpdateReqSiteWithDefaults() *DpSiteUpdateReqSite {
	this := DpSiteUpdateReqSite{}
	return &this
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *DpSiteUpdateReqSite) GetConfig() DpSiteConfig {
	if o == nil || IsNil(o.Config) {
		var ret DpSiteConfig
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpSiteUpdateReqSite) GetConfigOk() (*DpSiteConfig, bool) {
	if o == nil || IsNil(o.Config) {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *DpSiteUpdateReqSite) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given DpSiteConfig and assigns it to the Config field.
func (o *DpSiteUpdateReqSite) SetConfig(v DpSiteConfig) {
	o.Config = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DpSiteUpdateReqSite) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpSiteUpdateReqSite) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DpSiteUpdateReqSite) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DpSiteUpdateReqSite) SetName(v string) {
	o.Name = &v
}

func (o DpSiteUpdateReqSite) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DpSiteUpdateReqSite) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableDpSiteUpdateReqSite struct {
	value *DpSiteUpdateReqSite
	isSet bool
}

func (v NullableDpSiteUpdateReqSite) Get() *DpSiteUpdateReqSite {
	return v.value
}

func (v *NullableDpSiteUpdateReqSite) Set(val *DpSiteUpdateReqSite) {
	v.value = val
	v.isSet = true
}

func (v NullableDpSiteUpdateReqSite) IsSet() bool {
	return v.isSet
}

func (v *NullableDpSiteUpdateReqSite) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDpSiteUpdateReqSite(val *DpSiteUpdateReqSite) *NullableDpSiteUpdateReqSite {
	return &NullableDpSiteUpdateReqSite{value: val, isSet: true}
}

func (v NullableDpSiteUpdateReqSite) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDpSiteUpdateReqSite) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


