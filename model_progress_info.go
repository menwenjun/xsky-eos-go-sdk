/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the ProgressInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProgressInfo{}

// ProgressInfo ProgressInfo defines the progress info
type ProgressInfo struct {
	Action *string `json:"action,omitempty"`
	Create *time.Time `json:"create,omitempty"`
	CurrentProgress *float64 `json:"current_progress,omitempty"`
	Data *string `json:"data,omitempty"`
	FailNum *int64 `json:"fail_num,omitempty"`
	Id *int64 `json:"id,omitempty"`
	SuccessNum *int64 `json:"success_num,omitempty"`
	TotalNum *int64 `json:"total_num,omitempty"`
	TotalProgress *float64 `json:"total_progress,omitempty"`
	Update *time.Time `json:"update,omitempty"`
}

// NewProgressInfo instantiates a new ProgressInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProgressInfo() *ProgressInfo {
	this := ProgressInfo{}
	return &this
}

// NewProgressInfoWithDefaults instantiates a new ProgressInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProgressInfoWithDefaults() *ProgressInfo {
	this := ProgressInfo{}
	return &this
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *ProgressInfo) GetAction() string {
	if o == nil || IsNil(o.Action) {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgressInfo) GetActionOk() (*string, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *ProgressInfo) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *ProgressInfo) SetAction(v string) {
	o.Action = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *ProgressInfo) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgressInfo) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *ProgressInfo) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *ProgressInfo) SetCreate(v time.Time) {
	o.Create = &v
}

// GetCurrentProgress returns the CurrentProgress field value if set, zero value otherwise.
func (o *ProgressInfo) GetCurrentProgress() float64 {
	if o == nil || IsNil(o.CurrentProgress) {
		var ret float64
		return ret
	}
	return *o.CurrentProgress
}

// GetCurrentProgressOk returns a tuple with the CurrentProgress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgressInfo) GetCurrentProgressOk() (*float64, bool) {
	if o == nil || IsNil(o.CurrentProgress) {
		return nil, false
	}
	return o.CurrentProgress, true
}

// HasCurrentProgress returns a boolean if a field has been set.
func (o *ProgressInfo) HasCurrentProgress() bool {
	if o != nil && !IsNil(o.CurrentProgress) {
		return true
	}

	return false
}

// SetCurrentProgress gets a reference to the given float64 and assigns it to the CurrentProgress field.
func (o *ProgressInfo) SetCurrentProgress(v float64) {
	o.CurrentProgress = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ProgressInfo) GetData() string {
	if o == nil || IsNil(o.Data) {
		var ret string
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgressInfo) GetDataOk() (*string, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ProgressInfo) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given string and assigns it to the Data field.
func (o *ProgressInfo) SetData(v string) {
	o.Data = &v
}

// GetFailNum returns the FailNum field value if set, zero value otherwise.
func (o *ProgressInfo) GetFailNum() int64 {
	if o == nil || IsNil(o.FailNum) {
		var ret int64
		return ret
	}
	return *o.FailNum
}

// GetFailNumOk returns a tuple with the FailNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgressInfo) GetFailNumOk() (*int64, bool) {
	if o == nil || IsNil(o.FailNum) {
		return nil, false
	}
	return o.FailNum, true
}

// HasFailNum returns a boolean if a field has been set.
func (o *ProgressInfo) HasFailNum() bool {
	if o != nil && !IsNil(o.FailNum) {
		return true
	}

	return false
}

// SetFailNum gets a reference to the given int64 and assigns it to the FailNum field.
func (o *ProgressInfo) SetFailNum(v int64) {
	o.FailNum = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ProgressInfo) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgressInfo) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ProgressInfo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *ProgressInfo) SetId(v int64) {
	o.Id = &v
}

// GetSuccessNum returns the SuccessNum field value if set, zero value otherwise.
func (o *ProgressInfo) GetSuccessNum() int64 {
	if o == nil || IsNil(o.SuccessNum) {
		var ret int64
		return ret
	}
	return *o.SuccessNum
}

// GetSuccessNumOk returns a tuple with the SuccessNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgressInfo) GetSuccessNumOk() (*int64, bool) {
	if o == nil || IsNil(o.SuccessNum) {
		return nil, false
	}
	return o.SuccessNum, true
}

// HasSuccessNum returns a boolean if a field has been set.
func (o *ProgressInfo) HasSuccessNum() bool {
	if o != nil && !IsNil(o.SuccessNum) {
		return true
	}

	return false
}

// SetSuccessNum gets a reference to the given int64 and assigns it to the SuccessNum field.
func (o *ProgressInfo) SetSuccessNum(v int64) {
	o.SuccessNum = &v
}

// GetTotalNum returns the TotalNum field value if set, zero value otherwise.
func (o *ProgressInfo) GetTotalNum() int64 {
	if o == nil || IsNil(o.TotalNum) {
		var ret int64
		return ret
	}
	return *o.TotalNum
}

// GetTotalNumOk returns a tuple with the TotalNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgressInfo) GetTotalNumOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalNum) {
		return nil, false
	}
	return o.TotalNum, true
}

// HasTotalNum returns a boolean if a field has been set.
func (o *ProgressInfo) HasTotalNum() bool {
	if o != nil && !IsNil(o.TotalNum) {
		return true
	}

	return false
}

// SetTotalNum gets a reference to the given int64 and assigns it to the TotalNum field.
func (o *ProgressInfo) SetTotalNum(v int64) {
	o.TotalNum = &v
}

// GetTotalProgress returns the TotalProgress field value if set, zero value otherwise.
func (o *ProgressInfo) GetTotalProgress() float64 {
	if o == nil || IsNil(o.TotalProgress) {
		var ret float64
		return ret
	}
	return *o.TotalProgress
}

// GetTotalProgressOk returns a tuple with the TotalProgress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgressInfo) GetTotalProgressOk() (*float64, bool) {
	if o == nil || IsNil(o.TotalProgress) {
		return nil, false
	}
	return o.TotalProgress, true
}

// HasTotalProgress returns a boolean if a field has been set.
func (o *ProgressInfo) HasTotalProgress() bool {
	if o != nil && !IsNil(o.TotalProgress) {
		return true
	}

	return false
}

// SetTotalProgress gets a reference to the given float64 and assigns it to the TotalProgress field.
func (o *ProgressInfo) SetTotalProgress(v float64) {
	o.TotalProgress = &v
}

// GetUpdate returns the Update field value if set, zero value otherwise.
func (o *ProgressInfo) GetUpdate() time.Time {
	if o == nil || IsNil(o.Update) {
		var ret time.Time
		return ret
	}
	return *o.Update
}

// GetUpdateOk returns a tuple with the Update field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgressInfo) GetUpdateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Update) {
		return nil, false
	}
	return o.Update, true
}

// HasUpdate returns a boolean if a field has been set.
func (o *ProgressInfo) HasUpdate() bool {
	if o != nil && !IsNil(o.Update) {
		return true
	}

	return false
}

// SetUpdate gets a reference to the given time.Time and assigns it to the Update field.
func (o *ProgressInfo) SetUpdate(v time.Time) {
	o.Update = &v
}

func (o ProgressInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProgressInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.CurrentProgress) {
		toSerialize["current_progress"] = o.CurrentProgress
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.FailNum) {
		toSerialize["fail_num"] = o.FailNum
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.SuccessNum) {
		toSerialize["success_num"] = o.SuccessNum
	}
	if !IsNil(o.TotalNum) {
		toSerialize["total_num"] = o.TotalNum
	}
	if !IsNil(o.TotalProgress) {
		toSerialize["total_progress"] = o.TotalProgress
	}
	if !IsNil(o.Update) {
		toSerialize["update"] = o.Update
	}
	return toSerialize, nil
}

type NullableProgressInfo struct {
	value *ProgressInfo
	isSet bool
}

func (v NullableProgressInfo) Get() *ProgressInfo {
	return v.value
}

func (v *NullableProgressInfo) Set(val *ProgressInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableProgressInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableProgressInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProgressInfo(val *ProgressInfo) *NullableProgressInfo {
	return &NullableProgressInfo{value: val, isSet: true}
}

func (v NullableProgressInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProgressInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


