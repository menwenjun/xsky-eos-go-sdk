/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the VolumeIOSize type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VolumeIOSize{}

// VolumeIOSize VolumeIOSize defines volume IO Size count
type VolumeIOSize struct {
	Var04kbyte *float64 `json:"0_4kbyte,omitempty"`
	Var3264kbyte *float64 `json:"32_64kbyte,omitempty"`
	Var48kbyte *float64 `json:"4_8kbyte,omitempty"`
	Var64512kbyte *float64 `json:"64_512kbyte,omitempty"`
	Var832kbyte *float64 `json:"8_32kbyte,omitempty"`
	Above512kbyte *float64 `json:"above_512kbyte,omitempty"`
}

// NewVolumeIOSize instantiates a new VolumeIOSize object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumeIOSize() *VolumeIOSize {
	this := VolumeIOSize{}
	return &this
}

// NewVolumeIOSizeWithDefaults instantiates a new VolumeIOSize object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeIOSizeWithDefaults() *VolumeIOSize {
	this := VolumeIOSize{}
	return &this
}

// GetVar04kbyte returns the Var04kbyte field value if set, zero value otherwise.
func (o *VolumeIOSize) GetVar04kbyte() float64 {
	if o == nil || IsNil(o.Var04kbyte) {
		var ret float64
		return ret
	}
	return *o.Var04kbyte
}

// GetVar04kbyteOk returns a tuple with the Var04kbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeIOSize) GetVar04kbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.Var04kbyte) {
		return nil, false
	}
	return o.Var04kbyte, true
}

// HasVar04kbyte returns a boolean if a field has been set.
func (o *VolumeIOSize) HasVar04kbyte() bool {
	if o != nil && !IsNil(o.Var04kbyte) {
		return true
	}

	return false
}

// SetVar04kbyte gets a reference to the given float64 and assigns it to the Var04kbyte field.
func (o *VolumeIOSize) SetVar04kbyte(v float64) {
	o.Var04kbyte = &v
}

// GetVar3264kbyte returns the Var3264kbyte field value if set, zero value otherwise.
func (o *VolumeIOSize) GetVar3264kbyte() float64 {
	if o == nil || IsNil(o.Var3264kbyte) {
		var ret float64
		return ret
	}
	return *o.Var3264kbyte
}

// GetVar3264kbyteOk returns a tuple with the Var3264kbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeIOSize) GetVar3264kbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.Var3264kbyte) {
		return nil, false
	}
	return o.Var3264kbyte, true
}

// HasVar3264kbyte returns a boolean if a field has been set.
func (o *VolumeIOSize) HasVar3264kbyte() bool {
	if o != nil && !IsNil(o.Var3264kbyte) {
		return true
	}

	return false
}

// SetVar3264kbyte gets a reference to the given float64 and assigns it to the Var3264kbyte field.
func (o *VolumeIOSize) SetVar3264kbyte(v float64) {
	o.Var3264kbyte = &v
}

// GetVar48kbyte returns the Var48kbyte field value if set, zero value otherwise.
func (o *VolumeIOSize) GetVar48kbyte() float64 {
	if o == nil || IsNil(o.Var48kbyte) {
		var ret float64
		return ret
	}
	return *o.Var48kbyte
}

// GetVar48kbyteOk returns a tuple with the Var48kbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeIOSize) GetVar48kbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.Var48kbyte) {
		return nil, false
	}
	return o.Var48kbyte, true
}

// HasVar48kbyte returns a boolean if a field has been set.
func (o *VolumeIOSize) HasVar48kbyte() bool {
	if o != nil && !IsNil(o.Var48kbyte) {
		return true
	}

	return false
}

// SetVar48kbyte gets a reference to the given float64 and assigns it to the Var48kbyte field.
func (o *VolumeIOSize) SetVar48kbyte(v float64) {
	o.Var48kbyte = &v
}

// GetVar64512kbyte returns the Var64512kbyte field value if set, zero value otherwise.
func (o *VolumeIOSize) GetVar64512kbyte() float64 {
	if o == nil || IsNil(o.Var64512kbyte) {
		var ret float64
		return ret
	}
	return *o.Var64512kbyte
}

// GetVar64512kbyteOk returns a tuple with the Var64512kbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeIOSize) GetVar64512kbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.Var64512kbyte) {
		return nil, false
	}
	return o.Var64512kbyte, true
}

// HasVar64512kbyte returns a boolean if a field has been set.
func (o *VolumeIOSize) HasVar64512kbyte() bool {
	if o != nil && !IsNil(o.Var64512kbyte) {
		return true
	}

	return false
}

// SetVar64512kbyte gets a reference to the given float64 and assigns it to the Var64512kbyte field.
func (o *VolumeIOSize) SetVar64512kbyte(v float64) {
	o.Var64512kbyte = &v
}

// GetVar832kbyte returns the Var832kbyte field value if set, zero value otherwise.
func (o *VolumeIOSize) GetVar832kbyte() float64 {
	if o == nil || IsNil(o.Var832kbyte) {
		var ret float64
		return ret
	}
	return *o.Var832kbyte
}

// GetVar832kbyteOk returns a tuple with the Var832kbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeIOSize) GetVar832kbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.Var832kbyte) {
		return nil, false
	}
	return o.Var832kbyte, true
}

// HasVar832kbyte returns a boolean if a field has been set.
func (o *VolumeIOSize) HasVar832kbyte() bool {
	if o != nil && !IsNil(o.Var832kbyte) {
		return true
	}

	return false
}

// SetVar832kbyte gets a reference to the given float64 and assigns it to the Var832kbyte field.
func (o *VolumeIOSize) SetVar832kbyte(v float64) {
	o.Var832kbyte = &v
}

// GetAbove512kbyte returns the Above512kbyte field value if set, zero value otherwise.
func (o *VolumeIOSize) GetAbove512kbyte() float64 {
	if o == nil || IsNil(o.Above512kbyte) {
		var ret float64
		return ret
	}
	return *o.Above512kbyte
}

// GetAbove512kbyteOk returns a tuple with the Above512kbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeIOSize) GetAbove512kbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.Above512kbyte) {
		return nil, false
	}
	return o.Above512kbyte, true
}

// HasAbove512kbyte returns a boolean if a field has been set.
func (o *VolumeIOSize) HasAbove512kbyte() bool {
	if o != nil && !IsNil(o.Above512kbyte) {
		return true
	}

	return false
}

// SetAbove512kbyte gets a reference to the given float64 and assigns it to the Above512kbyte field.
func (o *VolumeIOSize) SetAbove512kbyte(v float64) {
	o.Above512kbyte = &v
}

func (o VolumeIOSize) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VolumeIOSize) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Var04kbyte) {
		toSerialize["0_4kbyte"] = o.Var04kbyte
	}
	if !IsNil(o.Var3264kbyte) {
		toSerialize["32_64kbyte"] = o.Var3264kbyte
	}
	if !IsNil(o.Var48kbyte) {
		toSerialize["4_8kbyte"] = o.Var48kbyte
	}
	if !IsNil(o.Var64512kbyte) {
		toSerialize["64_512kbyte"] = o.Var64512kbyte
	}
	if !IsNil(o.Var832kbyte) {
		toSerialize["8_32kbyte"] = o.Var832kbyte
	}
	if !IsNil(o.Above512kbyte) {
		toSerialize["above_512kbyte"] = o.Above512kbyte
	}
	return toSerialize, nil
}

type NullableVolumeIOSize struct {
	value *VolumeIOSize
	isSet bool
}

func (v NullableVolumeIOSize) Get() *VolumeIOSize {
	return v.value
}

func (v *NullableVolumeIOSize) Set(val *VolumeIOSize) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeIOSize) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeIOSize) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeIOSize(val *VolumeIOSize) *NullableVolumeIOSize {
	return &NullableVolumeIOSize{value: val, isSet: true}
}

func (v NullableVolumeIOSize) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeIOSize) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


