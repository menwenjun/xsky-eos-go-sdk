/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DfsSMBWindowsACLDeleteReqWindowsACL type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsSMBWindowsACLDeleteReqWindowsACL{}

// DfsSMBWindowsACLDeleteReqWindowsACL struct for DfsSMBWindowsACLDeleteReqWindowsACL
type DfsSMBWindowsACLDeleteReqWindowsACL struct {
	// type of acl, allowed or denied
	AceType string `json:"ace_type"`
	// inherited information
	ApplyTo string `json:"apply_to"`
	// id of rootfs
	DfsRootfsId int64 `json:"dfs_rootfs_id"`
	// directory path
	Path string `json:"path"`
	// principal access permissions
	Permissions []string `json:"permissions"`
	// the entity of performing access control
	Principal string `json:"principal"`
}

type _DfsSMBWindowsACLDeleteReqWindowsACL DfsSMBWindowsACLDeleteReqWindowsACL

// NewDfsSMBWindowsACLDeleteReqWindowsACL instantiates a new DfsSMBWindowsACLDeleteReqWindowsACL object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsSMBWindowsACLDeleteReqWindowsACL(aceType string, applyTo string, dfsRootfsId int64, path string, permissions []string, principal string) *DfsSMBWindowsACLDeleteReqWindowsACL {
	this := DfsSMBWindowsACLDeleteReqWindowsACL{}
	this.AceType = aceType
	this.ApplyTo = applyTo
	this.DfsRootfsId = dfsRootfsId
	this.Path = path
	this.Permissions = permissions
	this.Principal = principal
	return &this
}

// NewDfsSMBWindowsACLDeleteReqWindowsACLWithDefaults instantiates a new DfsSMBWindowsACLDeleteReqWindowsACL object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsSMBWindowsACLDeleteReqWindowsACLWithDefaults() *DfsSMBWindowsACLDeleteReqWindowsACL {
	this := DfsSMBWindowsACLDeleteReqWindowsACL{}
	return &this
}

// GetAceType returns the AceType field value
func (o *DfsSMBWindowsACLDeleteReqWindowsACL) GetAceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AceType
}

// GetAceTypeOk returns a tuple with the AceType field value
// and a boolean to check if the value has been set.
func (o *DfsSMBWindowsACLDeleteReqWindowsACL) GetAceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AceType, true
}

// SetAceType sets field value
func (o *DfsSMBWindowsACLDeleteReqWindowsACL) SetAceType(v string) {
	o.AceType = v
}

// GetApplyTo returns the ApplyTo field value
func (o *DfsSMBWindowsACLDeleteReqWindowsACL) GetApplyTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApplyTo
}

// GetApplyToOk returns a tuple with the ApplyTo field value
// and a boolean to check if the value has been set.
func (o *DfsSMBWindowsACLDeleteReqWindowsACL) GetApplyToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApplyTo, true
}

// SetApplyTo sets field value
func (o *DfsSMBWindowsACLDeleteReqWindowsACL) SetApplyTo(v string) {
	o.ApplyTo = v
}

// GetDfsRootfsId returns the DfsRootfsId field value
func (o *DfsSMBWindowsACLDeleteReqWindowsACL) GetDfsRootfsId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DfsRootfsId
}

// GetDfsRootfsIdOk returns a tuple with the DfsRootfsId field value
// and a boolean to check if the value has been set.
func (o *DfsSMBWindowsACLDeleteReqWindowsACL) GetDfsRootfsIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DfsRootfsId, true
}

// SetDfsRootfsId sets field value
func (o *DfsSMBWindowsACLDeleteReqWindowsACL) SetDfsRootfsId(v int64) {
	o.DfsRootfsId = v
}

// GetPath returns the Path field value
func (o *DfsSMBWindowsACLDeleteReqWindowsACL) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *DfsSMBWindowsACLDeleteReqWindowsACL) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *DfsSMBWindowsACLDeleteReqWindowsACL) SetPath(v string) {
	o.Path = v
}

// GetPermissions returns the Permissions field value
func (o *DfsSMBWindowsACLDeleteReqWindowsACL) GetPermissions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value
// and a boolean to check if the value has been set.
func (o *DfsSMBWindowsACLDeleteReqWindowsACL) GetPermissionsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Permissions, true
}

// SetPermissions sets field value
func (o *DfsSMBWindowsACLDeleteReqWindowsACL) SetPermissions(v []string) {
	o.Permissions = v
}

// GetPrincipal returns the Principal field value
func (o *DfsSMBWindowsACLDeleteReqWindowsACL) GetPrincipal() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Principal
}

// GetPrincipalOk returns a tuple with the Principal field value
// and a boolean to check if the value has been set.
func (o *DfsSMBWindowsACLDeleteReqWindowsACL) GetPrincipalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Principal, true
}

// SetPrincipal sets field value
func (o *DfsSMBWindowsACLDeleteReqWindowsACL) SetPrincipal(v string) {
	o.Principal = v
}

func (o DfsSMBWindowsACLDeleteReqWindowsACL) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsSMBWindowsACLDeleteReqWindowsACL) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ace_type"] = o.AceType
	toSerialize["apply_to"] = o.ApplyTo
	toSerialize["dfs_rootfs_id"] = o.DfsRootfsId
	toSerialize["path"] = o.Path
	toSerialize["permissions"] = o.Permissions
	toSerialize["principal"] = o.Principal
	return toSerialize, nil
}

func (o *DfsSMBWindowsACLDeleteReqWindowsACL) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ace_type",
		"apply_to",
		"dfs_rootfs_id",
		"path",
		"permissions",
		"principal",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDfsSMBWindowsACLDeleteReqWindowsACL := _DfsSMBWindowsACLDeleteReqWindowsACL{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDfsSMBWindowsACLDeleteReqWindowsACL)

	if err != nil {
		return err
	}

	*o = DfsSMBWindowsACLDeleteReqWindowsACL(varDfsSMBWindowsACLDeleteReqWindowsACL)

	return err
}

type NullableDfsSMBWindowsACLDeleteReqWindowsACL struct {
	value *DfsSMBWindowsACLDeleteReqWindowsACL
	isSet bool
}

func (v NullableDfsSMBWindowsACLDeleteReqWindowsACL) Get() *DfsSMBWindowsACLDeleteReqWindowsACL {
	return v.value
}

func (v *NullableDfsSMBWindowsACLDeleteReqWindowsACL) Set(val *DfsSMBWindowsACLDeleteReqWindowsACL) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsSMBWindowsACLDeleteReqWindowsACL) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsSMBWindowsACLDeleteReqWindowsACL) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsSMBWindowsACLDeleteReqWindowsACL(val *DfsSMBWindowsACLDeleteReqWindowsACL) *NullableDfsSMBWindowsACLDeleteReqWindowsACL {
	return &NullableDfsSMBWindowsACLDeleteReqWindowsACL{value: val, isSet: true}
}

func (v NullableDfsSMBWindowsACLDeleteReqWindowsACL) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsSMBWindowsACLDeleteReqWindowsACL) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


