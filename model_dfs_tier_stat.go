/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the DfsTierStat type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsTierStat{}

// DfsTierStat DfsTierStat records dfs tier stat info
type DfsTierStat struct {
	ActualKbyte *int64 `json:"actual_kbyte,omitempty"`
	Create *time.Time `json:"create,omitempty"`
	DataKbyte *int64 `json:"data_kbyte,omitempty"`
	DegradedPercent *float64 `json:"degraded_percent,omitempty"`
	HealthyPercent *float64 `json:"healthy_percent,omitempty"`
	ReadBandwidthKbyte *float64 `json:"read_bandwidth_kbyte,omitempty"`
	ReadIops *float64 `json:"read_iops,omitempty"`
	ReadLatencyUs *float64 `json:"read_latency_us,omitempty"`
	RecoveryBandwidthKbyte *float64 `json:"recovery_bandwidth_kbyte,omitempty"`
	RecoveryIops *float64 `json:"recovery_iops,omitempty"`
	RecoveryPercent *float64 `json:"recovery_percent,omitempty"`
	TotalKbyte *int64 `json:"total_kbyte,omitempty"`
	UnavailablePercent *float64 `json:"unavailable_percent,omitempty"`
	UsedKbyte *int64 `json:"used_kbyte,omitempty"`
	WriteBandwidthKbyte *float64 `json:"write_bandwidth_kbyte,omitempty"`
	WriteIops *float64 `json:"write_iops,omitempty"`
	WriteLatencyUs *float64 `json:"write_latency_us,omitempty"`
}

// NewDfsTierStat instantiates a new DfsTierStat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsTierStat() *DfsTierStat {
	this := DfsTierStat{}
	return &this
}

// NewDfsTierStatWithDefaults instantiates a new DfsTierStat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsTierStatWithDefaults() *DfsTierStat {
	this := DfsTierStat{}
	return &this
}

// GetActualKbyte returns the ActualKbyte field value if set, zero value otherwise.
func (o *DfsTierStat) GetActualKbyte() int64 {
	if o == nil || IsNil(o.ActualKbyte) {
		var ret int64
		return ret
	}
	return *o.ActualKbyte
}

// GetActualKbyteOk returns a tuple with the ActualKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTierStat) GetActualKbyteOk() (*int64, bool) {
	if o == nil || IsNil(o.ActualKbyte) {
		return nil, false
	}
	return o.ActualKbyte, true
}

// HasActualKbyte returns a boolean if a field has been set.
func (o *DfsTierStat) HasActualKbyte() bool {
	if o != nil && !IsNil(o.ActualKbyte) {
		return true
	}

	return false
}

// SetActualKbyte gets a reference to the given int64 and assigns it to the ActualKbyte field.
func (o *DfsTierStat) SetActualKbyte(v int64) {
	o.ActualKbyte = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *DfsTierStat) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTierStat) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *DfsTierStat) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *DfsTierStat) SetCreate(v time.Time) {
	o.Create = &v
}

// GetDataKbyte returns the DataKbyte field value if set, zero value otherwise.
func (o *DfsTierStat) GetDataKbyte() int64 {
	if o == nil || IsNil(o.DataKbyte) {
		var ret int64
		return ret
	}
	return *o.DataKbyte
}

// GetDataKbyteOk returns a tuple with the DataKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTierStat) GetDataKbyteOk() (*int64, bool) {
	if o == nil || IsNil(o.DataKbyte) {
		return nil, false
	}
	return o.DataKbyte, true
}

// HasDataKbyte returns a boolean if a field has been set.
func (o *DfsTierStat) HasDataKbyte() bool {
	if o != nil && !IsNil(o.DataKbyte) {
		return true
	}

	return false
}

// SetDataKbyte gets a reference to the given int64 and assigns it to the DataKbyte field.
func (o *DfsTierStat) SetDataKbyte(v int64) {
	o.DataKbyte = &v
}

// GetDegradedPercent returns the DegradedPercent field value if set, zero value otherwise.
func (o *DfsTierStat) GetDegradedPercent() float64 {
	if o == nil || IsNil(o.DegradedPercent) {
		var ret float64
		return ret
	}
	return *o.DegradedPercent
}

// GetDegradedPercentOk returns a tuple with the DegradedPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTierStat) GetDegradedPercentOk() (*float64, bool) {
	if o == nil || IsNil(o.DegradedPercent) {
		return nil, false
	}
	return o.DegradedPercent, true
}

// HasDegradedPercent returns a boolean if a field has been set.
func (o *DfsTierStat) HasDegradedPercent() bool {
	if o != nil && !IsNil(o.DegradedPercent) {
		return true
	}

	return false
}

// SetDegradedPercent gets a reference to the given float64 and assigns it to the DegradedPercent field.
func (o *DfsTierStat) SetDegradedPercent(v float64) {
	o.DegradedPercent = &v
}

// GetHealthyPercent returns the HealthyPercent field value if set, zero value otherwise.
func (o *DfsTierStat) GetHealthyPercent() float64 {
	if o == nil || IsNil(o.HealthyPercent) {
		var ret float64
		return ret
	}
	return *o.HealthyPercent
}

// GetHealthyPercentOk returns a tuple with the HealthyPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTierStat) GetHealthyPercentOk() (*float64, bool) {
	if o == nil || IsNil(o.HealthyPercent) {
		return nil, false
	}
	return o.HealthyPercent, true
}

// HasHealthyPercent returns a boolean if a field has been set.
func (o *DfsTierStat) HasHealthyPercent() bool {
	if o != nil && !IsNil(o.HealthyPercent) {
		return true
	}

	return false
}

// SetHealthyPercent gets a reference to the given float64 and assigns it to the HealthyPercent field.
func (o *DfsTierStat) SetHealthyPercent(v float64) {
	o.HealthyPercent = &v
}

// GetReadBandwidthKbyte returns the ReadBandwidthKbyte field value if set, zero value otherwise.
func (o *DfsTierStat) GetReadBandwidthKbyte() float64 {
	if o == nil || IsNil(o.ReadBandwidthKbyte) {
		var ret float64
		return ret
	}
	return *o.ReadBandwidthKbyte
}

// GetReadBandwidthKbyteOk returns a tuple with the ReadBandwidthKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTierStat) GetReadBandwidthKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.ReadBandwidthKbyte) {
		return nil, false
	}
	return o.ReadBandwidthKbyte, true
}

// HasReadBandwidthKbyte returns a boolean if a field has been set.
func (o *DfsTierStat) HasReadBandwidthKbyte() bool {
	if o != nil && !IsNil(o.ReadBandwidthKbyte) {
		return true
	}

	return false
}

// SetReadBandwidthKbyte gets a reference to the given float64 and assigns it to the ReadBandwidthKbyte field.
func (o *DfsTierStat) SetReadBandwidthKbyte(v float64) {
	o.ReadBandwidthKbyte = &v
}

// GetReadIops returns the ReadIops field value if set, zero value otherwise.
func (o *DfsTierStat) GetReadIops() float64 {
	if o == nil || IsNil(o.ReadIops) {
		var ret float64
		return ret
	}
	return *o.ReadIops
}

// GetReadIopsOk returns a tuple with the ReadIops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTierStat) GetReadIopsOk() (*float64, bool) {
	if o == nil || IsNil(o.ReadIops) {
		return nil, false
	}
	return o.ReadIops, true
}

// HasReadIops returns a boolean if a field has been set.
func (o *DfsTierStat) HasReadIops() bool {
	if o != nil && !IsNil(o.ReadIops) {
		return true
	}

	return false
}

// SetReadIops gets a reference to the given float64 and assigns it to the ReadIops field.
func (o *DfsTierStat) SetReadIops(v float64) {
	o.ReadIops = &v
}

// GetReadLatencyUs returns the ReadLatencyUs field value if set, zero value otherwise.
func (o *DfsTierStat) GetReadLatencyUs() float64 {
	if o == nil || IsNil(o.ReadLatencyUs) {
		var ret float64
		return ret
	}
	return *o.ReadLatencyUs
}

// GetReadLatencyUsOk returns a tuple with the ReadLatencyUs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTierStat) GetReadLatencyUsOk() (*float64, bool) {
	if o == nil || IsNil(o.ReadLatencyUs) {
		return nil, false
	}
	return o.ReadLatencyUs, true
}

// HasReadLatencyUs returns a boolean if a field has been set.
func (o *DfsTierStat) HasReadLatencyUs() bool {
	if o != nil && !IsNil(o.ReadLatencyUs) {
		return true
	}

	return false
}

// SetReadLatencyUs gets a reference to the given float64 and assigns it to the ReadLatencyUs field.
func (o *DfsTierStat) SetReadLatencyUs(v float64) {
	o.ReadLatencyUs = &v
}

// GetRecoveryBandwidthKbyte returns the RecoveryBandwidthKbyte field value if set, zero value otherwise.
func (o *DfsTierStat) GetRecoveryBandwidthKbyte() float64 {
	if o == nil || IsNil(o.RecoveryBandwidthKbyte) {
		var ret float64
		return ret
	}
	return *o.RecoveryBandwidthKbyte
}

// GetRecoveryBandwidthKbyteOk returns a tuple with the RecoveryBandwidthKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTierStat) GetRecoveryBandwidthKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.RecoveryBandwidthKbyte) {
		return nil, false
	}
	return o.RecoveryBandwidthKbyte, true
}

// HasRecoveryBandwidthKbyte returns a boolean if a field has been set.
func (o *DfsTierStat) HasRecoveryBandwidthKbyte() bool {
	if o != nil && !IsNil(o.RecoveryBandwidthKbyte) {
		return true
	}

	return false
}

// SetRecoveryBandwidthKbyte gets a reference to the given float64 and assigns it to the RecoveryBandwidthKbyte field.
func (o *DfsTierStat) SetRecoveryBandwidthKbyte(v float64) {
	o.RecoveryBandwidthKbyte = &v
}

// GetRecoveryIops returns the RecoveryIops field value if set, zero value otherwise.
func (o *DfsTierStat) GetRecoveryIops() float64 {
	if o == nil || IsNil(o.RecoveryIops) {
		var ret float64
		return ret
	}
	return *o.RecoveryIops
}

// GetRecoveryIopsOk returns a tuple with the RecoveryIops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTierStat) GetRecoveryIopsOk() (*float64, bool) {
	if o == nil || IsNil(o.RecoveryIops) {
		return nil, false
	}
	return o.RecoveryIops, true
}

// HasRecoveryIops returns a boolean if a field has been set.
func (o *DfsTierStat) HasRecoveryIops() bool {
	if o != nil && !IsNil(o.RecoveryIops) {
		return true
	}

	return false
}

// SetRecoveryIops gets a reference to the given float64 and assigns it to the RecoveryIops field.
func (o *DfsTierStat) SetRecoveryIops(v float64) {
	o.RecoveryIops = &v
}

// GetRecoveryPercent returns the RecoveryPercent field value if set, zero value otherwise.
func (o *DfsTierStat) GetRecoveryPercent() float64 {
	if o == nil || IsNil(o.RecoveryPercent) {
		var ret float64
		return ret
	}
	return *o.RecoveryPercent
}

// GetRecoveryPercentOk returns a tuple with the RecoveryPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTierStat) GetRecoveryPercentOk() (*float64, bool) {
	if o == nil || IsNil(o.RecoveryPercent) {
		return nil, false
	}
	return o.RecoveryPercent, true
}

// HasRecoveryPercent returns a boolean if a field has been set.
func (o *DfsTierStat) HasRecoveryPercent() bool {
	if o != nil && !IsNil(o.RecoveryPercent) {
		return true
	}

	return false
}

// SetRecoveryPercent gets a reference to the given float64 and assigns it to the RecoveryPercent field.
func (o *DfsTierStat) SetRecoveryPercent(v float64) {
	o.RecoveryPercent = &v
}

// GetTotalKbyte returns the TotalKbyte field value if set, zero value otherwise.
func (o *DfsTierStat) GetTotalKbyte() int64 {
	if o == nil || IsNil(o.TotalKbyte) {
		var ret int64
		return ret
	}
	return *o.TotalKbyte
}

// GetTotalKbyteOk returns a tuple with the TotalKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTierStat) GetTotalKbyteOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalKbyte) {
		return nil, false
	}
	return o.TotalKbyte, true
}

// HasTotalKbyte returns a boolean if a field has been set.
func (o *DfsTierStat) HasTotalKbyte() bool {
	if o != nil && !IsNil(o.TotalKbyte) {
		return true
	}

	return false
}

// SetTotalKbyte gets a reference to the given int64 and assigns it to the TotalKbyte field.
func (o *DfsTierStat) SetTotalKbyte(v int64) {
	o.TotalKbyte = &v
}

// GetUnavailablePercent returns the UnavailablePercent field value if set, zero value otherwise.
func (o *DfsTierStat) GetUnavailablePercent() float64 {
	if o == nil || IsNil(o.UnavailablePercent) {
		var ret float64
		return ret
	}
	return *o.UnavailablePercent
}

// GetUnavailablePercentOk returns a tuple with the UnavailablePercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTierStat) GetUnavailablePercentOk() (*float64, bool) {
	if o == nil || IsNil(o.UnavailablePercent) {
		return nil, false
	}
	return o.UnavailablePercent, true
}

// HasUnavailablePercent returns a boolean if a field has been set.
func (o *DfsTierStat) HasUnavailablePercent() bool {
	if o != nil && !IsNil(o.UnavailablePercent) {
		return true
	}

	return false
}

// SetUnavailablePercent gets a reference to the given float64 and assigns it to the UnavailablePercent field.
func (o *DfsTierStat) SetUnavailablePercent(v float64) {
	o.UnavailablePercent = &v
}

// GetUsedKbyte returns the UsedKbyte field value if set, zero value otherwise.
func (o *DfsTierStat) GetUsedKbyte() int64 {
	if o == nil || IsNil(o.UsedKbyte) {
		var ret int64
		return ret
	}
	return *o.UsedKbyte
}

// GetUsedKbyteOk returns a tuple with the UsedKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTierStat) GetUsedKbyteOk() (*int64, bool) {
	if o == nil || IsNil(o.UsedKbyte) {
		return nil, false
	}
	return o.UsedKbyte, true
}

// HasUsedKbyte returns a boolean if a field has been set.
func (o *DfsTierStat) HasUsedKbyte() bool {
	if o != nil && !IsNil(o.UsedKbyte) {
		return true
	}

	return false
}

// SetUsedKbyte gets a reference to the given int64 and assigns it to the UsedKbyte field.
func (o *DfsTierStat) SetUsedKbyte(v int64) {
	o.UsedKbyte = &v
}

// GetWriteBandwidthKbyte returns the WriteBandwidthKbyte field value if set, zero value otherwise.
func (o *DfsTierStat) GetWriteBandwidthKbyte() float64 {
	if o == nil || IsNil(o.WriteBandwidthKbyte) {
		var ret float64
		return ret
	}
	return *o.WriteBandwidthKbyte
}

// GetWriteBandwidthKbyteOk returns a tuple with the WriteBandwidthKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTierStat) GetWriteBandwidthKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.WriteBandwidthKbyte) {
		return nil, false
	}
	return o.WriteBandwidthKbyte, true
}

// HasWriteBandwidthKbyte returns a boolean if a field has been set.
func (o *DfsTierStat) HasWriteBandwidthKbyte() bool {
	if o != nil && !IsNil(o.WriteBandwidthKbyte) {
		return true
	}

	return false
}

// SetWriteBandwidthKbyte gets a reference to the given float64 and assigns it to the WriteBandwidthKbyte field.
func (o *DfsTierStat) SetWriteBandwidthKbyte(v float64) {
	o.WriteBandwidthKbyte = &v
}

// GetWriteIops returns the WriteIops field value if set, zero value otherwise.
func (o *DfsTierStat) GetWriteIops() float64 {
	if o == nil || IsNil(o.WriteIops) {
		var ret float64
		return ret
	}
	return *o.WriteIops
}

// GetWriteIopsOk returns a tuple with the WriteIops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTierStat) GetWriteIopsOk() (*float64, bool) {
	if o == nil || IsNil(o.WriteIops) {
		return nil, false
	}
	return o.WriteIops, true
}

// HasWriteIops returns a boolean if a field has been set.
func (o *DfsTierStat) HasWriteIops() bool {
	if o != nil && !IsNil(o.WriteIops) {
		return true
	}

	return false
}

// SetWriteIops gets a reference to the given float64 and assigns it to the WriteIops field.
func (o *DfsTierStat) SetWriteIops(v float64) {
	o.WriteIops = &v
}

// GetWriteLatencyUs returns the WriteLatencyUs field value if set, zero value otherwise.
func (o *DfsTierStat) GetWriteLatencyUs() float64 {
	if o == nil || IsNil(o.WriteLatencyUs) {
		var ret float64
		return ret
	}
	return *o.WriteLatencyUs
}

// GetWriteLatencyUsOk returns a tuple with the WriteLatencyUs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTierStat) GetWriteLatencyUsOk() (*float64, bool) {
	if o == nil || IsNil(o.WriteLatencyUs) {
		return nil, false
	}
	return o.WriteLatencyUs, true
}

// HasWriteLatencyUs returns a boolean if a field has been set.
func (o *DfsTierStat) HasWriteLatencyUs() bool {
	if o != nil && !IsNil(o.WriteLatencyUs) {
		return true
	}

	return false
}

// SetWriteLatencyUs gets a reference to the given float64 and assigns it to the WriteLatencyUs field.
func (o *DfsTierStat) SetWriteLatencyUs(v float64) {
	o.WriteLatencyUs = &v
}

func (o DfsTierStat) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsTierStat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActualKbyte) {
		toSerialize["actual_kbyte"] = o.ActualKbyte
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.DataKbyte) {
		toSerialize["data_kbyte"] = o.DataKbyte
	}
	if !IsNil(o.DegradedPercent) {
		toSerialize["degraded_percent"] = o.DegradedPercent
	}
	if !IsNil(o.HealthyPercent) {
		toSerialize["healthy_percent"] = o.HealthyPercent
	}
	if !IsNil(o.ReadBandwidthKbyte) {
		toSerialize["read_bandwidth_kbyte"] = o.ReadBandwidthKbyte
	}
	if !IsNil(o.ReadIops) {
		toSerialize["read_iops"] = o.ReadIops
	}
	if !IsNil(o.ReadLatencyUs) {
		toSerialize["read_latency_us"] = o.ReadLatencyUs
	}
	if !IsNil(o.RecoveryBandwidthKbyte) {
		toSerialize["recovery_bandwidth_kbyte"] = o.RecoveryBandwidthKbyte
	}
	if !IsNil(o.RecoveryIops) {
		toSerialize["recovery_iops"] = o.RecoveryIops
	}
	if !IsNil(o.RecoveryPercent) {
		toSerialize["recovery_percent"] = o.RecoveryPercent
	}
	if !IsNil(o.TotalKbyte) {
		toSerialize["total_kbyte"] = o.TotalKbyte
	}
	if !IsNil(o.UnavailablePercent) {
		toSerialize["unavailable_percent"] = o.UnavailablePercent
	}
	if !IsNil(o.UsedKbyte) {
		toSerialize["used_kbyte"] = o.UsedKbyte
	}
	if !IsNil(o.WriteBandwidthKbyte) {
		toSerialize["write_bandwidth_kbyte"] = o.WriteBandwidthKbyte
	}
	if !IsNil(o.WriteIops) {
		toSerialize["write_iops"] = o.WriteIops
	}
	if !IsNil(o.WriteLatencyUs) {
		toSerialize["write_latency_us"] = o.WriteLatencyUs
	}
	return toSerialize, nil
}

type NullableDfsTierStat struct {
	value *DfsTierStat
	isSet bool
}

func (v NullableDfsTierStat) Get() *DfsTierStat {
	return v.value
}

func (v *NullableDfsTierStat) Set(val *DfsTierStat) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsTierStat) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsTierStat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsTierStat(val *DfsTierStat) *NullableDfsTierStat {
	return &NullableDfsTierStat{value: val, isSet: true}
}

func (v NullableDfsTierStat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsTierStat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


