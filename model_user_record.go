/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the UserRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserRecord{}

// UserRecord UserRecord defines user record for api response
type UserRecord struct {
	// time of creating user
	Create *time.Time `json:"create,omitempty"`
	// email of user
	Email *string `json:"email,omitempty"`
	// enable the user or not
	Enabled *bool `json:"enabled,omitempty"`
	// external id of user
	ExternalId *string `json:"external_id,omitempty"`
	// force change password on first login
	ForcePasswordChange *bool `json:"force_password_change,omitempty"`
	// id of user
	Id *int64 `json:"id,omitempty"`
	IdentityPlatform *IdentityPlatformNestview `json:"identity_platform,omitempty"`
	// name of user
	Name *string `json:"name,omitempty"`
	// time of last password update
	PasswordLastUpdate *time.Time `json:"password_last_update,omitempty"`
	// roles of user
	Roles []string `json:"roles,omitempty"`
	// skip Guide
	SkipGuide *bool `json:"skip_guide,omitempty"`
}

// NewUserRecord instantiates a new UserRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserRecord() *UserRecord {
	this := UserRecord{}
	return &this
}

// NewUserRecordWithDefaults instantiates a new UserRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserRecordWithDefaults() *UserRecord {
	this := UserRecord{}
	return &this
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *UserRecord) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRecord) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *UserRecord) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *UserRecord) SetCreate(v time.Time) {
	o.Create = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UserRecord) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRecord) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *UserRecord) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *UserRecord) SetEmail(v string) {
	o.Email = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *UserRecord) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRecord) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *UserRecord) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *UserRecord) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *UserRecord) GetExternalId() string {
	if o == nil || IsNil(o.ExternalId) {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRecord) GetExternalIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalId) {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *UserRecord) HasExternalId() bool {
	if o != nil && !IsNil(o.ExternalId) {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *UserRecord) SetExternalId(v string) {
	o.ExternalId = &v
}

// GetForcePasswordChange returns the ForcePasswordChange field value if set, zero value otherwise.
func (o *UserRecord) GetForcePasswordChange() bool {
	if o == nil || IsNil(o.ForcePasswordChange) {
		var ret bool
		return ret
	}
	return *o.ForcePasswordChange
}

// GetForcePasswordChangeOk returns a tuple with the ForcePasswordChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRecord) GetForcePasswordChangeOk() (*bool, bool) {
	if o == nil || IsNil(o.ForcePasswordChange) {
		return nil, false
	}
	return o.ForcePasswordChange, true
}

// HasForcePasswordChange returns a boolean if a field has been set.
func (o *UserRecord) HasForcePasswordChange() bool {
	if o != nil && !IsNil(o.ForcePasswordChange) {
		return true
	}

	return false
}

// SetForcePasswordChange gets a reference to the given bool and assigns it to the ForcePasswordChange field.
func (o *UserRecord) SetForcePasswordChange(v bool) {
	o.ForcePasswordChange = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UserRecord) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRecord) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UserRecord) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *UserRecord) SetId(v int64) {
	o.Id = &v
}

// GetIdentityPlatform returns the IdentityPlatform field value if set, zero value otherwise.
func (o *UserRecord) GetIdentityPlatform() IdentityPlatformNestview {
	if o == nil || IsNil(o.IdentityPlatform) {
		var ret IdentityPlatformNestview
		return ret
	}
	return *o.IdentityPlatform
}

// GetIdentityPlatformOk returns a tuple with the IdentityPlatform field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRecord) GetIdentityPlatformOk() (*IdentityPlatformNestview, bool) {
	if o == nil || IsNil(o.IdentityPlatform) {
		return nil, false
	}
	return o.IdentityPlatform, true
}

// HasIdentityPlatform returns a boolean if a field has been set.
func (o *UserRecord) HasIdentityPlatform() bool {
	if o != nil && !IsNil(o.IdentityPlatform) {
		return true
	}

	return false
}

// SetIdentityPlatform gets a reference to the given IdentityPlatformNestview and assigns it to the IdentityPlatform field.
func (o *UserRecord) SetIdentityPlatform(v IdentityPlatformNestview) {
	o.IdentityPlatform = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UserRecord) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRecord) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UserRecord) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UserRecord) SetName(v string) {
	o.Name = &v
}

// GetPasswordLastUpdate returns the PasswordLastUpdate field value if set, zero value otherwise.
func (o *UserRecord) GetPasswordLastUpdate() time.Time {
	if o == nil || IsNil(o.PasswordLastUpdate) {
		var ret time.Time
		return ret
	}
	return *o.PasswordLastUpdate
}

// GetPasswordLastUpdateOk returns a tuple with the PasswordLastUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRecord) GetPasswordLastUpdateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PasswordLastUpdate) {
		return nil, false
	}
	return o.PasswordLastUpdate, true
}

// HasPasswordLastUpdate returns a boolean if a field has been set.
func (o *UserRecord) HasPasswordLastUpdate() bool {
	if o != nil && !IsNil(o.PasswordLastUpdate) {
		return true
	}

	return false
}

// SetPasswordLastUpdate gets a reference to the given time.Time and assigns it to the PasswordLastUpdate field.
func (o *UserRecord) SetPasswordLastUpdate(v time.Time) {
	o.PasswordLastUpdate = &v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *UserRecord) GetRoles() []string {
	if o == nil || IsNil(o.Roles) {
		var ret []string
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRecord) GetRolesOk() ([]string, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *UserRecord) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []string and assigns it to the Roles field.
func (o *UserRecord) SetRoles(v []string) {
	o.Roles = v
}

// GetSkipGuide returns the SkipGuide field value if set, zero value otherwise.
func (o *UserRecord) GetSkipGuide() bool {
	if o == nil || IsNil(o.SkipGuide) {
		var ret bool
		return ret
	}
	return *o.SkipGuide
}

// GetSkipGuideOk returns a tuple with the SkipGuide field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRecord) GetSkipGuideOk() (*bool, bool) {
	if o == nil || IsNil(o.SkipGuide) {
		return nil, false
	}
	return o.SkipGuide, true
}

// HasSkipGuide returns a boolean if a field has been set.
func (o *UserRecord) HasSkipGuide() bool {
	if o != nil && !IsNil(o.SkipGuide) {
		return true
	}

	return false
}

// SetSkipGuide gets a reference to the given bool and assigns it to the SkipGuide field.
func (o *UserRecord) SetSkipGuide(v bool) {
	o.SkipGuide = &v
}

func (o UserRecord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.ExternalId) {
		toSerialize["external_id"] = o.ExternalId
	}
	if !IsNil(o.ForcePasswordChange) {
		toSerialize["force_password_change"] = o.ForcePasswordChange
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IdentityPlatform) {
		toSerialize["identity_platform"] = o.IdentityPlatform
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.PasswordLastUpdate) {
		toSerialize["password_last_update"] = o.PasswordLastUpdate
	}
	if !IsNil(o.Roles) {
		toSerialize["roles"] = o.Roles
	}
	if !IsNil(o.SkipGuide) {
		toSerialize["skip_guide"] = o.SkipGuide
	}
	return toSerialize, nil
}

type NullableUserRecord struct {
	value *UserRecord
	isSet bool
}

func (v NullableUserRecord) Get() *UserRecord {
	return v.value
}

func (v *NullableUserRecord) Set(val *UserRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableUserRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableUserRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserRecord(val *UserRecord) *NullableUserRecord {
	return &NullableUserRecord{value: val, isSet: true}
}

func (v NullableUserRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


