/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DfsFileBasesResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsFileBasesResp{}

// DfsFileBasesResp struct for DfsFileBasesResp
type DfsFileBasesResp struct {
	// dfs file list
	DfsFiles []DfsFileBase `json:"dfs_files,omitempty"`
	// for ls directory, set to true when reach end
	Eof *bool `json:"eof,omitempty"`
}

// NewDfsFileBasesResp instantiates a new DfsFileBasesResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsFileBasesResp() *DfsFileBasesResp {
	this := DfsFileBasesResp{}
	return &this
}

// NewDfsFileBasesRespWithDefaults instantiates a new DfsFileBasesResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsFileBasesRespWithDefaults() *DfsFileBasesResp {
	this := DfsFileBasesResp{}
	return &this
}

// GetDfsFiles returns the DfsFiles field value if set, zero value otherwise.
func (o *DfsFileBasesResp) GetDfsFiles() []DfsFileBase {
	if o == nil || IsNil(o.DfsFiles) {
		var ret []DfsFileBase
		return ret
	}
	return o.DfsFiles
}

// GetDfsFilesOk returns a tuple with the DfsFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFileBasesResp) GetDfsFilesOk() ([]DfsFileBase, bool) {
	if o == nil || IsNil(o.DfsFiles) {
		return nil, false
	}
	return o.DfsFiles, true
}

// HasDfsFiles returns a boolean if a field has been set.
func (o *DfsFileBasesResp) HasDfsFiles() bool {
	if o != nil && !IsNil(o.DfsFiles) {
		return true
	}

	return false
}

// SetDfsFiles gets a reference to the given []DfsFileBase and assigns it to the DfsFiles field.
func (o *DfsFileBasesResp) SetDfsFiles(v []DfsFileBase) {
	o.DfsFiles = v
}

// GetEof returns the Eof field value if set, zero value otherwise.
func (o *DfsFileBasesResp) GetEof() bool {
	if o == nil || IsNil(o.Eof) {
		var ret bool
		return ret
	}
	return *o.Eof
}

// GetEofOk returns a tuple with the Eof field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFileBasesResp) GetEofOk() (*bool, bool) {
	if o == nil || IsNil(o.Eof) {
		return nil, false
	}
	return o.Eof, true
}

// HasEof returns a boolean if a field has been set.
func (o *DfsFileBasesResp) HasEof() bool {
	if o != nil && !IsNil(o.Eof) {
		return true
	}

	return false
}

// SetEof gets a reference to the given bool and assigns it to the Eof field.
func (o *DfsFileBasesResp) SetEof(v bool) {
	o.Eof = &v
}

func (o DfsFileBasesResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsFileBasesResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DfsFiles) {
		toSerialize["dfs_files"] = o.DfsFiles
	}
	if !IsNil(o.Eof) {
		toSerialize["eof"] = o.Eof
	}
	return toSerialize, nil
}

type NullableDfsFileBasesResp struct {
	value *DfsFileBasesResp
	isSet bool
}

func (v NullableDfsFileBasesResp) Get() *DfsFileBasesResp {
	return v.value
}

func (v *NullableDfsFileBasesResp) Set(val *DfsFileBasesResp) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsFileBasesResp) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsFileBasesResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsFileBasesResp(val *DfsFileBasesResp) *NullableDfsFileBasesResp {
	return &NullableDfsFileBasesResp{value: val, isSet: true}
}

func (v NullableDfsFileBasesResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsFileBasesResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


