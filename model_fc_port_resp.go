/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FCPortResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FCPortResp{}

// FCPortResp struct for FCPortResp
type FCPortResp struct {
	FcPort FCPortRecord `json:"fc_port"`
}

type _FCPortResp FCPortResp

// NewFCPortResp instantiates a new FCPortResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFCPortResp(fcPort FCPortRecord) *FCPortResp {
	this := FCPortResp{}
	this.FcPort = fcPort
	return &this
}

// NewFCPortRespWithDefaults instantiates a new FCPortResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFCPortRespWithDefaults() *FCPortResp {
	this := FCPortResp{}
	return &this
}

// GetFcPort returns the FcPort field value
func (o *FCPortResp) GetFcPort() FCPortRecord {
	if o == nil {
		var ret FCPortRecord
		return ret
	}

	return o.FcPort
}

// GetFcPortOk returns a tuple with the FcPort field value
// and a boolean to check if the value has been set.
func (o *FCPortResp) GetFcPortOk() (*FCPortRecord, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FcPort, true
}

// SetFcPort sets field value
func (o *FCPortResp) SetFcPort(v FCPortRecord) {
	o.FcPort = v
}

func (o FCPortResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FCPortResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fc_port"] = o.FcPort
	return toSerialize, nil
}

func (o *FCPortResp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fc_port",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFCPortResp := _FCPortResp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFCPortResp)

	if err != nil {
		return err
	}

	*o = FCPortResp(varFCPortResp)

	return err
}

type NullableFCPortResp struct {
	value *FCPortResp
	isSet bool
}

func (v NullableFCPortResp) Get() *FCPortResp {
	return v.value
}

func (v *NullableFCPortResp) Set(val *FCPortResp) {
	v.value = val
	v.isSet = true
}

func (v NullableFCPortResp) IsSet() bool {
	return v.isSet
}

func (v *NullableFCPortResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFCPortResp(val *FCPortResp) *NullableFCPortResp {
	return &NullableFCPortResp{value: val, isSet: true}
}

func (v NullableFCPortResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFCPortResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


