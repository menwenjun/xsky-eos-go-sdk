/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OSBucketSetObjectStorageClassReqBucket type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OSBucketSetObjectStorageClassReqBucket{}

// OSBucketSetObjectStorageClassReqBucket struct for OSBucketSetObjectStorageClassReqBucket
type OSBucketSetObjectStorageClassReqBucket struct {
	ObjectStorageClass OSBucketObjectStorageClass `json:"object_storage_class"`
}

type _OSBucketSetObjectStorageClassReqBucket OSBucketSetObjectStorageClassReqBucket

// NewOSBucketSetObjectStorageClassReqBucket instantiates a new OSBucketSetObjectStorageClassReqBucket object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOSBucketSetObjectStorageClassReqBucket(objectStorageClass OSBucketObjectStorageClass) *OSBucketSetObjectStorageClassReqBucket {
	this := OSBucketSetObjectStorageClassReqBucket{}
	this.ObjectStorageClass = objectStorageClass
	return &this
}

// NewOSBucketSetObjectStorageClassReqBucketWithDefaults instantiates a new OSBucketSetObjectStorageClassReqBucket object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOSBucketSetObjectStorageClassReqBucketWithDefaults() *OSBucketSetObjectStorageClassReqBucket {
	this := OSBucketSetObjectStorageClassReqBucket{}
	return &this
}

// GetObjectStorageClass returns the ObjectStorageClass field value
func (o *OSBucketSetObjectStorageClassReqBucket) GetObjectStorageClass() OSBucketObjectStorageClass {
	if o == nil {
		var ret OSBucketObjectStorageClass
		return ret
	}

	return o.ObjectStorageClass
}

// GetObjectStorageClassOk returns a tuple with the ObjectStorageClass field value
// and a boolean to check if the value has been set.
func (o *OSBucketSetObjectStorageClassReqBucket) GetObjectStorageClassOk() (*OSBucketObjectStorageClass, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectStorageClass, true
}

// SetObjectStorageClass sets field value
func (o *OSBucketSetObjectStorageClassReqBucket) SetObjectStorageClass(v OSBucketObjectStorageClass) {
	o.ObjectStorageClass = v
}

func (o OSBucketSetObjectStorageClassReqBucket) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OSBucketSetObjectStorageClassReqBucket) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["object_storage_class"] = o.ObjectStorageClass
	return toSerialize, nil
}

func (o *OSBucketSetObjectStorageClassReqBucket) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"object_storage_class",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOSBucketSetObjectStorageClassReqBucket := _OSBucketSetObjectStorageClassReqBucket{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOSBucketSetObjectStorageClassReqBucket)

	if err != nil {
		return err
	}

	*o = OSBucketSetObjectStorageClassReqBucket(varOSBucketSetObjectStorageClassReqBucket)

	return err
}

type NullableOSBucketSetObjectStorageClassReqBucket struct {
	value *OSBucketSetObjectStorageClassReqBucket
	isSet bool
}

func (v NullableOSBucketSetObjectStorageClassReqBucket) Get() *OSBucketSetObjectStorageClassReqBucket {
	return v.value
}

func (v *NullableOSBucketSetObjectStorageClassReqBucket) Set(val *OSBucketSetObjectStorageClassReqBucket) {
	v.value = val
	v.isSet = true
}

func (v NullableOSBucketSetObjectStorageClassReqBucket) IsSet() bool {
	return v.isSet
}

func (v *NullableOSBucketSetObjectStorageClassReqBucket) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOSBucketSetObjectStorageClassReqBucket(val *OSBucketSetObjectStorageClassReqBucket) *NullableOSBucketSetObjectStorageClassReqBucket {
	return &NullableOSBucketSetObjectStorageClassReqBucket{value: val, isSet: true}
}

func (v NullableOSBucketSetObjectStorageClassReqBucket) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOSBucketSetObjectStorageClassReqBucket) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


