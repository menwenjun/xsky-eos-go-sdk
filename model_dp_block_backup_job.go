/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the DpBlockBackupJob type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DpBlockBackupJob{}

// DpBlockBackupJob DpBlockBackupJob is one execution of a dp block backup protection
type DpBlockBackupJob struct {
	BlockSnapshot *SnapshotNestview `json:"block_snapshot,omitempty"`
	BlockVolume *VolumeNestview `json:"block_volume,omitempty"`
	BlockVolumeSize *int64 `json:"block_volume_size,omitempty"`
	Cluster *Cluster `json:"cluster,omitempty"`
	DiffType *string `json:"diff_type,omitempty"`
	DpBlockBackupPolicy *DpBlockBackupPolicyNestview `json:"dp_block_backup_policy,omitempty"`
	FinishedAt *time.Time `json:"finished_at,omitempty"`
	Id *int64 `json:"id,omitempty"`
	JobSkipReason *string `json:"job_skip_reason,omitempty"`
	MaxRetryTimes *int64 `json:"max_retry_times,omitempty"`
	Progress *float64 `json:"progress,omitempty"`
	Size *int64 `json:"size,omitempty"`
	StartedAt *time.Time `json:"started_at,omitempty"`
	Status *string `json:"status,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// NewDpBlockBackupJob instantiates a new DpBlockBackupJob object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDpBlockBackupJob() *DpBlockBackupJob {
	this := DpBlockBackupJob{}
	return &this
}

// NewDpBlockBackupJobWithDefaults instantiates a new DpBlockBackupJob object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDpBlockBackupJobWithDefaults() *DpBlockBackupJob {
	this := DpBlockBackupJob{}
	return &this
}

// GetBlockSnapshot returns the BlockSnapshot field value if set, zero value otherwise.
func (o *DpBlockBackupJob) GetBlockSnapshot() SnapshotNestview {
	if o == nil || IsNil(o.BlockSnapshot) {
		var ret SnapshotNestview
		return ret
	}
	return *o.BlockSnapshot
}

// GetBlockSnapshotOk returns a tuple with the BlockSnapshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockBackupJob) GetBlockSnapshotOk() (*SnapshotNestview, bool) {
	if o == nil || IsNil(o.BlockSnapshot) {
		return nil, false
	}
	return o.BlockSnapshot, true
}

// HasBlockSnapshot returns a boolean if a field has been set.
func (o *DpBlockBackupJob) HasBlockSnapshot() bool {
	if o != nil && !IsNil(o.BlockSnapshot) {
		return true
	}

	return false
}

// SetBlockSnapshot gets a reference to the given SnapshotNestview and assigns it to the BlockSnapshot field.
func (o *DpBlockBackupJob) SetBlockSnapshot(v SnapshotNestview) {
	o.BlockSnapshot = &v
}

// GetBlockVolume returns the BlockVolume field value if set, zero value otherwise.
func (o *DpBlockBackupJob) GetBlockVolume() VolumeNestview {
	if o == nil || IsNil(o.BlockVolume) {
		var ret VolumeNestview
		return ret
	}
	return *o.BlockVolume
}

// GetBlockVolumeOk returns a tuple with the BlockVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockBackupJob) GetBlockVolumeOk() (*VolumeNestview, bool) {
	if o == nil || IsNil(o.BlockVolume) {
		return nil, false
	}
	return o.BlockVolume, true
}

// HasBlockVolume returns a boolean if a field has been set.
func (o *DpBlockBackupJob) HasBlockVolume() bool {
	if o != nil && !IsNil(o.BlockVolume) {
		return true
	}

	return false
}

// SetBlockVolume gets a reference to the given VolumeNestview and assigns it to the BlockVolume field.
func (o *DpBlockBackupJob) SetBlockVolume(v VolumeNestview) {
	o.BlockVolume = &v
}

// GetBlockVolumeSize returns the BlockVolumeSize field value if set, zero value otherwise.
func (o *DpBlockBackupJob) GetBlockVolumeSize() int64 {
	if o == nil || IsNil(o.BlockVolumeSize) {
		var ret int64
		return ret
	}
	return *o.BlockVolumeSize
}

// GetBlockVolumeSizeOk returns a tuple with the BlockVolumeSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockBackupJob) GetBlockVolumeSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.BlockVolumeSize) {
		return nil, false
	}
	return o.BlockVolumeSize, true
}

// HasBlockVolumeSize returns a boolean if a field has been set.
func (o *DpBlockBackupJob) HasBlockVolumeSize() bool {
	if o != nil && !IsNil(o.BlockVolumeSize) {
		return true
	}

	return false
}

// SetBlockVolumeSize gets a reference to the given int64 and assigns it to the BlockVolumeSize field.
func (o *DpBlockBackupJob) SetBlockVolumeSize(v int64) {
	o.BlockVolumeSize = &v
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *DpBlockBackupJob) GetCluster() Cluster {
	if o == nil || IsNil(o.Cluster) {
		var ret Cluster
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockBackupJob) GetClusterOk() (*Cluster, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *DpBlockBackupJob) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given Cluster and assigns it to the Cluster field.
func (o *DpBlockBackupJob) SetCluster(v Cluster) {
	o.Cluster = &v
}

// GetDiffType returns the DiffType field value if set, zero value otherwise.
func (o *DpBlockBackupJob) GetDiffType() string {
	if o == nil || IsNil(o.DiffType) {
		var ret string
		return ret
	}
	return *o.DiffType
}

// GetDiffTypeOk returns a tuple with the DiffType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockBackupJob) GetDiffTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DiffType) {
		return nil, false
	}
	return o.DiffType, true
}

// HasDiffType returns a boolean if a field has been set.
func (o *DpBlockBackupJob) HasDiffType() bool {
	if o != nil && !IsNil(o.DiffType) {
		return true
	}

	return false
}

// SetDiffType gets a reference to the given string and assigns it to the DiffType field.
func (o *DpBlockBackupJob) SetDiffType(v string) {
	o.DiffType = &v
}

// GetDpBlockBackupPolicy returns the DpBlockBackupPolicy field value if set, zero value otherwise.
func (o *DpBlockBackupJob) GetDpBlockBackupPolicy() DpBlockBackupPolicyNestview {
	if o == nil || IsNil(o.DpBlockBackupPolicy) {
		var ret DpBlockBackupPolicyNestview
		return ret
	}
	return *o.DpBlockBackupPolicy
}

// GetDpBlockBackupPolicyOk returns a tuple with the DpBlockBackupPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockBackupJob) GetDpBlockBackupPolicyOk() (*DpBlockBackupPolicyNestview, bool) {
	if o == nil || IsNil(o.DpBlockBackupPolicy) {
		return nil, false
	}
	return o.DpBlockBackupPolicy, true
}

// HasDpBlockBackupPolicy returns a boolean if a field has been set.
func (o *DpBlockBackupJob) HasDpBlockBackupPolicy() bool {
	if o != nil && !IsNil(o.DpBlockBackupPolicy) {
		return true
	}

	return false
}

// SetDpBlockBackupPolicy gets a reference to the given DpBlockBackupPolicyNestview and assigns it to the DpBlockBackupPolicy field.
func (o *DpBlockBackupJob) SetDpBlockBackupPolicy(v DpBlockBackupPolicyNestview) {
	o.DpBlockBackupPolicy = &v
}

// GetFinishedAt returns the FinishedAt field value if set, zero value otherwise.
func (o *DpBlockBackupJob) GetFinishedAt() time.Time {
	if o == nil || IsNil(o.FinishedAt) {
		var ret time.Time
		return ret
	}
	return *o.FinishedAt
}

// GetFinishedAtOk returns a tuple with the FinishedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockBackupJob) GetFinishedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.FinishedAt) {
		return nil, false
	}
	return o.FinishedAt, true
}

// HasFinishedAt returns a boolean if a field has been set.
func (o *DpBlockBackupJob) HasFinishedAt() bool {
	if o != nil && !IsNil(o.FinishedAt) {
		return true
	}

	return false
}

// SetFinishedAt gets a reference to the given time.Time and assigns it to the FinishedAt field.
func (o *DpBlockBackupJob) SetFinishedAt(v time.Time) {
	o.FinishedAt = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DpBlockBackupJob) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockBackupJob) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DpBlockBackupJob) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *DpBlockBackupJob) SetId(v int64) {
	o.Id = &v
}

// GetJobSkipReason returns the JobSkipReason field value if set, zero value otherwise.
func (o *DpBlockBackupJob) GetJobSkipReason() string {
	if o == nil || IsNil(o.JobSkipReason) {
		var ret string
		return ret
	}
	return *o.JobSkipReason
}

// GetJobSkipReasonOk returns a tuple with the JobSkipReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockBackupJob) GetJobSkipReasonOk() (*string, bool) {
	if o == nil || IsNil(o.JobSkipReason) {
		return nil, false
	}
	return o.JobSkipReason, true
}

// HasJobSkipReason returns a boolean if a field has been set.
func (o *DpBlockBackupJob) HasJobSkipReason() bool {
	if o != nil && !IsNil(o.JobSkipReason) {
		return true
	}

	return false
}

// SetJobSkipReason gets a reference to the given string and assigns it to the JobSkipReason field.
func (o *DpBlockBackupJob) SetJobSkipReason(v string) {
	o.JobSkipReason = &v
}

// GetMaxRetryTimes returns the MaxRetryTimes field value if set, zero value otherwise.
func (o *DpBlockBackupJob) GetMaxRetryTimes() int64 {
	if o == nil || IsNil(o.MaxRetryTimes) {
		var ret int64
		return ret
	}
	return *o.MaxRetryTimes
}

// GetMaxRetryTimesOk returns a tuple with the MaxRetryTimes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockBackupJob) GetMaxRetryTimesOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxRetryTimes) {
		return nil, false
	}
	return o.MaxRetryTimes, true
}

// HasMaxRetryTimes returns a boolean if a field has been set.
func (o *DpBlockBackupJob) HasMaxRetryTimes() bool {
	if o != nil && !IsNil(o.MaxRetryTimes) {
		return true
	}

	return false
}

// SetMaxRetryTimes gets a reference to the given int64 and assigns it to the MaxRetryTimes field.
func (o *DpBlockBackupJob) SetMaxRetryTimes(v int64) {
	o.MaxRetryTimes = &v
}

// GetProgress returns the Progress field value if set, zero value otherwise.
func (o *DpBlockBackupJob) GetProgress() float64 {
	if o == nil || IsNil(o.Progress) {
		var ret float64
		return ret
	}
	return *o.Progress
}

// GetProgressOk returns a tuple with the Progress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockBackupJob) GetProgressOk() (*float64, bool) {
	if o == nil || IsNil(o.Progress) {
		return nil, false
	}
	return o.Progress, true
}

// HasProgress returns a boolean if a field has been set.
func (o *DpBlockBackupJob) HasProgress() bool {
	if o != nil && !IsNil(o.Progress) {
		return true
	}

	return false
}

// SetProgress gets a reference to the given float64 and assigns it to the Progress field.
func (o *DpBlockBackupJob) SetProgress(v float64) {
	o.Progress = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *DpBlockBackupJob) GetSize() int64 {
	if o == nil || IsNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockBackupJob) GetSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *DpBlockBackupJob) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *DpBlockBackupJob) SetSize(v int64) {
	o.Size = &v
}

// GetStartedAt returns the StartedAt field value if set, zero value otherwise.
func (o *DpBlockBackupJob) GetStartedAt() time.Time {
	if o == nil || IsNil(o.StartedAt) {
		var ret time.Time
		return ret
	}
	return *o.StartedAt
}

// GetStartedAtOk returns a tuple with the StartedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockBackupJob) GetStartedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartedAt) {
		return nil, false
	}
	return o.StartedAt, true
}

// HasStartedAt returns a boolean if a field has been set.
func (o *DpBlockBackupJob) HasStartedAt() bool {
	if o != nil && !IsNil(o.StartedAt) {
		return true
	}

	return false
}

// SetStartedAt gets a reference to the given time.Time and assigns it to the StartedAt field.
func (o *DpBlockBackupJob) SetStartedAt(v time.Time) {
	o.StartedAt = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DpBlockBackupJob) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockBackupJob) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DpBlockBackupJob) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *DpBlockBackupJob) SetStatus(v string) {
	o.Status = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *DpBlockBackupJob) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockBackupJob) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *DpBlockBackupJob) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *DpBlockBackupJob) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o DpBlockBackupJob) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DpBlockBackupJob) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlockSnapshot) {
		toSerialize["block_snapshot"] = o.BlockSnapshot
	}
	if !IsNil(o.BlockVolume) {
		toSerialize["block_volume"] = o.BlockVolume
	}
	if !IsNil(o.BlockVolumeSize) {
		toSerialize["block_volume_size"] = o.BlockVolumeSize
	}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !IsNil(o.DiffType) {
		toSerialize["diff_type"] = o.DiffType
	}
	if !IsNil(o.DpBlockBackupPolicy) {
		toSerialize["dp_block_backup_policy"] = o.DpBlockBackupPolicy
	}
	if !IsNil(o.FinishedAt) {
		toSerialize["finished_at"] = o.FinishedAt
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.JobSkipReason) {
		toSerialize["job_skip_reason"] = o.JobSkipReason
	}
	if !IsNil(o.MaxRetryTimes) {
		toSerialize["max_retry_times"] = o.MaxRetryTimes
	}
	if !IsNil(o.Progress) {
		toSerialize["progress"] = o.Progress
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.StartedAt) {
		toSerialize["started_at"] = o.StartedAt
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableDpBlockBackupJob struct {
	value *DpBlockBackupJob
	isSet bool
}

func (v NullableDpBlockBackupJob) Get() *DpBlockBackupJob {
	return v.value
}

func (v *NullableDpBlockBackupJob) Set(val *DpBlockBackupJob) {
	v.value = val
	v.isSet = true
}

func (v NullableDpBlockBackupJob) IsSet() bool {
	return v.isSet
}

func (v *NullableDpBlockBackupJob) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDpBlockBackupJob(val *DpBlockBackupJob) *NullableDpBlockBackupJob {
	return &NullableDpBlockBackupJob{value: val, isSet: true}
}

func (v NullableDpBlockBackupJob) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDpBlockBackupJob) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


