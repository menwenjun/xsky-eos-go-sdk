/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the MappingGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MappingGroup{}

// MappingGroup MappingGroup defines the mapping group of volumes and client groups
type MappingGroup struct {
	AccessPath *AccessPathNestview `json:"access_path,omitempty"`
	ClientGroup *ClientGroupNestview `json:"client_group,omitempty"`
	Cluster *ClusterNestview `json:"cluster,omitempty"`
	Create *time.Time `json:"create,omitempty"`
	Id *int64 `json:"id,omitempty"`
	Status *string `json:"status,omitempty"`
	Update *time.Time `json:"update,omitempty"`
}

// NewMappingGroup instantiates a new MappingGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMappingGroup() *MappingGroup {
	this := MappingGroup{}
	return &this
}

// NewMappingGroupWithDefaults instantiates a new MappingGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMappingGroupWithDefaults() *MappingGroup {
	this := MappingGroup{}
	return &this
}

// GetAccessPath returns the AccessPath field value if set, zero value otherwise.
func (o *MappingGroup) GetAccessPath() AccessPathNestview {
	if o == nil || IsNil(o.AccessPath) {
		var ret AccessPathNestview
		return ret
	}
	return *o.AccessPath
}

// GetAccessPathOk returns a tuple with the AccessPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MappingGroup) GetAccessPathOk() (*AccessPathNestview, bool) {
	if o == nil || IsNil(o.AccessPath) {
		return nil, false
	}
	return o.AccessPath, true
}

// HasAccessPath returns a boolean if a field has been set.
func (o *MappingGroup) HasAccessPath() bool {
	if o != nil && !IsNil(o.AccessPath) {
		return true
	}

	return false
}

// SetAccessPath gets a reference to the given AccessPathNestview and assigns it to the AccessPath field.
func (o *MappingGroup) SetAccessPath(v AccessPathNestview) {
	o.AccessPath = &v
}

// GetClientGroup returns the ClientGroup field value if set, zero value otherwise.
func (o *MappingGroup) GetClientGroup() ClientGroupNestview {
	if o == nil || IsNil(o.ClientGroup) {
		var ret ClientGroupNestview
		return ret
	}
	return *o.ClientGroup
}

// GetClientGroupOk returns a tuple with the ClientGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MappingGroup) GetClientGroupOk() (*ClientGroupNestview, bool) {
	if o == nil || IsNil(o.ClientGroup) {
		return nil, false
	}
	return o.ClientGroup, true
}

// HasClientGroup returns a boolean if a field has been set.
func (o *MappingGroup) HasClientGroup() bool {
	if o != nil && !IsNil(o.ClientGroup) {
		return true
	}

	return false
}

// SetClientGroup gets a reference to the given ClientGroupNestview and assigns it to the ClientGroup field.
func (o *MappingGroup) SetClientGroup(v ClientGroupNestview) {
	o.ClientGroup = &v
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *MappingGroup) GetCluster() ClusterNestview {
	if o == nil || IsNil(o.Cluster) {
		var ret ClusterNestview
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MappingGroup) GetClusterOk() (*ClusterNestview, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *MappingGroup) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given ClusterNestview and assigns it to the Cluster field.
func (o *MappingGroup) SetCluster(v ClusterNestview) {
	o.Cluster = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *MappingGroup) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MappingGroup) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *MappingGroup) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *MappingGroup) SetCreate(v time.Time) {
	o.Create = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MappingGroup) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MappingGroup) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MappingGroup) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *MappingGroup) SetId(v int64) {
	o.Id = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *MappingGroup) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MappingGroup) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *MappingGroup) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *MappingGroup) SetStatus(v string) {
	o.Status = &v
}

// GetUpdate returns the Update field value if set, zero value otherwise.
func (o *MappingGroup) GetUpdate() time.Time {
	if o == nil || IsNil(o.Update) {
		var ret time.Time
		return ret
	}
	return *o.Update
}

// GetUpdateOk returns a tuple with the Update field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MappingGroup) GetUpdateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Update) {
		return nil, false
	}
	return o.Update, true
}

// HasUpdate returns a boolean if a field has been set.
func (o *MappingGroup) HasUpdate() bool {
	if o != nil && !IsNil(o.Update) {
		return true
	}

	return false
}

// SetUpdate gets a reference to the given time.Time and assigns it to the Update field.
func (o *MappingGroup) SetUpdate(v time.Time) {
	o.Update = &v
}

func (o MappingGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MappingGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccessPath) {
		toSerialize["access_path"] = o.AccessPath
	}
	if !IsNil(o.ClientGroup) {
		toSerialize["client_group"] = o.ClientGroup
	}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Update) {
		toSerialize["update"] = o.Update
	}
	return toSerialize, nil
}

type NullableMappingGroup struct {
	value *MappingGroup
	isSet bool
}

func (v NullableMappingGroup) Get() *MappingGroup {
	return v.value
}

func (v *NullableMappingGroup) Set(val *MappingGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableMappingGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableMappingGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMappingGroup(val *MappingGroup) *NullableMappingGroup {
	return &NullableMappingGroup{value: val, isSet: true}
}

func (v NullableMappingGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMappingGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


