/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PolicyLinkPathInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PolicyLinkPathInfo{}

// PolicyLinkPathInfo struct for PolicyLinkPathInfo
type PolicyLinkPathInfo struct {
	// id of path
	DfsPathId *int64 `json:"dfs_path_id,omitempty"`
	// hdfs num of path
	HdfsNum *int64 `json:"hdfs_num,omitempty"`
	// if bucket of path
	IsBucket *bool `json:"is_bucket,omitempty"`
	// name of path
	Path *string `json:"path,omitempty"`
	// share type of path
	Shares []string `json:"shares,omitempty"`
	// link storage policy ids
	StoragePolicyIds []int64 `json:"storage_policy_ids,omitempty"`
}

// NewPolicyLinkPathInfo instantiates a new PolicyLinkPathInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicyLinkPathInfo() *PolicyLinkPathInfo {
	this := PolicyLinkPathInfo{}
	return &this
}

// NewPolicyLinkPathInfoWithDefaults instantiates a new PolicyLinkPathInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyLinkPathInfoWithDefaults() *PolicyLinkPathInfo {
	this := PolicyLinkPathInfo{}
	return &this
}

// GetDfsPathId returns the DfsPathId field value if set, zero value otherwise.
func (o *PolicyLinkPathInfo) GetDfsPathId() int64 {
	if o == nil || IsNil(o.DfsPathId) {
		var ret int64
		return ret
	}
	return *o.DfsPathId
}

// GetDfsPathIdOk returns a tuple with the DfsPathId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyLinkPathInfo) GetDfsPathIdOk() (*int64, bool) {
	if o == nil || IsNil(o.DfsPathId) {
		return nil, false
	}
	return o.DfsPathId, true
}

// HasDfsPathId returns a boolean if a field has been set.
func (o *PolicyLinkPathInfo) HasDfsPathId() bool {
	if o != nil && !IsNil(o.DfsPathId) {
		return true
	}

	return false
}

// SetDfsPathId gets a reference to the given int64 and assigns it to the DfsPathId field.
func (o *PolicyLinkPathInfo) SetDfsPathId(v int64) {
	o.DfsPathId = &v
}

// GetHdfsNum returns the HdfsNum field value if set, zero value otherwise.
func (o *PolicyLinkPathInfo) GetHdfsNum() int64 {
	if o == nil || IsNil(o.HdfsNum) {
		var ret int64
		return ret
	}
	return *o.HdfsNum
}

// GetHdfsNumOk returns a tuple with the HdfsNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyLinkPathInfo) GetHdfsNumOk() (*int64, bool) {
	if o == nil || IsNil(o.HdfsNum) {
		return nil, false
	}
	return o.HdfsNum, true
}

// HasHdfsNum returns a boolean if a field has been set.
func (o *PolicyLinkPathInfo) HasHdfsNum() bool {
	if o != nil && !IsNil(o.HdfsNum) {
		return true
	}

	return false
}

// SetHdfsNum gets a reference to the given int64 and assigns it to the HdfsNum field.
func (o *PolicyLinkPathInfo) SetHdfsNum(v int64) {
	o.HdfsNum = &v
}

// GetIsBucket returns the IsBucket field value if set, zero value otherwise.
func (o *PolicyLinkPathInfo) GetIsBucket() bool {
	if o == nil || IsNil(o.IsBucket) {
		var ret bool
		return ret
	}
	return *o.IsBucket
}

// GetIsBucketOk returns a tuple with the IsBucket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyLinkPathInfo) GetIsBucketOk() (*bool, bool) {
	if o == nil || IsNil(o.IsBucket) {
		return nil, false
	}
	return o.IsBucket, true
}

// HasIsBucket returns a boolean if a field has been set.
func (o *PolicyLinkPathInfo) HasIsBucket() bool {
	if o != nil && !IsNil(o.IsBucket) {
		return true
	}

	return false
}

// SetIsBucket gets a reference to the given bool and assigns it to the IsBucket field.
func (o *PolicyLinkPathInfo) SetIsBucket(v bool) {
	o.IsBucket = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *PolicyLinkPathInfo) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyLinkPathInfo) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *PolicyLinkPathInfo) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *PolicyLinkPathInfo) SetPath(v string) {
	o.Path = &v
}

// GetShares returns the Shares field value if set, zero value otherwise.
func (o *PolicyLinkPathInfo) GetShares() []string {
	if o == nil || IsNil(o.Shares) {
		var ret []string
		return ret
	}
	return o.Shares
}

// GetSharesOk returns a tuple with the Shares field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyLinkPathInfo) GetSharesOk() ([]string, bool) {
	if o == nil || IsNil(o.Shares) {
		return nil, false
	}
	return o.Shares, true
}

// HasShares returns a boolean if a field has been set.
func (o *PolicyLinkPathInfo) HasShares() bool {
	if o != nil && !IsNil(o.Shares) {
		return true
	}

	return false
}

// SetShares gets a reference to the given []string and assigns it to the Shares field.
func (o *PolicyLinkPathInfo) SetShares(v []string) {
	o.Shares = v
}

// GetStoragePolicyIds returns the StoragePolicyIds field value if set, zero value otherwise.
func (o *PolicyLinkPathInfo) GetStoragePolicyIds() []int64 {
	if o == nil || IsNil(o.StoragePolicyIds) {
		var ret []int64
		return ret
	}
	return o.StoragePolicyIds
}

// GetStoragePolicyIdsOk returns a tuple with the StoragePolicyIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyLinkPathInfo) GetStoragePolicyIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.StoragePolicyIds) {
		return nil, false
	}
	return o.StoragePolicyIds, true
}

// HasStoragePolicyIds returns a boolean if a field has been set.
func (o *PolicyLinkPathInfo) HasStoragePolicyIds() bool {
	if o != nil && !IsNil(o.StoragePolicyIds) {
		return true
	}

	return false
}

// SetStoragePolicyIds gets a reference to the given []int64 and assigns it to the StoragePolicyIds field.
func (o *PolicyLinkPathInfo) SetStoragePolicyIds(v []int64) {
	o.StoragePolicyIds = v
}

func (o PolicyLinkPathInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PolicyLinkPathInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DfsPathId) {
		toSerialize["dfs_path_id"] = o.DfsPathId
	}
	if !IsNil(o.HdfsNum) {
		toSerialize["hdfs_num"] = o.HdfsNum
	}
	if !IsNil(o.IsBucket) {
		toSerialize["is_bucket"] = o.IsBucket
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.Shares) {
		toSerialize["shares"] = o.Shares
	}
	if !IsNil(o.StoragePolicyIds) {
		toSerialize["storage_policy_ids"] = o.StoragePolicyIds
	}
	return toSerialize, nil
}

type NullablePolicyLinkPathInfo struct {
	value *PolicyLinkPathInfo
	isSet bool
}

func (v NullablePolicyLinkPathInfo) Get() *PolicyLinkPathInfo {
	return v.value
}

func (v *NullablePolicyLinkPathInfo) Set(val *PolicyLinkPathInfo) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyLinkPathInfo) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyLinkPathInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyLinkPathInfo(val *PolicyLinkPathInfo) *NullablePolicyLinkPathInfo {
	return &NullablePolicyLinkPathInfo{value: val, isSet: true}
}

func (v NullablePolicyLinkPathInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyLinkPathInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


