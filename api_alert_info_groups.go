/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AlertInfoGroupsAPIService AlertInfoGroupsAPI service
type AlertInfoGroupsAPIService service

type ApiAckAlertInfoGroupRequest struct {
	ctx context.Context
	ApiService *AlertInfoGroupsAPIService
	alertInfoGroupId int64
}

func (r ApiAckAlertInfoGroupRequest) Execute() (*AlertInfoGroupResp, *http.Response, error) {
	return r.ApiService.AckAlertInfoGroupExecute(r)
}

/*
AckAlertInfoGroup Method for AckAlertInfoGroup

set the acked status of alert info group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param alertInfoGroupId the id of alert info group
 @return ApiAckAlertInfoGroupRequest
*/
func (a *AlertInfoGroupsAPIService) AckAlertInfoGroup(ctx context.Context, alertInfoGroupId int64) ApiAckAlertInfoGroupRequest {
	return ApiAckAlertInfoGroupRequest{
		ApiService: a,
		ctx: ctx,
		alertInfoGroupId: alertInfoGroupId,
	}
}

// Execute executes the request
//  @return AlertInfoGroupResp
func (a *AlertInfoGroupsAPIService) AckAlertInfoGroupExecute(r ApiAckAlertInfoGroupRequest) (*AlertInfoGroupResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AlertInfoGroupResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertInfoGroupsAPIService.AckAlertInfoGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/alert-info-groups/{alert_info_group_id}:ack"
	localVarPath = strings.Replace(localVarPath, "{"+"alert_info_group_id"+"}", url.PathEscape(parameterValueToString(r.alertInfoGroupId, "alertInfoGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCountAlertInfoGroupsRequest struct {
	ctx context.Context
	ApiService *AlertInfoGroupsAPIService
	acked *bool
	resolved *bool
	resourceType *string
	resourceId *int64
	startTime *string
	endTime *string
}

// acked of the most recently alert info in group
func (r ApiCountAlertInfoGroupsRequest) Acked(acked bool) ApiCountAlertInfoGroupsRequest {
	r.acked = &acked
	return r
}

// resolved or not of the most recently alert info in group
func (r ApiCountAlertInfoGroupsRequest) Resolved(resolved bool) ApiCountAlertInfoGroupsRequest {
	r.resolved = &resolved
	return r
}

// resource type of alert info group
func (r ApiCountAlertInfoGroupsRequest) ResourceType(resourceType string) ApiCountAlertInfoGroupsRequest {
	r.resourceType = &resourceType
	return r
}

// resource id of alert info group
func (r ApiCountAlertInfoGroupsRequest) ResourceId(resourceId int64) ApiCountAlertInfoGroupsRequest {
	r.resourceId = &resourceId
	return r
}

// start time of create of alert info group
func (r ApiCountAlertInfoGroupsRequest) StartTime(startTime string) ApiCountAlertInfoGroupsRequest {
	r.startTime = &startTime
	return r
}

// end time of create of alert info group
func (r ApiCountAlertInfoGroupsRequest) EndTime(endTime string) ApiCountAlertInfoGroupsRequest {
	r.endTime = &endTime
	return r
}

func (r ApiCountAlertInfoGroupsRequest) Execute() (*AlertStatsResp, *http.Response, error) {
	return r.ApiService.CountAlertInfoGroupsExecute(r)
}

/*
CountAlertInfoGroups Method for CountAlertInfoGroups

count alert info groups with conditions

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCountAlertInfoGroupsRequest
*/
func (a *AlertInfoGroupsAPIService) CountAlertInfoGroups(ctx context.Context) ApiCountAlertInfoGroupsRequest {
	return ApiCountAlertInfoGroupsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AlertStatsResp
func (a *AlertInfoGroupsAPIService) CountAlertInfoGroupsExecute(r ApiCountAlertInfoGroupsRequest) (*AlertStatsResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AlertStatsResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertInfoGroupsAPIService.CountAlertInfoGroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/alert-info-groups/stats"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.acked != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "acked", r.acked, "form", "")
	}
	if r.resolved != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resolved", r.resolved, "form", "")
	}
	if r.resourceType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resource_type", r.resourceType, "form", "")
	}
	if r.resourceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resource_id", r.resourceId, "form", "")
	}
	if r.startTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_time", r.startTime, "form", "")
	}
	if r.endTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end_time", r.endTime, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteAlertInfoGroupRequest struct {
	ctx context.Context
	ApiService *AlertInfoGroupsAPIService
	alertInfoGroupId int64
}

func (r ApiDeleteAlertInfoGroupRequest) Execute() (*AlertInfoGroupResp, *http.Response, error) {
	return r.ApiService.DeleteAlertInfoGroupExecute(r)
}

/*
DeleteAlertInfoGroup Method for DeleteAlertInfoGroup

delete an alert info group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param alertInfoGroupId the id of alert info group
 @return ApiDeleteAlertInfoGroupRequest
*/
func (a *AlertInfoGroupsAPIService) DeleteAlertInfoGroup(ctx context.Context, alertInfoGroupId int64) ApiDeleteAlertInfoGroupRequest {
	return ApiDeleteAlertInfoGroupRequest{
		ApiService: a,
		ctx: ctx,
		alertInfoGroupId: alertInfoGroupId,
	}
}

// Execute executes the request
//  @return AlertInfoGroupResp
func (a *AlertInfoGroupsAPIService) DeleteAlertInfoGroupExecute(r ApiDeleteAlertInfoGroupRequest) (*AlertInfoGroupResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AlertInfoGroupResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertInfoGroupsAPIService.DeleteAlertInfoGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/alert-info-groups/{alert_info_group_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"alert_info_group_id"+"}", url.PathEscape(parameterValueToString(r.alertInfoGroupId, "alertInfoGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAlertInfoGroupRequest struct {
	ctx context.Context
	ApiService *AlertInfoGroupsAPIService
	groupId int64
}

func (r ApiGetAlertInfoGroupRequest) Execute() (*AlertInfoGroupResp, *http.Response, error) {
	return r.ApiService.GetAlertInfoGroupExecute(r)
}

/*
GetAlertInfoGroup Method for GetAlertInfoGroup

get alert info group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId the id of alert info group
 @return ApiGetAlertInfoGroupRequest
*/
func (a *AlertInfoGroupsAPIService) GetAlertInfoGroup(ctx context.Context, groupId int64) ApiGetAlertInfoGroupRequest {
	return ApiGetAlertInfoGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
	}
}

// Execute executes the request
//  @return AlertInfoGroupResp
func (a *AlertInfoGroupsAPIService) GetAlertInfoGroupExecute(r ApiGetAlertInfoGroupRequest) (*AlertInfoGroupResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AlertInfoGroupResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertInfoGroupsAPIService.GetAlertInfoGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/alert-info-groups/{group_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group_id"+"}", url.PathEscape(parameterValueToString(r.groupId, "groupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAlertInfoGroupsReportRequest struct {
	ctx context.Context
	ApiService *AlertInfoGroupsAPIService
	level *string
	resourceType *string
	resourceId *int64
	createAfter *string
	acked *bool
	resolved *bool
	group *string
	excludeCluster *bool
	isGlobal *bool
}

// level of alert info group
func (r ApiGetAlertInfoGroupsReportRequest) Level(level string) ApiGetAlertInfoGroupsReportRequest {
	r.level = &level
	return r
}

// resource type of alert info group
func (r ApiGetAlertInfoGroupsReportRequest) ResourceType(resourceType string) ApiGetAlertInfoGroupsReportRequest {
	r.resourceType = &resourceType
	return r
}

// resource ids of alert info group
func (r ApiGetAlertInfoGroupsReportRequest) ResourceId(resourceId int64) ApiGetAlertInfoGroupsReportRequest {
	r.resourceId = &resourceId
	return r
}

// create_after timestamp of alert info group
func (r ApiGetAlertInfoGroupsReportRequest) CreateAfter(createAfter string) ApiGetAlertInfoGroupsReportRequest {
	r.createAfter = &createAfter
	return r
}

// acked of alert info
func (r ApiGetAlertInfoGroupsReportRequest) Acked(acked bool) ApiGetAlertInfoGroupsReportRequest {
	r.acked = &acked
	return r
}

// resolved or not of alert info
func (r ApiGetAlertInfoGroupsReportRequest) Resolved(resolved bool) ApiGetAlertInfoGroupsReportRequest {
	r.resolved = &resolved
	return r
}

// group of alert info
func (r ApiGetAlertInfoGroupsReportRequest) Group(group string) ApiGetAlertInfoGroupsReportRequest {
	r.group = &group
	return r
}

// filter to exclude cluster of alert info groups, deprecated, use &#x60;is_global&#x60; instead.
func (r ApiGetAlertInfoGroupsReportRequest) ExcludeCluster(excludeCluster bool) ApiGetAlertInfoGroupsReportRequest {
	r.excludeCluster = &excludeCluster
	return r
}

// filter global alert info groups(exclude alert info groups in any cluster)
func (r ApiGetAlertInfoGroupsReportRequest) IsGlobal(isGlobal bool) ApiGetAlertInfoGroupsReportRequest {
	r.isGlobal = &isGlobal
	return r
}

func (r ApiGetAlertInfoGroupsReportRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetAlertInfoGroupsReportExecute(r)
}

/*
GetAlertInfoGroupsReport Method for GetAlertInfoGroupsReport

Get report of alert info groups

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAlertInfoGroupsReportRequest
*/
func (a *AlertInfoGroupsAPIService) GetAlertInfoGroupsReport(ctx context.Context) ApiGetAlertInfoGroupsReportRequest {
	return ApiGetAlertInfoGroupsReportRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *AlertInfoGroupsAPIService) GetAlertInfoGroupsReportExecute(r ApiGetAlertInfoGroupsReportRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertInfoGroupsAPIService.GetAlertInfoGroupsReport")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/alert-info-groups/report"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.level != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "level", r.level, "form", "")
	}
	if r.resourceType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resource_type", r.resourceType, "form", "")
	}
	if r.resourceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resource_id", r.resourceId, "form", "")
	}
	if r.createAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "create_after", r.createAfter, "form", "")
	}
	if r.acked != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "acked", r.acked, "form", "")
	}
	if r.resolved != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resolved", r.resolved, "form", "")
	}
	if r.group != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "group", r.group, "form", "")
	}
	if r.excludeCluster != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_cluster", r.excludeCluster, "form", "")
	}
	if r.isGlobal != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "is_global", r.isGlobal, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiListAlertInfoGroupsRequest struct {
	ctx context.Context
	ApiService *AlertInfoGroupsAPIService
	qMust *string
	q *string
	relatedResource *string
	sort *string
	limit *int64
	offset *int64
	level *string
	resourceType *string
	resourceId *int64
	createAfter *string
	createBefore *string
	acked *bool
	resolved *bool
	group *string
	excludeCluster *bool
	isGlobal *bool
}

// must query param of search
func (r ApiListAlertInfoGroupsRequest) QMust(qMust string) ApiListAlertInfoGroupsRequest {
	r.qMust = &qMust
	return r
}

// should query param of search
func (r ApiListAlertInfoGroupsRequest) Q(q string) ApiListAlertInfoGroupsRequest {
	r.q = &q
	return r
}

// should query param of search
func (r ApiListAlertInfoGroupsRequest) RelatedResource(relatedResource string) ApiListAlertInfoGroupsRequest {
	r.relatedResource = &relatedResource
	return r
}

// sort param of search
func (r ApiListAlertInfoGroupsRequest) Sort(sort string) ApiListAlertInfoGroupsRequest {
	r.sort = &sort
	return r
}

// paging param
func (r ApiListAlertInfoGroupsRequest) Limit(limit int64) ApiListAlertInfoGroupsRequest {
	r.limit = &limit
	return r
}

// paging param
func (r ApiListAlertInfoGroupsRequest) Offset(offset int64) ApiListAlertInfoGroupsRequest {
	r.offset = &offset
	return r
}

// level of alert info group
func (r ApiListAlertInfoGroupsRequest) Level(level string) ApiListAlertInfoGroupsRequest {
	r.level = &level
	return r
}

// resource type of alert info group
func (r ApiListAlertInfoGroupsRequest) ResourceType(resourceType string) ApiListAlertInfoGroupsRequest {
	r.resourceType = &resourceType
	return r
}

// resource id of alert info group
func (r ApiListAlertInfoGroupsRequest) ResourceId(resourceId int64) ApiListAlertInfoGroupsRequest {
	r.resourceId = &resourceId
	return r
}

// create_after start time of alert info group
func (r ApiListAlertInfoGroupsRequest) CreateAfter(createAfter string) ApiListAlertInfoGroupsRequest {
	r.createAfter = &createAfter
	return r
}

// create_before end time of alert info group
func (r ApiListAlertInfoGroupsRequest) CreateBefore(createBefore string) ApiListAlertInfoGroupsRequest {
	r.createBefore = &createBefore
	return r
}

// acked of alert info
func (r ApiListAlertInfoGroupsRequest) Acked(acked bool) ApiListAlertInfoGroupsRequest {
	r.acked = &acked
	return r
}

// resolved or not of alert info
func (r ApiListAlertInfoGroupsRequest) Resolved(resolved bool) ApiListAlertInfoGroupsRequest {
	r.resolved = &resolved
	return r
}

// group of alert info
func (r ApiListAlertInfoGroupsRequest) Group(group string) ApiListAlertInfoGroupsRequest {
	r.group = &group
	return r
}

// filter to exclude cluster of alert info groups, deprecated, use &#x60;is_global&#x60; instead.
func (r ApiListAlertInfoGroupsRequest) ExcludeCluster(excludeCluster bool) ApiListAlertInfoGroupsRequest {
	r.excludeCluster = &excludeCluster
	return r
}

// filter global alert info groups(exclude alert info groups in any cluster)
func (r ApiListAlertInfoGroupsRequest) IsGlobal(isGlobal bool) ApiListAlertInfoGroupsRequest {
	r.isGlobal = &isGlobal
	return r
}

func (r ApiListAlertInfoGroupsRequest) Execute() (*AlertInfoGroupsResp, *http.Response, error) {
	return r.ApiService.ListAlertInfoGroupsExecute(r)
}

/*
ListAlertInfoGroups Method for ListAlertInfoGroups

List all alert info groups

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListAlertInfoGroupsRequest
*/
func (a *AlertInfoGroupsAPIService) ListAlertInfoGroups(ctx context.Context) ApiListAlertInfoGroupsRequest {
	return ApiListAlertInfoGroupsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AlertInfoGroupsResp
func (a *AlertInfoGroupsAPIService) ListAlertInfoGroupsExecute(r ApiListAlertInfoGroupsRequest) (*AlertInfoGroupsResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AlertInfoGroupsResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertInfoGroupsAPIService.ListAlertInfoGroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/alert-info-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.qMust != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q_must", r.qMust, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.relatedResource != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "related_resource", r.relatedResource, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.level != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "level", r.level, "form", "")
	}
	if r.resourceType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resource_type", r.resourceType, "form", "")
	}
	if r.resourceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resource_id", r.resourceId, "form", "")
	}
	if r.createAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "create_after", r.createAfter, "form", "")
	}
	if r.createBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "create_before", r.createBefore, "form", "")
	}
	if r.acked != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "acked", r.acked, "form", "")
	}
	if r.resolved != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resolved", r.resolved, "form", "")
	}
	if r.group != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "group", r.group, "form", "")
	}
	if r.excludeCluster != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_cluster", r.excludeCluster, "form", "")
	}
	if r.isGlobal != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "is_global", r.isGlobal, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiResolveAlertInfoGroupRequest struct {
	ctx context.Context
	ApiService *AlertInfoGroupsAPIService
	alertInfoGroupId int64
}

func (r ApiResolveAlertInfoGroupRequest) Execute() (*AlertInfoGroupResp, *http.Response, error) {
	return r.ApiService.ResolveAlertInfoGroupExecute(r)
}

/*
ResolveAlertInfoGroup Method for ResolveAlertInfoGroup

set the resolved status of alert info group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param alertInfoGroupId the id of alert info group
 @return ApiResolveAlertInfoGroupRequest
*/
func (a *AlertInfoGroupsAPIService) ResolveAlertInfoGroup(ctx context.Context, alertInfoGroupId int64) ApiResolveAlertInfoGroupRequest {
	return ApiResolveAlertInfoGroupRequest{
		ApiService: a,
		ctx: ctx,
		alertInfoGroupId: alertInfoGroupId,
	}
}

// Execute executes the request
//  @return AlertInfoGroupResp
func (a *AlertInfoGroupsAPIService) ResolveAlertInfoGroupExecute(r ApiResolveAlertInfoGroupRequest) (*AlertInfoGroupResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AlertInfoGroupResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertInfoGroupsAPIService.ResolveAlertInfoGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/alert-info-groups/{alert_info_group_id}:resolve"
	localVarPath = strings.Replace(localVarPath, "{"+"alert_info_group_id"+"}", url.PathEscape(parameterValueToString(r.alertInfoGroupId, "alertInfoGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
