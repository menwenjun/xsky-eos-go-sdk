/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BatchReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BatchReq{}

// BatchReq struct for BatchReq
type BatchReq struct {
	// action of the remaining APIs in the batch when one API failed. Valid values are: \"CONTINUE\", \"ABORT\", default value is \"CONTINUE\". If ExecutionOrder is \"PARALLEL\", ActionOnFailure will be ignored.
	ActionOnFailure *string `json:"action_on_failure,omitempty"`
	// list of API requests in the batch.
	ApiRequests []BatchReqAPIRequest `json:"api_requests"`
	// ExecutionOrder is the order of execution of the APIs in the batch. Valid values are: \"SEQUENTIAL\", \"PARALLEL\", default value is \"SEQUENTIAL\".
	ExecutionOrder *string `json:"execution_order,omitempty"`
}

type _BatchReq BatchReq

// NewBatchReq instantiates a new BatchReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchReq(apiRequests []BatchReqAPIRequest) *BatchReq {
	this := BatchReq{}
	this.ApiRequests = apiRequests
	return &this
}

// NewBatchReqWithDefaults instantiates a new BatchReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchReqWithDefaults() *BatchReq {
	this := BatchReq{}
	return &this
}

// GetActionOnFailure returns the ActionOnFailure field value if set, zero value otherwise.
func (o *BatchReq) GetActionOnFailure() string {
	if o == nil || IsNil(o.ActionOnFailure) {
		var ret string
		return ret
	}
	return *o.ActionOnFailure
}

// GetActionOnFailureOk returns a tuple with the ActionOnFailure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchReq) GetActionOnFailureOk() (*string, bool) {
	if o == nil || IsNil(o.ActionOnFailure) {
		return nil, false
	}
	return o.ActionOnFailure, true
}

// HasActionOnFailure returns a boolean if a field has been set.
func (o *BatchReq) HasActionOnFailure() bool {
	if o != nil && !IsNil(o.ActionOnFailure) {
		return true
	}

	return false
}

// SetActionOnFailure gets a reference to the given string and assigns it to the ActionOnFailure field.
func (o *BatchReq) SetActionOnFailure(v string) {
	o.ActionOnFailure = &v
}

// GetApiRequests returns the ApiRequests field value
func (o *BatchReq) GetApiRequests() []BatchReqAPIRequest {
	if o == nil {
		var ret []BatchReqAPIRequest
		return ret
	}

	return o.ApiRequests
}

// GetApiRequestsOk returns a tuple with the ApiRequests field value
// and a boolean to check if the value has been set.
func (o *BatchReq) GetApiRequestsOk() ([]BatchReqAPIRequest, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApiRequests, true
}

// SetApiRequests sets field value
func (o *BatchReq) SetApiRequests(v []BatchReqAPIRequest) {
	o.ApiRequests = v
}

// GetExecutionOrder returns the ExecutionOrder field value if set, zero value otherwise.
func (o *BatchReq) GetExecutionOrder() string {
	if o == nil || IsNil(o.ExecutionOrder) {
		var ret string
		return ret
	}
	return *o.ExecutionOrder
}

// GetExecutionOrderOk returns a tuple with the ExecutionOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchReq) GetExecutionOrderOk() (*string, bool) {
	if o == nil || IsNil(o.ExecutionOrder) {
		return nil, false
	}
	return o.ExecutionOrder, true
}

// HasExecutionOrder returns a boolean if a field has been set.
func (o *BatchReq) HasExecutionOrder() bool {
	if o != nil && !IsNil(o.ExecutionOrder) {
		return true
	}

	return false
}

// SetExecutionOrder gets a reference to the given string and assigns it to the ExecutionOrder field.
func (o *BatchReq) SetExecutionOrder(v string) {
	o.ExecutionOrder = &v
}

func (o BatchReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BatchReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActionOnFailure) {
		toSerialize["action_on_failure"] = o.ActionOnFailure
	}
	toSerialize["api_requests"] = o.ApiRequests
	if !IsNil(o.ExecutionOrder) {
		toSerialize["execution_order"] = o.ExecutionOrder
	}
	return toSerialize, nil
}

func (o *BatchReq) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"api_requests",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBatchReq := _BatchReq{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBatchReq)

	if err != nil {
		return err
	}

	*o = BatchReq(varBatchReq)

	return err
}

type NullableBatchReq struct {
	value *BatchReq
	isSet bool
}

func (v NullableBatchReq) Get() *BatchReq {
	return v.value
}

func (v *NullableBatchReq) Set(val *BatchReq) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchReq) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchReq(val *BatchReq) *NullableBatchReq {
	return &NullableBatchReq{value: val, isSet: true}
}

func (v NullableBatchReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


