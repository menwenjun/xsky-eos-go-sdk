/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FSUserVerifyReqUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FSUserVerifyReqUser{}

// FSUserVerifyReqUser struct for FSUserVerifyReqUser
type FSUserVerifyReqUser struct {
	// encrypted password for user
	EncryptedPassword *string `json:"encrypted_password,omitempty"`
	// user name or email for user
	Name string `json:"name"`
	// password for user
	Password *string `json:"password,omitempty"`
	// rsa key id
	RsaKeyId *string `json:"rsa_key_id,omitempty"`
}

type _FSUserVerifyReqUser FSUserVerifyReqUser

// NewFSUserVerifyReqUser instantiates a new FSUserVerifyReqUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFSUserVerifyReqUser(name string) *FSUserVerifyReqUser {
	this := FSUserVerifyReqUser{}
	this.Name = name
	return &this
}

// NewFSUserVerifyReqUserWithDefaults instantiates a new FSUserVerifyReqUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFSUserVerifyReqUserWithDefaults() *FSUserVerifyReqUser {
	this := FSUserVerifyReqUser{}
	return &this
}

// GetEncryptedPassword returns the EncryptedPassword field value if set, zero value otherwise.
func (o *FSUserVerifyReqUser) GetEncryptedPassword() string {
	if o == nil || IsNil(o.EncryptedPassword) {
		var ret string
		return ret
	}
	return *o.EncryptedPassword
}

// GetEncryptedPasswordOk returns a tuple with the EncryptedPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSUserVerifyReqUser) GetEncryptedPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.EncryptedPassword) {
		return nil, false
	}
	return o.EncryptedPassword, true
}

// HasEncryptedPassword returns a boolean if a field has been set.
func (o *FSUserVerifyReqUser) HasEncryptedPassword() bool {
	if o != nil && !IsNil(o.EncryptedPassword) {
		return true
	}

	return false
}

// SetEncryptedPassword gets a reference to the given string and assigns it to the EncryptedPassword field.
func (o *FSUserVerifyReqUser) SetEncryptedPassword(v string) {
	o.EncryptedPassword = &v
}

// GetName returns the Name field value
func (o *FSUserVerifyReqUser) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FSUserVerifyReqUser) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FSUserVerifyReqUser) SetName(v string) {
	o.Name = v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *FSUserVerifyReqUser) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSUserVerifyReqUser) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *FSUserVerifyReqUser) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *FSUserVerifyReqUser) SetPassword(v string) {
	o.Password = &v
}

// GetRsaKeyId returns the RsaKeyId field value if set, zero value otherwise.
func (o *FSUserVerifyReqUser) GetRsaKeyId() string {
	if o == nil || IsNil(o.RsaKeyId) {
		var ret string
		return ret
	}
	return *o.RsaKeyId
}

// GetRsaKeyIdOk returns a tuple with the RsaKeyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSUserVerifyReqUser) GetRsaKeyIdOk() (*string, bool) {
	if o == nil || IsNil(o.RsaKeyId) {
		return nil, false
	}
	return o.RsaKeyId, true
}

// HasRsaKeyId returns a boolean if a field has been set.
func (o *FSUserVerifyReqUser) HasRsaKeyId() bool {
	if o != nil && !IsNil(o.RsaKeyId) {
		return true
	}

	return false
}

// SetRsaKeyId gets a reference to the given string and assigns it to the RsaKeyId field.
func (o *FSUserVerifyReqUser) SetRsaKeyId(v string) {
	o.RsaKeyId = &v
}

func (o FSUserVerifyReqUser) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FSUserVerifyReqUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EncryptedPassword) {
		toSerialize["encrypted_password"] = o.EncryptedPassword
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.RsaKeyId) {
		toSerialize["rsa_key_id"] = o.RsaKeyId
	}
	return toSerialize, nil
}

func (o *FSUserVerifyReqUser) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFSUserVerifyReqUser := _FSUserVerifyReqUser{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFSUserVerifyReqUser)

	if err != nil {
		return err
	}

	*o = FSUserVerifyReqUser(varFSUserVerifyReqUser)

	return err
}

type NullableFSUserVerifyReqUser struct {
	value *FSUserVerifyReqUser
	isSet bool
}

func (v NullableFSUserVerifyReqUser) Get() *FSUserVerifyReqUser {
	return v.value
}

func (v *NullableFSUserVerifyReqUser) Set(val *FSUserVerifyReqUser) {
	v.value = val
	v.isSet = true
}

func (v NullableFSUserVerifyReqUser) IsSet() bool {
	return v.isSet
}

func (v *NullableFSUserVerifyReqUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFSUserVerifyReqUser(val *FSUserVerifyReqUser) *NullableFSUserVerifyReqUser {
	return &NullableFSUserVerifyReqUser{value: val, isSet: true}
}

func (v NullableFSUserVerifyReqUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFSUserVerifyReqUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


