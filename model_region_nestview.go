/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RegionNestview type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegionNestview{}

// RegionNestview struct for RegionNestview
type RegionNestview struct {
	AccessUrl *string `json:"access_url,omitempty"`
	Id *int64 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Uuid *string `json:"uuid,omitempty"`
}

// NewRegionNestview instantiates a new RegionNestview object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegionNestview() *RegionNestview {
	this := RegionNestview{}
	return &this
}

// NewRegionNestviewWithDefaults instantiates a new RegionNestview object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegionNestviewWithDefaults() *RegionNestview {
	this := RegionNestview{}
	return &this
}

// GetAccessUrl returns the AccessUrl field value if set, zero value otherwise.
func (o *RegionNestview) GetAccessUrl() string {
	if o == nil || IsNil(o.AccessUrl) {
		var ret string
		return ret
	}
	return *o.AccessUrl
}

// GetAccessUrlOk returns a tuple with the AccessUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionNestview) GetAccessUrlOk() (*string, bool) {
	if o == nil || IsNil(o.AccessUrl) {
		return nil, false
	}
	return o.AccessUrl, true
}

// HasAccessUrl returns a boolean if a field has been set.
func (o *RegionNestview) HasAccessUrl() bool {
	if o != nil && !IsNil(o.AccessUrl) {
		return true
	}

	return false
}

// SetAccessUrl gets a reference to the given string and assigns it to the AccessUrl field.
func (o *RegionNestview) SetAccessUrl(v string) {
	o.AccessUrl = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RegionNestview) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionNestview) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RegionNestview) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *RegionNestview) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RegionNestview) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionNestview) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RegionNestview) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RegionNestview) SetName(v string) {
	o.Name = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *RegionNestview) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionNestview) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *RegionNestview) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *RegionNestview) SetUuid(v string) {
	o.Uuid = &v
}

func (o RegionNestview) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegionNestview) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccessUrl) {
		toSerialize["access_url"] = o.AccessUrl
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	return toSerialize, nil
}

type NullableRegionNestview struct {
	value *RegionNestview
	isSet bool
}

func (v NullableRegionNestview) Get() *RegionNestview {
	return v.value
}

func (v *NullableRegionNestview) Set(val *RegionNestview) {
	v.value = val
	v.isSet = true
}

func (v NullableRegionNestview) IsSet() bool {
	return v.isSet
}

func (v *NullableRegionNestview) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegionNestview(val *RegionNestview) *NullableRegionNestview {
	return &NullableRegionNestview{value: val, isSet: true}
}

func (v NullableRegionNestview) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegionNestview) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


