/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DpVolumeGroupSnapshotReplicationJobsAPIService DpVolumeGroupSnapshotReplicationJobsAPI service
type DpVolumeGroupSnapshotReplicationJobsAPIService service

type ApiDeleteDpVolumeGroupSnapshotReplicationJobRequest struct {
	ctx context.Context
	ApiService *DpVolumeGroupSnapshotReplicationJobsAPIService
	jobId int64
}

func (r ApiDeleteDpVolumeGroupSnapshotReplicationJobRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteDpVolumeGroupSnapshotReplicationJobExecute(r)
}

/*
DeleteDpVolumeGroupSnapshotReplicationJob Method for DeleteDpVolumeGroupSnapshotReplicationJob

Delete dp volume group snapshot replication job

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param jobId resource id
 @return ApiDeleteDpVolumeGroupSnapshotReplicationJobRequest
*/
func (a *DpVolumeGroupSnapshotReplicationJobsAPIService) DeleteDpVolumeGroupSnapshotReplicationJob(ctx context.Context, jobId int64) ApiDeleteDpVolumeGroupSnapshotReplicationJobRequest {
	return ApiDeleteDpVolumeGroupSnapshotReplicationJobRequest{
		ApiService: a,
		ctx: ctx,
		jobId: jobId,
	}
}

// Execute executes the request
func (a *DpVolumeGroupSnapshotReplicationJobsAPIService) DeleteDpVolumeGroupSnapshotReplicationJobExecute(r ApiDeleteDpVolumeGroupSnapshotReplicationJobRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DpVolumeGroupSnapshotReplicationJobsAPIService.DeleteDpVolumeGroupSnapshotReplicationJob")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dp-volume-group-snapshot-replication-jobs/{job_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"job_id"+"}", url.PathEscape(parameterValueToString(r.jobId, "jobId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetDpVolumeGroupSnapshotReplicationJobRequest struct {
	ctx context.Context
	ApiService *DpVolumeGroupSnapshotReplicationJobsAPIService
	jobId int64
}

func (r ApiGetDpVolumeGroupSnapshotReplicationJobRequest) Execute() (*DpVolumeGroupSnapshotReplicationJobResp, *http.Response, error) {
	return r.ApiService.GetDpVolumeGroupSnapshotReplicationJobExecute(r)
}

/*
GetDpVolumeGroupSnapshotReplicationJob Method for GetDpVolumeGroupSnapshotReplicationJob

Get dp volume group snapshot replication job

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param jobId resource id
 @return ApiGetDpVolumeGroupSnapshotReplicationJobRequest
*/
func (a *DpVolumeGroupSnapshotReplicationJobsAPIService) GetDpVolumeGroupSnapshotReplicationJob(ctx context.Context, jobId int64) ApiGetDpVolumeGroupSnapshotReplicationJobRequest {
	return ApiGetDpVolumeGroupSnapshotReplicationJobRequest{
		ApiService: a,
		ctx: ctx,
		jobId: jobId,
	}
}

// Execute executes the request
//  @return DpVolumeGroupSnapshotReplicationJobResp
func (a *DpVolumeGroupSnapshotReplicationJobsAPIService) GetDpVolumeGroupSnapshotReplicationJobExecute(r ApiGetDpVolumeGroupSnapshotReplicationJobRequest) (*DpVolumeGroupSnapshotReplicationJobResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DpVolumeGroupSnapshotReplicationJobResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DpVolumeGroupSnapshotReplicationJobsAPIService.GetDpVolumeGroupSnapshotReplicationJob")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dp-volume-group-snapshot-replication-jobs/{job_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"job_id"+"}", url.PathEscape(parameterValueToString(r.jobId, "jobId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListDpVolumeGroupSnapshotReplicationJobRequest struct {
	ctx context.Context
	ApiService *DpVolumeGroupSnapshotReplicationJobsAPIService
	dpVolumeGroupSnapshotReplicationPairId *int64
}

// related pair id
func (r ApiListDpVolumeGroupSnapshotReplicationJobRequest) DpVolumeGroupSnapshotReplicationPairId(dpVolumeGroupSnapshotReplicationPairId int64) ApiListDpVolumeGroupSnapshotReplicationJobRequest {
	r.dpVolumeGroupSnapshotReplicationPairId = &dpVolumeGroupSnapshotReplicationPairId
	return r
}

func (r ApiListDpVolumeGroupSnapshotReplicationJobRequest) Execute() (*DpVolumeGroupSnapshotReplicationJobsResp, *http.Response, error) {
	return r.ApiService.ListDpVolumeGroupSnapshotReplicationJobExecute(r)
}

/*
ListDpVolumeGroupSnapshotReplicationJob Method for ListDpVolumeGroupSnapshotReplicationJob

List dp volume group snapshot replication jobs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListDpVolumeGroupSnapshotReplicationJobRequest
*/
func (a *DpVolumeGroupSnapshotReplicationJobsAPIService) ListDpVolumeGroupSnapshotReplicationJob(ctx context.Context) ApiListDpVolumeGroupSnapshotReplicationJobRequest {
	return ApiListDpVolumeGroupSnapshotReplicationJobRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DpVolumeGroupSnapshotReplicationJobsResp
func (a *DpVolumeGroupSnapshotReplicationJobsAPIService) ListDpVolumeGroupSnapshotReplicationJobExecute(r ApiListDpVolumeGroupSnapshotReplicationJobRequest) (*DpVolumeGroupSnapshotReplicationJobsResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DpVolumeGroupSnapshotReplicationJobsResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DpVolumeGroupSnapshotReplicationJobsAPIService.ListDpVolumeGroupSnapshotReplicationJob")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dp-volume-group-snapshot-replication-jobs/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.dpVolumeGroupSnapshotReplicationPairId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dp_volume_group_snapshot_replication_pair_id", r.dpVolumeGroupSnapshotReplicationPairId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
