/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the S3LoadBalancerStat type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &S3LoadBalancerStat{}

// S3LoadBalancerStat S3LoadBalancerStat define s3 load balancer stat info
type S3LoadBalancerStat struct {
	ActiveConnections *float64 `json:"active_connections,omitempty"`
	BackendDownBandwidthKbyte *float64 `json:"backend_down_bandwidth_kbyte,omitempty"`
	BackendDownloadIops *float64 `json:"backend_download_iops,omitempty"`
	BackendUpBandwidthKbyte *float64 `json:"backend_up_bandwidth_kbyte,omitempty"`
	BackendUploadIops *float64 `json:"backend_upload_iops,omitempty"`
	CpuUtil *float64 `json:"cpu_util,omitempty"`
	Create *time.Time `json:"create,omitempty"`
	DownBandwidthKbyte *float64 `json:"down_bandwidth_kbyte,omitempty"`
	DownloadIops *float64 `json:"download_iops,omitempty"`
	FailureRequests *float64 `json:"failure_requests,omitempty"`
	MemUsagePercent *float64 `json:"mem_usage_percent,omitempty"`
	SuccessRequests *float64 `json:"success_requests,omitempty"`
	UpBandwidthKbyte *float64 `json:"up_bandwidth_kbyte,omitempty"`
	UploadIops *float64 `json:"upload_iops,omitempty"`
	VipsConnStat []VipConnectionStat `json:"vips_conn_stat,omitempty"`
}

// NewS3LoadBalancerStat instantiates a new S3LoadBalancerStat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewS3LoadBalancerStat() *S3LoadBalancerStat {
	this := S3LoadBalancerStat{}
	return &this
}

// NewS3LoadBalancerStatWithDefaults instantiates a new S3LoadBalancerStat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewS3LoadBalancerStatWithDefaults() *S3LoadBalancerStat {
	this := S3LoadBalancerStat{}
	return &this
}

// GetActiveConnections returns the ActiveConnections field value if set, zero value otherwise.
func (o *S3LoadBalancerStat) GetActiveConnections() float64 {
	if o == nil || IsNil(o.ActiveConnections) {
		var ret float64
		return ret
	}
	return *o.ActiveConnections
}

// GetActiveConnectionsOk returns a tuple with the ActiveConnections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3LoadBalancerStat) GetActiveConnectionsOk() (*float64, bool) {
	if o == nil || IsNil(o.ActiveConnections) {
		return nil, false
	}
	return o.ActiveConnections, true
}

// HasActiveConnections returns a boolean if a field has been set.
func (o *S3LoadBalancerStat) HasActiveConnections() bool {
	if o != nil && !IsNil(o.ActiveConnections) {
		return true
	}

	return false
}

// SetActiveConnections gets a reference to the given float64 and assigns it to the ActiveConnections field.
func (o *S3LoadBalancerStat) SetActiveConnections(v float64) {
	o.ActiveConnections = &v
}

// GetBackendDownBandwidthKbyte returns the BackendDownBandwidthKbyte field value if set, zero value otherwise.
func (o *S3LoadBalancerStat) GetBackendDownBandwidthKbyte() float64 {
	if o == nil || IsNil(o.BackendDownBandwidthKbyte) {
		var ret float64
		return ret
	}
	return *o.BackendDownBandwidthKbyte
}

// GetBackendDownBandwidthKbyteOk returns a tuple with the BackendDownBandwidthKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3LoadBalancerStat) GetBackendDownBandwidthKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.BackendDownBandwidthKbyte) {
		return nil, false
	}
	return o.BackendDownBandwidthKbyte, true
}

// HasBackendDownBandwidthKbyte returns a boolean if a field has been set.
func (o *S3LoadBalancerStat) HasBackendDownBandwidthKbyte() bool {
	if o != nil && !IsNil(o.BackendDownBandwidthKbyte) {
		return true
	}

	return false
}

// SetBackendDownBandwidthKbyte gets a reference to the given float64 and assigns it to the BackendDownBandwidthKbyte field.
func (o *S3LoadBalancerStat) SetBackendDownBandwidthKbyte(v float64) {
	o.BackendDownBandwidthKbyte = &v
}

// GetBackendDownloadIops returns the BackendDownloadIops field value if set, zero value otherwise.
func (o *S3LoadBalancerStat) GetBackendDownloadIops() float64 {
	if o == nil || IsNil(o.BackendDownloadIops) {
		var ret float64
		return ret
	}
	return *o.BackendDownloadIops
}

// GetBackendDownloadIopsOk returns a tuple with the BackendDownloadIops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3LoadBalancerStat) GetBackendDownloadIopsOk() (*float64, bool) {
	if o == nil || IsNil(o.BackendDownloadIops) {
		return nil, false
	}
	return o.BackendDownloadIops, true
}

// HasBackendDownloadIops returns a boolean if a field has been set.
func (o *S3LoadBalancerStat) HasBackendDownloadIops() bool {
	if o != nil && !IsNil(o.BackendDownloadIops) {
		return true
	}

	return false
}

// SetBackendDownloadIops gets a reference to the given float64 and assigns it to the BackendDownloadIops field.
func (o *S3LoadBalancerStat) SetBackendDownloadIops(v float64) {
	o.BackendDownloadIops = &v
}

// GetBackendUpBandwidthKbyte returns the BackendUpBandwidthKbyte field value if set, zero value otherwise.
func (o *S3LoadBalancerStat) GetBackendUpBandwidthKbyte() float64 {
	if o == nil || IsNil(o.BackendUpBandwidthKbyte) {
		var ret float64
		return ret
	}
	return *o.BackendUpBandwidthKbyte
}

// GetBackendUpBandwidthKbyteOk returns a tuple with the BackendUpBandwidthKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3LoadBalancerStat) GetBackendUpBandwidthKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.BackendUpBandwidthKbyte) {
		return nil, false
	}
	return o.BackendUpBandwidthKbyte, true
}

// HasBackendUpBandwidthKbyte returns a boolean if a field has been set.
func (o *S3LoadBalancerStat) HasBackendUpBandwidthKbyte() bool {
	if o != nil && !IsNil(o.BackendUpBandwidthKbyte) {
		return true
	}

	return false
}

// SetBackendUpBandwidthKbyte gets a reference to the given float64 and assigns it to the BackendUpBandwidthKbyte field.
func (o *S3LoadBalancerStat) SetBackendUpBandwidthKbyte(v float64) {
	o.BackendUpBandwidthKbyte = &v
}

// GetBackendUploadIops returns the BackendUploadIops field value if set, zero value otherwise.
func (o *S3LoadBalancerStat) GetBackendUploadIops() float64 {
	if o == nil || IsNil(o.BackendUploadIops) {
		var ret float64
		return ret
	}
	return *o.BackendUploadIops
}

// GetBackendUploadIopsOk returns a tuple with the BackendUploadIops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3LoadBalancerStat) GetBackendUploadIopsOk() (*float64, bool) {
	if o == nil || IsNil(o.BackendUploadIops) {
		return nil, false
	}
	return o.BackendUploadIops, true
}

// HasBackendUploadIops returns a boolean if a field has been set.
func (o *S3LoadBalancerStat) HasBackendUploadIops() bool {
	if o != nil && !IsNil(o.BackendUploadIops) {
		return true
	}

	return false
}

// SetBackendUploadIops gets a reference to the given float64 and assigns it to the BackendUploadIops field.
func (o *S3LoadBalancerStat) SetBackendUploadIops(v float64) {
	o.BackendUploadIops = &v
}

// GetCpuUtil returns the CpuUtil field value if set, zero value otherwise.
func (o *S3LoadBalancerStat) GetCpuUtil() float64 {
	if o == nil || IsNil(o.CpuUtil) {
		var ret float64
		return ret
	}
	return *o.CpuUtil
}

// GetCpuUtilOk returns a tuple with the CpuUtil field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3LoadBalancerStat) GetCpuUtilOk() (*float64, bool) {
	if o == nil || IsNil(o.CpuUtil) {
		return nil, false
	}
	return o.CpuUtil, true
}

// HasCpuUtil returns a boolean if a field has been set.
func (o *S3LoadBalancerStat) HasCpuUtil() bool {
	if o != nil && !IsNil(o.CpuUtil) {
		return true
	}

	return false
}

// SetCpuUtil gets a reference to the given float64 and assigns it to the CpuUtil field.
func (o *S3LoadBalancerStat) SetCpuUtil(v float64) {
	o.CpuUtil = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *S3LoadBalancerStat) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3LoadBalancerStat) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *S3LoadBalancerStat) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *S3LoadBalancerStat) SetCreate(v time.Time) {
	o.Create = &v
}

// GetDownBandwidthKbyte returns the DownBandwidthKbyte field value if set, zero value otherwise.
func (o *S3LoadBalancerStat) GetDownBandwidthKbyte() float64 {
	if o == nil || IsNil(o.DownBandwidthKbyte) {
		var ret float64
		return ret
	}
	return *o.DownBandwidthKbyte
}

// GetDownBandwidthKbyteOk returns a tuple with the DownBandwidthKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3LoadBalancerStat) GetDownBandwidthKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.DownBandwidthKbyte) {
		return nil, false
	}
	return o.DownBandwidthKbyte, true
}

// HasDownBandwidthKbyte returns a boolean if a field has been set.
func (o *S3LoadBalancerStat) HasDownBandwidthKbyte() bool {
	if o != nil && !IsNil(o.DownBandwidthKbyte) {
		return true
	}

	return false
}

// SetDownBandwidthKbyte gets a reference to the given float64 and assigns it to the DownBandwidthKbyte field.
func (o *S3LoadBalancerStat) SetDownBandwidthKbyte(v float64) {
	o.DownBandwidthKbyte = &v
}

// GetDownloadIops returns the DownloadIops field value if set, zero value otherwise.
func (o *S3LoadBalancerStat) GetDownloadIops() float64 {
	if o == nil || IsNil(o.DownloadIops) {
		var ret float64
		return ret
	}
	return *o.DownloadIops
}

// GetDownloadIopsOk returns a tuple with the DownloadIops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3LoadBalancerStat) GetDownloadIopsOk() (*float64, bool) {
	if o == nil || IsNil(o.DownloadIops) {
		return nil, false
	}
	return o.DownloadIops, true
}

// HasDownloadIops returns a boolean if a field has been set.
func (o *S3LoadBalancerStat) HasDownloadIops() bool {
	if o != nil && !IsNil(o.DownloadIops) {
		return true
	}

	return false
}

// SetDownloadIops gets a reference to the given float64 and assigns it to the DownloadIops field.
func (o *S3LoadBalancerStat) SetDownloadIops(v float64) {
	o.DownloadIops = &v
}

// GetFailureRequests returns the FailureRequests field value if set, zero value otherwise.
func (o *S3LoadBalancerStat) GetFailureRequests() float64 {
	if o == nil || IsNil(o.FailureRequests) {
		var ret float64
		return ret
	}
	return *o.FailureRequests
}

// GetFailureRequestsOk returns a tuple with the FailureRequests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3LoadBalancerStat) GetFailureRequestsOk() (*float64, bool) {
	if o == nil || IsNil(o.FailureRequests) {
		return nil, false
	}
	return o.FailureRequests, true
}

// HasFailureRequests returns a boolean if a field has been set.
func (o *S3LoadBalancerStat) HasFailureRequests() bool {
	if o != nil && !IsNil(o.FailureRequests) {
		return true
	}

	return false
}

// SetFailureRequests gets a reference to the given float64 and assigns it to the FailureRequests field.
func (o *S3LoadBalancerStat) SetFailureRequests(v float64) {
	o.FailureRequests = &v
}

// GetMemUsagePercent returns the MemUsagePercent field value if set, zero value otherwise.
func (o *S3LoadBalancerStat) GetMemUsagePercent() float64 {
	if o == nil || IsNil(o.MemUsagePercent) {
		var ret float64
		return ret
	}
	return *o.MemUsagePercent
}

// GetMemUsagePercentOk returns a tuple with the MemUsagePercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3LoadBalancerStat) GetMemUsagePercentOk() (*float64, bool) {
	if o == nil || IsNil(o.MemUsagePercent) {
		return nil, false
	}
	return o.MemUsagePercent, true
}

// HasMemUsagePercent returns a boolean if a field has been set.
func (o *S3LoadBalancerStat) HasMemUsagePercent() bool {
	if o != nil && !IsNil(o.MemUsagePercent) {
		return true
	}

	return false
}

// SetMemUsagePercent gets a reference to the given float64 and assigns it to the MemUsagePercent field.
func (o *S3LoadBalancerStat) SetMemUsagePercent(v float64) {
	o.MemUsagePercent = &v
}

// GetSuccessRequests returns the SuccessRequests field value if set, zero value otherwise.
func (o *S3LoadBalancerStat) GetSuccessRequests() float64 {
	if o == nil || IsNil(o.SuccessRequests) {
		var ret float64
		return ret
	}
	return *o.SuccessRequests
}

// GetSuccessRequestsOk returns a tuple with the SuccessRequests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3LoadBalancerStat) GetSuccessRequestsOk() (*float64, bool) {
	if o == nil || IsNil(o.SuccessRequests) {
		return nil, false
	}
	return o.SuccessRequests, true
}

// HasSuccessRequests returns a boolean if a field has been set.
func (o *S3LoadBalancerStat) HasSuccessRequests() bool {
	if o != nil && !IsNil(o.SuccessRequests) {
		return true
	}

	return false
}

// SetSuccessRequests gets a reference to the given float64 and assigns it to the SuccessRequests field.
func (o *S3LoadBalancerStat) SetSuccessRequests(v float64) {
	o.SuccessRequests = &v
}

// GetUpBandwidthKbyte returns the UpBandwidthKbyte field value if set, zero value otherwise.
func (o *S3LoadBalancerStat) GetUpBandwidthKbyte() float64 {
	if o == nil || IsNil(o.UpBandwidthKbyte) {
		var ret float64
		return ret
	}
	return *o.UpBandwidthKbyte
}

// GetUpBandwidthKbyteOk returns a tuple with the UpBandwidthKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3LoadBalancerStat) GetUpBandwidthKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.UpBandwidthKbyte) {
		return nil, false
	}
	return o.UpBandwidthKbyte, true
}

// HasUpBandwidthKbyte returns a boolean if a field has been set.
func (o *S3LoadBalancerStat) HasUpBandwidthKbyte() bool {
	if o != nil && !IsNil(o.UpBandwidthKbyte) {
		return true
	}

	return false
}

// SetUpBandwidthKbyte gets a reference to the given float64 and assigns it to the UpBandwidthKbyte field.
func (o *S3LoadBalancerStat) SetUpBandwidthKbyte(v float64) {
	o.UpBandwidthKbyte = &v
}

// GetUploadIops returns the UploadIops field value if set, zero value otherwise.
func (o *S3LoadBalancerStat) GetUploadIops() float64 {
	if o == nil || IsNil(o.UploadIops) {
		var ret float64
		return ret
	}
	return *o.UploadIops
}

// GetUploadIopsOk returns a tuple with the UploadIops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3LoadBalancerStat) GetUploadIopsOk() (*float64, bool) {
	if o == nil || IsNil(o.UploadIops) {
		return nil, false
	}
	return o.UploadIops, true
}

// HasUploadIops returns a boolean if a field has been set.
func (o *S3LoadBalancerStat) HasUploadIops() bool {
	if o != nil && !IsNil(o.UploadIops) {
		return true
	}

	return false
}

// SetUploadIops gets a reference to the given float64 and assigns it to the UploadIops field.
func (o *S3LoadBalancerStat) SetUploadIops(v float64) {
	o.UploadIops = &v
}

// GetVipsConnStat returns the VipsConnStat field value if set, zero value otherwise.
func (o *S3LoadBalancerStat) GetVipsConnStat() []VipConnectionStat {
	if o == nil || IsNil(o.VipsConnStat) {
		var ret []VipConnectionStat
		return ret
	}
	return o.VipsConnStat
}

// GetVipsConnStatOk returns a tuple with the VipsConnStat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3LoadBalancerStat) GetVipsConnStatOk() ([]VipConnectionStat, bool) {
	if o == nil || IsNil(o.VipsConnStat) {
		return nil, false
	}
	return o.VipsConnStat, true
}

// HasVipsConnStat returns a boolean if a field has been set.
func (o *S3LoadBalancerStat) HasVipsConnStat() bool {
	if o != nil && !IsNil(o.VipsConnStat) {
		return true
	}

	return false
}

// SetVipsConnStat gets a reference to the given []VipConnectionStat and assigns it to the VipsConnStat field.
func (o *S3LoadBalancerStat) SetVipsConnStat(v []VipConnectionStat) {
	o.VipsConnStat = v
}

func (o S3LoadBalancerStat) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o S3LoadBalancerStat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActiveConnections) {
		toSerialize["active_connections"] = o.ActiveConnections
	}
	if !IsNil(o.BackendDownBandwidthKbyte) {
		toSerialize["backend_down_bandwidth_kbyte"] = o.BackendDownBandwidthKbyte
	}
	if !IsNil(o.BackendDownloadIops) {
		toSerialize["backend_download_iops"] = o.BackendDownloadIops
	}
	if !IsNil(o.BackendUpBandwidthKbyte) {
		toSerialize["backend_up_bandwidth_kbyte"] = o.BackendUpBandwidthKbyte
	}
	if !IsNil(o.BackendUploadIops) {
		toSerialize["backend_upload_iops"] = o.BackendUploadIops
	}
	if !IsNil(o.CpuUtil) {
		toSerialize["cpu_util"] = o.CpuUtil
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.DownBandwidthKbyte) {
		toSerialize["down_bandwidth_kbyte"] = o.DownBandwidthKbyte
	}
	if !IsNil(o.DownloadIops) {
		toSerialize["download_iops"] = o.DownloadIops
	}
	if !IsNil(o.FailureRequests) {
		toSerialize["failure_requests"] = o.FailureRequests
	}
	if !IsNil(o.MemUsagePercent) {
		toSerialize["mem_usage_percent"] = o.MemUsagePercent
	}
	if !IsNil(o.SuccessRequests) {
		toSerialize["success_requests"] = o.SuccessRequests
	}
	if !IsNil(o.UpBandwidthKbyte) {
		toSerialize["up_bandwidth_kbyte"] = o.UpBandwidthKbyte
	}
	if !IsNil(o.UploadIops) {
		toSerialize["upload_iops"] = o.UploadIops
	}
	if !IsNil(o.VipsConnStat) {
		toSerialize["vips_conn_stat"] = o.VipsConnStat
	}
	return toSerialize, nil
}

type NullableS3LoadBalancerStat struct {
	value *S3LoadBalancerStat
	isSet bool
}

func (v NullableS3LoadBalancerStat) Get() *S3LoadBalancerStat {
	return v.value
}

func (v *NullableS3LoadBalancerStat) Set(val *S3LoadBalancerStat) {
	v.value = val
	v.isSet = true
}

func (v NullableS3LoadBalancerStat) IsSet() bool {
	return v.isSet
}

func (v *NullableS3LoadBalancerStat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableS3LoadBalancerStat(val *S3LoadBalancerStat) *NullableS3LoadBalancerStat {
	return &NullableS3LoadBalancerStat{value: val, isSet: true}
}

func (v NullableS3LoadBalancerStat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableS3LoadBalancerStat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


