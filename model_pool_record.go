/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the PoolRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PoolRecord{}

// PoolRecord PoolRecord is used to combine Pool and PoolStat to let API comfortable
type PoolRecord struct {
	ActionStatus *string `json:"action_status,omitempty"`
	AllocatedSize *int64 `json:"allocated_size,omitempty"`
	BindOsdNum *int64 `json:"bind_osd_num,omitempty"`
	BlockVolumeNum *int64 `json:"block_volume_num,omitempty"`
	CachePool *PoolNestview `json:"cache_pool,omitempty"`
	Cluster *ClusterNestview `json:"cluster,omitempty"`
	CodingChunkNum *int64 `json:"coding_chunk_num,omitempty"`
	CompressAlgorithm *string `json:"compress_algorithm,omitempty"`
	Compressed *bool `json:"compressed,omitempty"`
	Create *time.Time `json:"create,omitempty"`
	DataChunkNum *int64 `json:"data_chunk_num,omitempty"`
	DataPool *PoolNestview `json:"data_pool,omitempty"`
	DefaultManagedVolumeFormat *int64 `json:"default_managed_volume_format,omitempty"`
	DeviceType *string `json:"device_type,omitempty"`
	DeviceTypeCheckDisabled *bool `json:"device_type_check_disabled,omitempty"`
	EncryptEnabled *bool `json:"encrypt_enabled,omitempty"`
	FailureDomainType *string `json:"failure_domain_type,omitempty"`
	GcQosPlan *PoolGCPolicyPlan `json:"gc_qos_plan,omitempty"`
	Hidden *bool `json:"hidden,omitempty"`
	Id *int64 `json:"id,omitempty"`
	InnerPoolId *int32 `json:"inner_pool_id,omitempty"`
	IoBypassEnabled *bool `json:"io_bypass_enabled,omitempty"`
	IoBypassMode *string `json:"io_bypass_mode,omitempty"`
	IoBypassThreshold *int64 `json:"io_bypass_threshold,omitempty"`
	MinAllocSize *int64 `json:"min_alloc_size,omitempty"`
	MinOsdNum *int64 `json:"min_osd_num,omitempty"`
	Name *string `json:"name,omitempty"`
	NumaApplyPolicy *string `json:"numa_apply_policy,omitempty"`
	NumaBindBalanced *bool `json:"numa_bind_balanced,omitempty"`
	NumaBindPolicy *string `json:"numa_bind_policy,omitempty"`
	NumaEnabled *bool `json:"numa_enabled,omitempty"`
	OsdGroup *OsdGroupNestview `json:"osd_group,omitempty"`
	OsdNum *int64 `json:"osd_num,omitempty"`
	OsdNumPerHost *int64 `json:"osd_num_per_host,omitempty"`
	OutFailureDomainNum *int64 `json:"out_failure_domain_num,omitempty"`
	PoolId *int32 `json:"pool_id,omitempty"`
	PoolMode *string `json:"pool_mode,omitempty"`
	PoolName *string `json:"pool_name,omitempty"`
	PoolRole *string `json:"pool_role,omitempty"`
	PoolType *string `json:"pool_type,omitempty"`
	PrimaryPlacementNode *PlacementNodeNestview `json:"primary_placement_node,omitempty"`
	ProductType *string `json:"product_type,omitempty"`
	Property map[string]map[string]interface{} `json:"property,omitempty"`
	ProtectionDomain *ProtectionDomainNestview `json:"protection_domain,omitempty"`
	Qos *OsdQos `json:"qos,omitempty"`
	ReplicateSize *int64 `json:"replicate_size,omitempty"`
	ReservedPercent *float64 `json:"reserved_percent,omitempty"`
	SizePerOsd *int64 `json:"size_per_osd,omitempty"`
	Status *string `json:"status,omitempty"`
	Stretched *bool `json:"stretched,omitempty"`
	StripeUnit *int64 `json:"stripe_unit,omitempty"`
	SubFailureDomainType *string `json:"sub_failure_domain_type,omitempty"`
	SuggestedOmapSize *int64 `json:"suggested_omap_size,omitempty"`
	ThinProvisioned *bool `json:"thin_provisioned,omitempty"`
	TierStatus *string `json:"tier_status,omitempty"`
	TransportMode *string `json:"transport_mode,omitempty"`
	Update *time.Time `json:"update,omitempty"`
	Samples []PoolStat `json:"samples,omitempty"`
}

// NewPoolRecord instantiates a new PoolRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPoolRecord() *PoolRecord {
	this := PoolRecord{}
	return &this
}

// NewPoolRecordWithDefaults instantiates a new PoolRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPoolRecordWithDefaults() *PoolRecord {
	this := PoolRecord{}
	return &this
}

// GetActionStatus returns the ActionStatus field value if set, zero value otherwise.
func (o *PoolRecord) GetActionStatus() string {
	if o == nil || IsNil(o.ActionStatus) {
		var ret string
		return ret
	}
	return *o.ActionStatus
}

// GetActionStatusOk returns a tuple with the ActionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetActionStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ActionStatus) {
		return nil, false
	}
	return o.ActionStatus, true
}

// HasActionStatus returns a boolean if a field has been set.
func (o *PoolRecord) HasActionStatus() bool {
	if o != nil && !IsNil(o.ActionStatus) {
		return true
	}

	return false
}

// SetActionStatus gets a reference to the given string and assigns it to the ActionStatus field.
func (o *PoolRecord) SetActionStatus(v string) {
	o.ActionStatus = &v
}

// GetAllocatedSize returns the AllocatedSize field value if set, zero value otherwise.
func (o *PoolRecord) GetAllocatedSize() int64 {
	if o == nil || IsNil(o.AllocatedSize) {
		var ret int64
		return ret
	}
	return *o.AllocatedSize
}

// GetAllocatedSizeOk returns a tuple with the AllocatedSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetAllocatedSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.AllocatedSize) {
		return nil, false
	}
	return o.AllocatedSize, true
}

// HasAllocatedSize returns a boolean if a field has been set.
func (o *PoolRecord) HasAllocatedSize() bool {
	if o != nil && !IsNil(o.AllocatedSize) {
		return true
	}

	return false
}

// SetAllocatedSize gets a reference to the given int64 and assigns it to the AllocatedSize field.
func (o *PoolRecord) SetAllocatedSize(v int64) {
	o.AllocatedSize = &v
}

// GetBindOsdNum returns the BindOsdNum field value if set, zero value otherwise.
func (o *PoolRecord) GetBindOsdNum() int64 {
	if o == nil || IsNil(o.BindOsdNum) {
		var ret int64
		return ret
	}
	return *o.BindOsdNum
}

// GetBindOsdNumOk returns a tuple with the BindOsdNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetBindOsdNumOk() (*int64, bool) {
	if o == nil || IsNil(o.BindOsdNum) {
		return nil, false
	}
	return o.BindOsdNum, true
}

// HasBindOsdNum returns a boolean if a field has been set.
func (o *PoolRecord) HasBindOsdNum() bool {
	if o != nil && !IsNil(o.BindOsdNum) {
		return true
	}

	return false
}

// SetBindOsdNum gets a reference to the given int64 and assigns it to the BindOsdNum field.
func (o *PoolRecord) SetBindOsdNum(v int64) {
	o.BindOsdNum = &v
}

// GetBlockVolumeNum returns the BlockVolumeNum field value if set, zero value otherwise.
func (o *PoolRecord) GetBlockVolumeNum() int64 {
	if o == nil || IsNil(o.BlockVolumeNum) {
		var ret int64
		return ret
	}
	return *o.BlockVolumeNum
}

// GetBlockVolumeNumOk returns a tuple with the BlockVolumeNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetBlockVolumeNumOk() (*int64, bool) {
	if o == nil || IsNil(o.BlockVolumeNum) {
		return nil, false
	}
	return o.BlockVolumeNum, true
}

// HasBlockVolumeNum returns a boolean if a field has been set.
func (o *PoolRecord) HasBlockVolumeNum() bool {
	if o != nil && !IsNil(o.BlockVolumeNum) {
		return true
	}

	return false
}

// SetBlockVolumeNum gets a reference to the given int64 and assigns it to the BlockVolumeNum field.
func (o *PoolRecord) SetBlockVolumeNum(v int64) {
	o.BlockVolumeNum = &v
}

// GetCachePool returns the CachePool field value if set, zero value otherwise.
func (o *PoolRecord) GetCachePool() PoolNestview {
	if o == nil || IsNil(o.CachePool) {
		var ret PoolNestview
		return ret
	}
	return *o.CachePool
}

// GetCachePoolOk returns a tuple with the CachePool field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetCachePoolOk() (*PoolNestview, bool) {
	if o == nil || IsNil(o.CachePool) {
		return nil, false
	}
	return o.CachePool, true
}

// HasCachePool returns a boolean if a field has been set.
func (o *PoolRecord) HasCachePool() bool {
	if o != nil && !IsNil(o.CachePool) {
		return true
	}

	return false
}

// SetCachePool gets a reference to the given PoolNestview and assigns it to the CachePool field.
func (o *PoolRecord) SetCachePool(v PoolNestview) {
	o.CachePool = &v
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *PoolRecord) GetCluster() ClusterNestview {
	if o == nil || IsNil(o.Cluster) {
		var ret ClusterNestview
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetClusterOk() (*ClusterNestview, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *PoolRecord) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given ClusterNestview and assigns it to the Cluster field.
func (o *PoolRecord) SetCluster(v ClusterNestview) {
	o.Cluster = &v
}

// GetCodingChunkNum returns the CodingChunkNum field value if set, zero value otherwise.
func (o *PoolRecord) GetCodingChunkNum() int64 {
	if o == nil || IsNil(o.CodingChunkNum) {
		var ret int64
		return ret
	}
	return *o.CodingChunkNum
}

// GetCodingChunkNumOk returns a tuple with the CodingChunkNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetCodingChunkNumOk() (*int64, bool) {
	if o == nil || IsNil(o.CodingChunkNum) {
		return nil, false
	}
	return o.CodingChunkNum, true
}

// HasCodingChunkNum returns a boolean if a field has been set.
func (o *PoolRecord) HasCodingChunkNum() bool {
	if o != nil && !IsNil(o.CodingChunkNum) {
		return true
	}

	return false
}

// SetCodingChunkNum gets a reference to the given int64 and assigns it to the CodingChunkNum field.
func (o *PoolRecord) SetCodingChunkNum(v int64) {
	o.CodingChunkNum = &v
}

// GetCompressAlgorithm returns the CompressAlgorithm field value if set, zero value otherwise.
func (o *PoolRecord) GetCompressAlgorithm() string {
	if o == nil || IsNil(o.CompressAlgorithm) {
		var ret string
		return ret
	}
	return *o.CompressAlgorithm
}

// GetCompressAlgorithmOk returns a tuple with the CompressAlgorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetCompressAlgorithmOk() (*string, bool) {
	if o == nil || IsNil(o.CompressAlgorithm) {
		return nil, false
	}
	return o.CompressAlgorithm, true
}

// HasCompressAlgorithm returns a boolean if a field has been set.
func (o *PoolRecord) HasCompressAlgorithm() bool {
	if o != nil && !IsNil(o.CompressAlgorithm) {
		return true
	}

	return false
}

// SetCompressAlgorithm gets a reference to the given string and assigns it to the CompressAlgorithm field.
func (o *PoolRecord) SetCompressAlgorithm(v string) {
	o.CompressAlgorithm = &v
}

// GetCompressed returns the Compressed field value if set, zero value otherwise.
func (o *PoolRecord) GetCompressed() bool {
	if o == nil || IsNil(o.Compressed) {
		var ret bool
		return ret
	}
	return *o.Compressed
}

// GetCompressedOk returns a tuple with the Compressed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetCompressedOk() (*bool, bool) {
	if o == nil || IsNil(o.Compressed) {
		return nil, false
	}
	return o.Compressed, true
}

// HasCompressed returns a boolean if a field has been set.
func (o *PoolRecord) HasCompressed() bool {
	if o != nil && !IsNil(o.Compressed) {
		return true
	}

	return false
}

// SetCompressed gets a reference to the given bool and assigns it to the Compressed field.
func (o *PoolRecord) SetCompressed(v bool) {
	o.Compressed = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *PoolRecord) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *PoolRecord) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *PoolRecord) SetCreate(v time.Time) {
	o.Create = &v
}

// GetDataChunkNum returns the DataChunkNum field value if set, zero value otherwise.
func (o *PoolRecord) GetDataChunkNum() int64 {
	if o == nil || IsNil(o.DataChunkNum) {
		var ret int64
		return ret
	}
	return *o.DataChunkNum
}

// GetDataChunkNumOk returns a tuple with the DataChunkNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetDataChunkNumOk() (*int64, bool) {
	if o == nil || IsNil(o.DataChunkNum) {
		return nil, false
	}
	return o.DataChunkNum, true
}

// HasDataChunkNum returns a boolean if a field has been set.
func (o *PoolRecord) HasDataChunkNum() bool {
	if o != nil && !IsNil(o.DataChunkNum) {
		return true
	}

	return false
}

// SetDataChunkNum gets a reference to the given int64 and assigns it to the DataChunkNum field.
func (o *PoolRecord) SetDataChunkNum(v int64) {
	o.DataChunkNum = &v
}

// GetDataPool returns the DataPool field value if set, zero value otherwise.
func (o *PoolRecord) GetDataPool() PoolNestview {
	if o == nil || IsNil(o.DataPool) {
		var ret PoolNestview
		return ret
	}
	return *o.DataPool
}

// GetDataPoolOk returns a tuple with the DataPool field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetDataPoolOk() (*PoolNestview, bool) {
	if o == nil || IsNil(o.DataPool) {
		return nil, false
	}
	return o.DataPool, true
}

// HasDataPool returns a boolean if a field has been set.
func (o *PoolRecord) HasDataPool() bool {
	if o != nil && !IsNil(o.DataPool) {
		return true
	}

	return false
}

// SetDataPool gets a reference to the given PoolNestview and assigns it to the DataPool field.
func (o *PoolRecord) SetDataPool(v PoolNestview) {
	o.DataPool = &v
}

// GetDefaultManagedVolumeFormat returns the DefaultManagedVolumeFormat field value if set, zero value otherwise.
func (o *PoolRecord) GetDefaultManagedVolumeFormat() int64 {
	if o == nil || IsNil(o.DefaultManagedVolumeFormat) {
		var ret int64
		return ret
	}
	return *o.DefaultManagedVolumeFormat
}

// GetDefaultManagedVolumeFormatOk returns a tuple with the DefaultManagedVolumeFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetDefaultManagedVolumeFormatOk() (*int64, bool) {
	if o == nil || IsNil(o.DefaultManagedVolumeFormat) {
		return nil, false
	}
	return o.DefaultManagedVolumeFormat, true
}

// HasDefaultManagedVolumeFormat returns a boolean if a field has been set.
func (o *PoolRecord) HasDefaultManagedVolumeFormat() bool {
	if o != nil && !IsNil(o.DefaultManagedVolumeFormat) {
		return true
	}

	return false
}

// SetDefaultManagedVolumeFormat gets a reference to the given int64 and assigns it to the DefaultManagedVolumeFormat field.
func (o *PoolRecord) SetDefaultManagedVolumeFormat(v int64) {
	o.DefaultManagedVolumeFormat = &v
}

// GetDeviceType returns the DeviceType field value if set, zero value otherwise.
func (o *PoolRecord) GetDeviceType() string {
	if o == nil || IsNil(o.DeviceType) {
		var ret string
		return ret
	}
	return *o.DeviceType
}

// GetDeviceTypeOk returns a tuple with the DeviceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetDeviceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceType) {
		return nil, false
	}
	return o.DeviceType, true
}

// HasDeviceType returns a boolean if a field has been set.
func (o *PoolRecord) HasDeviceType() bool {
	if o != nil && !IsNil(o.DeviceType) {
		return true
	}

	return false
}

// SetDeviceType gets a reference to the given string and assigns it to the DeviceType field.
func (o *PoolRecord) SetDeviceType(v string) {
	o.DeviceType = &v
}

// GetDeviceTypeCheckDisabled returns the DeviceTypeCheckDisabled field value if set, zero value otherwise.
func (o *PoolRecord) GetDeviceTypeCheckDisabled() bool {
	if o == nil || IsNil(o.DeviceTypeCheckDisabled) {
		var ret bool
		return ret
	}
	return *o.DeviceTypeCheckDisabled
}

// GetDeviceTypeCheckDisabledOk returns a tuple with the DeviceTypeCheckDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetDeviceTypeCheckDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.DeviceTypeCheckDisabled) {
		return nil, false
	}
	return o.DeviceTypeCheckDisabled, true
}

// HasDeviceTypeCheckDisabled returns a boolean if a field has been set.
func (o *PoolRecord) HasDeviceTypeCheckDisabled() bool {
	if o != nil && !IsNil(o.DeviceTypeCheckDisabled) {
		return true
	}

	return false
}

// SetDeviceTypeCheckDisabled gets a reference to the given bool and assigns it to the DeviceTypeCheckDisabled field.
func (o *PoolRecord) SetDeviceTypeCheckDisabled(v bool) {
	o.DeviceTypeCheckDisabled = &v
}

// GetEncryptEnabled returns the EncryptEnabled field value if set, zero value otherwise.
func (o *PoolRecord) GetEncryptEnabled() bool {
	if o == nil || IsNil(o.EncryptEnabled) {
		var ret bool
		return ret
	}
	return *o.EncryptEnabled
}

// GetEncryptEnabledOk returns a tuple with the EncryptEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetEncryptEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.EncryptEnabled) {
		return nil, false
	}
	return o.EncryptEnabled, true
}

// HasEncryptEnabled returns a boolean if a field has been set.
func (o *PoolRecord) HasEncryptEnabled() bool {
	if o != nil && !IsNil(o.EncryptEnabled) {
		return true
	}

	return false
}

// SetEncryptEnabled gets a reference to the given bool and assigns it to the EncryptEnabled field.
func (o *PoolRecord) SetEncryptEnabled(v bool) {
	o.EncryptEnabled = &v
}

// GetFailureDomainType returns the FailureDomainType field value if set, zero value otherwise.
func (o *PoolRecord) GetFailureDomainType() string {
	if o == nil || IsNil(o.FailureDomainType) {
		var ret string
		return ret
	}
	return *o.FailureDomainType
}

// GetFailureDomainTypeOk returns a tuple with the FailureDomainType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetFailureDomainTypeOk() (*string, bool) {
	if o == nil || IsNil(o.FailureDomainType) {
		return nil, false
	}
	return o.FailureDomainType, true
}

// HasFailureDomainType returns a boolean if a field has been set.
func (o *PoolRecord) HasFailureDomainType() bool {
	if o != nil && !IsNil(o.FailureDomainType) {
		return true
	}

	return false
}

// SetFailureDomainType gets a reference to the given string and assigns it to the FailureDomainType field.
func (o *PoolRecord) SetFailureDomainType(v string) {
	o.FailureDomainType = &v
}

// GetGcQosPlan returns the GcQosPlan field value if set, zero value otherwise.
func (o *PoolRecord) GetGcQosPlan() PoolGCPolicyPlan {
	if o == nil || IsNil(o.GcQosPlan) {
		var ret PoolGCPolicyPlan
		return ret
	}
	return *o.GcQosPlan
}

// GetGcQosPlanOk returns a tuple with the GcQosPlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetGcQosPlanOk() (*PoolGCPolicyPlan, bool) {
	if o == nil || IsNil(o.GcQosPlan) {
		return nil, false
	}
	return o.GcQosPlan, true
}

// HasGcQosPlan returns a boolean if a field has been set.
func (o *PoolRecord) HasGcQosPlan() bool {
	if o != nil && !IsNil(o.GcQosPlan) {
		return true
	}

	return false
}

// SetGcQosPlan gets a reference to the given PoolGCPolicyPlan and assigns it to the GcQosPlan field.
func (o *PoolRecord) SetGcQosPlan(v PoolGCPolicyPlan) {
	o.GcQosPlan = &v
}

// GetHidden returns the Hidden field value if set, zero value otherwise.
func (o *PoolRecord) GetHidden() bool {
	if o == nil || IsNil(o.Hidden) {
		var ret bool
		return ret
	}
	return *o.Hidden
}

// GetHiddenOk returns a tuple with the Hidden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetHiddenOk() (*bool, bool) {
	if o == nil || IsNil(o.Hidden) {
		return nil, false
	}
	return o.Hidden, true
}

// HasHidden returns a boolean if a field has been set.
func (o *PoolRecord) HasHidden() bool {
	if o != nil && !IsNil(o.Hidden) {
		return true
	}

	return false
}

// SetHidden gets a reference to the given bool and assigns it to the Hidden field.
func (o *PoolRecord) SetHidden(v bool) {
	o.Hidden = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PoolRecord) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PoolRecord) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *PoolRecord) SetId(v int64) {
	o.Id = &v
}

// GetInnerPoolId returns the InnerPoolId field value if set, zero value otherwise.
func (o *PoolRecord) GetInnerPoolId() int32 {
	if o == nil || IsNil(o.InnerPoolId) {
		var ret int32
		return ret
	}
	return *o.InnerPoolId
}

// GetInnerPoolIdOk returns a tuple with the InnerPoolId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetInnerPoolIdOk() (*int32, bool) {
	if o == nil || IsNil(o.InnerPoolId) {
		return nil, false
	}
	return o.InnerPoolId, true
}

// HasInnerPoolId returns a boolean if a field has been set.
func (o *PoolRecord) HasInnerPoolId() bool {
	if o != nil && !IsNil(o.InnerPoolId) {
		return true
	}

	return false
}

// SetInnerPoolId gets a reference to the given int32 and assigns it to the InnerPoolId field.
func (o *PoolRecord) SetInnerPoolId(v int32) {
	o.InnerPoolId = &v
}

// GetIoBypassEnabled returns the IoBypassEnabled field value if set, zero value otherwise.
func (o *PoolRecord) GetIoBypassEnabled() bool {
	if o == nil || IsNil(o.IoBypassEnabled) {
		var ret bool
		return ret
	}
	return *o.IoBypassEnabled
}

// GetIoBypassEnabledOk returns a tuple with the IoBypassEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetIoBypassEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IoBypassEnabled) {
		return nil, false
	}
	return o.IoBypassEnabled, true
}

// HasIoBypassEnabled returns a boolean if a field has been set.
func (o *PoolRecord) HasIoBypassEnabled() bool {
	if o != nil && !IsNil(o.IoBypassEnabled) {
		return true
	}

	return false
}

// SetIoBypassEnabled gets a reference to the given bool and assigns it to the IoBypassEnabled field.
func (o *PoolRecord) SetIoBypassEnabled(v bool) {
	o.IoBypassEnabled = &v
}

// GetIoBypassMode returns the IoBypassMode field value if set, zero value otherwise.
func (o *PoolRecord) GetIoBypassMode() string {
	if o == nil || IsNil(o.IoBypassMode) {
		var ret string
		return ret
	}
	return *o.IoBypassMode
}

// GetIoBypassModeOk returns a tuple with the IoBypassMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetIoBypassModeOk() (*string, bool) {
	if o == nil || IsNil(o.IoBypassMode) {
		return nil, false
	}
	return o.IoBypassMode, true
}

// HasIoBypassMode returns a boolean if a field has been set.
func (o *PoolRecord) HasIoBypassMode() bool {
	if o != nil && !IsNil(o.IoBypassMode) {
		return true
	}

	return false
}

// SetIoBypassMode gets a reference to the given string and assigns it to the IoBypassMode field.
func (o *PoolRecord) SetIoBypassMode(v string) {
	o.IoBypassMode = &v
}

// GetIoBypassThreshold returns the IoBypassThreshold field value if set, zero value otherwise.
func (o *PoolRecord) GetIoBypassThreshold() int64 {
	if o == nil || IsNil(o.IoBypassThreshold) {
		var ret int64
		return ret
	}
	return *o.IoBypassThreshold
}

// GetIoBypassThresholdOk returns a tuple with the IoBypassThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetIoBypassThresholdOk() (*int64, bool) {
	if o == nil || IsNil(o.IoBypassThreshold) {
		return nil, false
	}
	return o.IoBypassThreshold, true
}

// HasIoBypassThreshold returns a boolean if a field has been set.
func (o *PoolRecord) HasIoBypassThreshold() bool {
	if o != nil && !IsNil(o.IoBypassThreshold) {
		return true
	}

	return false
}

// SetIoBypassThreshold gets a reference to the given int64 and assigns it to the IoBypassThreshold field.
func (o *PoolRecord) SetIoBypassThreshold(v int64) {
	o.IoBypassThreshold = &v
}

// GetMinAllocSize returns the MinAllocSize field value if set, zero value otherwise.
func (o *PoolRecord) GetMinAllocSize() int64 {
	if o == nil || IsNil(o.MinAllocSize) {
		var ret int64
		return ret
	}
	return *o.MinAllocSize
}

// GetMinAllocSizeOk returns a tuple with the MinAllocSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetMinAllocSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.MinAllocSize) {
		return nil, false
	}
	return o.MinAllocSize, true
}

// HasMinAllocSize returns a boolean if a field has been set.
func (o *PoolRecord) HasMinAllocSize() bool {
	if o != nil && !IsNil(o.MinAllocSize) {
		return true
	}

	return false
}

// SetMinAllocSize gets a reference to the given int64 and assigns it to the MinAllocSize field.
func (o *PoolRecord) SetMinAllocSize(v int64) {
	o.MinAllocSize = &v
}

// GetMinOsdNum returns the MinOsdNum field value if set, zero value otherwise.
func (o *PoolRecord) GetMinOsdNum() int64 {
	if o == nil || IsNil(o.MinOsdNum) {
		var ret int64
		return ret
	}
	return *o.MinOsdNum
}

// GetMinOsdNumOk returns a tuple with the MinOsdNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetMinOsdNumOk() (*int64, bool) {
	if o == nil || IsNil(o.MinOsdNum) {
		return nil, false
	}
	return o.MinOsdNum, true
}

// HasMinOsdNum returns a boolean if a field has been set.
func (o *PoolRecord) HasMinOsdNum() bool {
	if o != nil && !IsNil(o.MinOsdNum) {
		return true
	}

	return false
}

// SetMinOsdNum gets a reference to the given int64 and assigns it to the MinOsdNum field.
func (o *PoolRecord) SetMinOsdNum(v int64) {
	o.MinOsdNum = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PoolRecord) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PoolRecord) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PoolRecord) SetName(v string) {
	o.Name = &v
}

// GetNumaApplyPolicy returns the NumaApplyPolicy field value if set, zero value otherwise.
func (o *PoolRecord) GetNumaApplyPolicy() string {
	if o == nil || IsNil(o.NumaApplyPolicy) {
		var ret string
		return ret
	}
	return *o.NumaApplyPolicy
}

// GetNumaApplyPolicyOk returns a tuple with the NumaApplyPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetNumaApplyPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.NumaApplyPolicy) {
		return nil, false
	}
	return o.NumaApplyPolicy, true
}

// HasNumaApplyPolicy returns a boolean if a field has been set.
func (o *PoolRecord) HasNumaApplyPolicy() bool {
	if o != nil && !IsNil(o.NumaApplyPolicy) {
		return true
	}

	return false
}

// SetNumaApplyPolicy gets a reference to the given string and assigns it to the NumaApplyPolicy field.
func (o *PoolRecord) SetNumaApplyPolicy(v string) {
	o.NumaApplyPolicy = &v
}

// GetNumaBindBalanced returns the NumaBindBalanced field value if set, zero value otherwise.
func (o *PoolRecord) GetNumaBindBalanced() bool {
	if o == nil || IsNil(o.NumaBindBalanced) {
		var ret bool
		return ret
	}
	return *o.NumaBindBalanced
}

// GetNumaBindBalancedOk returns a tuple with the NumaBindBalanced field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetNumaBindBalancedOk() (*bool, bool) {
	if o == nil || IsNil(o.NumaBindBalanced) {
		return nil, false
	}
	return o.NumaBindBalanced, true
}

// HasNumaBindBalanced returns a boolean if a field has been set.
func (o *PoolRecord) HasNumaBindBalanced() bool {
	if o != nil && !IsNil(o.NumaBindBalanced) {
		return true
	}

	return false
}

// SetNumaBindBalanced gets a reference to the given bool and assigns it to the NumaBindBalanced field.
func (o *PoolRecord) SetNumaBindBalanced(v bool) {
	o.NumaBindBalanced = &v
}

// GetNumaBindPolicy returns the NumaBindPolicy field value if set, zero value otherwise.
func (o *PoolRecord) GetNumaBindPolicy() string {
	if o == nil || IsNil(o.NumaBindPolicy) {
		var ret string
		return ret
	}
	return *o.NumaBindPolicy
}

// GetNumaBindPolicyOk returns a tuple with the NumaBindPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetNumaBindPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.NumaBindPolicy) {
		return nil, false
	}
	return o.NumaBindPolicy, true
}

// HasNumaBindPolicy returns a boolean if a field has been set.
func (o *PoolRecord) HasNumaBindPolicy() bool {
	if o != nil && !IsNil(o.NumaBindPolicy) {
		return true
	}

	return false
}

// SetNumaBindPolicy gets a reference to the given string and assigns it to the NumaBindPolicy field.
func (o *PoolRecord) SetNumaBindPolicy(v string) {
	o.NumaBindPolicy = &v
}

// GetNumaEnabled returns the NumaEnabled field value if set, zero value otherwise.
func (o *PoolRecord) GetNumaEnabled() bool {
	if o == nil || IsNil(o.NumaEnabled) {
		var ret bool
		return ret
	}
	return *o.NumaEnabled
}

// GetNumaEnabledOk returns a tuple with the NumaEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetNumaEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.NumaEnabled) {
		return nil, false
	}
	return o.NumaEnabled, true
}

// HasNumaEnabled returns a boolean if a field has been set.
func (o *PoolRecord) HasNumaEnabled() bool {
	if o != nil && !IsNil(o.NumaEnabled) {
		return true
	}

	return false
}

// SetNumaEnabled gets a reference to the given bool and assigns it to the NumaEnabled field.
func (o *PoolRecord) SetNumaEnabled(v bool) {
	o.NumaEnabled = &v
}

// GetOsdGroup returns the OsdGroup field value if set, zero value otherwise.
func (o *PoolRecord) GetOsdGroup() OsdGroupNestview {
	if o == nil || IsNil(o.OsdGroup) {
		var ret OsdGroupNestview
		return ret
	}
	return *o.OsdGroup
}

// GetOsdGroupOk returns a tuple with the OsdGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetOsdGroupOk() (*OsdGroupNestview, bool) {
	if o == nil || IsNil(o.OsdGroup) {
		return nil, false
	}
	return o.OsdGroup, true
}

// HasOsdGroup returns a boolean if a field has been set.
func (o *PoolRecord) HasOsdGroup() bool {
	if o != nil && !IsNil(o.OsdGroup) {
		return true
	}

	return false
}

// SetOsdGroup gets a reference to the given OsdGroupNestview and assigns it to the OsdGroup field.
func (o *PoolRecord) SetOsdGroup(v OsdGroupNestview) {
	o.OsdGroup = &v
}

// GetOsdNum returns the OsdNum field value if set, zero value otherwise.
func (o *PoolRecord) GetOsdNum() int64 {
	if o == nil || IsNil(o.OsdNum) {
		var ret int64
		return ret
	}
	return *o.OsdNum
}

// GetOsdNumOk returns a tuple with the OsdNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetOsdNumOk() (*int64, bool) {
	if o == nil || IsNil(o.OsdNum) {
		return nil, false
	}
	return o.OsdNum, true
}

// HasOsdNum returns a boolean if a field has been set.
func (o *PoolRecord) HasOsdNum() bool {
	if o != nil && !IsNil(o.OsdNum) {
		return true
	}

	return false
}

// SetOsdNum gets a reference to the given int64 and assigns it to the OsdNum field.
func (o *PoolRecord) SetOsdNum(v int64) {
	o.OsdNum = &v
}

// GetOsdNumPerHost returns the OsdNumPerHost field value if set, zero value otherwise.
func (o *PoolRecord) GetOsdNumPerHost() int64 {
	if o == nil || IsNil(o.OsdNumPerHost) {
		var ret int64
		return ret
	}
	return *o.OsdNumPerHost
}

// GetOsdNumPerHostOk returns a tuple with the OsdNumPerHost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetOsdNumPerHostOk() (*int64, bool) {
	if o == nil || IsNil(o.OsdNumPerHost) {
		return nil, false
	}
	return o.OsdNumPerHost, true
}

// HasOsdNumPerHost returns a boolean if a field has been set.
func (o *PoolRecord) HasOsdNumPerHost() bool {
	if o != nil && !IsNil(o.OsdNumPerHost) {
		return true
	}

	return false
}

// SetOsdNumPerHost gets a reference to the given int64 and assigns it to the OsdNumPerHost field.
func (o *PoolRecord) SetOsdNumPerHost(v int64) {
	o.OsdNumPerHost = &v
}

// GetOutFailureDomainNum returns the OutFailureDomainNum field value if set, zero value otherwise.
func (o *PoolRecord) GetOutFailureDomainNum() int64 {
	if o == nil || IsNil(o.OutFailureDomainNum) {
		var ret int64
		return ret
	}
	return *o.OutFailureDomainNum
}

// GetOutFailureDomainNumOk returns a tuple with the OutFailureDomainNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetOutFailureDomainNumOk() (*int64, bool) {
	if o == nil || IsNil(o.OutFailureDomainNum) {
		return nil, false
	}
	return o.OutFailureDomainNum, true
}

// HasOutFailureDomainNum returns a boolean if a field has been set.
func (o *PoolRecord) HasOutFailureDomainNum() bool {
	if o != nil && !IsNil(o.OutFailureDomainNum) {
		return true
	}

	return false
}

// SetOutFailureDomainNum gets a reference to the given int64 and assigns it to the OutFailureDomainNum field.
func (o *PoolRecord) SetOutFailureDomainNum(v int64) {
	o.OutFailureDomainNum = &v
}

// GetPoolId returns the PoolId field value if set, zero value otherwise.
func (o *PoolRecord) GetPoolId() int32 {
	if o == nil || IsNil(o.PoolId) {
		var ret int32
		return ret
	}
	return *o.PoolId
}

// GetPoolIdOk returns a tuple with the PoolId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetPoolIdOk() (*int32, bool) {
	if o == nil || IsNil(o.PoolId) {
		return nil, false
	}
	return o.PoolId, true
}

// HasPoolId returns a boolean if a field has been set.
func (o *PoolRecord) HasPoolId() bool {
	if o != nil && !IsNil(o.PoolId) {
		return true
	}

	return false
}

// SetPoolId gets a reference to the given int32 and assigns it to the PoolId field.
func (o *PoolRecord) SetPoolId(v int32) {
	o.PoolId = &v
}

// GetPoolMode returns the PoolMode field value if set, zero value otherwise.
func (o *PoolRecord) GetPoolMode() string {
	if o == nil || IsNil(o.PoolMode) {
		var ret string
		return ret
	}
	return *o.PoolMode
}

// GetPoolModeOk returns a tuple with the PoolMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetPoolModeOk() (*string, bool) {
	if o == nil || IsNil(o.PoolMode) {
		return nil, false
	}
	return o.PoolMode, true
}

// HasPoolMode returns a boolean if a field has been set.
func (o *PoolRecord) HasPoolMode() bool {
	if o != nil && !IsNil(o.PoolMode) {
		return true
	}

	return false
}

// SetPoolMode gets a reference to the given string and assigns it to the PoolMode field.
func (o *PoolRecord) SetPoolMode(v string) {
	o.PoolMode = &v
}

// GetPoolName returns the PoolName field value if set, zero value otherwise.
func (o *PoolRecord) GetPoolName() string {
	if o == nil || IsNil(o.PoolName) {
		var ret string
		return ret
	}
	return *o.PoolName
}

// GetPoolNameOk returns a tuple with the PoolName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetPoolNameOk() (*string, bool) {
	if o == nil || IsNil(o.PoolName) {
		return nil, false
	}
	return o.PoolName, true
}

// HasPoolName returns a boolean if a field has been set.
func (o *PoolRecord) HasPoolName() bool {
	if o != nil && !IsNil(o.PoolName) {
		return true
	}

	return false
}

// SetPoolName gets a reference to the given string and assigns it to the PoolName field.
func (o *PoolRecord) SetPoolName(v string) {
	o.PoolName = &v
}

// GetPoolRole returns the PoolRole field value if set, zero value otherwise.
func (o *PoolRecord) GetPoolRole() string {
	if o == nil || IsNil(o.PoolRole) {
		var ret string
		return ret
	}
	return *o.PoolRole
}

// GetPoolRoleOk returns a tuple with the PoolRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetPoolRoleOk() (*string, bool) {
	if o == nil || IsNil(o.PoolRole) {
		return nil, false
	}
	return o.PoolRole, true
}

// HasPoolRole returns a boolean if a field has been set.
func (o *PoolRecord) HasPoolRole() bool {
	if o != nil && !IsNil(o.PoolRole) {
		return true
	}

	return false
}

// SetPoolRole gets a reference to the given string and assigns it to the PoolRole field.
func (o *PoolRecord) SetPoolRole(v string) {
	o.PoolRole = &v
}

// GetPoolType returns the PoolType field value if set, zero value otherwise.
func (o *PoolRecord) GetPoolType() string {
	if o == nil || IsNil(o.PoolType) {
		var ret string
		return ret
	}
	return *o.PoolType
}

// GetPoolTypeOk returns a tuple with the PoolType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetPoolTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PoolType) {
		return nil, false
	}
	return o.PoolType, true
}

// HasPoolType returns a boolean if a field has been set.
func (o *PoolRecord) HasPoolType() bool {
	if o != nil && !IsNil(o.PoolType) {
		return true
	}

	return false
}

// SetPoolType gets a reference to the given string and assigns it to the PoolType field.
func (o *PoolRecord) SetPoolType(v string) {
	o.PoolType = &v
}

// GetPrimaryPlacementNode returns the PrimaryPlacementNode field value if set, zero value otherwise.
func (o *PoolRecord) GetPrimaryPlacementNode() PlacementNodeNestview {
	if o == nil || IsNil(o.PrimaryPlacementNode) {
		var ret PlacementNodeNestview
		return ret
	}
	return *o.PrimaryPlacementNode
}

// GetPrimaryPlacementNodeOk returns a tuple with the PrimaryPlacementNode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetPrimaryPlacementNodeOk() (*PlacementNodeNestview, bool) {
	if o == nil || IsNil(o.PrimaryPlacementNode) {
		return nil, false
	}
	return o.PrimaryPlacementNode, true
}

// HasPrimaryPlacementNode returns a boolean if a field has been set.
func (o *PoolRecord) HasPrimaryPlacementNode() bool {
	if o != nil && !IsNil(o.PrimaryPlacementNode) {
		return true
	}

	return false
}

// SetPrimaryPlacementNode gets a reference to the given PlacementNodeNestview and assigns it to the PrimaryPlacementNode field.
func (o *PoolRecord) SetPrimaryPlacementNode(v PlacementNodeNestview) {
	o.PrimaryPlacementNode = &v
}

// GetProductType returns the ProductType field value if set, zero value otherwise.
func (o *PoolRecord) GetProductType() string {
	if o == nil || IsNil(o.ProductType) {
		var ret string
		return ret
	}
	return *o.ProductType
}

// GetProductTypeOk returns a tuple with the ProductType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetProductTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ProductType) {
		return nil, false
	}
	return o.ProductType, true
}

// HasProductType returns a boolean if a field has been set.
func (o *PoolRecord) HasProductType() bool {
	if o != nil && !IsNil(o.ProductType) {
		return true
	}

	return false
}

// SetProductType gets a reference to the given string and assigns it to the ProductType field.
func (o *PoolRecord) SetProductType(v string) {
	o.ProductType = &v
}

// GetProperty returns the Property field value if set, zero value otherwise.
func (o *PoolRecord) GetProperty() map[string]map[string]interface{} {
	if o == nil || IsNil(o.Property) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Property
}

// GetPropertyOk returns a tuple with the Property field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetPropertyOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Property) {
		return map[string]map[string]interface{}{}, false
	}
	return o.Property, true
}

// HasProperty returns a boolean if a field has been set.
func (o *PoolRecord) HasProperty() bool {
	if o != nil && !IsNil(o.Property) {
		return true
	}

	return false
}

// SetProperty gets a reference to the given map[string]map[string]interface{} and assigns it to the Property field.
func (o *PoolRecord) SetProperty(v map[string]map[string]interface{}) {
	o.Property = v
}

// GetProtectionDomain returns the ProtectionDomain field value if set, zero value otherwise.
func (o *PoolRecord) GetProtectionDomain() ProtectionDomainNestview {
	if o == nil || IsNil(o.ProtectionDomain) {
		var ret ProtectionDomainNestview
		return ret
	}
	return *o.ProtectionDomain
}

// GetProtectionDomainOk returns a tuple with the ProtectionDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetProtectionDomainOk() (*ProtectionDomainNestview, bool) {
	if o == nil || IsNil(o.ProtectionDomain) {
		return nil, false
	}
	return o.ProtectionDomain, true
}

// HasProtectionDomain returns a boolean if a field has been set.
func (o *PoolRecord) HasProtectionDomain() bool {
	if o != nil && !IsNil(o.ProtectionDomain) {
		return true
	}

	return false
}

// SetProtectionDomain gets a reference to the given ProtectionDomainNestview and assigns it to the ProtectionDomain field.
func (o *PoolRecord) SetProtectionDomain(v ProtectionDomainNestview) {
	o.ProtectionDomain = &v
}

// GetQos returns the Qos field value if set, zero value otherwise.
func (o *PoolRecord) GetQos() OsdQos {
	if o == nil || IsNil(o.Qos) {
		var ret OsdQos
		return ret
	}
	return *o.Qos
}

// GetQosOk returns a tuple with the Qos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetQosOk() (*OsdQos, bool) {
	if o == nil || IsNil(o.Qos) {
		return nil, false
	}
	return o.Qos, true
}

// HasQos returns a boolean if a field has been set.
func (o *PoolRecord) HasQos() bool {
	if o != nil && !IsNil(o.Qos) {
		return true
	}

	return false
}

// SetQos gets a reference to the given OsdQos and assigns it to the Qos field.
func (o *PoolRecord) SetQos(v OsdQos) {
	o.Qos = &v
}

// GetReplicateSize returns the ReplicateSize field value if set, zero value otherwise.
func (o *PoolRecord) GetReplicateSize() int64 {
	if o == nil || IsNil(o.ReplicateSize) {
		var ret int64
		return ret
	}
	return *o.ReplicateSize
}

// GetReplicateSizeOk returns a tuple with the ReplicateSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetReplicateSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.ReplicateSize) {
		return nil, false
	}
	return o.ReplicateSize, true
}

// HasReplicateSize returns a boolean if a field has been set.
func (o *PoolRecord) HasReplicateSize() bool {
	if o != nil && !IsNil(o.ReplicateSize) {
		return true
	}

	return false
}

// SetReplicateSize gets a reference to the given int64 and assigns it to the ReplicateSize field.
func (o *PoolRecord) SetReplicateSize(v int64) {
	o.ReplicateSize = &v
}

// GetReservedPercent returns the ReservedPercent field value if set, zero value otherwise.
func (o *PoolRecord) GetReservedPercent() float64 {
	if o == nil || IsNil(o.ReservedPercent) {
		var ret float64
		return ret
	}
	return *o.ReservedPercent
}

// GetReservedPercentOk returns a tuple with the ReservedPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetReservedPercentOk() (*float64, bool) {
	if o == nil || IsNil(o.ReservedPercent) {
		return nil, false
	}
	return o.ReservedPercent, true
}

// HasReservedPercent returns a boolean if a field has been set.
func (o *PoolRecord) HasReservedPercent() bool {
	if o != nil && !IsNil(o.ReservedPercent) {
		return true
	}

	return false
}

// SetReservedPercent gets a reference to the given float64 and assigns it to the ReservedPercent field.
func (o *PoolRecord) SetReservedPercent(v float64) {
	o.ReservedPercent = &v
}

// GetSizePerOsd returns the SizePerOsd field value if set, zero value otherwise.
func (o *PoolRecord) GetSizePerOsd() int64 {
	if o == nil || IsNil(o.SizePerOsd) {
		var ret int64
		return ret
	}
	return *o.SizePerOsd
}

// GetSizePerOsdOk returns a tuple with the SizePerOsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetSizePerOsdOk() (*int64, bool) {
	if o == nil || IsNil(o.SizePerOsd) {
		return nil, false
	}
	return o.SizePerOsd, true
}

// HasSizePerOsd returns a boolean if a field has been set.
func (o *PoolRecord) HasSizePerOsd() bool {
	if o != nil && !IsNil(o.SizePerOsd) {
		return true
	}

	return false
}

// SetSizePerOsd gets a reference to the given int64 and assigns it to the SizePerOsd field.
func (o *PoolRecord) SetSizePerOsd(v int64) {
	o.SizePerOsd = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *PoolRecord) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *PoolRecord) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *PoolRecord) SetStatus(v string) {
	o.Status = &v
}

// GetStretched returns the Stretched field value if set, zero value otherwise.
func (o *PoolRecord) GetStretched() bool {
	if o == nil || IsNil(o.Stretched) {
		var ret bool
		return ret
	}
	return *o.Stretched
}

// GetStretchedOk returns a tuple with the Stretched field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetStretchedOk() (*bool, bool) {
	if o == nil || IsNil(o.Stretched) {
		return nil, false
	}
	return o.Stretched, true
}

// HasStretched returns a boolean if a field has been set.
func (o *PoolRecord) HasStretched() bool {
	if o != nil && !IsNil(o.Stretched) {
		return true
	}

	return false
}

// SetStretched gets a reference to the given bool and assigns it to the Stretched field.
func (o *PoolRecord) SetStretched(v bool) {
	o.Stretched = &v
}

// GetStripeUnit returns the StripeUnit field value if set, zero value otherwise.
func (o *PoolRecord) GetStripeUnit() int64 {
	if o == nil || IsNil(o.StripeUnit) {
		var ret int64
		return ret
	}
	return *o.StripeUnit
}

// GetStripeUnitOk returns a tuple with the StripeUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetStripeUnitOk() (*int64, bool) {
	if o == nil || IsNil(o.StripeUnit) {
		return nil, false
	}
	return o.StripeUnit, true
}

// HasStripeUnit returns a boolean if a field has been set.
func (o *PoolRecord) HasStripeUnit() bool {
	if o != nil && !IsNil(o.StripeUnit) {
		return true
	}

	return false
}

// SetStripeUnit gets a reference to the given int64 and assigns it to the StripeUnit field.
func (o *PoolRecord) SetStripeUnit(v int64) {
	o.StripeUnit = &v
}

// GetSubFailureDomainType returns the SubFailureDomainType field value if set, zero value otherwise.
func (o *PoolRecord) GetSubFailureDomainType() string {
	if o == nil || IsNil(o.SubFailureDomainType) {
		var ret string
		return ret
	}
	return *o.SubFailureDomainType
}

// GetSubFailureDomainTypeOk returns a tuple with the SubFailureDomainType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetSubFailureDomainTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SubFailureDomainType) {
		return nil, false
	}
	return o.SubFailureDomainType, true
}

// HasSubFailureDomainType returns a boolean if a field has been set.
func (o *PoolRecord) HasSubFailureDomainType() bool {
	if o != nil && !IsNil(o.SubFailureDomainType) {
		return true
	}

	return false
}

// SetSubFailureDomainType gets a reference to the given string and assigns it to the SubFailureDomainType field.
func (o *PoolRecord) SetSubFailureDomainType(v string) {
	o.SubFailureDomainType = &v
}

// GetSuggestedOmapSize returns the SuggestedOmapSize field value if set, zero value otherwise.
func (o *PoolRecord) GetSuggestedOmapSize() int64 {
	if o == nil || IsNil(o.SuggestedOmapSize) {
		var ret int64
		return ret
	}
	return *o.SuggestedOmapSize
}

// GetSuggestedOmapSizeOk returns a tuple with the SuggestedOmapSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetSuggestedOmapSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.SuggestedOmapSize) {
		return nil, false
	}
	return o.SuggestedOmapSize, true
}

// HasSuggestedOmapSize returns a boolean if a field has been set.
func (o *PoolRecord) HasSuggestedOmapSize() bool {
	if o != nil && !IsNil(o.SuggestedOmapSize) {
		return true
	}

	return false
}

// SetSuggestedOmapSize gets a reference to the given int64 and assigns it to the SuggestedOmapSize field.
func (o *PoolRecord) SetSuggestedOmapSize(v int64) {
	o.SuggestedOmapSize = &v
}

// GetThinProvisioned returns the ThinProvisioned field value if set, zero value otherwise.
func (o *PoolRecord) GetThinProvisioned() bool {
	if o == nil || IsNil(o.ThinProvisioned) {
		var ret bool
		return ret
	}
	return *o.ThinProvisioned
}

// GetThinProvisionedOk returns a tuple with the ThinProvisioned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetThinProvisionedOk() (*bool, bool) {
	if o == nil || IsNil(o.ThinProvisioned) {
		return nil, false
	}
	return o.ThinProvisioned, true
}

// HasThinProvisioned returns a boolean if a field has been set.
func (o *PoolRecord) HasThinProvisioned() bool {
	if o != nil && !IsNil(o.ThinProvisioned) {
		return true
	}

	return false
}

// SetThinProvisioned gets a reference to the given bool and assigns it to the ThinProvisioned field.
func (o *PoolRecord) SetThinProvisioned(v bool) {
	o.ThinProvisioned = &v
}

// GetTierStatus returns the TierStatus field value if set, zero value otherwise.
func (o *PoolRecord) GetTierStatus() string {
	if o == nil || IsNil(o.TierStatus) {
		var ret string
		return ret
	}
	return *o.TierStatus
}

// GetTierStatusOk returns a tuple with the TierStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetTierStatusOk() (*string, bool) {
	if o == nil || IsNil(o.TierStatus) {
		return nil, false
	}
	return o.TierStatus, true
}

// HasTierStatus returns a boolean if a field has been set.
func (o *PoolRecord) HasTierStatus() bool {
	if o != nil && !IsNil(o.TierStatus) {
		return true
	}

	return false
}

// SetTierStatus gets a reference to the given string and assigns it to the TierStatus field.
func (o *PoolRecord) SetTierStatus(v string) {
	o.TierStatus = &v
}

// GetTransportMode returns the TransportMode field value if set, zero value otherwise.
func (o *PoolRecord) GetTransportMode() string {
	if o == nil || IsNil(o.TransportMode) {
		var ret string
		return ret
	}
	return *o.TransportMode
}

// GetTransportModeOk returns a tuple with the TransportMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetTransportModeOk() (*string, bool) {
	if o == nil || IsNil(o.TransportMode) {
		return nil, false
	}
	return o.TransportMode, true
}

// HasTransportMode returns a boolean if a field has been set.
func (o *PoolRecord) HasTransportMode() bool {
	if o != nil && !IsNil(o.TransportMode) {
		return true
	}

	return false
}

// SetTransportMode gets a reference to the given string and assigns it to the TransportMode field.
func (o *PoolRecord) SetTransportMode(v string) {
	o.TransportMode = &v
}

// GetUpdate returns the Update field value if set, zero value otherwise.
func (o *PoolRecord) GetUpdate() time.Time {
	if o == nil || IsNil(o.Update) {
		var ret time.Time
		return ret
	}
	return *o.Update
}

// GetUpdateOk returns a tuple with the Update field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetUpdateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Update) {
		return nil, false
	}
	return o.Update, true
}

// HasUpdate returns a boolean if a field has been set.
func (o *PoolRecord) HasUpdate() bool {
	if o != nil && !IsNil(o.Update) {
		return true
	}

	return false
}

// SetUpdate gets a reference to the given time.Time and assigns it to the Update field.
func (o *PoolRecord) SetUpdate(v time.Time) {
	o.Update = &v
}

// GetSamples returns the Samples field value if set, zero value otherwise.
func (o *PoolRecord) GetSamples() []PoolStat {
	if o == nil || IsNil(o.Samples) {
		var ret []PoolStat
		return ret
	}
	return o.Samples
}

// GetSamplesOk returns a tuple with the Samples field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolRecord) GetSamplesOk() ([]PoolStat, bool) {
	if o == nil || IsNil(o.Samples) {
		return nil, false
	}
	return o.Samples, true
}

// HasSamples returns a boolean if a field has been set.
func (o *PoolRecord) HasSamples() bool {
	if o != nil && !IsNil(o.Samples) {
		return true
	}

	return false
}

// SetSamples gets a reference to the given []PoolStat and assigns it to the Samples field.
func (o *PoolRecord) SetSamples(v []PoolStat) {
	o.Samples = v
}

func (o PoolRecord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PoolRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActionStatus) {
		toSerialize["action_status"] = o.ActionStatus
	}
	if !IsNil(o.AllocatedSize) {
		toSerialize["allocated_size"] = o.AllocatedSize
	}
	if !IsNil(o.BindOsdNum) {
		toSerialize["bind_osd_num"] = o.BindOsdNum
	}
	if !IsNil(o.BlockVolumeNum) {
		toSerialize["block_volume_num"] = o.BlockVolumeNum
	}
	if !IsNil(o.CachePool) {
		toSerialize["cache_pool"] = o.CachePool
	}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !IsNil(o.CodingChunkNum) {
		toSerialize["coding_chunk_num"] = o.CodingChunkNum
	}
	if !IsNil(o.CompressAlgorithm) {
		toSerialize["compress_algorithm"] = o.CompressAlgorithm
	}
	if !IsNil(o.Compressed) {
		toSerialize["compressed"] = o.Compressed
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.DataChunkNum) {
		toSerialize["data_chunk_num"] = o.DataChunkNum
	}
	if !IsNil(o.DataPool) {
		toSerialize["data_pool"] = o.DataPool
	}
	if !IsNil(o.DefaultManagedVolumeFormat) {
		toSerialize["default_managed_volume_format"] = o.DefaultManagedVolumeFormat
	}
	if !IsNil(o.DeviceType) {
		toSerialize["device_type"] = o.DeviceType
	}
	if !IsNil(o.DeviceTypeCheckDisabled) {
		toSerialize["device_type_check_disabled"] = o.DeviceTypeCheckDisabled
	}
	if !IsNil(o.EncryptEnabled) {
		toSerialize["encrypt_enabled"] = o.EncryptEnabled
	}
	if !IsNil(o.FailureDomainType) {
		toSerialize["failure_domain_type"] = o.FailureDomainType
	}
	if !IsNil(o.GcQosPlan) {
		toSerialize["gc_qos_plan"] = o.GcQosPlan
	}
	if !IsNil(o.Hidden) {
		toSerialize["hidden"] = o.Hidden
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.InnerPoolId) {
		toSerialize["inner_pool_id"] = o.InnerPoolId
	}
	if !IsNil(o.IoBypassEnabled) {
		toSerialize["io_bypass_enabled"] = o.IoBypassEnabled
	}
	if !IsNil(o.IoBypassMode) {
		toSerialize["io_bypass_mode"] = o.IoBypassMode
	}
	if !IsNil(o.IoBypassThreshold) {
		toSerialize["io_bypass_threshold"] = o.IoBypassThreshold
	}
	if !IsNil(o.MinAllocSize) {
		toSerialize["min_alloc_size"] = o.MinAllocSize
	}
	if !IsNil(o.MinOsdNum) {
		toSerialize["min_osd_num"] = o.MinOsdNum
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NumaApplyPolicy) {
		toSerialize["numa_apply_policy"] = o.NumaApplyPolicy
	}
	if !IsNil(o.NumaBindBalanced) {
		toSerialize["numa_bind_balanced"] = o.NumaBindBalanced
	}
	if !IsNil(o.NumaBindPolicy) {
		toSerialize["numa_bind_policy"] = o.NumaBindPolicy
	}
	if !IsNil(o.NumaEnabled) {
		toSerialize["numa_enabled"] = o.NumaEnabled
	}
	if !IsNil(o.OsdGroup) {
		toSerialize["osd_group"] = o.OsdGroup
	}
	if !IsNil(o.OsdNum) {
		toSerialize["osd_num"] = o.OsdNum
	}
	if !IsNil(o.OsdNumPerHost) {
		toSerialize["osd_num_per_host"] = o.OsdNumPerHost
	}
	if !IsNil(o.OutFailureDomainNum) {
		toSerialize["out_failure_domain_num"] = o.OutFailureDomainNum
	}
	if !IsNil(o.PoolId) {
		toSerialize["pool_id"] = o.PoolId
	}
	if !IsNil(o.PoolMode) {
		toSerialize["pool_mode"] = o.PoolMode
	}
	if !IsNil(o.PoolName) {
		toSerialize["pool_name"] = o.PoolName
	}
	if !IsNil(o.PoolRole) {
		toSerialize["pool_role"] = o.PoolRole
	}
	if !IsNil(o.PoolType) {
		toSerialize["pool_type"] = o.PoolType
	}
	if !IsNil(o.PrimaryPlacementNode) {
		toSerialize["primary_placement_node"] = o.PrimaryPlacementNode
	}
	if !IsNil(o.ProductType) {
		toSerialize["product_type"] = o.ProductType
	}
	if !IsNil(o.Property) {
		toSerialize["property"] = o.Property
	}
	if !IsNil(o.ProtectionDomain) {
		toSerialize["protection_domain"] = o.ProtectionDomain
	}
	if !IsNil(o.Qos) {
		toSerialize["qos"] = o.Qos
	}
	if !IsNil(o.ReplicateSize) {
		toSerialize["replicate_size"] = o.ReplicateSize
	}
	if !IsNil(o.ReservedPercent) {
		toSerialize["reserved_percent"] = o.ReservedPercent
	}
	if !IsNil(o.SizePerOsd) {
		toSerialize["size_per_osd"] = o.SizePerOsd
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Stretched) {
		toSerialize["stretched"] = o.Stretched
	}
	if !IsNil(o.StripeUnit) {
		toSerialize["stripe_unit"] = o.StripeUnit
	}
	if !IsNil(o.SubFailureDomainType) {
		toSerialize["sub_failure_domain_type"] = o.SubFailureDomainType
	}
	if !IsNil(o.SuggestedOmapSize) {
		toSerialize["suggested_omap_size"] = o.SuggestedOmapSize
	}
	if !IsNil(o.ThinProvisioned) {
		toSerialize["thin_provisioned"] = o.ThinProvisioned
	}
	if !IsNil(o.TierStatus) {
		toSerialize["tier_status"] = o.TierStatus
	}
	if !IsNil(o.TransportMode) {
		toSerialize["transport_mode"] = o.TransportMode
	}
	if !IsNil(o.Update) {
		toSerialize["update"] = o.Update
	}
	if !IsNil(o.Samples) {
		toSerialize["samples"] = o.Samples
	}
	return toSerialize, nil
}

type NullablePoolRecord struct {
	value *PoolRecord
	isSet bool
}

func (v NullablePoolRecord) Get() *PoolRecord {
	return v.value
}

func (v *NullablePoolRecord) Set(val *PoolRecord) {
	v.value = val
	v.isSet = true
}

func (v NullablePoolRecord) IsSet() bool {
	return v.isSet
}

func (v *NullablePoolRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePoolRecord(val *PoolRecord) *NullablePoolRecord {
	return &NullablePoolRecord{value: val, isSet: true}
}

func (v NullablePoolRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePoolRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


