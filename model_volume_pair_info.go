/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VolumePairInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VolumePairInfo{}

// VolumePairInfo struct for VolumePairInfo
type VolumePairInfo struct {
	// destination pool id
	DestPoolId int64 `json:"dest_pool_id"`
	// destination pool name
	DestPoolName string `json:"dest_pool_name"`
	// destination volume name
	DestVolumeName string `json:"dest_volume_name"`
	// source volume id
	SrcVolumeId int64 `json:"src_volume_id"`
}

type _VolumePairInfo VolumePairInfo

// NewVolumePairInfo instantiates a new VolumePairInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumePairInfo(destPoolId int64, destPoolName string, destVolumeName string, srcVolumeId int64) *VolumePairInfo {
	this := VolumePairInfo{}
	this.DestPoolId = destPoolId
	this.DestPoolName = destPoolName
	this.DestVolumeName = destVolumeName
	this.SrcVolumeId = srcVolumeId
	return &this
}

// NewVolumePairInfoWithDefaults instantiates a new VolumePairInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumePairInfoWithDefaults() *VolumePairInfo {
	this := VolumePairInfo{}
	return &this
}

// GetDestPoolId returns the DestPoolId field value
func (o *VolumePairInfo) GetDestPoolId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DestPoolId
}

// GetDestPoolIdOk returns a tuple with the DestPoolId field value
// and a boolean to check if the value has been set.
func (o *VolumePairInfo) GetDestPoolIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DestPoolId, true
}

// SetDestPoolId sets field value
func (o *VolumePairInfo) SetDestPoolId(v int64) {
	o.DestPoolId = v
}

// GetDestPoolName returns the DestPoolName field value
func (o *VolumePairInfo) GetDestPoolName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DestPoolName
}

// GetDestPoolNameOk returns a tuple with the DestPoolName field value
// and a boolean to check if the value has been set.
func (o *VolumePairInfo) GetDestPoolNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DestPoolName, true
}

// SetDestPoolName sets field value
func (o *VolumePairInfo) SetDestPoolName(v string) {
	o.DestPoolName = v
}

// GetDestVolumeName returns the DestVolumeName field value
func (o *VolumePairInfo) GetDestVolumeName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DestVolumeName
}

// GetDestVolumeNameOk returns a tuple with the DestVolumeName field value
// and a boolean to check if the value has been set.
func (o *VolumePairInfo) GetDestVolumeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DestVolumeName, true
}

// SetDestVolumeName sets field value
func (o *VolumePairInfo) SetDestVolumeName(v string) {
	o.DestVolumeName = v
}

// GetSrcVolumeId returns the SrcVolumeId field value
func (o *VolumePairInfo) GetSrcVolumeId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.SrcVolumeId
}

// GetSrcVolumeIdOk returns a tuple with the SrcVolumeId field value
// and a boolean to check if the value has been set.
func (o *VolumePairInfo) GetSrcVolumeIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SrcVolumeId, true
}

// SetSrcVolumeId sets field value
func (o *VolumePairInfo) SetSrcVolumeId(v int64) {
	o.SrcVolumeId = v
}

func (o VolumePairInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VolumePairInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dest_pool_id"] = o.DestPoolId
	toSerialize["dest_pool_name"] = o.DestPoolName
	toSerialize["dest_volume_name"] = o.DestVolumeName
	toSerialize["src_volume_id"] = o.SrcVolumeId
	return toSerialize, nil
}

func (o *VolumePairInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dest_pool_id",
		"dest_pool_name",
		"dest_volume_name",
		"src_volume_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVolumePairInfo := _VolumePairInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVolumePairInfo)

	if err != nil {
		return err
	}

	*o = VolumePairInfo(varVolumePairInfo)

	return err
}

type NullableVolumePairInfo struct {
	value *VolumePairInfo
	isSet bool
}

func (v NullableVolumePairInfo) Get() *VolumePairInfo {
	return v.value
}

func (v *NullableVolumePairInfo) Set(val *VolumePairInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumePairInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumePairInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumePairInfo(val *VolumePairInfo) *NullableVolumePairInfo {
	return &NullableVolumePairInfo{value: val, isSet: true}
}

func (v NullableVolumePairInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumePairInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


