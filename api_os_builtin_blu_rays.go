/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// OsBuiltinBluRaysAPIService OsBuiltinBluRaysAPI service
type OsBuiltinBluRaysAPIService service

type ApiCreateOSBuiltinBluRayRequest struct {
	ctx context.Context
	ApiService *OsBuiltinBluRaysAPIService
	body *OSBuiltinBluRayCreateReq
}

// builtin blu ray info
func (r ApiCreateOSBuiltinBluRayRequest) Body(body OSBuiltinBluRayCreateReq) ApiCreateOSBuiltinBluRayRequest {
	r.body = &body
	return r
}

func (r ApiCreateOSBuiltinBluRayRequest) Execute() (*OSBuiltinBluRayResp, *http.Response, error) {
	return r.ApiService.CreateOSBuiltinBluRayExecute(r)
}

/*
CreateOSBuiltinBluRay Method for CreateOSBuiltinBluRay

Create an os builtin blu ray

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateOSBuiltinBluRayRequest
*/
func (a *OsBuiltinBluRaysAPIService) CreateOSBuiltinBluRay(ctx context.Context) ApiCreateOSBuiltinBluRayRequest {
	return ApiCreateOSBuiltinBluRayRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return OSBuiltinBluRayResp
func (a *OsBuiltinBluRaysAPIService) CreateOSBuiltinBluRayExecute(r ApiCreateOSBuiltinBluRayRequest) (*OSBuiltinBluRayResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OSBuiltinBluRayResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OsBuiltinBluRaysAPIService.CreateOSBuiltinBluRay")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/os-builtin-blu-rays/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteOSBuiltinBluRayRequest struct {
	ctx context.Context
	ApiService *OsBuiltinBluRaysAPIService
	builtinBluRayId int64
}

func (r ApiDeleteOSBuiltinBluRayRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteOSBuiltinBluRayExecute(r)
}

/*
DeleteOSBuiltinBluRay Method for DeleteOSBuiltinBluRay

Delete an os builtin blu ray

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param builtinBluRayId builtin blu ray id
 @return ApiDeleteOSBuiltinBluRayRequest
*/
func (a *OsBuiltinBluRaysAPIService) DeleteOSBuiltinBluRay(ctx context.Context, builtinBluRayId int64) ApiDeleteOSBuiltinBluRayRequest {
	return ApiDeleteOSBuiltinBluRayRequest{
		ApiService: a,
		ctx: ctx,
		builtinBluRayId: builtinBluRayId,
	}
}

// Execute executes the request
func (a *OsBuiltinBluRaysAPIService) DeleteOSBuiltinBluRayExecute(r ApiDeleteOSBuiltinBluRayRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OsBuiltinBluRaysAPIService.DeleteOSBuiltinBluRay")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/os-builtin-blu-rays/{builtin_blu_ray_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"builtin_blu_ray_id"+"}", url.PathEscape(parameterValueToString(r.builtinBluRayId, "builtinBluRayId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetOSBuiltinBluRayRequest struct {
	ctx context.Context
	ApiService *OsBuiltinBluRaysAPIService
	builtinBluRayId int64
}

func (r ApiGetOSBuiltinBluRayRequest) Execute() (*OSBuiltinBluRayResp, *http.Response, error) {
	return r.ApiService.GetOSBuiltinBluRayExecute(r)
}

/*
GetOSBuiltinBluRay Method for GetOSBuiltinBluRay

Get an os builtin blu ray

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param builtinBluRayId builtin blu ray id
 @return ApiGetOSBuiltinBluRayRequest
*/
func (a *OsBuiltinBluRaysAPIService) GetOSBuiltinBluRay(ctx context.Context, builtinBluRayId int64) ApiGetOSBuiltinBluRayRequest {
	return ApiGetOSBuiltinBluRayRequest{
		ApiService: a,
		ctx: ctx,
		builtinBluRayId: builtinBluRayId,
	}
}

// Execute executes the request
//  @return OSBuiltinBluRayResp
func (a *OsBuiltinBluRaysAPIService) GetOSBuiltinBluRayExecute(r ApiGetOSBuiltinBluRayRequest) (*OSBuiltinBluRayResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OSBuiltinBluRayResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OsBuiltinBluRaysAPIService.GetOSBuiltinBluRay")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/os-builtin-blu-rays/{builtin_blu_ray_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"builtin_blu_ray_id"+"}", url.PathEscape(parameterValueToString(r.builtinBluRayId, "builtinBluRayId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListOSBuiltinBluRaysRequest struct {
	ctx context.Context
	ApiService *OsBuiltinBluRaysAPIService
	limit *int64
	offset *int64
	q *string
	sort *string
}

// paging param
func (r ApiListOSBuiltinBluRaysRequest) Limit(limit int64) ApiListOSBuiltinBluRaysRequest {
	r.limit = &limit
	return r
}

// paging param
func (r ApiListOSBuiltinBluRaysRequest) Offset(offset int64) ApiListOSBuiltinBluRaysRequest {
	r.offset = &offset
	return r
}

// query param of search
func (r ApiListOSBuiltinBluRaysRequest) Q(q string) ApiListOSBuiltinBluRaysRequest {
	r.q = &q
	return r
}

// sort param of search
func (r ApiListOSBuiltinBluRaysRequest) Sort(sort string) ApiListOSBuiltinBluRaysRequest {
	r.sort = &sort
	return r
}

func (r ApiListOSBuiltinBluRaysRequest) Execute() (*OSBuiltinBluRaysResp, *http.Response, error) {
	return r.ApiService.ListOSBuiltinBluRaysExecute(r)
}

/*
ListOSBuiltinBluRays Method for ListOSBuiltinBluRays

List os builtin blu rays

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListOSBuiltinBluRaysRequest
*/
func (a *OsBuiltinBluRaysAPIService) ListOSBuiltinBluRays(ctx context.Context) ApiListOSBuiltinBluRaysRequest {
	return ApiListOSBuiltinBluRaysRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return OSBuiltinBluRaysResp
func (a *OsBuiltinBluRaysAPIService) ListOSBuiltinBluRaysExecute(r ApiListOSBuiltinBluRaysRequest) (*OSBuiltinBluRaysResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OSBuiltinBluRaysResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OsBuiltinBluRaysAPIService.ListOSBuiltinBluRays")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/os-builtin-blu-rays/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateOSBuiltinBluRayRequest struct {
	ctx context.Context
	ApiService *OsBuiltinBluRaysAPIService
	builtinBluRayId int64
	body *OSBuiltinBluRayUpdateReq
}

// builtin blu ray info
func (r ApiUpdateOSBuiltinBluRayRequest) Body(body OSBuiltinBluRayUpdateReq) ApiUpdateOSBuiltinBluRayRequest {
	r.body = &body
	return r
}

func (r ApiUpdateOSBuiltinBluRayRequest) Execute() (*OSBuiltinBluRayResp, *http.Response, error) {
	return r.ApiService.UpdateOSBuiltinBluRayExecute(r)
}

/*
UpdateOSBuiltinBluRay Method for UpdateOSBuiltinBluRay

update os builtin blu ray

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param builtinBluRayId builtin blu ray id
 @return ApiUpdateOSBuiltinBluRayRequest
*/
func (a *OsBuiltinBluRaysAPIService) UpdateOSBuiltinBluRay(ctx context.Context, builtinBluRayId int64) ApiUpdateOSBuiltinBluRayRequest {
	return ApiUpdateOSBuiltinBluRayRequest{
		ApiService: a,
		ctx: ctx,
		builtinBluRayId: builtinBluRayId,
	}
}

// Execute executes the request
//  @return OSBuiltinBluRayResp
func (a *OsBuiltinBluRaysAPIService) UpdateOSBuiltinBluRayExecute(r ApiUpdateOSBuiltinBluRayRequest) (*OSBuiltinBluRayResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OSBuiltinBluRayResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OsBuiltinBluRaysAPIService.UpdateOSBuiltinBluRay")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/os-builtin-blu-rays/{builtin_blu_ray_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"builtin_blu_ray_id"+"}", url.PathEscape(parameterValueToString(r.builtinBluRayId, "builtinBluRayId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
