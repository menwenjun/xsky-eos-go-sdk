/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HostEncSpecCreateReqHostEncSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HostEncSpecCreateReqHostEncSpec{}

// HostEncSpecCreateReqHostEncSpec struct for HostEncSpecCreateReqHostEncSpec
type HostEncSpecCreateReqHostEncSpec struct {
	// host enclosures
	Enclosures []Enclosure `json:"enclosures"`
	// host model
	Model string `json:"model"`
	// host vendor
	Vendor string `json:"vendor"`
}

type _HostEncSpecCreateReqHostEncSpec HostEncSpecCreateReqHostEncSpec

// NewHostEncSpecCreateReqHostEncSpec instantiates a new HostEncSpecCreateReqHostEncSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHostEncSpecCreateReqHostEncSpec(enclosures []Enclosure, model string, vendor string) *HostEncSpecCreateReqHostEncSpec {
	this := HostEncSpecCreateReqHostEncSpec{}
	this.Enclosures = enclosures
	this.Model = model
	this.Vendor = vendor
	return &this
}

// NewHostEncSpecCreateReqHostEncSpecWithDefaults instantiates a new HostEncSpecCreateReqHostEncSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHostEncSpecCreateReqHostEncSpecWithDefaults() *HostEncSpecCreateReqHostEncSpec {
	this := HostEncSpecCreateReqHostEncSpec{}
	return &this
}

// GetEnclosures returns the Enclosures field value
func (o *HostEncSpecCreateReqHostEncSpec) GetEnclosures() []Enclosure {
	if o == nil {
		var ret []Enclosure
		return ret
	}

	return o.Enclosures
}

// GetEnclosuresOk returns a tuple with the Enclosures field value
// and a boolean to check if the value has been set.
func (o *HostEncSpecCreateReqHostEncSpec) GetEnclosuresOk() ([]Enclosure, bool) {
	if o == nil {
		return nil, false
	}
	return o.Enclosures, true
}

// SetEnclosures sets field value
func (o *HostEncSpecCreateReqHostEncSpec) SetEnclosures(v []Enclosure) {
	o.Enclosures = v
}

// GetModel returns the Model field value
func (o *HostEncSpecCreateReqHostEncSpec) GetModel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Model
}

// GetModelOk returns a tuple with the Model field value
// and a boolean to check if the value has been set.
func (o *HostEncSpecCreateReqHostEncSpec) GetModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Model, true
}

// SetModel sets field value
func (o *HostEncSpecCreateReqHostEncSpec) SetModel(v string) {
	o.Model = v
}

// GetVendor returns the Vendor field value
func (o *HostEncSpecCreateReqHostEncSpec) GetVendor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value
// and a boolean to check if the value has been set.
func (o *HostEncSpecCreateReqHostEncSpec) GetVendorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Vendor, true
}

// SetVendor sets field value
func (o *HostEncSpecCreateReqHostEncSpec) SetVendor(v string) {
	o.Vendor = v
}

func (o HostEncSpecCreateReqHostEncSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HostEncSpecCreateReqHostEncSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enclosures"] = o.Enclosures
	toSerialize["model"] = o.Model
	toSerialize["vendor"] = o.Vendor
	return toSerialize, nil
}

func (o *HostEncSpecCreateReqHostEncSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enclosures",
		"model",
		"vendor",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHostEncSpecCreateReqHostEncSpec := _HostEncSpecCreateReqHostEncSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHostEncSpecCreateReqHostEncSpec)

	if err != nil {
		return err
	}

	*o = HostEncSpecCreateReqHostEncSpec(varHostEncSpecCreateReqHostEncSpec)

	return err
}

type NullableHostEncSpecCreateReqHostEncSpec struct {
	value *HostEncSpecCreateReqHostEncSpec
	isSet bool
}

func (v NullableHostEncSpecCreateReqHostEncSpec) Get() *HostEncSpecCreateReqHostEncSpec {
	return v.value
}

func (v *NullableHostEncSpecCreateReqHostEncSpec) Set(val *HostEncSpecCreateReqHostEncSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableHostEncSpecCreateReqHostEncSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableHostEncSpecCreateReqHostEncSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHostEncSpecCreateReqHostEncSpec(val *HostEncSpecCreateReqHostEncSpec) *NullableHostEncSpecCreateReqHostEncSpec {
	return &NullableHostEncSpecCreateReqHostEncSpec{value: val, isSet: true}
}

func (v NullableHostEncSpecCreateReqHostEncSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHostEncSpecCreateReqHostEncSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


