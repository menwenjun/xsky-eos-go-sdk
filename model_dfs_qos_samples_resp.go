/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DfsQosSamplesResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsQosSamplesResp{}

// DfsQosSamplesResp struct for DfsQosSamplesResp
type DfsQosSamplesResp struct {
	DfsQosSamples []DfsQosStat `json:"dfs_qos_samples,omitempty"`
}

// NewDfsQosSamplesResp instantiates a new DfsQosSamplesResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsQosSamplesResp() *DfsQosSamplesResp {
	this := DfsQosSamplesResp{}
	return &this
}

// NewDfsQosSamplesRespWithDefaults instantiates a new DfsQosSamplesResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsQosSamplesRespWithDefaults() *DfsQosSamplesResp {
	this := DfsQosSamplesResp{}
	return &this
}

// GetDfsQosSamples returns the DfsQosSamples field value if set, zero value otherwise.
func (o *DfsQosSamplesResp) GetDfsQosSamples() []DfsQosStat {
	if o == nil || IsNil(o.DfsQosSamples) {
		var ret []DfsQosStat
		return ret
	}
	return o.DfsQosSamples
}

// GetDfsQosSamplesOk returns a tuple with the DfsQosSamples field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsQosSamplesResp) GetDfsQosSamplesOk() ([]DfsQosStat, bool) {
	if o == nil || IsNil(o.DfsQosSamples) {
		return nil, false
	}
	return o.DfsQosSamples, true
}

// HasDfsQosSamples returns a boolean if a field has been set.
func (o *DfsQosSamplesResp) HasDfsQosSamples() bool {
	if o != nil && !IsNil(o.DfsQosSamples) {
		return true
	}

	return false
}

// SetDfsQosSamples gets a reference to the given []DfsQosStat and assigns it to the DfsQosSamples field.
func (o *DfsQosSamplesResp) SetDfsQosSamples(v []DfsQosStat) {
	o.DfsQosSamples = v
}

func (o DfsQosSamplesResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsQosSamplesResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DfsQosSamples) {
		toSerialize["dfs_qos_samples"] = o.DfsQosSamples
	}
	return toSerialize, nil
}

type NullableDfsQosSamplesResp struct {
	value *DfsQosSamplesResp
	isSet bool
}

func (v NullableDfsQosSamplesResp) Get() *DfsQosSamplesResp {
	return v.value
}

func (v *NullableDfsQosSamplesResp) Set(val *DfsQosSamplesResp) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsQosSamplesResp) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsQosSamplesResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsQosSamplesResp(val *DfsQosSamplesResp) *NullableDfsQosSamplesResp {
	return &NullableDfsQosSamplesResp{value: val, isSet: true}
}

func (v NullableDfsQosSamplesResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsQosSamplesResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


