/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ChmodReqFile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChmodReqFile{}

// ChmodReqFile struct for ChmodReqFile
type ChmodReqFile struct {
	// dfs rootfs id
	DfsRootfsId int64 `json:"dfs_rootfs_id"`
	// file mode
	Mode string `json:"mode"`
	// full path
	Path string `json:"path"`
}

type _ChmodReqFile ChmodReqFile

// NewChmodReqFile instantiates a new ChmodReqFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChmodReqFile(dfsRootfsId int64, mode string, path string) *ChmodReqFile {
	this := ChmodReqFile{}
	this.DfsRootfsId = dfsRootfsId
	this.Mode = mode
	this.Path = path
	return &this
}

// NewChmodReqFileWithDefaults instantiates a new ChmodReqFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChmodReqFileWithDefaults() *ChmodReqFile {
	this := ChmodReqFile{}
	return &this
}

// GetDfsRootfsId returns the DfsRootfsId field value
func (o *ChmodReqFile) GetDfsRootfsId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DfsRootfsId
}

// GetDfsRootfsIdOk returns a tuple with the DfsRootfsId field value
// and a boolean to check if the value has been set.
func (o *ChmodReqFile) GetDfsRootfsIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DfsRootfsId, true
}

// SetDfsRootfsId sets field value
func (o *ChmodReqFile) SetDfsRootfsId(v int64) {
	o.DfsRootfsId = v
}

// GetMode returns the Mode field value
func (o *ChmodReqFile) GetMode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Mode
}

// GetModeOk returns a tuple with the Mode field value
// and a boolean to check if the value has been set.
func (o *ChmodReqFile) GetModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mode, true
}

// SetMode sets field value
func (o *ChmodReqFile) SetMode(v string) {
	o.Mode = v
}

// GetPath returns the Path field value
func (o *ChmodReqFile) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *ChmodReqFile) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *ChmodReqFile) SetPath(v string) {
	o.Path = v
}

func (o ChmodReqFile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChmodReqFile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dfs_rootfs_id"] = o.DfsRootfsId
	toSerialize["mode"] = o.Mode
	toSerialize["path"] = o.Path
	return toSerialize, nil
}

func (o *ChmodReqFile) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dfs_rootfs_id",
		"mode",
		"path",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChmodReqFile := _ChmodReqFile{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChmodReqFile)

	if err != nil {
		return err
	}

	*o = ChmodReqFile(varChmodReqFile)

	return err
}

type NullableChmodReqFile struct {
	value *ChmodReqFile
	isSet bool
}

func (v NullableChmodReqFile) Get() *ChmodReqFile {
	return v.value
}

func (v *NullableChmodReqFile) Set(val *ChmodReqFile) {
	v.value = val
	v.isSet = true
}

func (v NullableChmodReqFile) IsSet() bool {
	return v.isSet
}

func (v *NullableChmodReqFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChmodReqFile(val *ChmodReqFile) *NullableChmodReqFile {
	return &NullableChmodReqFile{value: val, isSet: true}
}

func (v NullableChmodReqFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChmodReqFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


