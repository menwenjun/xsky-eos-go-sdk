/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the DfsVIP type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsVIP{}

// DfsVIP DfsVIP defines model of dfs vip +X:model:generate;order_by=-ID;etcd_lock;
type DfsVIP struct {
	ActionStatus *string `json:"action_status,omitempty"`
	Cluster *ClusterNestview `json:"cluster,omitempty"`
	Create *time.Time `json:"create,omitempty"`
	DfsGatewayGroup *DfsGatewayGroupNestview `json:"dfs_gateway_group,omitempty"`
	DfsGatewayZone *DfsGatewayZoneNestview `json:"dfs_gateway_zone,omitempty"`
	Id *int64 `json:"id,omitempty"`
	PrimaryGateway *DfsGatewayNestview `json:"primary_gateway,omitempty"`
	Update *time.Time `json:"update,omitempty"`
	Vip *string `json:"vip,omitempty"`
	VipMask *int64 `json:"vip_mask,omitempty"`
}

// NewDfsVIP instantiates a new DfsVIP object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsVIP() *DfsVIP {
	this := DfsVIP{}
	return &this
}

// NewDfsVIPWithDefaults instantiates a new DfsVIP object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsVIPWithDefaults() *DfsVIP {
	this := DfsVIP{}
	return &this
}

// GetActionStatus returns the ActionStatus field value if set, zero value otherwise.
func (o *DfsVIP) GetActionStatus() string {
	if o == nil || IsNil(o.ActionStatus) {
		var ret string
		return ret
	}
	return *o.ActionStatus
}

// GetActionStatusOk returns a tuple with the ActionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsVIP) GetActionStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ActionStatus) {
		return nil, false
	}
	return o.ActionStatus, true
}

// HasActionStatus returns a boolean if a field has been set.
func (o *DfsVIP) HasActionStatus() bool {
	if o != nil && !IsNil(o.ActionStatus) {
		return true
	}

	return false
}

// SetActionStatus gets a reference to the given string and assigns it to the ActionStatus field.
func (o *DfsVIP) SetActionStatus(v string) {
	o.ActionStatus = &v
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *DfsVIP) GetCluster() ClusterNestview {
	if o == nil || IsNil(o.Cluster) {
		var ret ClusterNestview
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsVIP) GetClusterOk() (*ClusterNestview, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *DfsVIP) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given ClusterNestview and assigns it to the Cluster field.
func (o *DfsVIP) SetCluster(v ClusterNestview) {
	o.Cluster = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *DfsVIP) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsVIP) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *DfsVIP) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *DfsVIP) SetCreate(v time.Time) {
	o.Create = &v
}

// GetDfsGatewayGroup returns the DfsGatewayGroup field value if set, zero value otherwise.
func (o *DfsVIP) GetDfsGatewayGroup() DfsGatewayGroupNestview {
	if o == nil || IsNil(o.DfsGatewayGroup) {
		var ret DfsGatewayGroupNestview
		return ret
	}
	return *o.DfsGatewayGroup
}

// GetDfsGatewayGroupOk returns a tuple with the DfsGatewayGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsVIP) GetDfsGatewayGroupOk() (*DfsGatewayGroupNestview, bool) {
	if o == nil || IsNil(o.DfsGatewayGroup) {
		return nil, false
	}
	return o.DfsGatewayGroup, true
}

// HasDfsGatewayGroup returns a boolean if a field has been set.
func (o *DfsVIP) HasDfsGatewayGroup() bool {
	if o != nil && !IsNil(o.DfsGatewayGroup) {
		return true
	}

	return false
}

// SetDfsGatewayGroup gets a reference to the given DfsGatewayGroupNestview and assigns it to the DfsGatewayGroup field.
func (o *DfsVIP) SetDfsGatewayGroup(v DfsGatewayGroupNestview) {
	o.DfsGatewayGroup = &v
}

// GetDfsGatewayZone returns the DfsGatewayZone field value if set, zero value otherwise.
func (o *DfsVIP) GetDfsGatewayZone() DfsGatewayZoneNestview {
	if o == nil || IsNil(o.DfsGatewayZone) {
		var ret DfsGatewayZoneNestview
		return ret
	}
	return *o.DfsGatewayZone
}

// GetDfsGatewayZoneOk returns a tuple with the DfsGatewayZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsVIP) GetDfsGatewayZoneOk() (*DfsGatewayZoneNestview, bool) {
	if o == nil || IsNil(o.DfsGatewayZone) {
		return nil, false
	}
	return o.DfsGatewayZone, true
}

// HasDfsGatewayZone returns a boolean if a field has been set.
func (o *DfsVIP) HasDfsGatewayZone() bool {
	if o != nil && !IsNil(o.DfsGatewayZone) {
		return true
	}

	return false
}

// SetDfsGatewayZone gets a reference to the given DfsGatewayZoneNestview and assigns it to the DfsGatewayZone field.
func (o *DfsVIP) SetDfsGatewayZone(v DfsGatewayZoneNestview) {
	o.DfsGatewayZone = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DfsVIP) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsVIP) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DfsVIP) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *DfsVIP) SetId(v int64) {
	o.Id = &v
}

// GetPrimaryGateway returns the PrimaryGateway field value if set, zero value otherwise.
func (o *DfsVIP) GetPrimaryGateway() DfsGatewayNestview {
	if o == nil || IsNil(o.PrimaryGateway) {
		var ret DfsGatewayNestview
		return ret
	}
	return *o.PrimaryGateway
}

// GetPrimaryGatewayOk returns a tuple with the PrimaryGateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsVIP) GetPrimaryGatewayOk() (*DfsGatewayNestview, bool) {
	if o == nil || IsNil(o.PrimaryGateway) {
		return nil, false
	}
	return o.PrimaryGateway, true
}

// HasPrimaryGateway returns a boolean if a field has been set.
func (o *DfsVIP) HasPrimaryGateway() bool {
	if o != nil && !IsNil(o.PrimaryGateway) {
		return true
	}

	return false
}

// SetPrimaryGateway gets a reference to the given DfsGatewayNestview and assigns it to the PrimaryGateway field.
func (o *DfsVIP) SetPrimaryGateway(v DfsGatewayNestview) {
	o.PrimaryGateway = &v
}

// GetUpdate returns the Update field value if set, zero value otherwise.
func (o *DfsVIP) GetUpdate() time.Time {
	if o == nil || IsNil(o.Update) {
		var ret time.Time
		return ret
	}
	return *o.Update
}

// GetUpdateOk returns a tuple with the Update field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsVIP) GetUpdateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Update) {
		return nil, false
	}
	return o.Update, true
}

// HasUpdate returns a boolean if a field has been set.
func (o *DfsVIP) HasUpdate() bool {
	if o != nil && !IsNil(o.Update) {
		return true
	}

	return false
}

// SetUpdate gets a reference to the given time.Time and assigns it to the Update field.
func (o *DfsVIP) SetUpdate(v time.Time) {
	o.Update = &v
}

// GetVip returns the Vip field value if set, zero value otherwise.
func (o *DfsVIP) GetVip() string {
	if o == nil || IsNil(o.Vip) {
		var ret string
		return ret
	}
	return *o.Vip
}

// GetVipOk returns a tuple with the Vip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsVIP) GetVipOk() (*string, bool) {
	if o == nil || IsNil(o.Vip) {
		return nil, false
	}
	return o.Vip, true
}

// HasVip returns a boolean if a field has been set.
func (o *DfsVIP) HasVip() bool {
	if o != nil && !IsNil(o.Vip) {
		return true
	}

	return false
}

// SetVip gets a reference to the given string and assigns it to the Vip field.
func (o *DfsVIP) SetVip(v string) {
	o.Vip = &v
}

// GetVipMask returns the VipMask field value if set, zero value otherwise.
func (o *DfsVIP) GetVipMask() int64 {
	if o == nil || IsNil(o.VipMask) {
		var ret int64
		return ret
	}
	return *o.VipMask
}

// GetVipMaskOk returns a tuple with the VipMask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsVIP) GetVipMaskOk() (*int64, bool) {
	if o == nil || IsNil(o.VipMask) {
		return nil, false
	}
	return o.VipMask, true
}

// HasVipMask returns a boolean if a field has been set.
func (o *DfsVIP) HasVipMask() bool {
	if o != nil && !IsNil(o.VipMask) {
		return true
	}

	return false
}

// SetVipMask gets a reference to the given int64 and assigns it to the VipMask field.
func (o *DfsVIP) SetVipMask(v int64) {
	o.VipMask = &v
}

func (o DfsVIP) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsVIP) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActionStatus) {
		toSerialize["action_status"] = o.ActionStatus
	}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.DfsGatewayGroup) {
		toSerialize["dfs_gateway_group"] = o.DfsGatewayGroup
	}
	if !IsNil(o.DfsGatewayZone) {
		toSerialize["dfs_gateway_zone"] = o.DfsGatewayZone
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.PrimaryGateway) {
		toSerialize["primary_gateway"] = o.PrimaryGateway
	}
	if !IsNil(o.Update) {
		toSerialize["update"] = o.Update
	}
	if !IsNil(o.Vip) {
		toSerialize["vip"] = o.Vip
	}
	if !IsNil(o.VipMask) {
		toSerialize["vip_mask"] = o.VipMask
	}
	return toSerialize, nil
}

type NullableDfsVIP struct {
	value *DfsVIP
	isSet bool
}

func (v NullableDfsVIP) Get() *DfsVIP {
	return v.value
}

func (v *NullableDfsVIP) Set(val *DfsVIP) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsVIP) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsVIP) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsVIP(val *DfsVIP) *NullableDfsVIP {
	return &NullableDfsVIP{value: val, isSet: true}
}

func (v NullableDfsVIP) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsVIP) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


