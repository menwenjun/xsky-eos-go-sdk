/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DfsSnapshotUpdateReqDfsSnapshot type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsSnapshotUpdateReqDfsSnapshot{}

// DfsSnapshotUpdateReqDfsSnapshot struct for DfsSnapshotUpdateReqDfsSnapshot
type DfsSnapshotUpdateReqDfsSnapshot struct {
	// description
	Description *string `json:"description,omitempty"`
	// lock snapshot or not
	Lock *bool `json:"lock,omitempty"`
	// snapshot name
	Name *string `json:"name,omitempty"`
	// retention time
	Retention *string `json:"retention,omitempty"`
}

// NewDfsSnapshotUpdateReqDfsSnapshot instantiates a new DfsSnapshotUpdateReqDfsSnapshot object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsSnapshotUpdateReqDfsSnapshot() *DfsSnapshotUpdateReqDfsSnapshot {
	this := DfsSnapshotUpdateReqDfsSnapshot{}
	return &this
}

// NewDfsSnapshotUpdateReqDfsSnapshotWithDefaults instantiates a new DfsSnapshotUpdateReqDfsSnapshot object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsSnapshotUpdateReqDfsSnapshotWithDefaults() *DfsSnapshotUpdateReqDfsSnapshot {
	this := DfsSnapshotUpdateReqDfsSnapshot{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DfsSnapshotUpdateReqDfsSnapshot) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSnapshotUpdateReqDfsSnapshot) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DfsSnapshotUpdateReqDfsSnapshot) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DfsSnapshotUpdateReqDfsSnapshot) SetDescription(v string) {
	o.Description = &v
}

// GetLock returns the Lock field value if set, zero value otherwise.
func (o *DfsSnapshotUpdateReqDfsSnapshot) GetLock() bool {
	if o == nil || IsNil(o.Lock) {
		var ret bool
		return ret
	}
	return *o.Lock
}

// GetLockOk returns a tuple with the Lock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSnapshotUpdateReqDfsSnapshot) GetLockOk() (*bool, bool) {
	if o == nil || IsNil(o.Lock) {
		return nil, false
	}
	return o.Lock, true
}

// HasLock returns a boolean if a field has been set.
func (o *DfsSnapshotUpdateReqDfsSnapshot) HasLock() bool {
	if o != nil && !IsNil(o.Lock) {
		return true
	}

	return false
}

// SetLock gets a reference to the given bool and assigns it to the Lock field.
func (o *DfsSnapshotUpdateReqDfsSnapshot) SetLock(v bool) {
	o.Lock = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DfsSnapshotUpdateReqDfsSnapshot) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSnapshotUpdateReqDfsSnapshot) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DfsSnapshotUpdateReqDfsSnapshot) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DfsSnapshotUpdateReqDfsSnapshot) SetName(v string) {
	o.Name = &v
}

// GetRetention returns the Retention field value if set, zero value otherwise.
func (o *DfsSnapshotUpdateReqDfsSnapshot) GetRetention() string {
	if o == nil || IsNil(o.Retention) {
		var ret string
		return ret
	}
	return *o.Retention
}

// GetRetentionOk returns a tuple with the Retention field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSnapshotUpdateReqDfsSnapshot) GetRetentionOk() (*string, bool) {
	if o == nil || IsNil(o.Retention) {
		return nil, false
	}
	return o.Retention, true
}

// HasRetention returns a boolean if a field has been set.
func (o *DfsSnapshotUpdateReqDfsSnapshot) HasRetention() bool {
	if o != nil && !IsNil(o.Retention) {
		return true
	}

	return false
}

// SetRetention gets a reference to the given string and assigns it to the Retention field.
func (o *DfsSnapshotUpdateReqDfsSnapshot) SetRetention(v string) {
	o.Retention = &v
}

func (o DfsSnapshotUpdateReqDfsSnapshot) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsSnapshotUpdateReqDfsSnapshot) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Lock) {
		toSerialize["lock"] = o.Lock
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Retention) {
		toSerialize["retention"] = o.Retention
	}
	return toSerialize, nil
}

type NullableDfsSnapshotUpdateReqDfsSnapshot struct {
	value *DfsSnapshotUpdateReqDfsSnapshot
	isSet bool
}

func (v NullableDfsSnapshotUpdateReqDfsSnapshot) Get() *DfsSnapshotUpdateReqDfsSnapshot {
	return v.value
}

func (v *NullableDfsSnapshotUpdateReqDfsSnapshot) Set(val *DfsSnapshotUpdateReqDfsSnapshot) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsSnapshotUpdateReqDfsSnapshot) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsSnapshotUpdateReqDfsSnapshot) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsSnapshotUpdateReqDfsSnapshot(val *DfsSnapshotUpdateReqDfsSnapshot) *NullableDfsSnapshotUpdateReqDfsSnapshot {
	return &NullableDfsSnapshotUpdateReqDfsSnapshot{value: val, isSet: true}
}

func (v NullableDfsSnapshotUpdateReqDfsSnapshot) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsSnapshotUpdateReqDfsSnapshot) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


