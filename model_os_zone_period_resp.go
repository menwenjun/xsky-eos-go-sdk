/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OSZonePeriodResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OSZonePeriodResp{}

// OSZonePeriodResp struct for OSZonePeriodResp
type OSZonePeriodResp struct {
	OsZonePeriod OSZonePeriod `json:"os_zone_period"`
}

type _OSZonePeriodResp OSZonePeriodResp

// NewOSZonePeriodResp instantiates a new OSZonePeriodResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOSZonePeriodResp(osZonePeriod OSZonePeriod) *OSZonePeriodResp {
	this := OSZonePeriodResp{}
	this.OsZonePeriod = osZonePeriod
	return &this
}

// NewOSZonePeriodRespWithDefaults instantiates a new OSZonePeriodResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOSZonePeriodRespWithDefaults() *OSZonePeriodResp {
	this := OSZonePeriodResp{}
	return &this
}

// GetOsZonePeriod returns the OsZonePeriod field value
func (o *OSZonePeriodResp) GetOsZonePeriod() OSZonePeriod {
	if o == nil {
		var ret OSZonePeriod
		return ret
	}

	return o.OsZonePeriod
}

// GetOsZonePeriodOk returns a tuple with the OsZonePeriod field value
// and a boolean to check if the value has been set.
func (o *OSZonePeriodResp) GetOsZonePeriodOk() (*OSZonePeriod, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OsZonePeriod, true
}

// SetOsZonePeriod sets field value
func (o *OSZonePeriodResp) SetOsZonePeriod(v OSZonePeriod) {
	o.OsZonePeriod = v
}

func (o OSZonePeriodResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OSZonePeriodResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["os_zone_period"] = o.OsZonePeriod
	return toSerialize, nil
}

func (o *OSZonePeriodResp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"os_zone_period",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOSZonePeriodResp := _OSZonePeriodResp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOSZonePeriodResp)

	if err != nil {
		return err
	}

	*o = OSZonePeriodResp(varOSZonePeriodResp)

	return err
}

type NullableOSZonePeriodResp struct {
	value *OSZonePeriodResp
	isSet bool
}

func (v NullableOSZonePeriodResp) Get() *OSZonePeriodResp {
	return v.value
}

func (v *NullableOSZonePeriodResp) Set(val *OSZonePeriodResp) {
	v.value = val
	v.isSet = true
}

func (v NullableOSZonePeriodResp) IsSet() bool {
	return v.isSet
}

func (v *NullableOSZonePeriodResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOSZonePeriodResp(val *OSZonePeriodResp) *NullableOSZonePeriodResp {
	return &NullableOSZonePeriodResp{value: val, isSet: true}
}

func (v NullableOSZonePeriodResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOSZonePeriodResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


