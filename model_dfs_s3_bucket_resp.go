/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DfsS3BucketResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsS3BucketResp{}

// DfsS3BucketResp struct for DfsS3BucketResp
type DfsS3BucketResp struct {
	DfsS3Bucket DfsS3BucketRecord `json:"dfs_s3_bucket"`
}

type _DfsS3BucketResp DfsS3BucketResp

// NewDfsS3BucketResp instantiates a new DfsS3BucketResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsS3BucketResp(dfsS3Bucket DfsS3BucketRecord) *DfsS3BucketResp {
	this := DfsS3BucketResp{}
	this.DfsS3Bucket = dfsS3Bucket
	return &this
}

// NewDfsS3BucketRespWithDefaults instantiates a new DfsS3BucketResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsS3BucketRespWithDefaults() *DfsS3BucketResp {
	this := DfsS3BucketResp{}
	return &this
}

// GetDfsS3Bucket returns the DfsS3Bucket field value
func (o *DfsS3BucketResp) GetDfsS3Bucket() DfsS3BucketRecord {
	if o == nil {
		var ret DfsS3BucketRecord
		return ret
	}

	return o.DfsS3Bucket
}

// GetDfsS3BucketOk returns a tuple with the DfsS3Bucket field value
// and a boolean to check if the value has been set.
func (o *DfsS3BucketResp) GetDfsS3BucketOk() (*DfsS3BucketRecord, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DfsS3Bucket, true
}

// SetDfsS3Bucket sets field value
func (o *DfsS3BucketResp) SetDfsS3Bucket(v DfsS3BucketRecord) {
	o.DfsS3Bucket = v
}

func (o DfsS3BucketResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsS3BucketResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dfs_s3_bucket"] = o.DfsS3Bucket
	return toSerialize, nil
}

func (o *DfsS3BucketResp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dfs_s3_bucket",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDfsS3BucketResp := _DfsS3BucketResp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDfsS3BucketResp)

	if err != nil {
		return err
	}

	*o = DfsS3BucketResp(varDfsS3BucketResp)

	return err
}

type NullableDfsS3BucketResp struct {
	value *DfsS3BucketResp
	isSet bool
}

func (v NullableDfsS3BucketResp) Get() *DfsS3BucketResp {
	return v.value
}

func (v *NullableDfsS3BucketResp) Set(val *DfsS3BucketResp) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsS3BucketResp) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsS3BucketResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsS3BucketResp(val *DfsS3BucketResp) *NullableDfsS3BucketResp {
	return &NullableDfsS3BucketResp{value: val, isSet: true}
}

func (v NullableDfsS3BucketResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsS3BucketResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


