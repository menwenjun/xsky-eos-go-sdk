/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the DfsQuotaPrediction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsQuotaPrediction{}

// DfsQuotaPrediction DfsQuotaPrediction contains quota prediction data
type DfsQuotaPrediction struct {
	Create *time.Time `json:"create,omitempty"`
	Id *int64 `json:"id,omitempty"`
	UsedFiles1day *int64 `json:"used_files_1day,omitempty"`
	UsedFiles30days *int64 `json:"used_files_30days,omitempty"`
	UsedFiles7days *int64 `json:"used_files_7days,omitempty"`
	UsedFilesPoints []FilesPredictionPoint `json:"used_files_points,omitempty"`
	UsedKbyte1day *int64 `json:"used_kbyte_1day,omitempty"`
	UsedKbyte30days *int64 `json:"used_kbyte_30days,omitempty"`
	UsedKbyte7days *int64 `json:"used_kbyte_7days,omitempty"`
	UsedKbytePoints []PredictionPoint `json:"used_kbyte_points,omitempty"`
}

// NewDfsQuotaPrediction instantiates a new DfsQuotaPrediction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsQuotaPrediction() *DfsQuotaPrediction {
	this := DfsQuotaPrediction{}
	return &this
}

// NewDfsQuotaPredictionWithDefaults instantiates a new DfsQuotaPrediction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsQuotaPredictionWithDefaults() *DfsQuotaPrediction {
	this := DfsQuotaPrediction{}
	return &this
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *DfsQuotaPrediction) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsQuotaPrediction) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *DfsQuotaPrediction) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *DfsQuotaPrediction) SetCreate(v time.Time) {
	o.Create = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DfsQuotaPrediction) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsQuotaPrediction) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DfsQuotaPrediction) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *DfsQuotaPrediction) SetId(v int64) {
	o.Id = &v
}

// GetUsedFiles1day returns the UsedFiles1day field value if set, zero value otherwise.
func (o *DfsQuotaPrediction) GetUsedFiles1day() int64 {
	if o == nil || IsNil(o.UsedFiles1day) {
		var ret int64
		return ret
	}
	return *o.UsedFiles1day
}

// GetUsedFiles1dayOk returns a tuple with the UsedFiles1day field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsQuotaPrediction) GetUsedFiles1dayOk() (*int64, bool) {
	if o == nil || IsNil(o.UsedFiles1day) {
		return nil, false
	}
	return o.UsedFiles1day, true
}

// HasUsedFiles1day returns a boolean if a field has been set.
func (o *DfsQuotaPrediction) HasUsedFiles1day() bool {
	if o != nil && !IsNil(o.UsedFiles1day) {
		return true
	}

	return false
}

// SetUsedFiles1day gets a reference to the given int64 and assigns it to the UsedFiles1day field.
func (o *DfsQuotaPrediction) SetUsedFiles1day(v int64) {
	o.UsedFiles1day = &v
}

// GetUsedFiles30days returns the UsedFiles30days field value if set, zero value otherwise.
func (o *DfsQuotaPrediction) GetUsedFiles30days() int64 {
	if o == nil || IsNil(o.UsedFiles30days) {
		var ret int64
		return ret
	}
	return *o.UsedFiles30days
}

// GetUsedFiles30daysOk returns a tuple with the UsedFiles30days field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsQuotaPrediction) GetUsedFiles30daysOk() (*int64, bool) {
	if o == nil || IsNil(o.UsedFiles30days) {
		return nil, false
	}
	return o.UsedFiles30days, true
}

// HasUsedFiles30days returns a boolean if a field has been set.
func (o *DfsQuotaPrediction) HasUsedFiles30days() bool {
	if o != nil && !IsNil(o.UsedFiles30days) {
		return true
	}

	return false
}

// SetUsedFiles30days gets a reference to the given int64 and assigns it to the UsedFiles30days field.
func (o *DfsQuotaPrediction) SetUsedFiles30days(v int64) {
	o.UsedFiles30days = &v
}

// GetUsedFiles7days returns the UsedFiles7days field value if set, zero value otherwise.
func (o *DfsQuotaPrediction) GetUsedFiles7days() int64 {
	if o == nil || IsNil(o.UsedFiles7days) {
		var ret int64
		return ret
	}
	return *o.UsedFiles7days
}

// GetUsedFiles7daysOk returns a tuple with the UsedFiles7days field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsQuotaPrediction) GetUsedFiles7daysOk() (*int64, bool) {
	if o == nil || IsNil(o.UsedFiles7days) {
		return nil, false
	}
	return o.UsedFiles7days, true
}

// HasUsedFiles7days returns a boolean if a field has been set.
func (o *DfsQuotaPrediction) HasUsedFiles7days() bool {
	if o != nil && !IsNil(o.UsedFiles7days) {
		return true
	}

	return false
}

// SetUsedFiles7days gets a reference to the given int64 and assigns it to the UsedFiles7days field.
func (o *DfsQuotaPrediction) SetUsedFiles7days(v int64) {
	o.UsedFiles7days = &v
}

// GetUsedFilesPoints returns the UsedFilesPoints field value if set, zero value otherwise.
func (o *DfsQuotaPrediction) GetUsedFilesPoints() []FilesPredictionPoint {
	if o == nil || IsNil(o.UsedFilesPoints) {
		var ret []FilesPredictionPoint
		return ret
	}
	return o.UsedFilesPoints
}

// GetUsedFilesPointsOk returns a tuple with the UsedFilesPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsQuotaPrediction) GetUsedFilesPointsOk() ([]FilesPredictionPoint, bool) {
	if o == nil || IsNil(o.UsedFilesPoints) {
		return nil, false
	}
	return o.UsedFilesPoints, true
}

// HasUsedFilesPoints returns a boolean if a field has been set.
func (o *DfsQuotaPrediction) HasUsedFilesPoints() bool {
	if o != nil && !IsNil(o.UsedFilesPoints) {
		return true
	}

	return false
}

// SetUsedFilesPoints gets a reference to the given []FilesPredictionPoint and assigns it to the UsedFilesPoints field.
func (o *DfsQuotaPrediction) SetUsedFilesPoints(v []FilesPredictionPoint) {
	o.UsedFilesPoints = v
}

// GetUsedKbyte1day returns the UsedKbyte1day field value if set, zero value otherwise.
func (o *DfsQuotaPrediction) GetUsedKbyte1day() int64 {
	if o == nil || IsNil(o.UsedKbyte1day) {
		var ret int64
		return ret
	}
	return *o.UsedKbyte1day
}

// GetUsedKbyte1dayOk returns a tuple with the UsedKbyte1day field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsQuotaPrediction) GetUsedKbyte1dayOk() (*int64, bool) {
	if o == nil || IsNil(o.UsedKbyte1day) {
		return nil, false
	}
	return o.UsedKbyte1day, true
}

// HasUsedKbyte1day returns a boolean if a field has been set.
func (o *DfsQuotaPrediction) HasUsedKbyte1day() bool {
	if o != nil && !IsNil(o.UsedKbyte1day) {
		return true
	}

	return false
}

// SetUsedKbyte1day gets a reference to the given int64 and assigns it to the UsedKbyte1day field.
func (o *DfsQuotaPrediction) SetUsedKbyte1day(v int64) {
	o.UsedKbyte1day = &v
}

// GetUsedKbyte30days returns the UsedKbyte30days field value if set, zero value otherwise.
func (o *DfsQuotaPrediction) GetUsedKbyte30days() int64 {
	if o == nil || IsNil(o.UsedKbyte30days) {
		var ret int64
		return ret
	}
	return *o.UsedKbyte30days
}

// GetUsedKbyte30daysOk returns a tuple with the UsedKbyte30days field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsQuotaPrediction) GetUsedKbyte30daysOk() (*int64, bool) {
	if o == nil || IsNil(o.UsedKbyte30days) {
		return nil, false
	}
	return o.UsedKbyte30days, true
}

// HasUsedKbyte30days returns a boolean if a field has been set.
func (o *DfsQuotaPrediction) HasUsedKbyte30days() bool {
	if o != nil && !IsNil(o.UsedKbyte30days) {
		return true
	}

	return false
}

// SetUsedKbyte30days gets a reference to the given int64 and assigns it to the UsedKbyte30days field.
func (o *DfsQuotaPrediction) SetUsedKbyte30days(v int64) {
	o.UsedKbyte30days = &v
}

// GetUsedKbyte7days returns the UsedKbyte7days field value if set, zero value otherwise.
func (o *DfsQuotaPrediction) GetUsedKbyte7days() int64 {
	if o == nil || IsNil(o.UsedKbyte7days) {
		var ret int64
		return ret
	}
	return *o.UsedKbyte7days
}

// GetUsedKbyte7daysOk returns a tuple with the UsedKbyte7days field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsQuotaPrediction) GetUsedKbyte7daysOk() (*int64, bool) {
	if o == nil || IsNil(o.UsedKbyte7days) {
		return nil, false
	}
	return o.UsedKbyte7days, true
}

// HasUsedKbyte7days returns a boolean if a field has been set.
func (o *DfsQuotaPrediction) HasUsedKbyte7days() bool {
	if o != nil && !IsNil(o.UsedKbyte7days) {
		return true
	}

	return false
}

// SetUsedKbyte7days gets a reference to the given int64 and assigns it to the UsedKbyte7days field.
func (o *DfsQuotaPrediction) SetUsedKbyte7days(v int64) {
	o.UsedKbyte7days = &v
}

// GetUsedKbytePoints returns the UsedKbytePoints field value if set, zero value otherwise.
func (o *DfsQuotaPrediction) GetUsedKbytePoints() []PredictionPoint {
	if o == nil || IsNil(o.UsedKbytePoints) {
		var ret []PredictionPoint
		return ret
	}
	return o.UsedKbytePoints
}

// GetUsedKbytePointsOk returns a tuple with the UsedKbytePoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsQuotaPrediction) GetUsedKbytePointsOk() ([]PredictionPoint, bool) {
	if o == nil || IsNil(o.UsedKbytePoints) {
		return nil, false
	}
	return o.UsedKbytePoints, true
}

// HasUsedKbytePoints returns a boolean if a field has been set.
func (o *DfsQuotaPrediction) HasUsedKbytePoints() bool {
	if o != nil && !IsNil(o.UsedKbytePoints) {
		return true
	}

	return false
}

// SetUsedKbytePoints gets a reference to the given []PredictionPoint and assigns it to the UsedKbytePoints field.
func (o *DfsQuotaPrediction) SetUsedKbytePoints(v []PredictionPoint) {
	o.UsedKbytePoints = v
}

func (o DfsQuotaPrediction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsQuotaPrediction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.UsedFiles1day) {
		toSerialize["used_files_1day"] = o.UsedFiles1day
	}
	if !IsNil(o.UsedFiles30days) {
		toSerialize["used_files_30days"] = o.UsedFiles30days
	}
	if !IsNil(o.UsedFiles7days) {
		toSerialize["used_files_7days"] = o.UsedFiles7days
	}
	if !IsNil(o.UsedFilesPoints) {
		toSerialize["used_files_points"] = o.UsedFilesPoints
	}
	if !IsNil(o.UsedKbyte1day) {
		toSerialize["used_kbyte_1day"] = o.UsedKbyte1day
	}
	if !IsNil(o.UsedKbyte30days) {
		toSerialize["used_kbyte_30days"] = o.UsedKbyte30days
	}
	if !IsNil(o.UsedKbyte7days) {
		toSerialize["used_kbyte_7days"] = o.UsedKbyte7days
	}
	if !IsNil(o.UsedKbytePoints) {
		toSerialize["used_kbyte_points"] = o.UsedKbytePoints
	}
	return toSerialize, nil
}

type NullableDfsQuotaPrediction struct {
	value *DfsQuotaPrediction
	isSet bool
}

func (v NullableDfsQuotaPrediction) Get() *DfsQuotaPrediction {
	return v.value
}

func (v *NullableDfsQuotaPrediction) Set(val *DfsQuotaPrediction) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsQuotaPrediction) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsQuotaPrediction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsQuotaPrediction(val *DfsQuotaPrediction) *NullableDfsQuotaPrediction {
	return &NullableDfsQuotaPrediction{value: val, isSet: true}
}

func (v NullableDfsQuotaPrediction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsQuotaPrediction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


