/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DpBlockSnapshotRecoveryJobsAPIService DpBlockSnapshotRecoveryJobsAPI service
type DpBlockSnapshotRecoveryJobsAPIService service

type ApiCreateDpBlockSnapshotRecoveryJobRequest struct {
	ctx context.Context
	ApiService *DpBlockSnapshotRecoveryJobsAPIService
	body *DpBlockSnapshotRecoveryJobCreateReq
}

// resource info
func (r ApiCreateDpBlockSnapshotRecoveryJobRequest) Body(body DpBlockSnapshotRecoveryJobCreateReq) ApiCreateDpBlockSnapshotRecoveryJobRequest {
	r.body = &body
	return r
}

func (r ApiCreateDpBlockSnapshotRecoveryJobRequest) Execute() (*DpBlockSnapshotRecoveryJobResp, *http.Response, error) {
	return r.ApiService.CreateDpBlockSnapshotRecoveryJobExecute(r)
}

/*
CreateDpBlockSnapshotRecoveryJob Method for CreateDpBlockSnapshotRecoveryJob

Create a dp block snapshot recovery job

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateDpBlockSnapshotRecoveryJobRequest
*/
func (a *DpBlockSnapshotRecoveryJobsAPIService) CreateDpBlockSnapshotRecoveryJob(ctx context.Context) ApiCreateDpBlockSnapshotRecoveryJobRequest {
	return ApiCreateDpBlockSnapshotRecoveryJobRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DpBlockSnapshotRecoveryJobResp
func (a *DpBlockSnapshotRecoveryJobsAPIService) CreateDpBlockSnapshotRecoveryJobExecute(r ApiCreateDpBlockSnapshotRecoveryJobRequest) (*DpBlockSnapshotRecoveryJobResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DpBlockSnapshotRecoveryJobResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DpBlockSnapshotRecoveryJobsAPIService.CreateDpBlockSnapshotRecoveryJob")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dp-block-snapshot-recovery-jobs/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteDpBlockSnapshotRecoveryJobRequest struct {
	ctx context.Context
	ApiService *DpBlockSnapshotRecoveryJobsAPIService
	jobId int64
}

func (r ApiDeleteDpBlockSnapshotRecoveryJobRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteDpBlockSnapshotRecoveryJobExecute(r)
}

/*
DeleteDpBlockSnapshotRecoveryJob Method for DeleteDpBlockSnapshotRecoveryJob

Delete a dp block snapshot recovery job

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param jobId resource id
 @return ApiDeleteDpBlockSnapshotRecoveryJobRequest
*/
func (a *DpBlockSnapshotRecoveryJobsAPIService) DeleteDpBlockSnapshotRecoveryJob(ctx context.Context, jobId int64) ApiDeleteDpBlockSnapshotRecoveryJobRequest {
	return ApiDeleteDpBlockSnapshotRecoveryJobRequest{
		ApiService: a,
		ctx: ctx,
		jobId: jobId,
	}
}

// Execute executes the request
func (a *DpBlockSnapshotRecoveryJobsAPIService) DeleteDpBlockSnapshotRecoveryJobExecute(r ApiDeleteDpBlockSnapshotRecoveryJobRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DpBlockSnapshotRecoveryJobsAPIService.DeleteDpBlockSnapshotRecoveryJob")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dp-block-snapshot-recovery-jobs/{job_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"job_id"+"}", url.PathEscape(parameterValueToString(r.jobId, "jobId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetDpBlockSnapshotRecoveryJobRequest struct {
	ctx context.Context
	ApiService *DpBlockSnapshotRecoveryJobsAPIService
	jobId int64
}

func (r ApiGetDpBlockSnapshotRecoveryJobRequest) Execute() (*DpBlockSnapshotRecoveryJobResp, *http.Response, error) {
	return r.ApiService.GetDpBlockSnapshotRecoveryJobExecute(r)
}

/*
GetDpBlockSnapshotRecoveryJob Method for GetDpBlockSnapshotRecoveryJob

Get a dp block snapshot recovery job

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param jobId resource id
 @return ApiGetDpBlockSnapshotRecoveryJobRequest
*/
func (a *DpBlockSnapshotRecoveryJobsAPIService) GetDpBlockSnapshotRecoveryJob(ctx context.Context, jobId int64) ApiGetDpBlockSnapshotRecoveryJobRequest {
	return ApiGetDpBlockSnapshotRecoveryJobRequest{
		ApiService: a,
		ctx: ctx,
		jobId: jobId,
	}
}

// Execute executes the request
//  @return DpBlockSnapshotRecoveryJobResp
func (a *DpBlockSnapshotRecoveryJobsAPIService) GetDpBlockSnapshotRecoveryJobExecute(r ApiGetDpBlockSnapshotRecoveryJobRequest) (*DpBlockSnapshotRecoveryJobResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DpBlockSnapshotRecoveryJobResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DpBlockSnapshotRecoveryJobsAPIService.GetDpBlockSnapshotRecoveryJob")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dp-block-snapshot-recovery-jobs/{job_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"job_id"+"}", url.PathEscape(parameterValueToString(r.jobId, "jobId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListDpBlockSnapshotRecoveryJobsRequest struct {
	ctx context.Context
	ApiService *DpBlockSnapshotRecoveryJobsAPIService
	limit *int64
	offset *int64
	q *string
	sort *string
}

// paging param
func (r ApiListDpBlockSnapshotRecoveryJobsRequest) Limit(limit int64) ApiListDpBlockSnapshotRecoveryJobsRequest {
	r.limit = &limit
	return r
}

// paging param
func (r ApiListDpBlockSnapshotRecoveryJobsRequest) Offset(offset int64) ApiListDpBlockSnapshotRecoveryJobsRequest {
	r.offset = &offset
	return r
}

// query param of search
func (r ApiListDpBlockSnapshotRecoveryJobsRequest) Q(q string) ApiListDpBlockSnapshotRecoveryJobsRequest {
	r.q = &q
	return r
}

// sort param of search
func (r ApiListDpBlockSnapshotRecoveryJobsRequest) Sort(sort string) ApiListDpBlockSnapshotRecoveryJobsRequest {
	r.sort = &sort
	return r
}

func (r ApiListDpBlockSnapshotRecoveryJobsRequest) Execute() (*DpBlockSnapshotRecoveryJobsResp, *http.Response, error) {
	return r.ApiService.ListDpBlockSnapshotRecoveryJobsExecute(r)
}

/*
ListDpBlockSnapshotRecoveryJobs Method for ListDpBlockSnapshotRecoveryJobs

List dp block snapshot recovery jobs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListDpBlockSnapshotRecoveryJobsRequest
*/
func (a *DpBlockSnapshotRecoveryJobsAPIService) ListDpBlockSnapshotRecoveryJobs(ctx context.Context) ApiListDpBlockSnapshotRecoveryJobsRequest {
	return ApiListDpBlockSnapshotRecoveryJobsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DpBlockSnapshotRecoveryJobsResp
func (a *DpBlockSnapshotRecoveryJobsAPIService) ListDpBlockSnapshotRecoveryJobsExecute(r ApiListDpBlockSnapshotRecoveryJobsRequest) (*DpBlockSnapshotRecoveryJobsResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DpBlockSnapshotRecoveryJobsResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DpBlockSnapshotRecoveryJobsAPIService.ListDpBlockSnapshotRecoveryJobs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dp-block-snapshot-recovery-jobs/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
