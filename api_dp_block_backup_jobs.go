/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// DpBlockBackupJobsAPIService DpBlockBackupJobsAPI service
type DpBlockBackupJobsAPIService service

type ApiListDpBlockBackupJobsRequest struct {
	ctx context.Context
	ApiService *DpBlockBackupJobsAPIService
	limit *int64
	offset *int64
	q *string
	sort *string
	blockVolumeId *int64
	blockSnapshotId *int64
	dpBlockBackupPolicyId *int64
}

// paging param
func (r ApiListDpBlockBackupJobsRequest) Limit(limit int64) ApiListDpBlockBackupJobsRequest {
	r.limit = &limit
	return r
}

// paging param
func (r ApiListDpBlockBackupJobsRequest) Offset(offset int64) ApiListDpBlockBackupJobsRequest {
	r.offset = &offset
	return r
}

// query param of search
func (r ApiListDpBlockBackupJobsRequest) Q(q string) ApiListDpBlockBackupJobsRequest {
	r.q = &q
	return r
}

// sort param of search
func (r ApiListDpBlockBackupJobsRequest) Sort(sort string) ApiListDpBlockBackupJobsRequest {
	r.sort = &sort
	return r
}

// block volume
func (r ApiListDpBlockBackupJobsRequest) BlockVolumeId(blockVolumeId int64) ApiListDpBlockBackupJobsRequest {
	r.blockVolumeId = &blockVolumeId
	return r
}

// object storage bucket
func (r ApiListDpBlockBackupJobsRequest) BlockSnapshotId(blockSnapshotId int64) ApiListDpBlockBackupJobsRequest {
	r.blockSnapshotId = &blockSnapshotId
	return r
}

// dp block backup policy
func (r ApiListDpBlockBackupJobsRequest) DpBlockBackupPolicyId(dpBlockBackupPolicyId int64) ApiListDpBlockBackupJobsRequest {
	r.dpBlockBackupPolicyId = &dpBlockBackupPolicyId
	return r
}

func (r ApiListDpBlockBackupJobsRequest) Execute() (*DpBlockBackupJobsResp, *http.Response, error) {
	return r.ApiService.ListDpBlockBackupJobsExecute(r)
}

/*
ListDpBlockBackupJobs Method for ListDpBlockBackupJobs

List dp block backup jobs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListDpBlockBackupJobsRequest
*/
func (a *DpBlockBackupJobsAPIService) ListDpBlockBackupJobs(ctx context.Context) ApiListDpBlockBackupJobsRequest {
	return ApiListDpBlockBackupJobsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DpBlockBackupJobsResp
func (a *DpBlockBackupJobsAPIService) ListDpBlockBackupJobsExecute(r ApiListDpBlockBackupJobsRequest) (*DpBlockBackupJobsResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DpBlockBackupJobsResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DpBlockBackupJobsAPIService.ListDpBlockBackupJobs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dp-block-backup-jobs/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.blockVolumeId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "block_volume_id", r.blockVolumeId, "form", "")
	}
	if r.blockSnapshotId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "block_snapshot_id", r.blockSnapshotId, "form", "")
	}
	if r.dpBlockBackupPolicyId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dp_block_backup_policy_id", r.dpBlockBackupPolicyId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
