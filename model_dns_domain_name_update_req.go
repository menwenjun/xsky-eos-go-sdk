/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DNSDomainNameUpdateReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DNSDomainNameUpdateReq{}

// DNSDomainNameUpdateReq struct for DNSDomainNameUpdateReq
type DNSDomainNameUpdateReq struct {
	DnsDomainName DNSDomainNameUpdateReqDomainName `json:"dns_domain_name"`
}

type _DNSDomainNameUpdateReq DNSDomainNameUpdateReq

// NewDNSDomainNameUpdateReq instantiates a new DNSDomainNameUpdateReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDNSDomainNameUpdateReq(dnsDomainName DNSDomainNameUpdateReqDomainName) *DNSDomainNameUpdateReq {
	this := DNSDomainNameUpdateReq{}
	this.DnsDomainName = dnsDomainName
	return &this
}

// NewDNSDomainNameUpdateReqWithDefaults instantiates a new DNSDomainNameUpdateReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDNSDomainNameUpdateReqWithDefaults() *DNSDomainNameUpdateReq {
	this := DNSDomainNameUpdateReq{}
	return &this
}

// GetDnsDomainName returns the DnsDomainName field value
func (o *DNSDomainNameUpdateReq) GetDnsDomainName() DNSDomainNameUpdateReqDomainName {
	if o == nil {
		var ret DNSDomainNameUpdateReqDomainName
		return ret
	}

	return o.DnsDomainName
}

// GetDnsDomainNameOk returns a tuple with the DnsDomainName field value
// and a boolean to check if the value has been set.
func (o *DNSDomainNameUpdateReq) GetDnsDomainNameOk() (*DNSDomainNameUpdateReqDomainName, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DnsDomainName, true
}

// SetDnsDomainName sets field value
func (o *DNSDomainNameUpdateReq) SetDnsDomainName(v DNSDomainNameUpdateReqDomainName) {
	o.DnsDomainName = v
}

func (o DNSDomainNameUpdateReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DNSDomainNameUpdateReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dns_domain_name"] = o.DnsDomainName
	return toSerialize, nil
}

func (o *DNSDomainNameUpdateReq) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dns_domain_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDNSDomainNameUpdateReq := _DNSDomainNameUpdateReq{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDNSDomainNameUpdateReq)

	if err != nil {
		return err
	}

	*o = DNSDomainNameUpdateReq(varDNSDomainNameUpdateReq)

	return err
}

type NullableDNSDomainNameUpdateReq struct {
	value *DNSDomainNameUpdateReq
	isSet bool
}

func (v NullableDNSDomainNameUpdateReq) Get() *DNSDomainNameUpdateReq {
	return v.value
}

func (v *NullableDNSDomainNameUpdateReq) Set(val *DNSDomainNameUpdateReq) {
	v.value = val
	v.isSet = true
}

func (v NullableDNSDomainNameUpdateReq) IsSet() bool {
	return v.isSet
}

func (v *NullableDNSDomainNameUpdateReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDNSDomainNameUpdateReq(val *DNSDomainNameUpdateReq) *NullableDNSDomainNameUpdateReq {
	return &NullableDNSDomainNameUpdateReq{value: val, isSet: true}
}

func (v NullableDNSDomainNameUpdateReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDNSDomainNameUpdateReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


