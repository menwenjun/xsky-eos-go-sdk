/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DfsSMBShareUpdateACLsReqShare type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsSMBShareUpdateACLsReqShare{}

// DfsSMBShareUpdateACLsReqShare struct for DfsSMBShareUpdateACLsReqShare
type DfsSMBShareUpdateACLsReqShare struct {
	// access control array
	DfsSmbShareAcls []DfsSMBShareUpdateACLReq `json:"dfs_smb_share_acls,omitempty"`
}

// NewDfsSMBShareUpdateACLsReqShare instantiates a new DfsSMBShareUpdateACLsReqShare object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsSMBShareUpdateACLsReqShare() *DfsSMBShareUpdateACLsReqShare {
	this := DfsSMBShareUpdateACLsReqShare{}
	return &this
}

// NewDfsSMBShareUpdateACLsReqShareWithDefaults instantiates a new DfsSMBShareUpdateACLsReqShare object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsSMBShareUpdateACLsReqShareWithDefaults() *DfsSMBShareUpdateACLsReqShare {
	this := DfsSMBShareUpdateACLsReqShare{}
	return &this
}

// GetDfsSmbShareAcls returns the DfsSmbShareAcls field value if set, zero value otherwise.
func (o *DfsSMBShareUpdateACLsReqShare) GetDfsSmbShareAcls() []DfsSMBShareUpdateACLReq {
	if o == nil || IsNil(o.DfsSmbShareAcls) {
		var ret []DfsSMBShareUpdateACLReq
		return ret
	}
	return o.DfsSmbShareAcls
}

// GetDfsSmbShareAclsOk returns a tuple with the DfsSmbShareAcls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBShareUpdateACLsReqShare) GetDfsSmbShareAclsOk() ([]DfsSMBShareUpdateACLReq, bool) {
	if o == nil || IsNil(o.DfsSmbShareAcls) {
		return nil, false
	}
	return o.DfsSmbShareAcls, true
}

// HasDfsSmbShareAcls returns a boolean if a field has been set.
func (o *DfsSMBShareUpdateACLsReqShare) HasDfsSmbShareAcls() bool {
	if o != nil && !IsNil(o.DfsSmbShareAcls) {
		return true
	}

	return false
}

// SetDfsSmbShareAcls gets a reference to the given []DfsSMBShareUpdateACLReq and assigns it to the DfsSmbShareAcls field.
func (o *DfsSMBShareUpdateACLsReqShare) SetDfsSmbShareAcls(v []DfsSMBShareUpdateACLReq) {
	o.DfsSmbShareAcls = v
}

func (o DfsSMBShareUpdateACLsReqShare) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsSMBShareUpdateACLsReqShare) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DfsSmbShareAcls) {
		toSerialize["dfs_smb_share_acls"] = o.DfsSmbShareAcls
	}
	return toSerialize, nil
}

type NullableDfsSMBShareUpdateACLsReqShare struct {
	value *DfsSMBShareUpdateACLsReqShare
	isSet bool
}

func (v NullableDfsSMBShareUpdateACLsReqShare) Get() *DfsSMBShareUpdateACLsReqShare {
	return v.value
}

func (v *NullableDfsSMBShareUpdateACLsReqShare) Set(val *DfsSMBShareUpdateACLsReqShare) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsSMBShareUpdateACLsReqShare) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsSMBShareUpdateACLsReqShare) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsSMBShareUpdateACLsReqShare(val *DfsSMBShareUpdateACLsReqShare) *NullableDfsSMBShareUpdateACLsReqShare {
	return &NullableDfsSMBShareUpdateACLsReqShare{value: val, isSet: true}
}

func (v NullableDfsSMBShareUpdateACLsReqShare) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsSMBShareUpdateACLsReqShare) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


