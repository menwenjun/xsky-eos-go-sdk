/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DiskUpdateReqDisk type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DiskUpdateReqDisk{}

// DiskUpdateReqDisk struct for DiskUpdateReqDisk
type DiskUpdateReqDisk struct {
	DiskType *string `json:"disk_type,omitempty"`
	LightingStatus *string `json:"lighting_status,omitempty"`
	PowerSafe *bool `json:"power_safe,omitempty"`
	Usage *string `json:"usage,omitempty"`
}

// NewDiskUpdateReqDisk instantiates a new DiskUpdateReqDisk object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiskUpdateReqDisk() *DiskUpdateReqDisk {
	this := DiskUpdateReqDisk{}
	return &this
}

// NewDiskUpdateReqDiskWithDefaults instantiates a new DiskUpdateReqDisk object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiskUpdateReqDiskWithDefaults() *DiskUpdateReqDisk {
	this := DiskUpdateReqDisk{}
	return &this
}

// GetDiskType returns the DiskType field value if set, zero value otherwise.
func (o *DiskUpdateReqDisk) GetDiskType() string {
	if o == nil || IsNil(o.DiskType) {
		var ret string
		return ret
	}
	return *o.DiskType
}

// GetDiskTypeOk returns a tuple with the DiskType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskUpdateReqDisk) GetDiskTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DiskType) {
		return nil, false
	}
	return o.DiskType, true
}

// HasDiskType returns a boolean if a field has been set.
func (o *DiskUpdateReqDisk) HasDiskType() bool {
	if o != nil && !IsNil(o.DiskType) {
		return true
	}

	return false
}

// SetDiskType gets a reference to the given string and assigns it to the DiskType field.
func (o *DiskUpdateReqDisk) SetDiskType(v string) {
	o.DiskType = &v
}

// GetLightingStatus returns the LightingStatus field value if set, zero value otherwise.
func (o *DiskUpdateReqDisk) GetLightingStatus() string {
	if o == nil || IsNil(o.LightingStatus) {
		var ret string
		return ret
	}
	return *o.LightingStatus
}

// GetLightingStatusOk returns a tuple with the LightingStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskUpdateReqDisk) GetLightingStatusOk() (*string, bool) {
	if o == nil || IsNil(o.LightingStatus) {
		return nil, false
	}
	return o.LightingStatus, true
}

// HasLightingStatus returns a boolean if a field has been set.
func (o *DiskUpdateReqDisk) HasLightingStatus() bool {
	if o != nil && !IsNil(o.LightingStatus) {
		return true
	}

	return false
}

// SetLightingStatus gets a reference to the given string and assigns it to the LightingStatus field.
func (o *DiskUpdateReqDisk) SetLightingStatus(v string) {
	o.LightingStatus = &v
}

// GetPowerSafe returns the PowerSafe field value if set, zero value otherwise.
func (o *DiskUpdateReqDisk) GetPowerSafe() bool {
	if o == nil || IsNil(o.PowerSafe) {
		var ret bool
		return ret
	}
	return *o.PowerSafe
}

// GetPowerSafeOk returns a tuple with the PowerSafe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskUpdateReqDisk) GetPowerSafeOk() (*bool, bool) {
	if o == nil || IsNil(o.PowerSafe) {
		return nil, false
	}
	return o.PowerSafe, true
}

// HasPowerSafe returns a boolean if a field has been set.
func (o *DiskUpdateReqDisk) HasPowerSafe() bool {
	if o != nil && !IsNil(o.PowerSafe) {
		return true
	}

	return false
}

// SetPowerSafe gets a reference to the given bool and assigns it to the PowerSafe field.
func (o *DiskUpdateReqDisk) SetPowerSafe(v bool) {
	o.PowerSafe = &v
}

// GetUsage returns the Usage field value if set, zero value otherwise.
func (o *DiskUpdateReqDisk) GetUsage() string {
	if o == nil || IsNil(o.Usage) {
		var ret string
		return ret
	}
	return *o.Usage
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskUpdateReqDisk) GetUsageOk() (*string, bool) {
	if o == nil || IsNil(o.Usage) {
		return nil, false
	}
	return o.Usage, true
}

// HasUsage returns a boolean if a field has been set.
func (o *DiskUpdateReqDisk) HasUsage() bool {
	if o != nil && !IsNil(o.Usage) {
		return true
	}

	return false
}

// SetUsage gets a reference to the given string and assigns it to the Usage field.
func (o *DiskUpdateReqDisk) SetUsage(v string) {
	o.Usage = &v
}

func (o DiskUpdateReqDisk) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DiskUpdateReqDisk) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DiskType) {
		toSerialize["disk_type"] = o.DiskType
	}
	if !IsNil(o.LightingStatus) {
		toSerialize["lighting_status"] = o.LightingStatus
	}
	if !IsNil(o.PowerSafe) {
		toSerialize["power_safe"] = o.PowerSafe
	}
	if !IsNil(o.Usage) {
		toSerialize["usage"] = o.Usage
	}
	return toSerialize, nil
}

type NullableDiskUpdateReqDisk struct {
	value *DiskUpdateReqDisk
	isSet bool
}

func (v NullableDiskUpdateReqDisk) Get() *DiskUpdateReqDisk {
	return v.value
}

func (v *NullableDiskUpdateReqDisk) Set(val *DiskUpdateReqDisk) {
	v.value = val
	v.isSet = true
}

func (v NullableDiskUpdateReqDisk) IsSet() bool {
	return v.isSet
}

func (v *NullableDiskUpdateReqDisk) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiskUpdateReqDisk(val *DiskUpdateReqDisk) *NullableDiskUpdateReqDisk {
	return &NullableDiskUpdateReqDisk{value: val, isSet: true}
}

func (v NullableDiskUpdateReqDisk) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiskUpdateReqDisk) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


