/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the S3LoadBalancerRegisterServiceReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &S3LoadBalancerRegisterServiceReq{}

// S3LoadBalancerRegisterServiceReq struct for S3LoadBalancerRegisterServiceReq
type S3LoadBalancerRegisterServiceReq struct {
	RegisterRules []S3LoadBalancerRegisterServiceReqRegisterRulesElt `json:"register_rules"`
}

type _S3LoadBalancerRegisterServiceReq S3LoadBalancerRegisterServiceReq

// NewS3LoadBalancerRegisterServiceReq instantiates a new S3LoadBalancerRegisterServiceReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewS3LoadBalancerRegisterServiceReq(registerRules []S3LoadBalancerRegisterServiceReqRegisterRulesElt) *S3LoadBalancerRegisterServiceReq {
	this := S3LoadBalancerRegisterServiceReq{}
	this.RegisterRules = registerRules
	return &this
}

// NewS3LoadBalancerRegisterServiceReqWithDefaults instantiates a new S3LoadBalancerRegisterServiceReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewS3LoadBalancerRegisterServiceReqWithDefaults() *S3LoadBalancerRegisterServiceReq {
	this := S3LoadBalancerRegisterServiceReq{}
	return &this
}

// GetRegisterRules returns the RegisterRules field value
func (o *S3LoadBalancerRegisterServiceReq) GetRegisterRules() []S3LoadBalancerRegisterServiceReqRegisterRulesElt {
	if o == nil {
		var ret []S3LoadBalancerRegisterServiceReqRegisterRulesElt
		return ret
	}

	return o.RegisterRules
}

// GetRegisterRulesOk returns a tuple with the RegisterRules field value
// and a boolean to check if the value has been set.
func (o *S3LoadBalancerRegisterServiceReq) GetRegisterRulesOk() ([]S3LoadBalancerRegisterServiceReqRegisterRulesElt, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisterRules, true
}

// SetRegisterRules sets field value
func (o *S3LoadBalancerRegisterServiceReq) SetRegisterRules(v []S3LoadBalancerRegisterServiceReqRegisterRulesElt) {
	o.RegisterRules = v
}

func (o S3LoadBalancerRegisterServiceReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o S3LoadBalancerRegisterServiceReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["register_rules"] = o.RegisterRules
	return toSerialize, nil
}

func (o *S3LoadBalancerRegisterServiceReq) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"register_rules",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varS3LoadBalancerRegisterServiceReq := _S3LoadBalancerRegisterServiceReq{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varS3LoadBalancerRegisterServiceReq)

	if err != nil {
		return err
	}

	*o = S3LoadBalancerRegisterServiceReq(varS3LoadBalancerRegisterServiceReq)

	return err
}

type NullableS3LoadBalancerRegisterServiceReq struct {
	value *S3LoadBalancerRegisterServiceReq
	isSet bool
}

func (v NullableS3LoadBalancerRegisterServiceReq) Get() *S3LoadBalancerRegisterServiceReq {
	return v.value
}

func (v *NullableS3LoadBalancerRegisterServiceReq) Set(val *S3LoadBalancerRegisterServiceReq) {
	v.value = val
	v.isSet = true
}

func (v NullableS3LoadBalancerRegisterServiceReq) IsSet() bool {
	return v.isSet
}

func (v *NullableS3LoadBalancerRegisterServiceReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableS3LoadBalancerRegisterServiceReq(val *S3LoadBalancerRegisterServiceReq) *NullableS3LoadBalancerRegisterServiceReq {
	return &NullableS3LoadBalancerRegisterServiceReq{value: val, isSet: true}
}

func (v NullableS3LoadBalancerRegisterServiceReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableS3LoadBalancerRegisterServiceReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


