/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DfsSMBSessionsResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsSMBSessionsResp{}

// DfsSMBSessionsResp struct for DfsSMBSessionsResp
type DfsSMBSessionsResp struct {
	// dfs smb sessions
	DfsSmbSessions []DfsSMBSession `json:"dfs_smb_sessions"`
}

type _DfsSMBSessionsResp DfsSMBSessionsResp

// NewDfsSMBSessionsResp instantiates a new DfsSMBSessionsResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsSMBSessionsResp(dfsSmbSessions []DfsSMBSession) *DfsSMBSessionsResp {
	this := DfsSMBSessionsResp{}
	this.DfsSmbSessions = dfsSmbSessions
	return &this
}

// NewDfsSMBSessionsRespWithDefaults instantiates a new DfsSMBSessionsResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsSMBSessionsRespWithDefaults() *DfsSMBSessionsResp {
	this := DfsSMBSessionsResp{}
	return &this
}

// GetDfsSmbSessions returns the DfsSmbSessions field value
func (o *DfsSMBSessionsResp) GetDfsSmbSessions() []DfsSMBSession {
	if o == nil {
		var ret []DfsSMBSession
		return ret
	}

	return o.DfsSmbSessions
}

// GetDfsSmbSessionsOk returns a tuple with the DfsSmbSessions field value
// and a boolean to check if the value has been set.
func (o *DfsSMBSessionsResp) GetDfsSmbSessionsOk() ([]DfsSMBSession, bool) {
	if o == nil {
		return nil, false
	}
	return o.DfsSmbSessions, true
}

// SetDfsSmbSessions sets field value
func (o *DfsSMBSessionsResp) SetDfsSmbSessions(v []DfsSMBSession) {
	o.DfsSmbSessions = v
}

func (o DfsSMBSessionsResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsSMBSessionsResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dfs_smb_sessions"] = o.DfsSmbSessions
	return toSerialize, nil
}

func (o *DfsSMBSessionsResp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dfs_smb_sessions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDfsSMBSessionsResp := _DfsSMBSessionsResp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDfsSMBSessionsResp)

	if err != nil {
		return err
	}

	*o = DfsSMBSessionsResp(varDfsSMBSessionsResp)

	return err
}

type NullableDfsSMBSessionsResp struct {
	value *DfsSMBSessionsResp
	isSet bool
}

func (v NullableDfsSMBSessionsResp) Get() *DfsSMBSessionsResp {
	return v.value
}

func (v *NullableDfsSMBSessionsResp) Set(val *DfsSMBSessionsResp) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsSMBSessionsResp) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsSMBSessionsResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsSMBSessionsResp(val *DfsSMBSessionsResp) *NullableDfsSMBSessionsResp {
	return &NullableDfsSMBSessionsResp{value: val, isSet: true}
}

func (v NullableDfsSMBSessionsResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsSMBSessionsResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


