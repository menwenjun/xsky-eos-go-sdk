/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DfsXDCacheResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsXDCacheResp{}

// DfsXDCacheResp struct for DfsXDCacheResp
type DfsXDCacheResp struct {
	DfsXdcache DfsXDCache `json:"dfs_xdcache"`
}

type _DfsXDCacheResp DfsXDCacheResp

// NewDfsXDCacheResp instantiates a new DfsXDCacheResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsXDCacheResp(dfsXdcache DfsXDCache) *DfsXDCacheResp {
	this := DfsXDCacheResp{}
	this.DfsXdcache = dfsXdcache
	return &this
}

// NewDfsXDCacheRespWithDefaults instantiates a new DfsXDCacheResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsXDCacheRespWithDefaults() *DfsXDCacheResp {
	this := DfsXDCacheResp{}
	return &this
}

// GetDfsXdcache returns the DfsXdcache field value
func (o *DfsXDCacheResp) GetDfsXdcache() DfsXDCache {
	if o == nil {
		var ret DfsXDCache
		return ret
	}

	return o.DfsXdcache
}

// GetDfsXdcacheOk returns a tuple with the DfsXdcache field value
// and a boolean to check if the value has been set.
func (o *DfsXDCacheResp) GetDfsXdcacheOk() (*DfsXDCache, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DfsXdcache, true
}

// SetDfsXdcache sets field value
func (o *DfsXDCacheResp) SetDfsXdcache(v DfsXDCache) {
	o.DfsXdcache = v
}

func (o DfsXDCacheResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsXDCacheResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dfs_xdcache"] = o.DfsXdcache
	return toSerialize, nil
}

func (o *DfsXDCacheResp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dfs_xdcache",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDfsXDCacheResp := _DfsXDCacheResp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDfsXDCacheResp)

	if err != nil {
		return err
	}

	*o = DfsXDCacheResp(varDfsXDCacheResp)

	return err
}

type NullableDfsXDCacheResp struct {
	value *DfsXDCacheResp
	isSet bool
}

func (v NullableDfsXDCacheResp) Get() *DfsXDCacheResp {
	return v.value
}

func (v *NullableDfsXDCacheResp) Set(val *DfsXDCacheResp) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsXDCacheResp) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsXDCacheResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsXDCacheResp(val *DfsXDCacheResp) *NullableDfsXDCacheResp {
	return &NullableDfsXDCacheResp{value: val, isSet: true}
}

func (v NullableDfsXDCacheResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsXDCacheResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


