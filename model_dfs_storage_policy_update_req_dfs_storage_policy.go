/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DfsStoragePolicyUpdateReqDfsStoragePolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsStoragePolicyUpdateReqDfsStoragePolicy{}

// DfsStoragePolicyUpdateReqDfsStoragePolicy struct for DfsStoragePolicyUpdateReqDfsStoragePolicy
type DfsStoragePolicyUpdateReqDfsStoragePolicy struct {
	// descirption of storage policy
	Description *string `json:"description,omitempty"`
	Filter *DfsPolicyFilter `json:"filter,omitempty"`
	// name of storage policy
	Name *string `json:"name,omitempty"`
	// id of rootfs
	RootfsId int64 `json:"rootfs_id"`
	// scid of storage class
	ScId int64 `json:"sc_id"`
}

type _DfsStoragePolicyUpdateReqDfsStoragePolicy DfsStoragePolicyUpdateReqDfsStoragePolicy

// NewDfsStoragePolicyUpdateReqDfsStoragePolicy instantiates a new DfsStoragePolicyUpdateReqDfsStoragePolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsStoragePolicyUpdateReqDfsStoragePolicy(rootfsId int64, scId int64) *DfsStoragePolicyUpdateReqDfsStoragePolicy {
	this := DfsStoragePolicyUpdateReqDfsStoragePolicy{}
	this.RootfsId = rootfsId
	this.ScId = scId
	return &this
}

// NewDfsStoragePolicyUpdateReqDfsStoragePolicyWithDefaults instantiates a new DfsStoragePolicyUpdateReqDfsStoragePolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsStoragePolicyUpdateReqDfsStoragePolicyWithDefaults() *DfsStoragePolicyUpdateReqDfsStoragePolicy {
	this := DfsStoragePolicyUpdateReqDfsStoragePolicy{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DfsStoragePolicyUpdateReqDfsStoragePolicy) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsStoragePolicyUpdateReqDfsStoragePolicy) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DfsStoragePolicyUpdateReqDfsStoragePolicy) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DfsStoragePolicyUpdateReqDfsStoragePolicy) SetDescription(v string) {
	o.Description = &v
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *DfsStoragePolicyUpdateReqDfsStoragePolicy) GetFilter() DfsPolicyFilter {
	if o == nil || IsNil(o.Filter) {
		var ret DfsPolicyFilter
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsStoragePolicyUpdateReqDfsStoragePolicy) GetFilterOk() (*DfsPolicyFilter, bool) {
	if o == nil || IsNil(o.Filter) {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *DfsStoragePolicyUpdateReqDfsStoragePolicy) HasFilter() bool {
	if o != nil && !IsNil(o.Filter) {
		return true
	}

	return false
}

// SetFilter gets a reference to the given DfsPolicyFilter and assigns it to the Filter field.
func (o *DfsStoragePolicyUpdateReqDfsStoragePolicy) SetFilter(v DfsPolicyFilter) {
	o.Filter = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DfsStoragePolicyUpdateReqDfsStoragePolicy) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsStoragePolicyUpdateReqDfsStoragePolicy) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DfsStoragePolicyUpdateReqDfsStoragePolicy) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DfsStoragePolicyUpdateReqDfsStoragePolicy) SetName(v string) {
	o.Name = &v
}

// GetRootfsId returns the RootfsId field value
func (o *DfsStoragePolicyUpdateReqDfsStoragePolicy) GetRootfsId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.RootfsId
}

// GetRootfsIdOk returns a tuple with the RootfsId field value
// and a boolean to check if the value has been set.
func (o *DfsStoragePolicyUpdateReqDfsStoragePolicy) GetRootfsIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RootfsId, true
}

// SetRootfsId sets field value
func (o *DfsStoragePolicyUpdateReqDfsStoragePolicy) SetRootfsId(v int64) {
	o.RootfsId = v
}

// GetScId returns the ScId field value
func (o *DfsStoragePolicyUpdateReqDfsStoragePolicy) GetScId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ScId
}

// GetScIdOk returns a tuple with the ScId field value
// and a boolean to check if the value has been set.
func (o *DfsStoragePolicyUpdateReqDfsStoragePolicy) GetScIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScId, true
}

// SetScId sets field value
func (o *DfsStoragePolicyUpdateReqDfsStoragePolicy) SetScId(v int64) {
	o.ScId = v
}

func (o DfsStoragePolicyUpdateReqDfsStoragePolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsStoragePolicyUpdateReqDfsStoragePolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Filter) {
		toSerialize["filter"] = o.Filter
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["rootfs_id"] = o.RootfsId
	toSerialize["sc_id"] = o.ScId
	return toSerialize, nil
}

func (o *DfsStoragePolicyUpdateReqDfsStoragePolicy) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"rootfs_id",
		"sc_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDfsStoragePolicyUpdateReqDfsStoragePolicy := _DfsStoragePolicyUpdateReqDfsStoragePolicy{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDfsStoragePolicyUpdateReqDfsStoragePolicy)

	if err != nil {
		return err
	}

	*o = DfsStoragePolicyUpdateReqDfsStoragePolicy(varDfsStoragePolicyUpdateReqDfsStoragePolicy)

	return err
}

type NullableDfsStoragePolicyUpdateReqDfsStoragePolicy struct {
	value *DfsStoragePolicyUpdateReqDfsStoragePolicy
	isSet bool
}

func (v NullableDfsStoragePolicyUpdateReqDfsStoragePolicy) Get() *DfsStoragePolicyUpdateReqDfsStoragePolicy {
	return v.value
}

func (v *NullableDfsStoragePolicyUpdateReqDfsStoragePolicy) Set(val *DfsStoragePolicyUpdateReqDfsStoragePolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsStoragePolicyUpdateReqDfsStoragePolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsStoragePolicyUpdateReqDfsStoragePolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsStoragePolicyUpdateReqDfsStoragePolicy(val *DfsStoragePolicyUpdateReqDfsStoragePolicy) *NullableDfsStoragePolicyUpdateReqDfsStoragePolicy {
	return &NullableDfsStoragePolicyUpdateReqDfsStoragePolicy{value: val, isSet: true}
}

func (v NullableDfsStoragePolicyUpdateReqDfsStoragePolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsStoragePolicyUpdateReqDfsStoragePolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


