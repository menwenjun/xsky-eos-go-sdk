/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the VIPsResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VIPsResp{}

// VIPsResp struct for VIPsResp
type VIPsResp struct {
	Vips []VIPRecord `json:"vips,omitempty"`
}

// NewVIPsResp instantiates a new VIPsResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVIPsResp() *VIPsResp {
	this := VIPsResp{}
	return &this
}

// NewVIPsRespWithDefaults instantiates a new VIPsResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVIPsRespWithDefaults() *VIPsResp {
	this := VIPsResp{}
	return &this
}

// GetVips returns the Vips field value if set, zero value otherwise.
func (o *VIPsResp) GetVips() []VIPRecord {
	if o == nil || IsNil(o.Vips) {
		var ret []VIPRecord
		return ret
	}
	return o.Vips
}

// GetVipsOk returns a tuple with the Vips field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VIPsResp) GetVipsOk() ([]VIPRecord, bool) {
	if o == nil || IsNil(o.Vips) {
		return nil, false
	}
	return o.Vips, true
}

// HasVips returns a boolean if a field has been set.
func (o *VIPsResp) HasVips() bool {
	if o != nil && !IsNil(o.Vips) {
		return true
	}

	return false
}

// SetVips gets a reference to the given []VIPRecord and assigns it to the Vips field.
func (o *VIPsResp) SetVips(v []VIPRecord) {
	o.Vips = v
}

func (o VIPsResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VIPsResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Vips) {
		toSerialize["vips"] = o.Vips
	}
	return toSerialize, nil
}

type NullableVIPsResp struct {
	value *VIPsResp
	isSet bool
}

func (v NullableVIPsResp) Get() *VIPsResp {
	return v.value
}

func (v *NullableVIPsResp) Set(val *VIPsResp) {
	v.value = val
	v.isSet = true
}

func (v NullableVIPsResp) IsSet() bool {
	return v.isSet
}

func (v *NullableVIPsResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVIPsResp(val *VIPsResp) *NullableVIPsResp {
	return &NullableVIPsResp{value: val, isSet: true}
}

func (v NullableVIPsResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVIPsResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


