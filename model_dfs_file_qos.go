/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DfsFileQos type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsFileQos{}

// DfsFileQos struct for DfsFileQos
type DfsFileQos struct {
	DfsQos *DfsQos `json:"dfs_qos,omitempty"`
	// qos state of file
	State *string `json:"state,omitempty"`
}

// NewDfsFileQos instantiates a new DfsFileQos object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsFileQos() *DfsFileQos {
	this := DfsFileQos{}
	return &this
}

// NewDfsFileQosWithDefaults instantiates a new DfsFileQos object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsFileQosWithDefaults() *DfsFileQos {
	this := DfsFileQos{}
	return &this
}

// GetDfsQos returns the DfsQos field value if set, zero value otherwise.
func (o *DfsFileQos) GetDfsQos() DfsQos {
	if o == nil || IsNil(o.DfsQos) {
		var ret DfsQos
		return ret
	}
	return *o.DfsQos
}

// GetDfsQosOk returns a tuple with the DfsQos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFileQos) GetDfsQosOk() (*DfsQos, bool) {
	if o == nil || IsNil(o.DfsQos) {
		return nil, false
	}
	return o.DfsQos, true
}

// HasDfsQos returns a boolean if a field has been set.
func (o *DfsFileQos) HasDfsQos() bool {
	if o != nil && !IsNil(o.DfsQos) {
		return true
	}

	return false
}

// SetDfsQos gets a reference to the given DfsQos and assigns it to the DfsQos field.
func (o *DfsFileQos) SetDfsQos(v DfsQos) {
	o.DfsQos = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *DfsFileQos) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFileQos) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *DfsFileQos) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *DfsFileQos) SetState(v string) {
	o.State = &v
}

func (o DfsFileQos) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsFileQos) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DfsQos) {
		toSerialize["dfs_qos"] = o.DfsQos
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	return toSerialize, nil
}

type NullableDfsFileQos struct {
	value *DfsFileQos
	isSet bool
}

func (v NullableDfsFileQos) Get() *DfsFileQos {
	return v.value
}

func (v *NullableDfsFileQos) Set(val *DfsFileQos) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsFileQos) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsFileQos) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsFileQos(val *DfsFileQos) *NullableDfsFileQos {
	return &NullableDfsFileQos{value: val, isSet: true}
}

func (v NullableDfsFileQos) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsFileQos) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


