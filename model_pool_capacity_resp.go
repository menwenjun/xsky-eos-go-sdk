/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PoolCapacityResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PoolCapacityResp{}

// PoolCapacityResp struct for PoolCapacityResp
type PoolCapacityResp struct {
	ActualKbyte *int64 `json:"actual_kbyte,omitempty"`
	DataKbyte *int64 `json:"data_kbyte,omitempty"`
}

// NewPoolCapacityResp instantiates a new PoolCapacityResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPoolCapacityResp() *PoolCapacityResp {
	this := PoolCapacityResp{}
	return &this
}

// NewPoolCapacityRespWithDefaults instantiates a new PoolCapacityResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPoolCapacityRespWithDefaults() *PoolCapacityResp {
	this := PoolCapacityResp{}
	return &this
}

// GetActualKbyte returns the ActualKbyte field value if set, zero value otherwise.
func (o *PoolCapacityResp) GetActualKbyte() int64 {
	if o == nil || IsNil(o.ActualKbyte) {
		var ret int64
		return ret
	}
	return *o.ActualKbyte
}

// GetActualKbyteOk returns a tuple with the ActualKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolCapacityResp) GetActualKbyteOk() (*int64, bool) {
	if o == nil || IsNil(o.ActualKbyte) {
		return nil, false
	}
	return o.ActualKbyte, true
}

// HasActualKbyte returns a boolean if a field has been set.
func (o *PoolCapacityResp) HasActualKbyte() bool {
	if o != nil && !IsNil(o.ActualKbyte) {
		return true
	}

	return false
}

// SetActualKbyte gets a reference to the given int64 and assigns it to the ActualKbyte field.
func (o *PoolCapacityResp) SetActualKbyte(v int64) {
	o.ActualKbyte = &v
}

// GetDataKbyte returns the DataKbyte field value if set, zero value otherwise.
func (o *PoolCapacityResp) GetDataKbyte() int64 {
	if o == nil || IsNil(o.DataKbyte) {
		var ret int64
		return ret
	}
	return *o.DataKbyte
}

// GetDataKbyteOk returns a tuple with the DataKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolCapacityResp) GetDataKbyteOk() (*int64, bool) {
	if o == nil || IsNil(o.DataKbyte) {
		return nil, false
	}
	return o.DataKbyte, true
}

// HasDataKbyte returns a boolean if a field has been set.
func (o *PoolCapacityResp) HasDataKbyte() bool {
	if o != nil && !IsNil(o.DataKbyte) {
		return true
	}

	return false
}

// SetDataKbyte gets a reference to the given int64 and assigns it to the DataKbyte field.
func (o *PoolCapacityResp) SetDataKbyte(v int64) {
	o.DataKbyte = &v
}

func (o PoolCapacityResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PoolCapacityResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActualKbyte) {
		toSerialize["actual_kbyte"] = o.ActualKbyte
	}
	if !IsNil(o.DataKbyte) {
		toSerialize["data_kbyte"] = o.DataKbyte
	}
	return toSerialize, nil
}

type NullablePoolCapacityResp struct {
	value *PoolCapacityResp
	isSet bool
}

func (v NullablePoolCapacityResp) Get() *PoolCapacityResp {
	return v.value
}

func (v *NullablePoolCapacityResp) Set(val *PoolCapacityResp) {
	v.value = val
	v.isSet = true
}

func (v NullablePoolCapacityResp) IsSet() bool {
	return v.isSet
}

func (v *NullablePoolCapacityResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePoolCapacityResp(val *PoolCapacityResp) *NullablePoolCapacityResp {
	return &NullablePoolCapacityResp{value: val, isSet: true}
}

func (v NullablePoolCapacityResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePoolCapacityResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


