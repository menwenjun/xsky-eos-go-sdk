/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DfsSMBShareCreateReqShare type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsSMBShareCreateReqShare{}

// DfsSMBShareCreateReqShare struct for DfsSMBShareCreateReqShare
type DfsSMBShareCreateReqShare struct {
	// smb access-based-share-enum enable
	AccessBasedShareEnum *bool `json:"access_based_share_enum,omitempty"`
	// default acl status
	AclInherited *bool `json:"acl_inherited,omitempty"`
	// case sensitive
	CaseSensitive *bool `json:"case_sensitive,omitempty"`
	// description of share
	Description *string `json:"description,omitempty"`
	// gateway group id
	DfsGatewayGroupId *int64 `json:"dfs_gateway_group_id,omitempty"`
	// rootfs id
	DfsRootfsId int64 `json:"dfs_rootfs_id"`
	// access control array
	DfsSmbShareAcls []DfsSMBShareACLReq `json:"dfs_smb_share_acls,omitempty"`
	// allow ips in share
	HostsAllow *string `json:"hosts_allow,omitempty"`
	// name of share
	Name string `json:"name"`
	// smb oplocks enable
	Oplocks *bool `json:"oplocks,omitempty"`
	// directory path
	Path string `json:"path"`
	// recycle status
	Recycled *bool `json:"recycled,omitempty"`
	// windows acl status
	WindowsAcl *bool `json:"windows_acl,omitempty"`
}

type _DfsSMBShareCreateReqShare DfsSMBShareCreateReqShare

// NewDfsSMBShareCreateReqShare instantiates a new DfsSMBShareCreateReqShare object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsSMBShareCreateReqShare(dfsRootfsId int64, name string, path string) *DfsSMBShareCreateReqShare {
	this := DfsSMBShareCreateReqShare{}
	this.DfsRootfsId = dfsRootfsId
	this.Name = name
	this.Path = path
	return &this
}

// NewDfsSMBShareCreateReqShareWithDefaults instantiates a new DfsSMBShareCreateReqShare object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsSMBShareCreateReqShareWithDefaults() *DfsSMBShareCreateReqShare {
	this := DfsSMBShareCreateReqShare{}
	return &this
}

// GetAccessBasedShareEnum returns the AccessBasedShareEnum field value if set, zero value otherwise.
func (o *DfsSMBShareCreateReqShare) GetAccessBasedShareEnum() bool {
	if o == nil || IsNil(o.AccessBasedShareEnum) {
		var ret bool
		return ret
	}
	return *o.AccessBasedShareEnum
}

// GetAccessBasedShareEnumOk returns a tuple with the AccessBasedShareEnum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBShareCreateReqShare) GetAccessBasedShareEnumOk() (*bool, bool) {
	if o == nil || IsNil(o.AccessBasedShareEnum) {
		return nil, false
	}
	return o.AccessBasedShareEnum, true
}

// HasAccessBasedShareEnum returns a boolean if a field has been set.
func (o *DfsSMBShareCreateReqShare) HasAccessBasedShareEnum() bool {
	if o != nil && !IsNil(o.AccessBasedShareEnum) {
		return true
	}

	return false
}

// SetAccessBasedShareEnum gets a reference to the given bool and assigns it to the AccessBasedShareEnum field.
func (o *DfsSMBShareCreateReqShare) SetAccessBasedShareEnum(v bool) {
	o.AccessBasedShareEnum = &v
}

// GetAclInherited returns the AclInherited field value if set, zero value otherwise.
func (o *DfsSMBShareCreateReqShare) GetAclInherited() bool {
	if o == nil || IsNil(o.AclInherited) {
		var ret bool
		return ret
	}
	return *o.AclInherited
}

// GetAclInheritedOk returns a tuple with the AclInherited field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBShareCreateReqShare) GetAclInheritedOk() (*bool, bool) {
	if o == nil || IsNil(o.AclInherited) {
		return nil, false
	}
	return o.AclInherited, true
}

// HasAclInherited returns a boolean if a field has been set.
func (o *DfsSMBShareCreateReqShare) HasAclInherited() bool {
	if o != nil && !IsNil(o.AclInherited) {
		return true
	}

	return false
}

// SetAclInherited gets a reference to the given bool and assigns it to the AclInherited field.
func (o *DfsSMBShareCreateReqShare) SetAclInherited(v bool) {
	o.AclInherited = &v
}

// GetCaseSensitive returns the CaseSensitive field value if set, zero value otherwise.
func (o *DfsSMBShareCreateReqShare) GetCaseSensitive() bool {
	if o == nil || IsNil(o.CaseSensitive) {
		var ret bool
		return ret
	}
	return *o.CaseSensitive
}

// GetCaseSensitiveOk returns a tuple with the CaseSensitive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBShareCreateReqShare) GetCaseSensitiveOk() (*bool, bool) {
	if o == nil || IsNil(o.CaseSensitive) {
		return nil, false
	}
	return o.CaseSensitive, true
}

// HasCaseSensitive returns a boolean if a field has been set.
func (o *DfsSMBShareCreateReqShare) HasCaseSensitive() bool {
	if o != nil && !IsNil(o.CaseSensitive) {
		return true
	}

	return false
}

// SetCaseSensitive gets a reference to the given bool and assigns it to the CaseSensitive field.
func (o *DfsSMBShareCreateReqShare) SetCaseSensitive(v bool) {
	o.CaseSensitive = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DfsSMBShareCreateReqShare) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBShareCreateReqShare) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DfsSMBShareCreateReqShare) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DfsSMBShareCreateReqShare) SetDescription(v string) {
	o.Description = &v
}

// GetDfsGatewayGroupId returns the DfsGatewayGroupId field value if set, zero value otherwise.
func (o *DfsSMBShareCreateReqShare) GetDfsGatewayGroupId() int64 {
	if o == nil || IsNil(o.DfsGatewayGroupId) {
		var ret int64
		return ret
	}
	return *o.DfsGatewayGroupId
}

// GetDfsGatewayGroupIdOk returns a tuple with the DfsGatewayGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBShareCreateReqShare) GetDfsGatewayGroupIdOk() (*int64, bool) {
	if o == nil || IsNil(o.DfsGatewayGroupId) {
		return nil, false
	}
	return o.DfsGatewayGroupId, true
}

// HasDfsGatewayGroupId returns a boolean if a field has been set.
func (o *DfsSMBShareCreateReqShare) HasDfsGatewayGroupId() bool {
	if o != nil && !IsNil(o.DfsGatewayGroupId) {
		return true
	}

	return false
}

// SetDfsGatewayGroupId gets a reference to the given int64 and assigns it to the DfsGatewayGroupId field.
func (o *DfsSMBShareCreateReqShare) SetDfsGatewayGroupId(v int64) {
	o.DfsGatewayGroupId = &v
}

// GetDfsRootfsId returns the DfsRootfsId field value
func (o *DfsSMBShareCreateReqShare) GetDfsRootfsId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DfsRootfsId
}

// GetDfsRootfsIdOk returns a tuple with the DfsRootfsId field value
// and a boolean to check if the value has been set.
func (o *DfsSMBShareCreateReqShare) GetDfsRootfsIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DfsRootfsId, true
}

// SetDfsRootfsId sets field value
func (o *DfsSMBShareCreateReqShare) SetDfsRootfsId(v int64) {
	o.DfsRootfsId = v
}

// GetDfsSmbShareAcls returns the DfsSmbShareAcls field value if set, zero value otherwise.
func (o *DfsSMBShareCreateReqShare) GetDfsSmbShareAcls() []DfsSMBShareACLReq {
	if o == nil || IsNil(o.DfsSmbShareAcls) {
		var ret []DfsSMBShareACLReq
		return ret
	}
	return o.DfsSmbShareAcls
}

// GetDfsSmbShareAclsOk returns a tuple with the DfsSmbShareAcls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBShareCreateReqShare) GetDfsSmbShareAclsOk() ([]DfsSMBShareACLReq, bool) {
	if o == nil || IsNil(o.DfsSmbShareAcls) {
		return nil, false
	}
	return o.DfsSmbShareAcls, true
}

// HasDfsSmbShareAcls returns a boolean if a field has been set.
func (o *DfsSMBShareCreateReqShare) HasDfsSmbShareAcls() bool {
	if o != nil && !IsNil(o.DfsSmbShareAcls) {
		return true
	}

	return false
}

// SetDfsSmbShareAcls gets a reference to the given []DfsSMBShareACLReq and assigns it to the DfsSmbShareAcls field.
func (o *DfsSMBShareCreateReqShare) SetDfsSmbShareAcls(v []DfsSMBShareACLReq) {
	o.DfsSmbShareAcls = v
}

// GetHostsAllow returns the HostsAllow field value if set, zero value otherwise.
func (o *DfsSMBShareCreateReqShare) GetHostsAllow() string {
	if o == nil || IsNil(o.HostsAllow) {
		var ret string
		return ret
	}
	return *o.HostsAllow
}

// GetHostsAllowOk returns a tuple with the HostsAllow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBShareCreateReqShare) GetHostsAllowOk() (*string, bool) {
	if o == nil || IsNil(o.HostsAllow) {
		return nil, false
	}
	return o.HostsAllow, true
}

// HasHostsAllow returns a boolean if a field has been set.
func (o *DfsSMBShareCreateReqShare) HasHostsAllow() bool {
	if o != nil && !IsNil(o.HostsAllow) {
		return true
	}

	return false
}

// SetHostsAllow gets a reference to the given string and assigns it to the HostsAllow field.
func (o *DfsSMBShareCreateReqShare) SetHostsAllow(v string) {
	o.HostsAllow = &v
}

// GetName returns the Name field value
func (o *DfsSMBShareCreateReqShare) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DfsSMBShareCreateReqShare) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DfsSMBShareCreateReqShare) SetName(v string) {
	o.Name = v
}

// GetOplocks returns the Oplocks field value if set, zero value otherwise.
func (o *DfsSMBShareCreateReqShare) GetOplocks() bool {
	if o == nil || IsNil(o.Oplocks) {
		var ret bool
		return ret
	}
	return *o.Oplocks
}

// GetOplocksOk returns a tuple with the Oplocks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBShareCreateReqShare) GetOplocksOk() (*bool, bool) {
	if o == nil || IsNil(o.Oplocks) {
		return nil, false
	}
	return o.Oplocks, true
}

// HasOplocks returns a boolean if a field has been set.
func (o *DfsSMBShareCreateReqShare) HasOplocks() bool {
	if o != nil && !IsNil(o.Oplocks) {
		return true
	}

	return false
}

// SetOplocks gets a reference to the given bool and assigns it to the Oplocks field.
func (o *DfsSMBShareCreateReqShare) SetOplocks(v bool) {
	o.Oplocks = &v
}

// GetPath returns the Path field value
func (o *DfsSMBShareCreateReqShare) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *DfsSMBShareCreateReqShare) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *DfsSMBShareCreateReqShare) SetPath(v string) {
	o.Path = v
}

// GetRecycled returns the Recycled field value if set, zero value otherwise.
func (o *DfsSMBShareCreateReqShare) GetRecycled() bool {
	if o == nil || IsNil(o.Recycled) {
		var ret bool
		return ret
	}
	return *o.Recycled
}

// GetRecycledOk returns a tuple with the Recycled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBShareCreateReqShare) GetRecycledOk() (*bool, bool) {
	if o == nil || IsNil(o.Recycled) {
		return nil, false
	}
	return o.Recycled, true
}

// HasRecycled returns a boolean if a field has been set.
func (o *DfsSMBShareCreateReqShare) HasRecycled() bool {
	if o != nil && !IsNil(o.Recycled) {
		return true
	}

	return false
}

// SetRecycled gets a reference to the given bool and assigns it to the Recycled field.
func (o *DfsSMBShareCreateReqShare) SetRecycled(v bool) {
	o.Recycled = &v
}

// GetWindowsAcl returns the WindowsAcl field value if set, zero value otherwise.
func (o *DfsSMBShareCreateReqShare) GetWindowsAcl() bool {
	if o == nil || IsNil(o.WindowsAcl) {
		var ret bool
		return ret
	}
	return *o.WindowsAcl
}

// GetWindowsAclOk returns a tuple with the WindowsAcl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBShareCreateReqShare) GetWindowsAclOk() (*bool, bool) {
	if o == nil || IsNil(o.WindowsAcl) {
		return nil, false
	}
	return o.WindowsAcl, true
}

// HasWindowsAcl returns a boolean if a field has been set.
func (o *DfsSMBShareCreateReqShare) HasWindowsAcl() bool {
	if o != nil && !IsNil(o.WindowsAcl) {
		return true
	}

	return false
}

// SetWindowsAcl gets a reference to the given bool and assigns it to the WindowsAcl field.
func (o *DfsSMBShareCreateReqShare) SetWindowsAcl(v bool) {
	o.WindowsAcl = &v
}

func (o DfsSMBShareCreateReqShare) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsSMBShareCreateReqShare) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccessBasedShareEnum) {
		toSerialize["access_based_share_enum"] = o.AccessBasedShareEnum
	}
	if !IsNil(o.AclInherited) {
		toSerialize["acl_inherited"] = o.AclInherited
	}
	if !IsNil(o.CaseSensitive) {
		toSerialize["case_sensitive"] = o.CaseSensitive
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DfsGatewayGroupId) {
		toSerialize["dfs_gateway_group_id"] = o.DfsGatewayGroupId
	}
	toSerialize["dfs_rootfs_id"] = o.DfsRootfsId
	if !IsNil(o.DfsSmbShareAcls) {
		toSerialize["dfs_smb_share_acls"] = o.DfsSmbShareAcls
	}
	if !IsNil(o.HostsAllow) {
		toSerialize["hosts_allow"] = o.HostsAllow
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Oplocks) {
		toSerialize["oplocks"] = o.Oplocks
	}
	toSerialize["path"] = o.Path
	if !IsNil(o.Recycled) {
		toSerialize["recycled"] = o.Recycled
	}
	if !IsNil(o.WindowsAcl) {
		toSerialize["windows_acl"] = o.WindowsAcl
	}
	return toSerialize, nil
}

func (o *DfsSMBShareCreateReqShare) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dfs_rootfs_id",
		"name",
		"path",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDfsSMBShareCreateReqShare := _DfsSMBShareCreateReqShare{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDfsSMBShareCreateReqShare)

	if err != nil {
		return err
	}

	*o = DfsSMBShareCreateReqShare(varDfsSMBShareCreateReqShare)

	return err
}

type NullableDfsSMBShareCreateReqShare struct {
	value *DfsSMBShareCreateReqShare
	isSet bool
}

func (v NullableDfsSMBShareCreateReqShare) Get() *DfsSMBShareCreateReqShare {
	return v.value
}

func (v *NullableDfsSMBShareCreateReqShare) Set(val *DfsSMBShareCreateReqShare) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsSMBShareCreateReqShare) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsSMBShareCreateReqShare) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsSMBShareCreateReqShare(val *DfsSMBShareCreateReqShare) *NullableDfsSMBShareCreateReqShare {
	return &NullableDfsSMBShareCreateReqShare{value: val, isSet: true}
}

func (v NullableDfsSMBShareCreateReqShare) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsSMBShareCreateReqShare) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


