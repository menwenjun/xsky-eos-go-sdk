/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the ObjectStoragePolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectStoragePolicy{}

// ObjectStoragePolicy ObjectStoragePolicy is the model of object_storage_policy
type ObjectStoragePolicy struct {
	BucketNum *int64 `json:"bucket_num,omitempty"`
	CachePool *PoolNestview `json:"cache_pool,omitempty"`
	Cluster *ClusterNestview `json:"cluster,omitempty"`
	Compress *bool `json:"compress,omitempty"`
	Create *time.Time `json:"create,omitempty"`
	Crypto *bool `json:"crypto,omitempty"`
	Deduplication *bool `json:"deduplication,omitempty"`
	Default *bool `json:"default,omitempty"`
	Description *string `json:"description,omitempty"`
	Id *int64 `json:"id,omitempty"`
	IndexPool *PoolNestview `json:"index_pool,omitempty"`
	Name *string `json:"name,omitempty"`
	ObjectSizeThreshold *int64 `json:"object_size_threshold,omitempty"`
	PolicyName *string `json:"policy_name,omitempty"`
	Shared *bool `json:"shared,omitempty"`
	Status *string `json:"status,omitempty"`
	Update *time.Time `json:"update,omitempty"`
}

// NewObjectStoragePolicy instantiates a new ObjectStoragePolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectStoragePolicy() *ObjectStoragePolicy {
	this := ObjectStoragePolicy{}
	return &this
}

// NewObjectStoragePolicyWithDefaults instantiates a new ObjectStoragePolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectStoragePolicyWithDefaults() *ObjectStoragePolicy {
	this := ObjectStoragePolicy{}
	return &this
}

// GetBucketNum returns the BucketNum field value if set, zero value otherwise.
func (o *ObjectStoragePolicy) GetBucketNum() int64 {
	if o == nil || IsNil(o.BucketNum) {
		var ret int64
		return ret
	}
	return *o.BucketNum
}

// GetBucketNumOk returns a tuple with the BucketNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStoragePolicy) GetBucketNumOk() (*int64, bool) {
	if o == nil || IsNil(o.BucketNum) {
		return nil, false
	}
	return o.BucketNum, true
}

// HasBucketNum returns a boolean if a field has been set.
func (o *ObjectStoragePolicy) HasBucketNum() bool {
	if o != nil && !IsNil(o.BucketNum) {
		return true
	}

	return false
}

// SetBucketNum gets a reference to the given int64 and assigns it to the BucketNum field.
func (o *ObjectStoragePolicy) SetBucketNum(v int64) {
	o.BucketNum = &v
}

// GetCachePool returns the CachePool field value if set, zero value otherwise.
func (o *ObjectStoragePolicy) GetCachePool() PoolNestview {
	if o == nil || IsNil(o.CachePool) {
		var ret PoolNestview
		return ret
	}
	return *o.CachePool
}

// GetCachePoolOk returns a tuple with the CachePool field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStoragePolicy) GetCachePoolOk() (*PoolNestview, bool) {
	if o == nil || IsNil(o.CachePool) {
		return nil, false
	}
	return o.CachePool, true
}

// HasCachePool returns a boolean if a field has been set.
func (o *ObjectStoragePolicy) HasCachePool() bool {
	if o != nil && !IsNil(o.CachePool) {
		return true
	}

	return false
}

// SetCachePool gets a reference to the given PoolNestview and assigns it to the CachePool field.
func (o *ObjectStoragePolicy) SetCachePool(v PoolNestview) {
	o.CachePool = &v
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *ObjectStoragePolicy) GetCluster() ClusterNestview {
	if o == nil || IsNil(o.Cluster) {
		var ret ClusterNestview
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStoragePolicy) GetClusterOk() (*ClusterNestview, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *ObjectStoragePolicy) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given ClusterNestview and assigns it to the Cluster field.
func (o *ObjectStoragePolicy) SetCluster(v ClusterNestview) {
	o.Cluster = &v
}

// GetCompress returns the Compress field value if set, zero value otherwise.
func (o *ObjectStoragePolicy) GetCompress() bool {
	if o == nil || IsNil(o.Compress) {
		var ret bool
		return ret
	}
	return *o.Compress
}

// GetCompressOk returns a tuple with the Compress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStoragePolicy) GetCompressOk() (*bool, bool) {
	if o == nil || IsNil(o.Compress) {
		return nil, false
	}
	return o.Compress, true
}

// HasCompress returns a boolean if a field has been set.
func (o *ObjectStoragePolicy) HasCompress() bool {
	if o != nil && !IsNil(o.Compress) {
		return true
	}

	return false
}

// SetCompress gets a reference to the given bool and assigns it to the Compress field.
func (o *ObjectStoragePolicy) SetCompress(v bool) {
	o.Compress = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *ObjectStoragePolicy) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStoragePolicy) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *ObjectStoragePolicy) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *ObjectStoragePolicy) SetCreate(v time.Time) {
	o.Create = &v
}

// GetCrypto returns the Crypto field value if set, zero value otherwise.
func (o *ObjectStoragePolicy) GetCrypto() bool {
	if o == nil || IsNil(o.Crypto) {
		var ret bool
		return ret
	}
	return *o.Crypto
}

// GetCryptoOk returns a tuple with the Crypto field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStoragePolicy) GetCryptoOk() (*bool, bool) {
	if o == nil || IsNil(o.Crypto) {
		return nil, false
	}
	return o.Crypto, true
}

// HasCrypto returns a boolean if a field has been set.
func (o *ObjectStoragePolicy) HasCrypto() bool {
	if o != nil && !IsNil(o.Crypto) {
		return true
	}

	return false
}

// SetCrypto gets a reference to the given bool and assigns it to the Crypto field.
func (o *ObjectStoragePolicy) SetCrypto(v bool) {
	o.Crypto = &v
}

// GetDeduplication returns the Deduplication field value if set, zero value otherwise.
func (o *ObjectStoragePolicy) GetDeduplication() bool {
	if o == nil || IsNil(o.Deduplication) {
		var ret bool
		return ret
	}
	return *o.Deduplication
}

// GetDeduplicationOk returns a tuple with the Deduplication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStoragePolicy) GetDeduplicationOk() (*bool, bool) {
	if o == nil || IsNil(o.Deduplication) {
		return nil, false
	}
	return o.Deduplication, true
}

// HasDeduplication returns a boolean if a field has been set.
func (o *ObjectStoragePolicy) HasDeduplication() bool {
	if o != nil && !IsNil(o.Deduplication) {
		return true
	}

	return false
}

// SetDeduplication gets a reference to the given bool and assigns it to the Deduplication field.
func (o *ObjectStoragePolicy) SetDeduplication(v bool) {
	o.Deduplication = &v
}

// GetDefault returns the Default field value if set, zero value otherwise.
func (o *ObjectStoragePolicy) GetDefault() bool {
	if o == nil || IsNil(o.Default) {
		var ret bool
		return ret
	}
	return *o.Default
}

// GetDefaultOk returns a tuple with the Default field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStoragePolicy) GetDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.Default) {
		return nil, false
	}
	return o.Default, true
}

// HasDefault returns a boolean if a field has been set.
func (o *ObjectStoragePolicy) HasDefault() bool {
	if o != nil && !IsNil(o.Default) {
		return true
	}

	return false
}

// SetDefault gets a reference to the given bool and assigns it to the Default field.
func (o *ObjectStoragePolicy) SetDefault(v bool) {
	o.Default = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ObjectStoragePolicy) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStoragePolicy) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ObjectStoragePolicy) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ObjectStoragePolicy) SetDescription(v string) {
	o.Description = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ObjectStoragePolicy) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStoragePolicy) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ObjectStoragePolicy) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *ObjectStoragePolicy) SetId(v int64) {
	o.Id = &v
}

// GetIndexPool returns the IndexPool field value if set, zero value otherwise.
func (o *ObjectStoragePolicy) GetIndexPool() PoolNestview {
	if o == nil || IsNil(o.IndexPool) {
		var ret PoolNestview
		return ret
	}
	return *o.IndexPool
}

// GetIndexPoolOk returns a tuple with the IndexPool field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStoragePolicy) GetIndexPoolOk() (*PoolNestview, bool) {
	if o == nil || IsNil(o.IndexPool) {
		return nil, false
	}
	return o.IndexPool, true
}

// HasIndexPool returns a boolean if a field has been set.
func (o *ObjectStoragePolicy) HasIndexPool() bool {
	if o != nil && !IsNil(o.IndexPool) {
		return true
	}

	return false
}

// SetIndexPool gets a reference to the given PoolNestview and assigns it to the IndexPool field.
func (o *ObjectStoragePolicy) SetIndexPool(v PoolNestview) {
	o.IndexPool = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ObjectStoragePolicy) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStoragePolicy) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ObjectStoragePolicy) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ObjectStoragePolicy) SetName(v string) {
	o.Name = &v
}

// GetObjectSizeThreshold returns the ObjectSizeThreshold field value if set, zero value otherwise.
func (o *ObjectStoragePolicy) GetObjectSizeThreshold() int64 {
	if o == nil || IsNil(o.ObjectSizeThreshold) {
		var ret int64
		return ret
	}
	return *o.ObjectSizeThreshold
}

// GetObjectSizeThresholdOk returns a tuple with the ObjectSizeThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStoragePolicy) GetObjectSizeThresholdOk() (*int64, bool) {
	if o == nil || IsNil(o.ObjectSizeThreshold) {
		return nil, false
	}
	return o.ObjectSizeThreshold, true
}

// HasObjectSizeThreshold returns a boolean if a field has been set.
func (o *ObjectStoragePolicy) HasObjectSizeThreshold() bool {
	if o != nil && !IsNil(o.ObjectSizeThreshold) {
		return true
	}

	return false
}

// SetObjectSizeThreshold gets a reference to the given int64 and assigns it to the ObjectSizeThreshold field.
func (o *ObjectStoragePolicy) SetObjectSizeThreshold(v int64) {
	o.ObjectSizeThreshold = &v
}

// GetPolicyName returns the PolicyName field value if set, zero value otherwise.
func (o *ObjectStoragePolicy) GetPolicyName() string {
	if o == nil || IsNil(o.PolicyName) {
		var ret string
		return ret
	}
	return *o.PolicyName
}

// GetPolicyNameOk returns a tuple with the PolicyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStoragePolicy) GetPolicyNameOk() (*string, bool) {
	if o == nil || IsNil(o.PolicyName) {
		return nil, false
	}
	return o.PolicyName, true
}

// HasPolicyName returns a boolean if a field has been set.
func (o *ObjectStoragePolicy) HasPolicyName() bool {
	if o != nil && !IsNil(o.PolicyName) {
		return true
	}

	return false
}

// SetPolicyName gets a reference to the given string and assigns it to the PolicyName field.
func (o *ObjectStoragePolicy) SetPolicyName(v string) {
	o.PolicyName = &v
}

// GetShared returns the Shared field value if set, zero value otherwise.
func (o *ObjectStoragePolicy) GetShared() bool {
	if o == nil || IsNil(o.Shared) {
		var ret bool
		return ret
	}
	return *o.Shared
}

// GetSharedOk returns a tuple with the Shared field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStoragePolicy) GetSharedOk() (*bool, bool) {
	if o == nil || IsNil(o.Shared) {
		return nil, false
	}
	return o.Shared, true
}

// HasShared returns a boolean if a field has been set.
func (o *ObjectStoragePolicy) HasShared() bool {
	if o != nil && !IsNil(o.Shared) {
		return true
	}

	return false
}

// SetShared gets a reference to the given bool and assigns it to the Shared field.
func (o *ObjectStoragePolicy) SetShared(v bool) {
	o.Shared = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ObjectStoragePolicy) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStoragePolicy) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ObjectStoragePolicy) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ObjectStoragePolicy) SetStatus(v string) {
	o.Status = &v
}

// GetUpdate returns the Update field value if set, zero value otherwise.
func (o *ObjectStoragePolicy) GetUpdate() time.Time {
	if o == nil || IsNil(o.Update) {
		var ret time.Time
		return ret
	}
	return *o.Update
}

// GetUpdateOk returns a tuple with the Update field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStoragePolicy) GetUpdateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Update) {
		return nil, false
	}
	return o.Update, true
}

// HasUpdate returns a boolean if a field has been set.
func (o *ObjectStoragePolicy) HasUpdate() bool {
	if o != nil && !IsNil(o.Update) {
		return true
	}

	return false
}

// SetUpdate gets a reference to the given time.Time and assigns it to the Update field.
func (o *ObjectStoragePolicy) SetUpdate(v time.Time) {
	o.Update = &v
}

func (o ObjectStoragePolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectStoragePolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BucketNum) {
		toSerialize["bucket_num"] = o.BucketNum
	}
	if !IsNil(o.CachePool) {
		toSerialize["cache_pool"] = o.CachePool
	}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !IsNil(o.Compress) {
		toSerialize["compress"] = o.Compress
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.Crypto) {
		toSerialize["crypto"] = o.Crypto
	}
	if !IsNil(o.Deduplication) {
		toSerialize["deduplication"] = o.Deduplication
	}
	if !IsNil(o.Default) {
		toSerialize["default"] = o.Default
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IndexPool) {
		toSerialize["index_pool"] = o.IndexPool
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ObjectSizeThreshold) {
		toSerialize["object_size_threshold"] = o.ObjectSizeThreshold
	}
	if !IsNil(o.PolicyName) {
		toSerialize["policy_name"] = o.PolicyName
	}
	if !IsNil(o.Shared) {
		toSerialize["shared"] = o.Shared
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Update) {
		toSerialize["update"] = o.Update
	}
	return toSerialize, nil
}

type NullableObjectStoragePolicy struct {
	value *ObjectStoragePolicy
	isSet bool
}

func (v NullableObjectStoragePolicy) Get() *ObjectStoragePolicy {
	return v.value
}

func (v *NullableObjectStoragePolicy) Set(val *ObjectStoragePolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectStoragePolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectStoragePolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectStoragePolicy(val *ObjectStoragePolicy) *NullableObjectStoragePolicy {
	return &NullableObjectStoragePolicy{value: val, isSet: true}
}

func (v NullableObjectStoragePolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectStoragePolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


