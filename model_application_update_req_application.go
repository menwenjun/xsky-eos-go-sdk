/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApplicationUpdateReqApplication type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplicationUpdateReqApplication{}

// ApplicationUpdateReqApplication struct for ApplicationUpdateReqApplication
type ApplicationUpdateReqApplication struct {
	// enable or disable the application
	Enabled *bool `json:"enabled,omitempty"`
	// name of application
	Name string `json:"name"`
	// url of application
	Url string `json:"url"`
}

type _ApplicationUpdateReqApplication ApplicationUpdateReqApplication

// NewApplicationUpdateReqApplication instantiates a new ApplicationUpdateReqApplication object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationUpdateReqApplication(name string, url string) *ApplicationUpdateReqApplication {
	this := ApplicationUpdateReqApplication{}
	this.Name = name
	this.Url = url
	return &this
}

// NewApplicationUpdateReqApplicationWithDefaults instantiates a new ApplicationUpdateReqApplication object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationUpdateReqApplicationWithDefaults() *ApplicationUpdateReqApplication {
	this := ApplicationUpdateReqApplication{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ApplicationUpdateReqApplication) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationUpdateReqApplication) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ApplicationUpdateReqApplication) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ApplicationUpdateReqApplication) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetName returns the Name field value
func (o *ApplicationUpdateReqApplication) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ApplicationUpdateReqApplication) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ApplicationUpdateReqApplication) SetName(v string) {
	o.Name = v
}

// GetUrl returns the Url field value
func (o *ApplicationUpdateReqApplication) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *ApplicationUpdateReqApplication) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *ApplicationUpdateReqApplication) SetUrl(v string) {
	o.Url = v
}

func (o ApplicationUpdateReqApplication) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplicationUpdateReqApplication) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	toSerialize["name"] = o.Name
	toSerialize["url"] = o.Url
	return toSerialize, nil
}

func (o *ApplicationUpdateReqApplication) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApplicationUpdateReqApplication := _ApplicationUpdateReqApplication{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApplicationUpdateReqApplication)

	if err != nil {
		return err
	}

	*o = ApplicationUpdateReqApplication(varApplicationUpdateReqApplication)

	return err
}

type NullableApplicationUpdateReqApplication struct {
	value *ApplicationUpdateReqApplication
	isSet bool
}

func (v NullableApplicationUpdateReqApplication) Get() *ApplicationUpdateReqApplication {
	return v.value
}

func (v *NullableApplicationUpdateReqApplication) Set(val *ApplicationUpdateReqApplication) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationUpdateReqApplication) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationUpdateReqApplication) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationUpdateReqApplication(val *ApplicationUpdateReqApplication) *NullableApplicationUpdateReqApplication {
	return &NullableApplicationUpdateReqApplication{value: val, isSet: true}
}

func (v NullableApplicationUpdateReqApplication) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationUpdateReqApplication) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


