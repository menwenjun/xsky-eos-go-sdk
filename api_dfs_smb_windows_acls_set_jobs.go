/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DfsSmbWindowsAclsSetJobsAPIService DfsSmbWindowsAclsSetJobsAPI service
type DfsSmbWindowsAclsSetJobsAPIService service

type ApiDeleteDfsSMBWindowsACLsSetJobRequest struct {
	ctx context.Context
	ApiService *DfsSmbWindowsAclsSetJobsAPIService
	aclsSetJobId int64
}

func (r ApiDeleteDfsSMBWindowsACLsSetJobRequest) Execute() (*DfsSMBWindowsACLsSetJobResp, *http.Response, error) {
	return r.ApiService.DeleteDfsSMBWindowsACLsSetJobExecute(r)
}

/*
DeleteDfsSMBWindowsACLsSetJob Method for DeleteDfsSMBWindowsACLsSetJob

Delete Set dfs smb windows acls

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param aclsSetJobId dfs smb windows acl set job id
 @return ApiDeleteDfsSMBWindowsACLsSetJobRequest
*/
func (a *DfsSmbWindowsAclsSetJobsAPIService) DeleteDfsSMBWindowsACLsSetJob(ctx context.Context, aclsSetJobId int64) ApiDeleteDfsSMBWindowsACLsSetJobRequest {
	return ApiDeleteDfsSMBWindowsACLsSetJobRequest{
		ApiService: a,
		ctx: ctx,
		aclsSetJobId: aclsSetJobId,
	}
}

// Execute executes the request
//  @return DfsSMBWindowsACLsSetJobResp
func (a *DfsSmbWindowsAclsSetJobsAPIService) DeleteDfsSMBWindowsACLsSetJobExecute(r ApiDeleteDfsSMBWindowsACLsSetJobRequest) (*DfsSMBWindowsACLsSetJobResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsSMBWindowsACLsSetJobResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsSmbWindowsAclsSetJobsAPIService.DeleteDfsSMBWindowsACLsSetJob")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-smb-windows-acls-set-jobs/{acls_set_job_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"acls_set_job_id"+"}", url.PathEscape(parameterValueToString(r.aclsSetJobId, "aclsSetJobId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListDfsSmbWindowsACLsSetJobsRequest struct {
	ctx context.Context
	ApiService *DfsSmbWindowsAclsSetJobsAPIService
	limit *int64
	offset *int64
	clusterId *string
	status *string
	path *string
}

// paging param
func (r ApiListDfsSmbWindowsACLsSetJobsRequest) Limit(limit int64) ApiListDfsSmbWindowsACLsSetJobsRequest {
	r.limit = &limit
	return r
}

// paging param
func (r ApiListDfsSmbWindowsACLsSetJobsRequest) Offset(offset int64) ApiListDfsSmbWindowsACLsSetJobsRequest {
	r.offset = &offset
	return r
}

// cluster id
func (r ApiListDfsSmbWindowsACLsSetJobsRequest) ClusterId(clusterId string) ApiListDfsSmbWindowsACLsSetJobsRequest {
	r.clusterId = &clusterId
	return r
}

// status
func (r ApiListDfsSmbWindowsACLsSetJobsRequest) Status(status string) ApiListDfsSmbWindowsACLsSetJobsRequest {
	r.status = &status
	return r
}

// path
func (r ApiListDfsSmbWindowsACLsSetJobsRequest) Path(path string) ApiListDfsSmbWindowsACLsSetJobsRequest {
	r.path = &path
	return r
}

func (r ApiListDfsSmbWindowsACLsSetJobsRequest) Execute() (*DfsSMBWindowsACLsSetJobsResp, *http.Response, error) {
	return r.ApiService.ListDfsSmbWindowsACLsSetJobsExecute(r)
}

/*
ListDfsSmbWindowsACLsSetJobs Method for ListDfsSmbWindowsACLsSetJobs

List dfs smb windows acls set jobs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListDfsSmbWindowsACLsSetJobsRequest
*/
func (a *DfsSmbWindowsAclsSetJobsAPIService) ListDfsSmbWindowsACLsSetJobs(ctx context.Context) ApiListDfsSmbWindowsACLsSetJobsRequest {
	return ApiListDfsSmbWindowsACLsSetJobsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DfsSMBWindowsACLsSetJobsResp
func (a *DfsSmbWindowsAclsSetJobsAPIService) ListDfsSmbWindowsACLsSetJobsExecute(r ApiListDfsSmbWindowsACLsSetJobsRequest) (*DfsSMBWindowsACLsSetJobsResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsSMBWindowsACLsSetJobsResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsSmbWindowsAclsSetJobsAPIService.ListDfsSmbWindowsACLsSetJobs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-smb-windows-acls-set-jobs/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.clusterId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_id", r.clusterId, "form", "")
	}
	if r.status != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status", r.status, "form", "")
	}
	if r.path != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "path", r.path, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRetryDfsSMBWindowsACLsSetJobRequest struct {
	ctx context.Context
	ApiService *DfsSmbWindowsAclsSetJobsAPIService
	aclsSetJobId int64
	resume *bool
}

// retry with resume or not
func (r ApiRetryDfsSMBWindowsACLsSetJobRequest) Resume(resume bool) ApiRetryDfsSMBWindowsACLsSetJobRequest {
	r.resume = &resume
	return r
}

func (r ApiRetryDfsSMBWindowsACLsSetJobRequest) Execute() (*DfsSMBWindowsACLsSetJobResp, *http.Response, error) {
	return r.ApiService.RetryDfsSMBWindowsACLsSetJobExecute(r)
}

/*
RetryDfsSMBWindowsACLsSetJob Method for RetryDfsSMBWindowsACLsSetJob

Retry Set dfs smb windows acls

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param aclsSetJobId dfs smb windows acls set job id
 @return ApiRetryDfsSMBWindowsACLsSetJobRequest
*/
func (a *DfsSmbWindowsAclsSetJobsAPIService) RetryDfsSMBWindowsACLsSetJob(ctx context.Context, aclsSetJobId int64) ApiRetryDfsSMBWindowsACLsSetJobRequest {
	return ApiRetryDfsSMBWindowsACLsSetJobRequest{
		ApiService: a,
		ctx: ctx,
		aclsSetJobId: aclsSetJobId,
	}
}

// Execute executes the request
//  @return DfsSMBWindowsACLsSetJobResp
func (a *DfsSmbWindowsAclsSetJobsAPIService) RetryDfsSMBWindowsACLsSetJobExecute(r ApiRetryDfsSMBWindowsACLsSetJobRequest) (*DfsSMBWindowsACLsSetJobResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsSMBWindowsACLsSetJobResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsSmbWindowsAclsSetJobsAPIService.RetryDfsSMBWindowsACLsSetJob")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-smb-windows-acls-set-jobs/{acls_set_job_id}:retry"
	localVarPath = strings.Replace(localVarPath, "{"+"acls_set_job_id"+"}", url.PathEscape(parameterValueToString(r.aclsSetJobId, "aclsSetJobId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.resume != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resume", r.resume, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
