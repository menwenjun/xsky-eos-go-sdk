/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the DfsNFSShareACL type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsNFSShareACL{}

// DfsNFSShareACL DfsNFSShareACL defines model of dfs nfs share ACL +X:model:generate;order_by=-ID
type DfsNFSShareACL struct {
	AllSquash *bool `json:"all_squash,omitempty"`
	Clients *string `json:"clients,omitempty"`
	Cluster *ClusterNestview `json:"cluster,omitempty"`
	Create *time.Time `json:"create,omitempty"`
	DfsNfsShare *DfsNFSShareNestview `json:"dfs_nfs_share,omitempty"`
	Id *int64 `json:"id,omitempty"`
	Permission *string `json:"permission,omitempty"`
	RootSquash *bool `json:"root_squash,omitempty"`
	Sync *bool `json:"sync,omitempty"`
	Type *string `json:"type,omitempty"`
	Update *time.Time `json:"update,omitempty"`
}

// NewDfsNFSShareACL instantiates a new DfsNFSShareACL object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsNFSShareACL() *DfsNFSShareACL {
	this := DfsNFSShareACL{}
	return &this
}

// NewDfsNFSShareACLWithDefaults instantiates a new DfsNFSShareACL object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsNFSShareACLWithDefaults() *DfsNFSShareACL {
	this := DfsNFSShareACL{}
	return &this
}

// GetAllSquash returns the AllSquash field value if set, zero value otherwise.
func (o *DfsNFSShareACL) GetAllSquash() bool {
	if o == nil || IsNil(o.AllSquash) {
		var ret bool
		return ret
	}
	return *o.AllSquash
}

// GetAllSquashOk returns a tuple with the AllSquash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsNFSShareACL) GetAllSquashOk() (*bool, bool) {
	if o == nil || IsNil(o.AllSquash) {
		return nil, false
	}
	return o.AllSquash, true
}

// HasAllSquash returns a boolean if a field has been set.
func (o *DfsNFSShareACL) HasAllSquash() bool {
	if o != nil && !IsNil(o.AllSquash) {
		return true
	}

	return false
}

// SetAllSquash gets a reference to the given bool and assigns it to the AllSquash field.
func (o *DfsNFSShareACL) SetAllSquash(v bool) {
	o.AllSquash = &v
}

// GetClients returns the Clients field value if set, zero value otherwise.
func (o *DfsNFSShareACL) GetClients() string {
	if o == nil || IsNil(o.Clients) {
		var ret string
		return ret
	}
	return *o.Clients
}

// GetClientsOk returns a tuple with the Clients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsNFSShareACL) GetClientsOk() (*string, bool) {
	if o == nil || IsNil(o.Clients) {
		return nil, false
	}
	return o.Clients, true
}

// HasClients returns a boolean if a field has been set.
func (o *DfsNFSShareACL) HasClients() bool {
	if o != nil && !IsNil(o.Clients) {
		return true
	}

	return false
}

// SetClients gets a reference to the given string and assigns it to the Clients field.
func (o *DfsNFSShareACL) SetClients(v string) {
	o.Clients = &v
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *DfsNFSShareACL) GetCluster() ClusterNestview {
	if o == nil || IsNil(o.Cluster) {
		var ret ClusterNestview
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsNFSShareACL) GetClusterOk() (*ClusterNestview, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *DfsNFSShareACL) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given ClusterNestview and assigns it to the Cluster field.
func (o *DfsNFSShareACL) SetCluster(v ClusterNestview) {
	o.Cluster = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *DfsNFSShareACL) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsNFSShareACL) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *DfsNFSShareACL) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *DfsNFSShareACL) SetCreate(v time.Time) {
	o.Create = &v
}

// GetDfsNfsShare returns the DfsNfsShare field value if set, zero value otherwise.
func (o *DfsNFSShareACL) GetDfsNfsShare() DfsNFSShareNestview {
	if o == nil || IsNil(o.DfsNfsShare) {
		var ret DfsNFSShareNestview
		return ret
	}
	return *o.DfsNfsShare
}

// GetDfsNfsShareOk returns a tuple with the DfsNfsShare field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsNFSShareACL) GetDfsNfsShareOk() (*DfsNFSShareNestview, bool) {
	if o == nil || IsNil(o.DfsNfsShare) {
		return nil, false
	}
	return o.DfsNfsShare, true
}

// HasDfsNfsShare returns a boolean if a field has been set.
func (o *DfsNFSShareACL) HasDfsNfsShare() bool {
	if o != nil && !IsNil(o.DfsNfsShare) {
		return true
	}

	return false
}

// SetDfsNfsShare gets a reference to the given DfsNFSShareNestview and assigns it to the DfsNfsShare field.
func (o *DfsNFSShareACL) SetDfsNfsShare(v DfsNFSShareNestview) {
	o.DfsNfsShare = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DfsNFSShareACL) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsNFSShareACL) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DfsNFSShareACL) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *DfsNFSShareACL) SetId(v int64) {
	o.Id = &v
}

// GetPermission returns the Permission field value if set, zero value otherwise.
func (o *DfsNFSShareACL) GetPermission() string {
	if o == nil || IsNil(o.Permission) {
		var ret string
		return ret
	}
	return *o.Permission
}

// GetPermissionOk returns a tuple with the Permission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsNFSShareACL) GetPermissionOk() (*string, bool) {
	if o == nil || IsNil(o.Permission) {
		return nil, false
	}
	return o.Permission, true
}

// HasPermission returns a boolean if a field has been set.
func (o *DfsNFSShareACL) HasPermission() bool {
	if o != nil && !IsNil(o.Permission) {
		return true
	}

	return false
}

// SetPermission gets a reference to the given string and assigns it to the Permission field.
func (o *DfsNFSShareACL) SetPermission(v string) {
	o.Permission = &v
}

// GetRootSquash returns the RootSquash field value if set, zero value otherwise.
func (o *DfsNFSShareACL) GetRootSquash() bool {
	if o == nil || IsNil(o.RootSquash) {
		var ret bool
		return ret
	}
	return *o.RootSquash
}

// GetRootSquashOk returns a tuple with the RootSquash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsNFSShareACL) GetRootSquashOk() (*bool, bool) {
	if o == nil || IsNil(o.RootSquash) {
		return nil, false
	}
	return o.RootSquash, true
}

// HasRootSquash returns a boolean if a field has been set.
func (o *DfsNFSShareACL) HasRootSquash() bool {
	if o != nil && !IsNil(o.RootSquash) {
		return true
	}

	return false
}

// SetRootSquash gets a reference to the given bool and assigns it to the RootSquash field.
func (o *DfsNFSShareACL) SetRootSquash(v bool) {
	o.RootSquash = &v
}

// GetSync returns the Sync field value if set, zero value otherwise.
func (o *DfsNFSShareACL) GetSync() bool {
	if o == nil || IsNil(o.Sync) {
		var ret bool
		return ret
	}
	return *o.Sync
}

// GetSyncOk returns a tuple with the Sync field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsNFSShareACL) GetSyncOk() (*bool, bool) {
	if o == nil || IsNil(o.Sync) {
		return nil, false
	}
	return o.Sync, true
}

// HasSync returns a boolean if a field has been set.
func (o *DfsNFSShareACL) HasSync() bool {
	if o != nil && !IsNil(o.Sync) {
		return true
	}

	return false
}

// SetSync gets a reference to the given bool and assigns it to the Sync field.
func (o *DfsNFSShareACL) SetSync(v bool) {
	o.Sync = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DfsNFSShareACL) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsNFSShareACL) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DfsNFSShareACL) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DfsNFSShareACL) SetType(v string) {
	o.Type = &v
}

// GetUpdate returns the Update field value if set, zero value otherwise.
func (o *DfsNFSShareACL) GetUpdate() time.Time {
	if o == nil || IsNil(o.Update) {
		var ret time.Time
		return ret
	}
	return *o.Update
}

// GetUpdateOk returns a tuple with the Update field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsNFSShareACL) GetUpdateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Update) {
		return nil, false
	}
	return o.Update, true
}

// HasUpdate returns a boolean if a field has been set.
func (o *DfsNFSShareACL) HasUpdate() bool {
	if o != nil && !IsNil(o.Update) {
		return true
	}

	return false
}

// SetUpdate gets a reference to the given time.Time and assigns it to the Update field.
func (o *DfsNFSShareACL) SetUpdate(v time.Time) {
	o.Update = &v
}

func (o DfsNFSShareACL) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsNFSShareACL) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllSquash) {
		toSerialize["all_squash"] = o.AllSquash
	}
	if !IsNil(o.Clients) {
		toSerialize["clients"] = o.Clients
	}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.DfsNfsShare) {
		toSerialize["dfs_nfs_share"] = o.DfsNfsShare
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Permission) {
		toSerialize["permission"] = o.Permission
	}
	if !IsNil(o.RootSquash) {
		toSerialize["root_squash"] = o.RootSquash
	}
	if !IsNil(o.Sync) {
		toSerialize["sync"] = o.Sync
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Update) {
		toSerialize["update"] = o.Update
	}
	return toSerialize, nil
}

type NullableDfsNFSShareACL struct {
	value *DfsNFSShareACL
	isSet bool
}

func (v NullableDfsNFSShareACL) Get() *DfsNFSShareACL {
	return v.value
}

func (v *NullableDfsNFSShareACL) Set(val *DfsNFSShareACL) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsNFSShareACL) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsNFSShareACL) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsNFSShareACL(val *DfsNFSShareACL) *NullableDfsNFSShareACL {
	return &NullableDfsNFSShareACL{value: val, isSet: true}
}

func (v NullableDfsNFSShareACL) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsNFSShareACL) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


