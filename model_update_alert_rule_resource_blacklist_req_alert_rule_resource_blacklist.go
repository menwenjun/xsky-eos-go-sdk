/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateAlertRuleResourceBlacklistReqAlertRuleResourceBlacklist type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateAlertRuleResourceBlacklistReqAlertRuleResourceBlacklist{}

// UpdateAlertRuleResourceBlacklistReqAlertRuleResourceBlacklist struct for UpdateAlertRuleResourceBlacklistReqAlertRuleResourceBlacklist
type UpdateAlertRuleResourceBlacklistReqAlertRuleResourceBlacklist struct {
	// resource blacklist id must array, ex: [1, 2, 3]
	ResourceIds []int64 `json:"resource_ids,omitempty"`
}

// NewUpdateAlertRuleResourceBlacklistReqAlertRuleResourceBlacklist instantiates a new UpdateAlertRuleResourceBlacklistReqAlertRuleResourceBlacklist object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateAlertRuleResourceBlacklistReqAlertRuleResourceBlacklist() *UpdateAlertRuleResourceBlacklistReqAlertRuleResourceBlacklist {
	this := UpdateAlertRuleResourceBlacklistReqAlertRuleResourceBlacklist{}
	return &this
}

// NewUpdateAlertRuleResourceBlacklistReqAlertRuleResourceBlacklistWithDefaults instantiates a new UpdateAlertRuleResourceBlacklistReqAlertRuleResourceBlacklist object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateAlertRuleResourceBlacklistReqAlertRuleResourceBlacklistWithDefaults() *UpdateAlertRuleResourceBlacklistReqAlertRuleResourceBlacklist {
	this := UpdateAlertRuleResourceBlacklistReqAlertRuleResourceBlacklist{}
	return &this
}

// GetResourceIds returns the ResourceIds field value if set, zero value otherwise.
func (o *UpdateAlertRuleResourceBlacklistReqAlertRuleResourceBlacklist) GetResourceIds() []int64 {
	if o == nil || IsNil(o.ResourceIds) {
		var ret []int64
		return ret
	}
	return o.ResourceIds
}

// GetResourceIdsOk returns a tuple with the ResourceIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAlertRuleResourceBlacklistReqAlertRuleResourceBlacklist) GetResourceIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.ResourceIds) {
		return nil, false
	}
	return o.ResourceIds, true
}

// HasResourceIds returns a boolean if a field has been set.
func (o *UpdateAlertRuleResourceBlacklistReqAlertRuleResourceBlacklist) HasResourceIds() bool {
	if o != nil && !IsNil(o.ResourceIds) {
		return true
	}

	return false
}

// SetResourceIds gets a reference to the given []int64 and assigns it to the ResourceIds field.
func (o *UpdateAlertRuleResourceBlacklistReqAlertRuleResourceBlacklist) SetResourceIds(v []int64) {
	o.ResourceIds = v
}

func (o UpdateAlertRuleResourceBlacklistReqAlertRuleResourceBlacklist) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateAlertRuleResourceBlacklistReqAlertRuleResourceBlacklist) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ResourceIds) {
		toSerialize["resource_ids"] = o.ResourceIds
	}
	return toSerialize, nil
}

type NullableUpdateAlertRuleResourceBlacklistReqAlertRuleResourceBlacklist struct {
	value *UpdateAlertRuleResourceBlacklistReqAlertRuleResourceBlacklist
	isSet bool
}

func (v NullableUpdateAlertRuleResourceBlacklistReqAlertRuleResourceBlacklist) Get() *UpdateAlertRuleResourceBlacklistReqAlertRuleResourceBlacklist {
	return v.value
}

func (v *NullableUpdateAlertRuleResourceBlacklistReqAlertRuleResourceBlacklist) Set(val *UpdateAlertRuleResourceBlacklistReqAlertRuleResourceBlacklist) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateAlertRuleResourceBlacklistReqAlertRuleResourceBlacklist) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateAlertRuleResourceBlacklistReqAlertRuleResourceBlacklist) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateAlertRuleResourceBlacklistReqAlertRuleResourceBlacklist(val *UpdateAlertRuleResourceBlacklistReqAlertRuleResourceBlacklist) *NullableUpdateAlertRuleResourceBlacklistReqAlertRuleResourceBlacklist {
	return &NullableUpdateAlertRuleResourceBlacklistReqAlertRuleResourceBlacklist{value: val, isSet: true}
}

func (v NullableUpdateAlertRuleResourceBlacklistReqAlertRuleResourceBlacklist) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateAlertRuleResourceBlacklistReqAlertRuleResourceBlacklist) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


