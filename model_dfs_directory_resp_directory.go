/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DfsDirectoryRespDirectory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsDirectoryRespDirectory{}

// DfsDirectoryRespDirectory struct for DfsDirectoryRespDirectory
type DfsDirectoryRespDirectory struct {
	DfsRootfs DfsRootfs `json:"dfs_rootfs"`
	DirectoryResult DfsDirectoryResultResp `json:"directory_result"`
	StoragePolicyIds []int64 `json:"storage_policy_ids,omitempty"`
}

type _DfsDirectoryRespDirectory DfsDirectoryRespDirectory

// NewDfsDirectoryRespDirectory instantiates a new DfsDirectoryRespDirectory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsDirectoryRespDirectory(dfsRootfs DfsRootfs, directoryResult DfsDirectoryResultResp) *DfsDirectoryRespDirectory {
	this := DfsDirectoryRespDirectory{}
	this.DfsRootfs = dfsRootfs
	this.DirectoryResult = directoryResult
	return &this
}

// NewDfsDirectoryRespDirectoryWithDefaults instantiates a new DfsDirectoryRespDirectory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsDirectoryRespDirectoryWithDefaults() *DfsDirectoryRespDirectory {
	this := DfsDirectoryRespDirectory{}
	return &this
}

// GetDfsRootfs returns the DfsRootfs field value
func (o *DfsDirectoryRespDirectory) GetDfsRootfs() DfsRootfs {
	if o == nil {
		var ret DfsRootfs
		return ret
	}

	return o.DfsRootfs
}

// GetDfsRootfsOk returns a tuple with the DfsRootfs field value
// and a boolean to check if the value has been set.
func (o *DfsDirectoryRespDirectory) GetDfsRootfsOk() (*DfsRootfs, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DfsRootfs, true
}

// SetDfsRootfs sets field value
func (o *DfsDirectoryRespDirectory) SetDfsRootfs(v DfsRootfs) {
	o.DfsRootfs = v
}

// GetDirectoryResult returns the DirectoryResult field value
func (o *DfsDirectoryRespDirectory) GetDirectoryResult() DfsDirectoryResultResp {
	if o == nil {
		var ret DfsDirectoryResultResp
		return ret
	}

	return o.DirectoryResult
}

// GetDirectoryResultOk returns a tuple with the DirectoryResult field value
// and a boolean to check if the value has been set.
func (o *DfsDirectoryRespDirectory) GetDirectoryResultOk() (*DfsDirectoryResultResp, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DirectoryResult, true
}

// SetDirectoryResult sets field value
func (o *DfsDirectoryRespDirectory) SetDirectoryResult(v DfsDirectoryResultResp) {
	o.DirectoryResult = v
}

// GetStoragePolicyIds returns the StoragePolicyIds field value if set, zero value otherwise.
func (o *DfsDirectoryRespDirectory) GetStoragePolicyIds() []int64 {
	if o == nil || IsNil(o.StoragePolicyIds) {
		var ret []int64
		return ret
	}
	return o.StoragePolicyIds
}

// GetStoragePolicyIdsOk returns a tuple with the StoragePolicyIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsDirectoryRespDirectory) GetStoragePolicyIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.StoragePolicyIds) {
		return nil, false
	}
	return o.StoragePolicyIds, true
}

// HasStoragePolicyIds returns a boolean if a field has been set.
func (o *DfsDirectoryRespDirectory) HasStoragePolicyIds() bool {
	if o != nil && !IsNil(o.StoragePolicyIds) {
		return true
	}

	return false
}

// SetStoragePolicyIds gets a reference to the given []int64 and assigns it to the StoragePolicyIds field.
func (o *DfsDirectoryRespDirectory) SetStoragePolicyIds(v []int64) {
	o.StoragePolicyIds = v
}

func (o DfsDirectoryRespDirectory) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsDirectoryRespDirectory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dfs_rootfs"] = o.DfsRootfs
	toSerialize["directory_result"] = o.DirectoryResult
	if !IsNil(o.StoragePolicyIds) {
		toSerialize["storage_policy_ids"] = o.StoragePolicyIds
	}
	return toSerialize, nil
}

func (o *DfsDirectoryRespDirectory) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dfs_rootfs",
		"directory_result",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDfsDirectoryRespDirectory := _DfsDirectoryRespDirectory{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDfsDirectoryRespDirectory)

	if err != nil {
		return err
	}

	*o = DfsDirectoryRespDirectory(varDfsDirectoryRespDirectory)

	return err
}

type NullableDfsDirectoryRespDirectory struct {
	value *DfsDirectoryRespDirectory
	isSet bool
}

func (v NullableDfsDirectoryRespDirectory) Get() *DfsDirectoryRespDirectory {
	return v.value
}

func (v *NullableDfsDirectoryRespDirectory) Set(val *DfsDirectoryRespDirectory) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsDirectoryRespDirectory) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsDirectoryRespDirectory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsDirectoryRespDirectory(val *DfsDirectoryRespDirectory) *NullableDfsDirectoryRespDirectory {
	return &NullableDfsDirectoryRespDirectory{value: val, isSet: true}
}

func (v NullableDfsDirectoryRespDirectory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsDirectoryRespDirectory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


