/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the OsdGroupStat type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OsdGroupStat{}

// OsdGroupStat OsdGroupStat defines stat of a osd group
type OsdGroupStat struct {
	Create *time.Time `json:"create,omitempty"`
	MaxAvailableKbyte *int64 `json:"max_available_kbyte,omitempty"`
	MinAvailableKbyte *int64 `json:"min_available_kbyte,omitempty"`
	TotalKbyte *int64 `json:"total_kbyte,omitempty"`
	UsedKbyte *int64 `json:"used_kbyte,omitempty"`
}

// NewOsdGroupStat instantiates a new OsdGroupStat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOsdGroupStat() *OsdGroupStat {
	this := OsdGroupStat{}
	return &this
}

// NewOsdGroupStatWithDefaults instantiates a new OsdGroupStat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOsdGroupStatWithDefaults() *OsdGroupStat {
	this := OsdGroupStat{}
	return &this
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *OsdGroupStat) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsdGroupStat) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *OsdGroupStat) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *OsdGroupStat) SetCreate(v time.Time) {
	o.Create = &v
}

// GetMaxAvailableKbyte returns the MaxAvailableKbyte field value if set, zero value otherwise.
func (o *OsdGroupStat) GetMaxAvailableKbyte() int64 {
	if o == nil || IsNil(o.MaxAvailableKbyte) {
		var ret int64
		return ret
	}
	return *o.MaxAvailableKbyte
}

// GetMaxAvailableKbyteOk returns a tuple with the MaxAvailableKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsdGroupStat) GetMaxAvailableKbyteOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxAvailableKbyte) {
		return nil, false
	}
	return o.MaxAvailableKbyte, true
}

// HasMaxAvailableKbyte returns a boolean if a field has been set.
func (o *OsdGroupStat) HasMaxAvailableKbyte() bool {
	if o != nil && !IsNil(o.MaxAvailableKbyte) {
		return true
	}

	return false
}

// SetMaxAvailableKbyte gets a reference to the given int64 and assigns it to the MaxAvailableKbyte field.
func (o *OsdGroupStat) SetMaxAvailableKbyte(v int64) {
	o.MaxAvailableKbyte = &v
}

// GetMinAvailableKbyte returns the MinAvailableKbyte field value if set, zero value otherwise.
func (o *OsdGroupStat) GetMinAvailableKbyte() int64 {
	if o == nil || IsNil(o.MinAvailableKbyte) {
		var ret int64
		return ret
	}
	return *o.MinAvailableKbyte
}

// GetMinAvailableKbyteOk returns a tuple with the MinAvailableKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsdGroupStat) GetMinAvailableKbyteOk() (*int64, bool) {
	if o == nil || IsNil(o.MinAvailableKbyte) {
		return nil, false
	}
	return o.MinAvailableKbyte, true
}

// HasMinAvailableKbyte returns a boolean if a field has been set.
func (o *OsdGroupStat) HasMinAvailableKbyte() bool {
	if o != nil && !IsNil(o.MinAvailableKbyte) {
		return true
	}

	return false
}

// SetMinAvailableKbyte gets a reference to the given int64 and assigns it to the MinAvailableKbyte field.
func (o *OsdGroupStat) SetMinAvailableKbyte(v int64) {
	o.MinAvailableKbyte = &v
}

// GetTotalKbyte returns the TotalKbyte field value if set, zero value otherwise.
func (o *OsdGroupStat) GetTotalKbyte() int64 {
	if o == nil || IsNil(o.TotalKbyte) {
		var ret int64
		return ret
	}
	return *o.TotalKbyte
}

// GetTotalKbyteOk returns a tuple with the TotalKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsdGroupStat) GetTotalKbyteOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalKbyte) {
		return nil, false
	}
	return o.TotalKbyte, true
}

// HasTotalKbyte returns a boolean if a field has been set.
func (o *OsdGroupStat) HasTotalKbyte() bool {
	if o != nil && !IsNil(o.TotalKbyte) {
		return true
	}

	return false
}

// SetTotalKbyte gets a reference to the given int64 and assigns it to the TotalKbyte field.
func (o *OsdGroupStat) SetTotalKbyte(v int64) {
	o.TotalKbyte = &v
}

// GetUsedKbyte returns the UsedKbyte field value if set, zero value otherwise.
func (o *OsdGroupStat) GetUsedKbyte() int64 {
	if o == nil || IsNil(o.UsedKbyte) {
		var ret int64
		return ret
	}
	return *o.UsedKbyte
}

// GetUsedKbyteOk returns a tuple with the UsedKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsdGroupStat) GetUsedKbyteOk() (*int64, bool) {
	if o == nil || IsNil(o.UsedKbyte) {
		return nil, false
	}
	return o.UsedKbyte, true
}

// HasUsedKbyte returns a boolean if a field has been set.
func (o *OsdGroupStat) HasUsedKbyte() bool {
	if o != nil && !IsNil(o.UsedKbyte) {
		return true
	}

	return false
}

// SetUsedKbyte gets a reference to the given int64 and assigns it to the UsedKbyte field.
func (o *OsdGroupStat) SetUsedKbyte(v int64) {
	o.UsedKbyte = &v
}

func (o OsdGroupStat) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OsdGroupStat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.MaxAvailableKbyte) {
		toSerialize["max_available_kbyte"] = o.MaxAvailableKbyte
	}
	if !IsNil(o.MinAvailableKbyte) {
		toSerialize["min_available_kbyte"] = o.MinAvailableKbyte
	}
	if !IsNil(o.TotalKbyte) {
		toSerialize["total_kbyte"] = o.TotalKbyte
	}
	if !IsNil(o.UsedKbyte) {
		toSerialize["used_kbyte"] = o.UsedKbyte
	}
	return toSerialize, nil
}

type NullableOsdGroupStat struct {
	value *OsdGroupStat
	isSet bool
}

func (v NullableOsdGroupStat) Get() *OsdGroupStat {
	return v.value
}

func (v *NullableOsdGroupStat) Set(val *OsdGroupStat) {
	v.value = val
	v.isSet = true
}

func (v NullableOsdGroupStat) IsSet() bool {
	return v.isSet
}

func (v *NullableOsdGroupStat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOsdGroupStat(val *OsdGroupStat) *NullableOsdGroupStat {
	return &NullableOsdGroupStat{value: val, isSet: true}
}

func (v NullableOsdGroupStat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOsdGroupStat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


