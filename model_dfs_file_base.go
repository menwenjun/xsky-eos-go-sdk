/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DfsFileBase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsFileBase{}

// DfsFileBase struct for DfsFileBase
type DfsFileBase struct {
	// sub file count when it is a directory
	Files *int64 `json:"files,omitempty"`
	// inode count
	Inode *int64 `json:"inode,omitempty"`
	// file name
	Name *string `json:"name,omitempty"`
	// full path
	Path *string `json:"path,omitempty"`
	// file size
	Size *int64 `json:"size,omitempty"`
	// file type
	Type *string `json:"type,omitempty"`
}

// NewDfsFileBase instantiates a new DfsFileBase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsFileBase() *DfsFileBase {
	this := DfsFileBase{}
	return &this
}

// NewDfsFileBaseWithDefaults instantiates a new DfsFileBase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsFileBaseWithDefaults() *DfsFileBase {
	this := DfsFileBase{}
	return &this
}

// GetFiles returns the Files field value if set, zero value otherwise.
func (o *DfsFileBase) GetFiles() int64 {
	if o == nil || IsNil(o.Files) {
		var ret int64
		return ret
	}
	return *o.Files
}

// GetFilesOk returns a tuple with the Files field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFileBase) GetFilesOk() (*int64, bool) {
	if o == nil || IsNil(o.Files) {
		return nil, false
	}
	return o.Files, true
}

// HasFiles returns a boolean if a field has been set.
func (o *DfsFileBase) HasFiles() bool {
	if o != nil && !IsNil(o.Files) {
		return true
	}

	return false
}

// SetFiles gets a reference to the given int64 and assigns it to the Files field.
func (o *DfsFileBase) SetFiles(v int64) {
	o.Files = &v
}

// GetInode returns the Inode field value if set, zero value otherwise.
func (o *DfsFileBase) GetInode() int64 {
	if o == nil || IsNil(o.Inode) {
		var ret int64
		return ret
	}
	return *o.Inode
}

// GetInodeOk returns a tuple with the Inode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFileBase) GetInodeOk() (*int64, bool) {
	if o == nil || IsNil(o.Inode) {
		return nil, false
	}
	return o.Inode, true
}

// HasInode returns a boolean if a field has been set.
func (o *DfsFileBase) HasInode() bool {
	if o != nil && !IsNil(o.Inode) {
		return true
	}

	return false
}

// SetInode gets a reference to the given int64 and assigns it to the Inode field.
func (o *DfsFileBase) SetInode(v int64) {
	o.Inode = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DfsFileBase) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFileBase) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DfsFileBase) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DfsFileBase) SetName(v string) {
	o.Name = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *DfsFileBase) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFileBase) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *DfsFileBase) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *DfsFileBase) SetPath(v string) {
	o.Path = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *DfsFileBase) GetSize() int64 {
	if o == nil || IsNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFileBase) GetSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *DfsFileBase) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *DfsFileBase) SetSize(v int64) {
	o.Size = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DfsFileBase) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFileBase) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DfsFileBase) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DfsFileBase) SetType(v string) {
	o.Type = &v
}

func (o DfsFileBase) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsFileBase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Files) {
		toSerialize["files"] = o.Files
	}
	if !IsNil(o.Inode) {
		toSerialize["inode"] = o.Inode
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableDfsFileBase struct {
	value *DfsFileBase
	isSet bool
}

func (v NullableDfsFileBase) Get() *DfsFileBase {
	return v.value
}

func (v *NullableDfsFileBase) Set(val *DfsFileBase) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsFileBase) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsFileBase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsFileBase(val *DfsFileBase) *NullableDfsFileBase {
	return &NullableDfsFileBase{value: val, isSet: true}
}

func (v NullableDfsFileBase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsFileBase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


