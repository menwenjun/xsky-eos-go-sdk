/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the DpBlockAsyncReplicationPair type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DpBlockAsyncReplicationPair{}

// DpBlockAsyncReplicationPair DpBlockAsyncReplicationPair represent the async replication relationship of a pair of volumes
type DpBlockAsyncReplicationPair struct {
	BlockVolume *VolumeNestview `json:"block_volume,omitempty"`
	Cluster *Cluster `json:"cluster,omitempty"`
	Connected *bool `json:"connected,omitempty"`
	Create *time.Time `json:"create,omitempty"`
	DpBlockAsyncReplicationPolicy *DpBlockAsyncReplicationPolicyNestview `json:"dp_block_async_replication_policy,omitempty"`
	DpVolumeGroupSnapshotReplicationPair *DpVolumeGroupSnapshotReplicationPairNestview `json:"dp_volume_group_snapshot_replication_pair,omitempty"`
	Failovered *bool `json:"failovered,omitempty"`
	Id *int64 `json:"id,omitempty"`
	LastSuccessTime *time.Time `json:"last_success_time,omitempty"`
	LocalRole *string `json:"local_role,omitempty"`
	PairPoolId *int64 `json:"pair_pool_id,omitempty"`
	PairPoolName *string `json:"pair_pool_name,omitempty"`
	PairVolumeId *int64 `json:"pair_volume_id,omitempty"`
	PairVolumeName *string `json:"pair_volume_name,omitempty"`
	Paused *bool `json:"paused,omitempty"`
	PolicyCron *string `json:"policy_cron,omitempty"`
	PreStatus *string `json:"pre_status,omitempty"`
	RemoteCluster *RemoteClusterNestview `json:"remote_cluster,omitempty"`
	Status *string `json:"status,omitempty"`
	Update *time.Time `json:"update,omitempty"`
}

// NewDpBlockAsyncReplicationPair instantiates a new DpBlockAsyncReplicationPair object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDpBlockAsyncReplicationPair() *DpBlockAsyncReplicationPair {
	this := DpBlockAsyncReplicationPair{}
	return &this
}

// NewDpBlockAsyncReplicationPairWithDefaults instantiates a new DpBlockAsyncReplicationPair object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDpBlockAsyncReplicationPairWithDefaults() *DpBlockAsyncReplicationPair {
	this := DpBlockAsyncReplicationPair{}
	return &this
}

// GetBlockVolume returns the BlockVolume field value if set, zero value otherwise.
func (o *DpBlockAsyncReplicationPair) GetBlockVolume() VolumeNestview {
	if o == nil || IsNil(o.BlockVolume) {
		var ret VolumeNestview
		return ret
	}
	return *o.BlockVolume
}

// GetBlockVolumeOk returns a tuple with the BlockVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockAsyncReplicationPair) GetBlockVolumeOk() (*VolumeNestview, bool) {
	if o == nil || IsNil(o.BlockVolume) {
		return nil, false
	}
	return o.BlockVolume, true
}

// HasBlockVolume returns a boolean if a field has been set.
func (o *DpBlockAsyncReplicationPair) HasBlockVolume() bool {
	if o != nil && !IsNil(o.BlockVolume) {
		return true
	}

	return false
}

// SetBlockVolume gets a reference to the given VolumeNestview and assigns it to the BlockVolume field.
func (o *DpBlockAsyncReplicationPair) SetBlockVolume(v VolumeNestview) {
	o.BlockVolume = &v
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *DpBlockAsyncReplicationPair) GetCluster() Cluster {
	if o == nil || IsNil(o.Cluster) {
		var ret Cluster
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockAsyncReplicationPair) GetClusterOk() (*Cluster, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *DpBlockAsyncReplicationPair) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given Cluster and assigns it to the Cluster field.
func (o *DpBlockAsyncReplicationPair) SetCluster(v Cluster) {
	o.Cluster = &v
}

// GetConnected returns the Connected field value if set, zero value otherwise.
func (o *DpBlockAsyncReplicationPair) GetConnected() bool {
	if o == nil || IsNil(o.Connected) {
		var ret bool
		return ret
	}
	return *o.Connected
}

// GetConnectedOk returns a tuple with the Connected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockAsyncReplicationPair) GetConnectedOk() (*bool, bool) {
	if o == nil || IsNil(o.Connected) {
		return nil, false
	}
	return o.Connected, true
}

// HasConnected returns a boolean if a field has been set.
func (o *DpBlockAsyncReplicationPair) HasConnected() bool {
	if o != nil && !IsNil(o.Connected) {
		return true
	}

	return false
}

// SetConnected gets a reference to the given bool and assigns it to the Connected field.
func (o *DpBlockAsyncReplicationPair) SetConnected(v bool) {
	o.Connected = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *DpBlockAsyncReplicationPair) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockAsyncReplicationPair) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *DpBlockAsyncReplicationPair) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *DpBlockAsyncReplicationPair) SetCreate(v time.Time) {
	o.Create = &v
}

// GetDpBlockAsyncReplicationPolicy returns the DpBlockAsyncReplicationPolicy field value if set, zero value otherwise.
func (o *DpBlockAsyncReplicationPair) GetDpBlockAsyncReplicationPolicy() DpBlockAsyncReplicationPolicyNestview {
	if o == nil || IsNil(o.DpBlockAsyncReplicationPolicy) {
		var ret DpBlockAsyncReplicationPolicyNestview
		return ret
	}
	return *o.DpBlockAsyncReplicationPolicy
}

// GetDpBlockAsyncReplicationPolicyOk returns a tuple with the DpBlockAsyncReplicationPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockAsyncReplicationPair) GetDpBlockAsyncReplicationPolicyOk() (*DpBlockAsyncReplicationPolicyNestview, bool) {
	if o == nil || IsNil(o.DpBlockAsyncReplicationPolicy) {
		return nil, false
	}
	return o.DpBlockAsyncReplicationPolicy, true
}

// HasDpBlockAsyncReplicationPolicy returns a boolean if a field has been set.
func (o *DpBlockAsyncReplicationPair) HasDpBlockAsyncReplicationPolicy() bool {
	if o != nil && !IsNil(o.DpBlockAsyncReplicationPolicy) {
		return true
	}

	return false
}

// SetDpBlockAsyncReplicationPolicy gets a reference to the given DpBlockAsyncReplicationPolicyNestview and assigns it to the DpBlockAsyncReplicationPolicy field.
func (o *DpBlockAsyncReplicationPair) SetDpBlockAsyncReplicationPolicy(v DpBlockAsyncReplicationPolicyNestview) {
	o.DpBlockAsyncReplicationPolicy = &v
}

// GetDpVolumeGroupSnapshotReplicationPair returns the DpVolumeGroupSnapshotReplicationPair field value if set, zero value otherwise.
func (o *DpBlockAsyncReplicationPair) GetDpVolumeGroupSnapshotReplicationPair() DpVolumeGroupSnapshotReplicationPairNestview {
	if o == nil || IsNil(o.DpVolumeGroupSnapshotReplicationPair) {
		var ret DpVolumeGroupSnapshotReplicationPairNestview
		return ret
	}
	return *o.DpVolumeGroupSnapshotReplicationPair
}

// GetDpVolumeGroupSnapshotReplicationPairOk returns a tuple with the DpVolumeGroupSnapshotReplicationPair field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockAsyncReplicationPair) GetDpVolumeGroupSnapshotReplicationPairOk() (*DpVolumeGroupSnapshotReplicationPairNestview, bool) {
	if o == nil || IsNil(o.DpVolumeGroupSnapshotReplicationPair) {
		return nil, false
	}
	return o.DpVolumeGroupSnapshotReplicationPair, true
}

// HasDpVolumeGroupSnapshotReplicationPair returns a boolean if a field has been set.
func (o *DpBlockAsyncReplicationPair) HasDpVolumeGroupSnapshotReplicationPair() bool {
	if o != nil && !IsNil(o.DpVolumeGroupSnapshotReplicationPair) {
		return true
	}

	return false
}

// SetDpVolumeGroupSnapshotReplicationPair gets a reference to the given DpVolumeGroupSnapshotReplicationPairNestview and assigns it to the DpVolumeGroupSnapshotReplicationPair field.
func (o *DpBlockAsyncReplicationPair) SetDpVolumeGroupSnapshotReplicationPair(v DpVolumeGroupSnapshotReplicationPairNestview) {
	o.DpVolumeGroupSnapshotReplicationPair = &v
}

// GetFailovered returns the Failovered field value if set, zero value otherwise.
func (o *DpBlockAsyncReplicationPair) GetFailovered() bool {
	if o == nil || IsNil(o.Failovered) {
		var ret bool
		return ret
	}
	return *o.Failovered
}

// GetFailoveredOk returns a tuple with the Failovered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockAsyncReplicationPair) GetFailoveredOk() (*bool, bool) {
	if o == nil || IsNil(o.Failovered) {
		return nil, false
	}
	return o.Failovered, true
}

// HasFailovered returns a boolean if a field has been set.
func (o *DpBlockAsyncReplicationPair) HasFailovered() bool {
	if o != nil && !IsNil(o.Failovered) {
		return true
	}

	return false
}

// SetFailovered gets a reference to the given bool and assigns it to the Failovered field.
func (o *DpBlockAsyncReplicationPair) SetFailovered(v bool) {
	o.Failovered = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DpBlockAsyncReplicationPair) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockAsyncReplicationPair) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DpBlockAsyncReplicationPair) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *DpBlockAsyncReplicationPair) SetId(v int64) {
	o.Id = &v
}

// GetLastSuccessTime returns the LastSuccessTime field value if set, zero value otherwise.
func (o *DpBlockAsyncReplicationPair) GetLastSuccessTime() time.Time {
	if o == nil || IsNil(o.LastSuccessTime) {
		var ret time.Time
		return ret
	}
	return *o.LastSuccessTime
}

// GetLastSuccessTimeOk returns a tuple with the LastSuccessTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockAsyncReplicationPair) GetLastSuccessTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastSuccessTime) {
		return nil, false
	}
	return o.LastSuccessTime, true
}

// HasLastSuccessTime returns a boolean if a field has been set.
func (o *DpBlockAsyncReplicationPair) HasLastSuccessTime() bool {
	if o != nil && !IsNil(o.LastSuccessTime) {
		return true
	}

	return false
}

// SetLastSuccessTime gets a reference to the given time.Time and assigns it to the LastSuccessTime field.
func (o *DpBlockAsyncReplicationPair) SetLastSuccessTime(v time.Time) {
	o.LastSuccessTime = &v
}

// GetLocalRole returns the LocalRole field value if set, zero value otherwise.
func (o *DpBlockAsyncReplicationPair) GetLocalRole() string {
	if o == nil || IsNil(o.LocalRole) {
		var ret string
		return ret
	}
	return *o.LocalRole
}

// GetLocalRoleOk returns a tuple with the LocalRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockAsyncReplicationPair) GetLocalRoleOk() (*string, bool) {
	if o == nil || IsNil(o.LocalRole) {
		return nil, false
	}
	return o.LocalRole, true
}

// HasLocalRole returns a boolean if a field has been set.
func (o *DpBlockAsyncReplicationPair) HasLocalRole() bool {
	if o != nil && !IsNil(o.LocalRole) {
		return true
	}

	return false
}

// SetLocalRole gets a reference to the given string and assigns it to the LocalRole field.
func (o *DpBlockAsyncReplicationPair) SetLocalRole(v string) {
	o.LocalRole = &v
}

// GetPairPoolId returns the PairPoolId field value if set, zero value otherwise.
func (o *DpBlockAsyncReplicationPair) GetPairPoolId() int64 {
	if o == nil || IsNil(o.PairPoolId) {
		var ret int64
		return ret
	}
	return *o.PairPoolId
}

// GetPairPoolIdOk returns a tuple with the PairPoolId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockAsyncReplicationPair) GetPairPoolIdOk() (*int64, bool) {
	if o == nil || IsNil(o.PairPoolId) {
		return nil, false
	}
	return o.PairPoolId, true
}

// HasPairPoolId returns a boolean if a field has been set.
func (o *DpBlockAsyncReplicationPair) HasPairPoolId() bool {
	if o != nil && !IsNil(o.PairPoolId) {
		return true
	}

	return false
}

// SetPairPoolId gets a reference to the given int64 and assigns it to the PairPoolId field.
func (o *DpBlockAsyncReplicationPair) SetPairPoolId(v int64) {
	o.PairPoolId = &v
}

// GetPairPoolName returns the PairPoolName field value if set, zero value otherwise.
func (o *DpBlockAsyncReplicationPair) GetPairPoolName() string {
	if o == nil || IsNil(o.PairPoolName) {
		var ret string
		return ret
	}
	return *o.PairPoolName
}

// GetPairPoolNameOk returns a tuple with the PairPoolName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockAsyncReplicationPair) GetPairPoolNameOk() (*string, bool) {
	if o == nil || IsNil(o.PairPoolName) {
		return nil, false
	}
	return o.PairPoolName, true
}

// HasPairPoolName returns a boolean if a field has been set.
func (o *DpBlockAsyncReplicationPair) HasPairPoolName() bool {
	if o != nil && !IsNil(o.PairPoolName) {
		return true
	}

	return false
}

// SetPairPoolName gets a reference to the given string and assigns it to the PairPoolName field.
func (o *DpBlockAsyncReplicationPair) SetPairPoolName(v string) {
	o.PairPoolName = &v
}

// GetPairVolumeId returns the PairVolumeId field value if set, zero value otherwise.
func (o *DpBlockAsyncReplicationPair) GetPairVolumeId() int64 {
	if o == nil || IsNil(o.PairVolumeId) {
		var ret int64
		return ret
	}
	return *o.PairVolumeId
}

// GetPairVolumeIdOk returns a tuple with the PairVolumeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockAsyncReplicationPair) GetPairVolumeIdOk() (*int64, bool) {
	if o == nil || IsNil(o.PairVolumeId) {
		return nil, false
	}
	return o.PairVolumeId, true
}

// HasPairVolumeId returns a boolean if a field has been set.
func (o *DpBlockAsyncReplicationPair) HasPairVolumeId() bool {
	if o != nil && !IsNil(o.PairVolumeId) {
		return true
	}

	return false
}

// SetPairVolumeId gets a reference to the given int64 and assigns it to the PairVolumeId field.
func (o *DpBlockAsyncReplicationPair) SetPairVolumeId(v int64) {
	o.PairVolumeId = &v
}

// GetPairVolumeName returns the PairVolumeName field value if set, zero value otherwise.
func (o *DpBlockAsyncReplicationPair) GetPairVolumeName() string {
	if o == nil || IsNil(o.PairVolumeName) {
		var ret string
		return ret
	}
	return *o.PairVolumeName
}

// GetPairVolumeNameOk returns a tuple with the PairVolumeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockAsyncReplicationPair) GetPairVolumeNameOk() (*string, bool) {
	if o == nil || IsNil(o.PairVolumeName) {
		return nil, false
	}
	return o.PairVolumeName, true
}

// HasPairVolumeName returns a boolean if a field has been set.
func (o *DpBlockAsyncReplicationPair) HasPairVolumeName() bool {
	if o != nil && !IsNil(o.PairVolumeName) {
		return true
	}

	return false
}

// SetPairVolumeName gets a reference to the given string and assigns it to the PairVolumeName field.
func (o *DpBlockAsyncReplicationPair) SetPairVolumeName(v string) {
	o.PairVolumeName = &v
}

// GetPaused returns the Paused field value if set, zero value otherwise.
func (o *DpBlockAsyncReplicationPair) GetPaused() bool {
	if o == nil || IsNil(o.Paused) {
		var ret bool
		return ret
	}
	return *o.Paused
}

// GetPausedOk returns a tuple with the Paused field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockAsyncReplicationPair) GetPausedOk() (*bool, bool) {
	if o == nil || IsNil(o.Paused) {
		return nil, false
	}
	return o.Paused, true
}

// HasPaused returns a boolean if a field has been set.
func (o *DpBlockAsyncReplicationPair) HasPaused() bool {
	if o != nil && !IsNil(o.Paused) {
		return true
	}

	return false
}

// SetPaused gets a reference to the given bool and assigns it to the Paused field.
func (o *DpBlockAsyncReplicationPair) SetPaused(v bool) {
	o.Paused = &v
}

// GetPolicyCron returns the PolicyCron field value if set, zero value otherwise.
func (o *DpBlockAsyncReplicationPair) GetPolicyCron() string {
	if o == nil || IsNil(o.PolicyCron) {
		var ret string
		return ret
	}
	return *o.PolicyCron
}

// GetPolicyCronOk returns a tuple with the PolicyCron field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockAsyncReplicationPair) GetPolicyCronOk() (*string, bool) {
	if o == nil || IsNil(o.PolicyCron) {
		return nil, false
	}
	return o.PolicyCron, true
}

// HasPolicyCron returns a boolean if a field has been set.
func (o *DpBlockAsyncReplicationPair) HasPolicyCron() bool {
	if o != nil && !IsNil(o.PolicyCron) {
		return true
	}

	return false
}

// SetPolicyCron gets a reference to the given string and assigns it to the PolicyCron field.
func (o *DpBlockAsyncReplicationPair) SetPolicyCron(v string) {
	o.PolicyCron = &v
}

// GetPreStatus returns the PreStatus field value if set, zero value otherwise.
func (o *DpBlockAsyncReplicationPair) GetPreStatus() string {
	if o == nil || IsNil(o.PreStatus) {
		var ret string
		return ret
	}
	return *o.PreStatus
}

// GetPreStatusOk returns a tuple with the PreStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockAsyncReplicationPair) GetPreStatusOk() (*string, bool) {
	if o == nil || IsNil(o.PreStatus) {
		return nil, false
	}
	return o.PreStatus, true
}

// HasPreStatus returns a boolean if a field has been set.
func (o *DpBlockAsyncReplicationPair) HasPreStatus() bool {
	if o != nil && !IsNil(o.PreStatus) {
		return true
	}

	return false
}

// SetPreStatus gets a reference to the given string and assigns it to the PreStatus field.
func (o *DpBlockAsyncReplicationPair) SetPreStatus(v string) {
	o.PreStatus = &v
}

// GetRemoteCluster returns the RemoteCluster field value if set, zero value otherwise.
func (o *DpBlockAsyncReplicationPair) GetRemoteCluster() RemoteClusterNestview {
	if o == nil || IsNil(o.RemoteCluster) {
		var ret RemoteClusterNestview
		return ret
	}
	return *o.RemoteCluster
}

// GetRemoteClusterOk returns a tuple with the RemoteCluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockAsyncReplicationPair) GetRemoteClusterOk() (*RemoteClusterNestview, bool) {
	if o == nil || IsNil(o.RemoteCluster) {
		return nil, false
	}
	return o.RemoteCluster, true
}

// HasRemoteCluster returns a boolean if a field has been set.
func (o *DpBlockAsyncReplicationPair) HasRemoteCluster() bool {
	if o != nil && !IsNil(o.RemoteCluster) {
		return true
	}

	return false
}

// SetRemoteCluster gets a reference to the given RemoteClusterNestview and assigns it to the RemoteCluster field.
func (o *DpBlockAsyncReplicationPair) SetRemoteCluster(v RemoteClusterNestview) {
	o.RemoteCluster = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DpBlockAsyncReplicationPair) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockAsyncReplicationPair) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DpBlockAsyncReplicationPair) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *DpBlockAsyncReplicationPair) SetStatus(v string) {
	o.Status = &v
}

// GetUpdate returns the Update field value if set, zero value otherwise.
func (o *DpBlockAsyncReplicationPair) GetUpdate() time.Time {
	if o == nil || IsNil(o.Update) {
		var ret time.Time
		return ret
	}
	return *o.Update
}

// GetUpdateOk returns a tuple with the Update field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpBlockAsyncReplicationPair) GetUpdateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Update) {
		return nil, false
	}
	return o.Update, true
}

// HasUpdate returns a boolean if a field has been set.
func (o *DpBlockAsyncReplicationPair) HasUpdate() bool {
	if o != nil && !IsNil(o.Update) {
		return true
	}

	return false
}

// SetUpdate gets a reference to the given time.Time and assigns it to the Update field.
func (o *DpBlockAsyncReplicationPair) SetUpdate(v time.Time) {
	o.Update = &v
}

func (o DpBlockAsyncReplicationPair) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DpBlockAsyncReplicationPair) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlockVolume) {
		toSerialize["block_volume"] = o.BlockVolume
	}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !IsNil(o.Connected) {
		toSerialize["connected"] = o.Connected
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.DpBlockAsyncReplicationPolicy) {
		toSerialize["dp_block_async_replication_policy"] = o.DpBlockAsyncReplicationPolicy
	}
	if !IsNil(o.DpVolumeGroupSnapshotReplicationPair) {
		toSerialize["dp_volume_group_snapshot_replication_pair"] = o.DpVolumeGroupSnapshotReplicationPair
	}
	if !IsNil(o.Failovered) {
		toSerialize["failovered"] = o.Failovered
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LastSuccessTime) {
		toSerialize["last_success_time"] = o.LastSuccessTime
	}
	if !IsNil(o.LocalRole) {
		toSerialize["local_role"] = o.LocalRole
	}
	if !IsNil(o.PairPoolId) {
		toSerialize["pair_pool_id"] = o.PairPoolId
	}
	if !IsNil(o.PairPoolName) {
		toSerialize["pair_pool_name"] = o.PairPoolName
	}
	if !IsNil(o.PairVolumeId) {
		toSerialize["pair_volume_id"] = o.PairVolumeId
	}
	if !IsNil(o.PairVolumeName) {
		toSerialize["pair_volume_name"] = o.PairVolumeName
	}
	if !IsNil(o.Paused) {
		toSerialize["paused"] = o.Paused
	}
	if !IsNil(o.PolicyCron) {
		toSerialize["policy_cron"] = o.PolicyCron
	}
	if !IsNil(o.PreStatus) {
		toSerialize["pre_status"] = o.PreStatus
	}
	if !IsNil(o.RemoteCluster) {
		toSerialize["remote_cluster"] = o.RemoteCluster
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Update) {
		toSerialize["update"] = o.Update
	}
	return toSerialize, nil
}

type NullableDpBlockAsyncReplicationPair struct {
	value *DpBlockAsyncReplicationPair
	isSet bool
}

func (v NullableDpBlockAsyncReplicationPair) Get() *DpBlockAsyncReplicationPair {
	return v.value
}

func (v *NullableDpBlockAsyncReplicationPair) Set(val *DpBlockAsyncReplicationPair) {
	v.value = val
	v.isSet = true
}

func (v NullableDpBlockAsyncReplicationPair) IsSet() bool {
	return v.isSet
}

func (v *NullableDpBlockAsyncReplicationPair) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDpBlockAsyncReplicationPair(val *DpBlockAsyncReplicationPair) *NullableDpBlockAsyncReplicationPair {
	return &NullableDpBlockAsyncReplicationPair{value: val, isSet: true}
}

func (v NullableDpBlockAsyncReplicationPair) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDpBlockAsyncReplicationPair) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


