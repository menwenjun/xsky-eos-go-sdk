/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PartitionResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PartitionResp{}

// PartitionResp struct for PartitionResp
type PartitionResp struct {
	Partition *PartitionRecord `json:"partition,omitempty"`
}

// NewPartitionResp instantiates a new PartitionResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPartitionResp() *PartitionResp {
	this := PartitionResp{}
	return &this
}

// NewPartitionRespWithDefaults instantiates a new PartitionResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPartitionRespWithDefaults() *PartitionResp {
	this := PartitionResp{}
	return &this
}

// GetPartition returns the Partition field value if set, zero value otherwise.
func (o *PartitionResp) GetPartition() PartitionRecord {
	if o == nil || IsNil(o.Partition) {
		var ret PartitionRecord
		return ret
	}
	return *o.Partition
}

// GetPartitionOk returns a tuple with the Partition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionResp) GetPartitionOk() (*PartitionRecord, bool) {
	if o == nil || IsNil(o.Partition) {
		return nil, false
	}
	return o.Partition, true
}

// HasPartition returns a boolean if a field has been set.
func (o *PartitionResp) HasPartition() bool {
	if o != nil && !IsNil(o.Partition) {
		return true
	}

	return false
}

// SetPartition gets a reference to the given PartitionRecord and assigns it to the Partition field.
func (o *PartitionResp) SetPartition(v PartitionRecord) {
	o.Partition = &v
}

func (o PartitionResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PartitionResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Partition) {
		toSerialize["partition"] = o.Partition
	}
	return toSerialize, nil
}

type NullablePartitionResp struct {
	value *PartitionResp
	isSet bool
}

func (v NullablePartitionResp) Get() *PartitionResp {
	return v.value
}

func (v *NullablePartitionResp) Set(val *PartitionResp) {
	v.value = val
	v.isSet = true
}

func (v NullablePartitionResp) IsSet() bool {
	return v.isSet
}

func (v *NullablePartitionResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePartitionResp(val *PartitionResp) *NullablePartitionResp {
	return &NullablePartitionResp{value: val, isSet: true}
}

func (v NullablePartitionResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePartitionResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


