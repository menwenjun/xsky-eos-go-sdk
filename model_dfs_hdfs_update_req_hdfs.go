/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DfsHdfsUpdateReqHdfs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsHdfsUpdateReqHdfs{}

// DfsHdfsUpdateReqHdfs struct for DfsHdfsUpdateReqHdfs
type DfsHdfsUpdateReqHdfs struct {
	// auth to local of hdfs
	AuthToLocals []string `json:"auth_to_locals,omitempty"`
	// auth type of hdfs
	AuthType *string `json:"auth_type,omitempty"`
	// block size of hdfs
	BlockSize *int64 `json:"block_size,omitempty"`
	// checksum type of hdfs
	ChecksumType *string `json:"checksum_type,omitempty"`
	// description of hdfs
	Description *string `json:"description,omitempty"`
	// fs kerberos id
	KerberosId *int64 `json:"kerberos_id,omitempty"`
	// path of hdfs
	Path *string `json:"path,omitempty"`
	// port of dfs hdfs
	Port *int64 `json:"port,omitempty"`
	// enabled of hdfs ranger
	Ranger *bool `json:"ranger,omitempty"`
	// ranger ip of hdfs
	RangerIp *string `json:"ranger_ip,omitempty"`
	// ranger service name of hdfs
	RangerServiceName *string `json:"ranger_service_name,omitempty"`
	// ranger url of hdfs
	RangerUrl *string `json:"ranger_url,omitempty"`
}

// NewDfsHdfsUpdateReqHdfs instantiates a new DfsHdfsUpdateReqHdfs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsHdfsUpdateReqHdfs() *DfsHdfsUpdateReqHdfs {
	this := DfsHdfsUpdateReqHdfs{}
	return &this
}

// NewDfsHdfsUpdateReqHdfsWithDefaults instantiates a new DfsHdfsUpdateReqHdfs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsHdfsUpdateReqHdfsWithDefaults() *DfsHdfsUpdateReqHdfs {
	this := DfsHdfsUpdateReqHdfs{}
	return &this
}

// GetAuthToLocals returns the AuthToLocals field value if set, zero value otherwise.
func (o *DfsHdfsUpdateReqHdfs) GetAuthToLocals() []string {
	if o == nil || IsNil(o.AuthToLocals) {
		var ret []string
		return ret
	}
	return o.AuthToLocals
}

// GetAuthToLocalsOk returns a tuple with the AuthToLocals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsHdfsUpdateReqHdfs) GetAuthToLocalsOk() ([]string, bool) {
	if o == nil || IsNil(o.AuthToLocals) {
		return nil, false
	}
	return o.AuthToLocals, true
}

// HasAuthToLocals returns a boolean if a field has been set.
func (o *DfsHdfsUpdateReqHdfs) HasAuthToLocals() bool {
	if o != nil && !IsNil(o.AuthToLocals) {
		return true
	}

	return false
}

// SetAuthToLocals gets a reference to the given []string and assigns it to the AuthToLocals field.
func (o *DfsHdfsUpdateReqHdfs) SetAuthToLocals(v []string) {
	o.AuthToLocals = v
}

// GetAuthType returns the AuthType field value if set, zero value otherwise.
func (o *DfsHdfsUpdateReqHdfs) GetAuthType() string {
	if o == nil || IsNil(o.AuthType) {
		var ret string
		return ret
	}
	return *o.AuthType
}

// GetAuthTypeOk returns a tuple with the AuthType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsHdfsUpdateReqHdfs) GetAuthTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AuthType) {
		return nil, false
	}
	return o.AuthType, true
}

// HasAuthType returns a boolean if a field has been set.
func (o *DfsHdfsUpdateReqHdfs) HasAuthType() bool {
	if o != nil && !IsNil(o.AuthType) {
		return true
	}

	return false
}

// SetAuthType gets a reference to the given string and assigns it to the AuthType field.
func (o *DfsHdfsUpdateReqHdfs) SetAuthType(v string) {
	o.AuthType = &v
}

// GetBlockSize returns the BlockSize field value if set, zero value otherwise.
func (o *DfsHdfsUpdateReqHdfs) GetBlockSize() int64 {
	if o == nil || IsNil(o.BlockSize) {
		var ret int64
		return ret
	}
	return *o.BlockSize
}

// GetBlockSizeOk returns a tuple with the BlockSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsHdfsUpdateReqHdfs) GetBlockSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.BlockSize) {
		return nil, false
	}
	return o.BlockSize, true
}

// HasBlockSize returns a boolean if a field has been set.
func (o *DfsHdfsUpdateReqHdfs) HasBlockSize() bool {
	if o != nil && !IsNil(o.BlockSize) {
		return true
	}

	return false
}

// SetBlockSize gets a reference to the given int64 and assigns it to the BlockSize field.
func (o *DfsHdfsUpdateReqHdfs) SetBlockSize(v int64) {
	o.BlockSize = &v
}

// GetChecksumType returns the ChecksumType field value if set, zero value otherwise.
func (o *DfsHdfsUpdateReqHdfs) GetChecksumType() string {
	if o == nil || IsNil(o.ChecksumType) {
		var ret string
		return ret
	}
	return *o.ChecksumType
}

// GetChecksumTypeOk returns a tuple with the ChecksumType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsHdfsUpdateReqHdfs) GetChecksumTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ChecksumType) {
		return nil, false
	}
	return o.ChecksumType, true
}

// HasChecksumType returns a boolean if a field has been set.
func (o *DfsHdfsUpdateReqHdfs) HasChecksumType() bool {
	if o != nil && !IsNil(o.ChecksumType) {
		return true
	}

	return false
}

// SetChecksumType gets a reference to the given string and assigns it to the ChecksumType field.
func (o *DfsHdfsUpdateReqHdfs) SetChecksumType(v string) {
	o.ChecksumType = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DfsHdfsUpdateReqHdfs) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsHdfsUpdateReqHdfs) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DfsHdfsUpdateReqHdfs) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DfsHdfsUpdateReqHdfs) SetDescription(v string) {
	o.Description = &v
}

// GetKerberosId returns the KerberosId field value if set, zero value otherwise.
func (o *DfsHdfsUpdateReqHdfs) GetKerberosId() int64 {
	if o == nil || IsNil(o.KerberosId) {
		var ret int64
		return ret
	}
	return *o.KerberosId
}

// GetKerberosIdOk returns a tuple with the KerberosId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsHdfsUpdateReqHdfs) GetKerberosIdOk() (*int64, bool) {
	if o == nil || IsNil(o.KerberosId) {
		return nil, false
	}
	return o.KerberosId, true
}

// HasKerberosId returns a boolean if a field has been set.
func (o *DfsHdfsUpdateReqHdfs) HasKerberosId() bool {
	if o != nil && !IsNil(o.KerberosId) {
		return true
	}

	return false
}

// SetKerberosId gets a reference to the given int64 and assigns it to the KerberosId field.
func (o *DfsHdfsUpdateReqHdfs) SetKerberosId(v int64) {
	o.KerberosId = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *DfsHdfsUpdateReqHdfs) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsHdfsUpdateReqHdfs) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *DfsHdfsUpdateReqHdfs) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *DfsHdfsUpdateReqHdfs) SetPath(v string) {
	o.Path = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *DfsHdfsUpdateReqHdfs) GetPort() int64 {
	if o == nil || IsNil(o.Port) {
		var ret int64
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsHdfsUpdateReqHdfs) GetPortOk() (*int64, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *DfsHdfsUpdateReqHdfs) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int64 and assigns it to the Port field.
func (o *DfsHdfsUpdateReqHdfs) SetPort(v int64) {
	o.Port = &v
}

// GetRanger returns the Ranger field value if set, zero value otherwise.
func (o *DfsHdfsUpdateReqHdfs) GetRanger() bool {
	if o == nil || IsNil(o.Ranger) {
		var ret bool
		return ret
	}
	return *o.Ranger
}

// GetRangerOk returns a tuple with the Ranger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsHdfsUpdateReqHdfs) GetRangerOk() (*bool, bool) {
	if o == nil || IsNil(o.Ranger) {
		return nil, false
	}
	return o.Ranger, true
}

// HasRanger returns a boolean if a field has been set.
func (o *DfsHdfsUpdateReqHdfs) HasRanger() bool {
	if o != nil && !IsNil(o.Ranger) {
		return true
	}

	return false
}

// SetRanger gets a reference to the given bool and assigns it to the Ranger field.
func (o *DfsHdfsUpdateReqHdfs) SetRanger(v bool) {
	o.Ranger = &v
}

// GetRangerIp returns the RangerIp field value if set, zero value otherwise.
func (o *DfsHdfsUpdateReqHdfs) GetRangerIp() string {
	if o == nil || IsNil(o.RangerIp) {
		var ret string
		return ret
	}
	return *o.RangerIp
}

// GetRangerIpOk returns a tuple with the RangerIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsHdfsUpdateReqHdfs) GetRangerIpOk() (*string, bool) {
	if o == nil || IsNil(o.RangerIp) {
		return nil, false
	}
	return o.RangerIp, true
}

// HasRangerIp returns a boolean if a field has been set.
func (o *DfsHdfsUpdateReqHdfs) HasRangerIp() bool {
	if o != nil && !IsNil(o.RangerIp) {
		return true
	}

	return false
}

// SetRangerIp gets a reference to the given string and assigns it to the RangerIp field.
func (o *DfsHdfsUpdateReqHdfs) SetRangerIp(v string) {
	o.RangerIp = &v
}

// GetRangerServiceName returns the RangerServiceName field value if set, zero value otherwise.
func (o *DfsHdfsUpdateReqHdfs) GetRangerServiceName() string {
	if o == nil || IsNil(o.RangerServiceName) {
		var ret string
		return ret
	}
	return *o.RangerServiceName
}

// GetRangerServiceNameOk returns a tuple with the RangerServiceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsHdfsUpdateReqHdfs) GetRangerServiceNameOk() (*string, bool) {
	if o == nil || IsNil(o.RangerServiceName) {
		return nil, false
	}
	return o.RangerServiceName, true
}

// HasRangerServiceName returns a boolean if a field has been set.
func (o *DfsHdfsUpdateReqHdfs) HasRangerServiceName() bool {
	if o != nil && !IsNil(o.RangerServiceName) {
		return true
	}

	return false
}

// SetRangerServiceName gets a reference to the given string and assigns it to the RangerServiceName field.
func (o *DfsHdfsUpdateReqHdfs) SetRangerServiceName(v string) {
	o.RangerServiceName = &v
}

// GetRangerUrl returns the RangerUrl field value if set, zero value otherwise.
func (o *DfsHdfsUpdateReqHdfs) GetRangerUrl() string {
	if o == nil || IsNil(o.RangerUrl) {
		var ret string
		return ret
	}
	return *o.RangerUrl
}

// GetRangerUrlOk returns a tuple with the RangerUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsHdfsUpdateReqHdfs) GetRangerUrlOk() (*string, bool) {
	if o == nil || IsNil(o.RangerUrl) {
		return nil, false
	}
	return o.RangerUrl, true
}

// HasRangerUrl returns a boolean if a field has been set.
func (o *DfsHdfsUpdateReqHdfs) HasRangerUrl() bool {
	if o != nil && !IsNil(o.RangerUrl) {
		return true
	}

	return false
}

// SetRangerUrl gets a reference to the given string and assigns it to the RangerUrl field.
func (o *DfsHdfsUpdateReqHdfs) SetRangerUrl(v string) {
	o.RangerUrl = &v
}

func (o DfsHdfsUpdateReqHdfs) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsHdfsUpdateReqHdfs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AuthToLocals) {
		toSerialize["auth_to_locals"] = o.AuthToLocals
	}
	if !IsNil(o.AuthType) {
		toSerialize["auth_type"] = o.AuthType
	}
	if !IsNil(o.BlockSize) {
		toSerialize["block_size"] = o.BlockSize
	}
	if !IsNil(o.ChecksumType) {
		toSerialize["checksum_type"] = o.ChecksumType
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.KerberosId) {
		toSerialize["kerberos_id"] = o.KerberosId
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !IsNil(o.Ranger) {
		toSerialize["ranger"] = o.Ranger
	}
	if !IsNil(o.RangerIp) {
		toSerialize["ranger_ip"] = o.RangerIp
	}
	if !IsNil(o.RangerServiceName) {
		toSerialize["ranger_service_name"] = o.RangerServiceName
	}
	if !IsNil(o.RangerUrl) {
		toSerialize["ranger_url"] = o.RangerUrl
	}
	return toSerialize, nil
}

type NullableDfsHdfsUpdateReqHdfs struct {
	value *DfsHdfsUpdateReqHdfs
	isSet bool
}

func (v NullableDfsHdfsUpdateReqHdfs) Get() *DfsHdfsUpdateReqHdfs {
	return v.value
}

func (v *NullableDfsHdfsUpdateReqHdfs) Set(val *DfsHdfsUpdateReqHdfs) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsHdfsUpdateReqHdfs) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsHdfsUpdateReqHdfs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsHdfsUpdateReqHdfs(val *DfsHdfsUpdateReqHdfs) *NullableDfsHdfsUpdateReqHdfs {
	return &NullableDfsHdfsUpdateReqHdfs{value: val, isSet: true}
}

func (v NullableDfsHdfsUpdateReqHdfs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsHdfsUpdateReqHdfs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


