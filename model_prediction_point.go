/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the PredictionPoint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PredictionPoint{}

// PredictionPoint PredictionPoint is a point in a prediction graph
type PredictionPoint struct {
	Create *time.Time `json:"create,omitempty"`
	UsedKbyte *int64 `json:"used_kbyte,omitempty"`
}

// NewPredictionPoint instantiates a new PredictionPoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPredictionPoint() *PredictionPoint {
	this := PredictionPoint{}
	return &this
}

// NewPredictionPointWithDefaults instantiates a new PredictionPoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPredictionPointWithDefaults() *PredictionPoint {
	this := PredictionPoint{}
	return &this
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *PredictionPoint) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PredictionPoint) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *PredictionPoint) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *PredictionPoint) SetCreate(v time.Time) {
	o.Create = &v
}

// GetUsedKbyte returns the UsedKbyte field value if set, zero value otherwise.
func (o *PredictionPoint) GetUsedKbyte() int64 {
	if o == nil || IsNil(o.UsedKbyte) {
		var ret int64
		return ret
	}
	return *o.UsedKbyte
}

// GetUsedKbyteOk returns a tuple with the UsedKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PredictionPoint) GetUsedKbyteOk() (*int64, bool) {
	if o == nil || IsNil(o.UsedKbyte) {
		return nil, false
	}
	return o.UsedKbyte, true
}

// HasUsedKbyte returns a boolean if a field has been set.
func (o *PredictionPoint) HasUsedKbyte() bool {
	if o != nil && !IsNil(o.UsedKbyte) {
		return true
	}

	return false
}

// SetUsedKbyte gets a reference to the given int64 and assigns it to the UsedKbyte field.
func (o *PredictionPoint) SetUsedKbyte(v int64) {
	o.UsedKbyte = &v
}

func (o PredictionPoint) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PredictionPoint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.UsedKbyte) {
		toSerialize["used_kbyte"] = o.UsedKbyte
	}
	return toSerialize, nil
}

type NullablePredictionPoint struct {
	value *PredictionPoint
	isSet bool
}

func (v NullablePredictionPoint) Get() *PredictionPoint {
	return v.value
}

func (v *NullablePredictionPoint) Set(val *PredictionPoint) {
	v.value = val
	v.isSet = true
}

func (v NullablePredictionPoint) IsSet() bool {
	return v.isSet
}

func (v *NullablePredictionPoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePredictionPoint(val *PredictionPoint) *NullablePredictionPoint {
	return &NullablePredictionPoint{value: val, isSet: true}
}

func (v NullablePredictionPoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePredictionPoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


