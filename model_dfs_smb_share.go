/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the DfsSMBShare type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsSMBShare{}

// DfsSMBShare DfsSMBShare defines model of dfs smb share
type DfsSMBShare struct {
	AccessBasedShareEnum *bool `json:"access_based_share_enum,omitempty"`
	AclInherited *bool `json:"acl_inherited,omitempty"`
	ActionStatus *string `json:"action_status,omitempty"`
	CaseSensitive *bool `json:"case_sensitive,omitempty"`
	Cluster *ClusterNestview `json:"cluster,omitempty"`
	Create *time.Time `json:"create,omitempty"`
	Description *string `json:"description,omitempty"`
	DfsGatewayGroup *DfsGatewayGroupNestview `json:"dfs_gateway_group,omitempty"`
	DfsPath *DfsPathNestview `json:"dfs_path,omitempty"`
	DfsRootfs *DfsRootfsNestview `json:"dfs_rootfs,omitempty"`
	HostsAllow *string `json:"hosts_allow,omitempty"`
	Id *int64 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Oplocks *bool `json:"oplocks,omitempty"`
	Recycled *bool `json:"recycled,omitempty"`
	Securities []string `json:"securities,omitempty"`
	Status *string `json:"status,omitempty"`
	TotalSnapshotNum *int64 `json:"total_snapshot_num,omitempty"`
	Update *time.Time `json:"update,omitempty"`
	WindowsAcl *bool `json:"windows_acl,omitempty"`
}

// NewDfsSMBShare instantiates a new DfsSMBShare object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsSMBShare() *DfsSMBShare {
	this := DfsSMBShare{}
	return &this
}

// NewDfsSMBShareWithDefaults instantiates a new DfsSMBShare object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsSMBShareWithDefaults() *DfsSMBShare {
	this := DfsSMBShare{}
	return &this
}

// GetAccessBasedShareEnum returns the AccessBasedShareEnum field value if set, zero value otherwise.
func (o *DfsSMBShare) GetAccessBasedShareEnum() bool {
	if o == nil || IsNil(o.AccessBasedShareEnum) {
		var ret bool
		return ret
	}
	return *o.AccessBasedShareEnum
}

// GetAccessBasedShareEnumOk returns a tuple with the AccessBasedShareEnum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBShare) GetAccessBasedShareEnumOk() (*bool, bool) {
	if o == nil || IsNil(o.AccessBasedShareEnum) {
		return nil, false
	}
	return o.AccessBasedShareEnum, true
}

// HasAccessBasedShareEnum returns a boolean if a field has been set.
func (o *DfsSMBShare) HasAccessBasedShareEnum() bool {
	if o != nil && !IsNil(o.AccessBasedShareEnum) {
		return true
	}

	return false
}

// SetAccessBasedShareEnum gets a reference to the given bool and assigns it to the AccessBasedShareEnum field.
func (o *DfsSMBShare) SetAccessBasedShareEnum(v bool) {
	o.AccessBasedShareEnum = &v
}

// GetAclInherited returns the AclInherited field value if set, zero value otherwise.
func (o *DfsSMBShare) GetAclInherited() bool {
	if o == nil || IsNil(o.AclInherited) {
		var ret bool
		return ret
	}
	return *o.AclInherited
}

// GetAclInheritedOk returns a tuple with the AclInherited field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBShare) GetAclInheritedOk() (*bool, bool) {
	if o == nil || IsNil(o.AclInherited) {
		return nil, false
	}
	return o.AclInherited, true
}

// HasAclInherited returns a boolean if a field has been set.
func (o *DfsSMBShare) HasAclInherited() bool {
	if o != nil && !IsNil(o.AclInherited) {
		return true
	}

	return false
}

// SetAclInherited gets a reference to the given bool and assigns it to the AclInherited field.
func (o *DfsSMBShare) SetAclInherited(v bool) {
	o.AclInherited = &v
}

// GetActionStatus returns the ActionStatus field value if set, zero value otherwise.
func (o *DfsSMBShare) GetActionStatus() string {
	if o == nil || IsNil(o.ActionStatus) {
		var ret string
		return ret
	}
	return *o.ActionStatus
}

// GetActionStatusOk returns a tuple with the ActionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBShare) GetActionStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ActionStatus) {
		return nil, false
	}
	return o.ActionStatus, true
}

// HasActionStatus returns a boolean if a field has been set.
func (o *DfsSMBShare) HasActionStatus() bool {
	if o != nil && !IsNil(o.ActionStatus) {
		return true
	}

	return false
}

// SetActionStatus gets a reference to the given string and assigns it to the ActionStatus field.
func (o *DfsSMBShare) SetActionStatus(v string) {
	o.ActionStatus = &v
}

// GetCaseSensitive returns the CaseSensitive field value if set, zero value otherwise.
func (o *DfsSMBShare) GetCaseSensitive() bool {
	if o == nil || IsNil(o.CaseSensitive) {
		var ret bool
		return ret
	}
	return *o.CaseSensitive
}

// GetCaseSensitiveOk returns a tuple with the CaseSensitive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBShare) GetCaseSensitiveOk() (*bool, bool) {
	if o == nil || IsNil(o.CaseSensitive) {
		return nil, false
	}
	return o.CaseSensitive, true
}

// HasCaseSensitive returns a boolean if a field has been set.
func (o *DfsSMBShare) HasCaseSensitive() bool {
	if o != nil && !IsNil(o.CaseSensitive) {
		return true
	}

	return false
}

// SetCaseSensitive gets a reference to the given bool and assigns it to the CaseSensitive field.
func (o *DfsSMBShare) SetCaseSensitive(v bool) {
	o.CaseSensitive = &v
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *DfsSMBShare) GetCluster() ClusterNestview {
	if o == nil || IsNil(o.Cluster) {
		var ret ClusterNestview
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBShare) GetClusterOk() (*ClusterNestview, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *DfsSMBShare) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given ClusterNestview and assigns it to the Cluster field.
func (o *DfsSMBShare) SetCluster(v ClusterNestview) {
	o.Cluster = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *DfsSMBShare) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBShare) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *DfsSMBShare) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *DfsSMBShare) SetCreate(v time.Time) {
	o.Create = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DfsSMBShare) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBShare) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DfsSMBShare) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DfsSMBShare) SetDescription(v string) {
	o.Description = &v
}

// GetDfsGatewayGroup returns the DfsGatewayGroup field value if set, zero value otherwise.
func (o *DfsSMBShare) GetDfsGatewayGroup() DfsGatewayGroupNestview {
	if o == nil || IsNil(o.DfsGatewayGroup) {
		var ret DfsGatewayGroupNestview
		return ret
	}
	return *o.DfsGatewayGroup
}

// GetDfsGatewayGroupOk returns a tuple with the DfsGatewayGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBShare) GetDfsGatewayGroupOk() (*DfsGatewayGroupNestview, bool) {
	if o == nil || IsNil(o.DfsGatewayGroup) {
		return nil, false
	}
	return o.DfsGatewayGroup, true
}

// HasDfsGatewayGroup returns a boolean if a field has been set.
func (o *DfsSMBShare) HasDfsGatewayGroup() bool {
	if o != nil && !IsNil(o.DfsGatewayGroup) {
		return true
	}

	return false
}

// SetDfsGatewayGroup gets a reference to the given DfsGatewayGroupNestview and assigns it to the DfsGatewayGroup field.
func (o *DfsSMBShare) SetDfsGatewayGroup(v DfsGatewayGroupNestview) {
	o.DfsGatewayGroup = &v
}

// GetDfsPath returns the DfsPath field value if set, zero value otherwise.
func (o *DfsSMBShare) GetDfsPath() DfsPathNestview {
	if o == nil || IsNil(o.DfsPath) {
		var ret DfsPathNestview
		return ret
	}
	return *o.DfsPath
}

// GetDfsPathOk returns a tuple with the DfsPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBShare) GetDfsPathOk() (*DfsPathNestview, bool) {
	if o == nil || IsNil(o.DfsPath) {
		return nil, false
	}
	return o.DfsPath, true
}

// HasDfsPath returns a boolean if a field has been set.
func (o *DfsSMBShare) HasDfsPath() bool {
	if o != nil && !IsNil(o.DfsPath) {
		return true
	}

	return false
}

// SetDfsPath gets a reference to the given DfsPathNestview and assigns it to the DfsPath field.
func (o *DfsSMBShare) SetDfsPath(v DfsPathNestview) {
	o.DfsPath = &v
}

// GetDfsRootfs returns the DfsRootfs field value if set, zero value otherwise.
func (o *DfsSMBShare) GetDfsRootfs() DfsRootfsNestview {
	if o == nil || IsNil(o.DfsRootfs) {
		var ret DfsRootfsNestview
		return ret
	}
	return *o.DfsRootfs
}

// GetDfsRootfsOk returns a tuple with the DfsRootfs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBShare) GetDfsRootfsOk() (*DfsRootfsNestview, bool) {
	if o == nil || IsNil(o.DfsRootfs) {
		return nil, false
	}
	return o.DfsRootfs, true
}

// HasDfsRootfs returns a boolean if a field has been set.
func (o *DfsSMBShare) HasDfsRootfs() bool {
	if o != nil && !IsNil(o.DfsRootfs) {
		return true
	}

	return false
}

// SetDfsRootfs gets a reference to the given DfsRootfsNestview and assigns it to the DfsRootfs field.
func (o *DfsSMBShare) SetDfsRootfs(v DfsRootfsNestview) {
	o.DfsRootfs = &v
}

// GetHostsAllow returns the HostsAllow field value if set, zero value otherwise.
func (o *DfsSMBShare) GetHostsAllow() string {
	if o == nil || IsNil(o.HostsAllow) {
		var ret string
		return ret
	}
	return *o.HostsAllow
}

// GetHostsAllowOk returns a tuple with the HostsAllow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBShare) GetHostsAllowOk() (*string, bool) {
	if o == nil || IsNil(o.HostsAllow) {
		return nil, false
	}
	return o.HostsAllow, true
}

// HasHostsAllow returns a boolean if a field has been set.
func (o *DfsSMBShare) HasHostsAllow() bool {
	if o != nil && !IsNil(o.HostsAllow) {
		return true
	}

	return false
}

// SetHostsAllow gets a reference to the given string and assigns it to the HostsAllow field.
func (o *DfsSMBShare) SetHostsAllow(v string) {
	o.HostsAllow = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DfsSMBShare) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBShare) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DfsSMBShare) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *DfsSMBShare) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DfsSMBShare) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBShare) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DfsSMBShare) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DfsSMBShare) SetName(v string) {
	o.Name = &v
}

// GetOplocks returns the Oplocks field value if set, zero value otherwise.
func (o *DfsSMBShare) GetOplocks() bool {
	if o == nil || IsNil(o.Oplocks) {
		var ret bool
		return ret
	}
	return *o.Oplocks
}

// GetOplocksOk returns a tuple with the Oplocks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBShare) GetOplocksOk() (*bool, bool) {
	if o == nil || IsNil(o.Oplocks) {
		return nil, false
	}
	return o.Oplocks, true
}

// HasOplocks returns a boolean if a field has been set.
func (o *DfsSMBShare) HasOplocks() bool {
	if o != nil && !IsNil(o.Oplocks) {
		return true
	}

	return false
}

// SetOplocks gets a reference to the given bool and assigns it to the Oplocks field.
func (o *DfsSMBShare) SetOplocks(v bool) {
	o.Oplocks = &v
}

// GetRecycled returns the Recycled field value if set, zero value otherwise.
func (o *DfsSMBShare) GetRecycled() bool {
	if o == nil || IsNil(o.Recycled) {
		var ret bool
		return ret
	}
	return *o.Recycled
}

// GetRecycledOk returns a tuple with the Recycled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBShare) GetRecycledOk() (*bool, bool) {
	if o == nil || IsNil(o.Recycled) {
		return nil, false
	}
	return o.Recycled, true
}

// HasRecycled returns a boolean if a field has been set.
func (o *DfsSMBShare) HasRecycled() bool {
	if o != nil && !IsNil(o.Recycled) {
		return true
	}

	return false
}

// SetRecycled gets a reference to the given bool and assigns it to the Recycled field.
func (o *DfsSMBShare) SetRecycled(v bool) {
	o.Recycled = &v
}

// GetSecurities returns the Securities field value if set, zero value otherwise.
func (o *DfsSMBShare) GetSecurities() []string {
	if o == nil || IsNil(o.Securities) {
		var ret []string
		return ret
	}
	return o.Securities
}

// GetSecuritiesOk returns a tuple with the Securities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBShare) GetSecuritiesOk() ([]string, bool) {
	if o == nil || IsNil(o.Securities) {
		return nil, false
	}
	return o.Securities, true
}

// HasSecurities returns a boolean if a field has been set.
func (o *DfsSMBShare) HasSecurities() bool {
	if o != nil && !IsNil(o.Securities) {
		return true
	}

	return false
}

// SetSecurities gets a reference to the given []string and assigns it to the Securities field.
func (o *DfsSMBShare) SetSecurities(v []string) {
	o.Securities = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DfsSMBShare) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBShare) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DfsSMBShare) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *DfsSMBShare) SetStatus(v string) {
	o.Status = &v
}

// GetTotalSnapshotNum returns the TotalSnapshotNum field value if set, zero value otherwise.
func (o *DfsSMBShare) GetTotalSnapshotNum() int64 {
	if o == nil || IsNil(o.TotalSnapshotNum) {
		var ret int64
		return ret
	}
	return *o.TotalSnapshotNum
}

// GetTotalSnapshotNumOk returns a tuple with the TotalSnapshotNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBShare) GetTotalSnapshotNumOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalSnapshotNum) {
		return nil, false
	}
	return o.TotalSnapshotNum, true
}

// HasTotalSnapshotNum returns a boolean if a field has been set.
func (o *DfsSMBShare) HasTotalSnapshotNum() bool {
	if o != nil && !IsNil(o.TotalSnapshotNum) {
		return true
	}

	return false
}

// SetTotalSnapshotNum gets a reference to the given int64 and assigns it to the TotalSnapshotNum field.
func (o *DfsSMBShare) SetTotalSnapshotNum(v int64) {
	o.TotalSnapshotNum = &v
}

// GetUpdate returns the Update field value if set, zero value otherwise.
func (o *DfsSMBShare) GetUpdate() time.Time {
	if o == nil || IsNil(o.Update) {
		var ret time.Time
		return ret
	}
	return *o.Update
}

// GetUpdateOk returns a tuple with the Update field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBShare) GetUpdateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Update) {
		return nil, false
	}
	return o.Update, true
}

// HasUpdate returns a boolean if a field has been set.
func (o *DfsSMBShare) HasUpdate() bool {
	if o != nil && !IsNil(o.Update) {
		return true
	}

	return false
}

// SetUpdate gets a reference to the given time.Time and assigns it to the Update field.
func (o *DfsSMBShare) SetUpdate(v time.Time) {
	o.Update = &v
}

// GetWindowsAcl returns the WindowsAcl field value if set, zero value otherwise.
func (o *DfsSMBShare) GetWindowsAcl() bool {
	if o == nil || IsNil(o.WindowsAcl) {
		var ret bool
		return ret
	}
	return *o.WindowsAcl
}

// GetWindowsAclOk returns a tuple with the WindowsAcl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBShare) GetWindowsAclOk() (*bool, bool) {
	if o == nil || IsNil(o.WindowsAcl) {
		return nil, false
	}
	return o.WindowsAcl, true
}

// HasWindowsAcl returns a boolean if a field has been set.
func (o *DfsSMBShare) HasWindowsAcl() bool {
	if o != nil && !IsNil(o.WindowsAcl) {
		return true
	}

	return false
}

// SetWindowsAcl gets a reference to the given bool and assigns it to the WindowsAcl field.
func (o *DfsSMBShare) SetWindowsAcl(v bool) {
	o.WindowsAcl = &v
}

func (o DfsSMBShare) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsSMBShare) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccessBasedShareEnum) {
		toSerialize["access_based_share_enum"] = o.AccessBasedShareEnum
	}
	if !IsNil(o.AclInherited) {
		toSerialize["acl_inherited"] = o.AclInherited
	}
	if !IsNil(o.ActionStatus) {
		toSerialize["action_status"] = o.ActionStatus
	}
	if !IsNil(o.CaseSensitive) {
		toSerialize["case_sensitive"] = o.CaseSensitive
	}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DfsGatewayGroup) {
		toSerialize["dfs_gateway_group"] = o.DfsGatewayGroup
	}
	if !IsNil(o.DfsPath) {
		toSerialize["dfs_path"] = o.DfsPath
	}
	if !IsNil(o.DfsRootfs) {
		toSerialize["dfs_rootfs"] = o.DfsRootfs
	}
	if !IsNil(o.HostsAllow) {
		toSerialize["hosts_allow"] = o.HostsAllow
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Oplocks) {
		toSerialize["oplocks"] = o.Oplocks
	}
	if !IsNil(o.Recycled) {
		toSerialize["recycled"] = o.Recycled
	}
	if !IsNil(o.Securities) {
		toSerialize["securities"] = o.Securities
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.TotalSnapshotNum) {
		toSerialize["total_snapshot_num"] = o.TotalSnapshotNum
	}
	if !IsNil(o.Update) {
		toSerialize["update"] = o.Update
	}
	if !IsNil(o.WindowsAcl) {
		toSerialize["windows_acl"] = o.WindowsAcl
	}
	return toSerialize, nil
}

type NullableDfsSMBShare struct {
	value *DfsSMBShare
	isSet bool
}

func (v NullableDfsSMBShare) Get() *DfsSMBShare {
	return v.value
}

func (v *NullableDfsSMBShare) Set(val *DfsSMBShare) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsSMBShare) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsSMBShare) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsSMBShare(val *DfsSMBShare) *NullableDfsSMBShare {
	return &NullableDfsSMBShare{value: val, isSet: true}
}

func (v NullableDfsSMBShare) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsSMBShare) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


