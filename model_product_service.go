/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the ProductService type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductService{}

// ProductService ProductService defines product service
type ProductService struct {
	ExpiredTime *time.Time `json:"expired_time,omitempty"`
	Name *string `json:"name,omitempty"`
	StartTime *time.Time `json:"start_time,omitempty"`
}

// NewProductService instantiates a new ProductService object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductService() *ProductService {
	this := ProductService{}
	return &this
}

// NewProductServiceWithDefaults instantiates a new ProductService object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductServiceWithDefaults() *ProductService {
	this := ProductService{}
	return &this
}

// GetExpiredTime returns the ExpiredTime field value if set, zero value otherwise.
func (o *ProductService) GetExpiredTime() time.Time {
	if o == nil || IsNil(o.ExpiredTime) {
		var ret time.Time
		return ret
	}
	return *o.ExpiredTime
}

// GetExpiredTimeOk returns a tuple with the ExpiredTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductService) GetExpiredTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpiredTime) {
		return nil, false
	}
	return o.ExpiredTime, true
}

// HasExpiredTime returns a boolean if a field has been set.
func (o *ProductService) HasExpiredTime() bool {
	if o != nil && !IsNil(o.ExpiredTime) {
		return true
	}

	return false
}

// SetExpiredTime gets a reference to the given time.Time and assigns it to the ExpiredTime field.
func (o *ProductService) SetExpiredTime(v time.Time) {
	o.ExpiredTime = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ProductService) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductService) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ProductService) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ProductService) SetName(v string) {
	o.Name = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *ProductService) GetStartTime() time.Time {
	if o == nil || IsNil(o.StartTime) {
		var ret time.Time
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductService) GetStartTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *ProductService) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given time.Time and assigns it to the StartTime field.
func (o *ProductService) SetStartTime(v time.Time) {
	o.StartTime = &v
}

func (o ProductService) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductService) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExpiredTime) {
		toSerialize["expired_time"] = o.ExpiredTime
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.StartTime) {
		toSerialize["start_time"] = o.StartTime
	}
	return toSerialize, nil
}

type NullableProductService struct {
	value *ProductService
	isSet bool
}

func (v NullableProductService) Get() *ProductService {
	return v.value
}

func (v *NullableProductService) Set(val *ProductService) {
	v.value = val
	v.isSet = true
}

func (v NullableProductService) IsSet() bool {
	return v.isSet
}

func (v *NullableProductService) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductService(val *ProductService) *NullableProductService {
	return &NullableProductService{value: val, isSet: true}
}

func (v NullableProductService) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductService) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


