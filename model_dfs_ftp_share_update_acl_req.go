/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DfsFTPShareUpdateACLReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsFTPShareUpdateACLReq{}

// DfsFTPShareUpdateACLReq struct for DfsFTPShareUpdateACLReq
type DfsFTPShareUpdateACLReq struct {
	// enable admin user permission
	AdminEnabled *bool `json:"admin_enabled,omitempty"`
	// enable creating files
	CreateEnabled *bool `json:"create_enabled,omitempty"`
	// enable deleting files
	DeleteEnabled *bool `json:"delete_enabled,omitempty"`
	// max bandwidth of downloading
	DownloadBandwidth *int64 `json:"download_bandwidth,omitempty"`
	// enable downloading files
	DownloadEnabled *bool `json:"download_enabled,omitempty"`
	// id of user group
	Id *int64 `json:"id,omitempty"`
	// enable listing files
	ListEnabled *bool `json:"list_enabled,omitempty"`
	// enable renaming files
	RenameEnabled *bool `json:"rename_enabled,omitempty"`
	// max bandwidth of uploading
	UploadBandwidth *int64 `json:"upload_bandwidth,omitempty"`
	// enable uploading files
	UploadEnabled *bool `json:"upload_enabled,omitempty"`
}

// NewDfsFTPShareUpdateACLReq instantiates a new DfsFTPShareUpdateACLReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsFTPShareUpdateACLReq() *DfsFTPShareUpdateACLReq {
	this := DfsFTPShareUpdateACLReq{}
	return &this
}

// NewDfsFTPShareUpdateACLReqWithDefaults instantiates a new DfsFTPShareUpdateACLReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsFTPShareUpdateACLReqWithDefaults() *DfsFTPShareUpdateACLReq {
	this := DfsFTPShareUpdateACLReq{}
	return &this
}

// GetAdminEnabled returns the AdminEnabled field value if set, zero value otherwise.
func (o *DfsFTPShareUpdateACLReq) GetAdminEnabled() bool {
	if o == nil || IsNil(o.AdminEnabled) {
		var ret bool
		return ret
	}
	return *o.AdminEnabled
}

// GetAdminEnabledOk returns a tuple with the AdminEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFTPShareUpdateACLReq) GetAdminEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.AdminEnabled) {
		return nil, false
	}
	return o.AdminEnabled, true
}

// HasAdminEnabled returns a boolean if a field has been set.
func (o *DfsFTPShareUpdateACLReq) HasAdminEnabled() bool {
	if o != nil && !IsNil(o.AdminEnabled) {
		return true
	}

	return false
}

// SetAdminEnabled gets a reference to the given bool and assigns it to the AdminEnabled field.
func (o *DfsFTPShareUpdateACLReq) SetAdminEnabled(v bool) {
	o.AdminEnabled = &v
}

// GetCreateEnabled returns the CreateEnabled field value if set, zero value otherwise.
func (o *DfsFTPShareUpdateACLReq) GetCreateEnabled() bool {
	if o == nil || IsNil(o.CreateEnabled) {
		var ret bool
		return ret
	}
	return *o.CreateEnabled
}

// GetCreateEnabledOk returns a tuple with the CreateEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFTPShareUpdateACLReq) GetCreateEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.CreateEnabled) {
		return nil, false
	}
	return o.CreateEnabled, true
}

// HasCreateEnabled returns a boolean if a field has been set.
func (o *DfsFTPShareUpdateACLReq) HasCreateEnabled() bool {
	if o != nil && !IsNil(o.CreateEnabled) {
		return true
	}

	return false
}

// SetCreateEnabled gets a reference to the given bool and assigns it to the CreateEnabled field.
func (o *DfsFTPShareUpdateACLReq) SetCreateEnabled(v bool) {
	o.CreateEnabled = &v
}

// GetDeleteEnabled returns the DeleteEnabled field value if set, zero value otherwise.
func (o *DfsFTPShareUpdateACLReq) GetDeleteEnabled() bool {
	if o == nil || IsNil(o.DeleteEnabled) {
		var ret bool
		return ret
	}
	return *o.DeleteEnabled
}

// GetDeleteEnabledOk returns a tuple with the DeleteEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFTPShareUpdateACLReq) GetDeleteEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.DeleteEnabled) {
		return nil, false
	}
	return o.DeleteEnabled, true
}

// HasDeleteEnabled returns a boolean if a field has been set.
func (o *DfsFTPShareUpdateACLReq) HasDeleteEnabled() bool {
	if o != nil && !IsNil(o.DeleteEnabled) {
		return true
	}

	return false
}

// SetDeleteEnabled gets a reference to the given bool and assigns it to the DeleteEnabled field.
func (o *DfsFTPShareUpdateACLReq) SetDeleteEnabled(v bool) {
	o.DeleteEnabled = &v
}

// GetDownloadBandwidth returns the DownloadBandwidth field value if set, zero value otherwise.
func (o *DfsFTPShareUpdateACLReq) GetDownloadBandwidth() int64 {
	if o == nil || IsNil(o.DownloadBandwidth) {
		var ret int64
		return ret
	}
	return *o.DownloadBandwidth
}

// GetDownloadBandwidthOk returns a tuple with the DownloadBandwidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFTPShareUpdateACLReq) GetDownloadBandwidthOk() (*int64, bool) {
	if o == nil || IsNil(o.DownloadBandwidth) {
		return nil, false
	}
	return o.DownloadBandwidth, true
}

// HasDownloadBandwidth returns a boolean if a field has been set.
func (o *DfsFTPShareUpdateACLReq) HasDownloadBandwidth() bool {
	if o != nil && !IsNil(o.DownloadBandwidth) {
		return true
	}

	return false
}

// SetDownloadBandwidth gets a reference to the given int64 and assigns it to the DownloadBandwidth field.
func (o *DfsFTPShareUpdateACLReq) SetDownloadBandwidth(v int64) {
	o.DownloadBandwidth = &v
}

// GetDownloadEnabled returns the DownloadEnabled field value if set, zero value otherwise.
func (o *DfsFTPShareUpdateACLReq) GetDownloadEnabled() bool {
	if o == nil || IsNil(o.DownloadEnabled) {
		var ret bool
		return ret
	}
	return *o.DownloadEnabled
}

// GetDownloadEnabledOk returns a tuple with the DownloadEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFTPShareUpdateACLReq) GetDownloadEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.DownloadEnabled) {
		return nil, false
	}
	return o.DownloadEnabled, true
}

// HasDownloadEnabled returns a boolean if a field has been set.
func (o *DfsFTPShareUpdateACLReq) HasDownloadEnabled() bool {
	if o != nil && !IsNil(o.DownloadEnabled) {
		return true
	}

	return false
}

// SetDownloadEnabled gets a reference to the given bool and assigns it to the DownloadEnabled field.
func (o *DfsFTPShareUpdateACLReq) SetDownloadEnabled(v bool) {
	o.DownloadEnabled = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DfsFTPShareUpdateACLReq) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFTPShareUpdateACLReq) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DfsFTPShareUpdateACLReq) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *DfsFTPShareUpdateACLReq) SetId(v int64) {
	o.Id = &v
}

// GetListEnabled returns the ListEnabled field value if set, zero value otherwise.
func (o *DfsFTPShareUpdateACLReq) GetListEnabled() bool {
	if o == nil || IsNil(o.ListEnabled) {
		var ret bool
		return ret
	}
	return *o.ListEnabled
}

// GetListEnabledOk returns a tuple with the ListEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFTPShareUpdateACLReq) GetListEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.ListEnabled) {
		return nil, false
	}
	return o.ListEnabled, true
}

// HasListEnabled returns a boolean if a field has been set.
func (o *DfsFTPShareUpdateACLReq) HasListEnabled() bool {
	if o != nil && !IsNil(o.ListEnabled) {
		return true
	}

	return false
}

// SetListEnabled gets a reference to the given bool and assigns it to the ListEnabled field.
func (o *DfsFTPShareUpdateACLReq) SetListEnabled(v bool) {
	o.ListEnabled = &v
}

// GetRenameEnabled returns the RenameEnabled field value if set, zero value otherwise.
func (o *DfsFTPShareUpdateACLReq) GetRenameEnabled() bool {
	if o == nil || IsNil(o.RenameEnabled) {
		var ret bool
		return ret
	}
	return *o.RenameEnabled
}

// GetRenameEnabledOk returns a tuple with the RenameEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFTPShareUpdateACLReq) GetRenameEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.RenameEnabled) {
		return nil, false
	}
	return o.RenameEnabled, true
}

// HasRenameEnabled returns a boolean if a field has been set.
func (o *DfsFTPShareUpdateACLReq) HasRenameEnabled() bool {
	if o != nil && !IsNil(o.RenameEnabled) {
		return true
	}

	return false
}

// SetRenameEnabled gets a reference to the given bool and assigns it to the RenameEnabled field.
func (o *DfsFTPShareUpdateACLReq) SetRenameEnabled(v bool) {
	o.RenameEnabled = &v
}

// GetUploadBandwidth returns the UploadBandwidth field value if set, zero value otherwise.
func (o *DfsFTPShareUpdateACLReq) GetUploadBandwidth() int64 {
	if o == nil || IsNil(o.UploadBandwidth) {
		var ret int64
		return ret
	}
	return *o.UploadBandwidth
}

// GetUploadBandwidthOk returns a tuple with the UploadBandwidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFTPShareUpdateACLReq) GetUploadBandwidthOk() (*int64, bool) {
	if o == nil || IsNil(o.UploadBandwidth) {
		return nil, false
	}
	return o.UploadBandwidth, true
}

// HasUploadBandwidth returns a boolean if a field has been set.
func (o *DfsFTPShareUpdateACLReq) HasUploadBandwidth() bool {
	if o != nil && !IsNil(o.UploadBandwidth) {
		return true
	}

	return false
}

// SetUploadBandwidth gets a reference to the given int64 and assigns it to the UploadBandwidth field.
func (o *DfsFTPShareUpdateACLReq) SetUploadBandwidth(v int64) {
	o.UploadBandwidth = &v
}

// GetUploadEnabled returns the UploadEnabled field value if set, zero value otherwise.
func (o *DfsFTPShareUpdateACLReq) GetUploadEnabled() bool {
	if o == nil || IsNil(o.UploadEnabled) {
		var ret bool
		return ret
	}
	return *o.UploadEnabled
}

// GetUploadEnabledOk returns a tuple with the UploadEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFTPShareUpdateACLReq) GetUploadEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.UploadEnabled) {
		return nil, false
	}
	return o.UploadEnabled, true
}

// HasUploadEnabled returns a boolean if a field has been set.
func (o *DfsFTPShareUpdateACLReq) HasUploadEnabled() bool {
	if o != nil && !IsNil(o.UploadEnabled) {
		return true
	}

	return false
}

// SetUploadEnabled gets a reference to the given bool and assigns it to the UploadEnabled field.
func (o *DfsFTPShareUpdateACLReq) SetUploadEnabled(v bool) {
	o.UploadEnabled = &v
}

func (o DfsFTPShareUpdateACLReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsFTPShareUpdateACLReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AdminEnabled) {
		toSerialize["admin_enabled"] = o.AdminEnabled
	}
	if !IsNil(o.CreateEnabled) {
		toSerialize["create_enabled"] = o.CreateEnabled
	}
	if !IsNil(o.DeleteEnabled) {
		toSerialize["delete_enabled"] = o.DeleteEnabled
	}
	if !IsNil(o.DownloadBandwidth) {
		toSerialize["download_bandwidth"] = o.DownloadBandwidth
	}
	if !IsNil(o.DownloadEnabled) {
		toSerialize["download_enabled"] = o.DownloadEnabled
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ListEnabled) {
		toSerialize["list_enabled"] = o.ListEnabled
	}
	if !IsNil(o.RenameEnabled) {
		toSerialize["rename_enabled"] = o.RenameEnabled
	}
	if !IsNil(o.UploadBandwidth) {
		toSerialize["upload_bandwidth"] = o.UploadBandwidth
	}
	if !IsNil(o.UploadEnabled) {
		toSerialize["upload_enabled"] = o.UploadEnabled
	}
	return toSerialize, nil
}

type NullableDfsFTPShareUpdateACLReq struct {
	value *DfsFTPShareUpdateACLReq
	isSet bool
}

func (v NullableDfsFTPShareUpdateACLReq) Get() *DfsFTPShareUpdateACLReq {
	return v.value
}

func (v *NullableDfsFTPShareUpdateACLReq) Set(val *DfsFTPShareUpdateACLReq) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsFTPShareUpdateACLReq) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsFTPShareUpdateACLReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsFTPShareUpdateACLReq(val *DfsFTPShareUpdateACLReq) *NullableDfsFTPShareUpdateACLReq {
	return &NullableDfsFTPShareUpdateACLReq{value: val, isSet: true}
}

func (v NullableDfsFTPShareUpdateACLReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsFTPShareUpdateACLReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


