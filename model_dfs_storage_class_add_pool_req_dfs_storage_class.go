/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DfsStorageClassAddPoolReqDfsStorageClass type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsStorageClassAddPoolReqDfsStorageClass{}

// DfsStorageClassAddPoolReqDfsStorageClass struct for DfsStorageClassAddPoolReqDfsStorageClass
type DfsStorageClassAddPoolReqDfsStorageClass struct {
	// active pool policy to add
	PoolPolicies []PoolPolicy `json:"pool_policies,omitempty"`
}

// NewDfsStorageClassAddPoolReqDfsStorageClass instantiates a new DfsStorageClassAddPoolReqDfsStorageClass object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsStorageClassAddPoolReqDfsStorageClass() *DfsStorageClassAddPoolReqDfsStorageClass {
	this := DfsStorageClassAddPoolReqDfsStorageClass{}
	return &this
}

// NewDfsStorageClassAddPoolReqDfsStorageClassWithDefaults instantiates a new DfsStorageClassAddPoolReqDfsStorageClass object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsStorageClassAddPoolReqDfsStorageClassWithDefaults() *DfsStorageClassAddPoolReqDfsStorageClass {
	this := DfsStorageClassAddPoolReqDfsStorageClass{}
	return &this
}

// GetPoolPolicies returns the PoolPolicies field value if set, zero value otherwise.
func (o *DfsStorageClassAddPoolReqDfsStorageClass) GetPoolPolicies() []PoolPolicy {
	if o == nil || IsNil(o.PoolPolicies) {
		var ret []PoolPolicy
		return ret
	}
	return o.PoolPolicies
}

// GetPoolPoliciesOk returns a tuple with the PoolPolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsStorageClassAddPoolReqDfsStorageClass) GetPoolPoliciesOk() ([]PoolPolicy, bool) {
	if o == nil || IsNil(o.PoolPolicies) {
		return nil, false
	}
	return o.PoolPolicies, true
}

// HasPoolPolicies returns a boolean if a field has been set.
func (o *DfsStorageClassAddPoolReqDfsStorageClass) HasPoolPolicies() bool {
	if o != nil && !IsNil(o.PoolPolicies) {
		return true
	}

	return false
}

// SetPoolPolicies gets a reference to the given []PoolPolicy and assigns it to the PoolPolicies field.
func (o *DfsStorageClassAddPoolReqDfsStorageClass) SetPoolPolicies(v []PoolPolicy) {
	o.PoolPolicies = v
}

func (o DfsStorageClassAddPoolReqDfsStorageClass) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsStorageClassAddPoolReqDfsStorageClass) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PoolPolicies) {
		toSerialize["pool_policies"] = o.PoolPolicies
	}
	return toSerialize, nil
}

type NullableDfsStorageClassAddPoolReqDfsStorageClass struct {
	value *DfsStorageClassAddPoolReqDfsStorageClass
	isSet bool
}

func (v NullableDfsStorageClassAddPoolReqDfsStorageClass) Get() *DfsStorageClassAddPoolReqDfsStorageClass {
	return v.value
}

func (v *NullableDfsStorageClassAddPoolReqDfsStorageClass) Set(val *DfsStorageClassAddPoolReqDfsStorageClass) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsStorageClassAddPoolReqDfsStorageClass) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsStorageClassAddPoolReqDfsStorageClass) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsStorageClassAddPoolReqDfsStorageClass(val *DfsStorageClassAddPoolReqDfsStorageClass) *NullableDfsStorageClassAddPoolReqDfsStorageClass {
	return &NullableDfsStorageClassAddPoolReqDfsStorageClass{value: val, isSet: true}
}

func (v NullableDfsStorageClassAddPoolReqDfsStorageClass) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsStorageClassAddPoolReqDfsStorageClass) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


