/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ChangePasswordReqReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChangePasswordReqReq{}

// ChangePasswordReqReq struct for ChangePasswordReqReq
type ChangePasswordReqReq struct {
	// encrypted original password for auth
	EncryptedOriginalPassword *string `json:"encrypted_original_password,omitempty"`
	// encrypted password for auth
	EncryptedPassword *string `json:"encrypted_password,omitempty"`
	// original password of user
	OriginalPassword string `json:"original_password"`
	// new password of user
	Password string `json:"password"`
	// rsa key id
	RsaKeyId *string `json:"rsa_key_id,omitempty"`
}

type _ChangePasswordReqReq ChangePasswordReqReq

// NewChangePasswordReqReq instantiates a new ChangePasswordReqReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangePasswordReqReq(originalPassword string, password string) *ChangePasswordReqReq {
	this := ChangePasswordReqReq{}
	this.OriginalPassword = originalPassword
	this.Password = password
	return &this
}

// NewChangePasswordReqReqWithDefaults instantiates a new ChangePasswordReqReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangePasswordReqReqWithDefaults() *ChangePasswordReqReq {
	this := ChangePasswordReqReq{}
	return &this
}

// GetEncryptedOriginalPassword returns the EncryptedOriginalPassword field value if set, zero value otherwise.
func (o *ChangePasswordReqReq) GetEncryptedOriginalPassword() string {
	if o == nil || IsNil(o.EncryptedOriginalPassword) {
		var ret string
		return ret
	}
	return *o.EncryptedOriginalPassword
}

// GetEncryptedOriginalPasswordOk returns a tuple with the EncryptedOriginalPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangePasswordReqReq) GetEncryptedOriginalPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.EncryptedOriginalPassword) {
		return nil, false
	}
	return o.EncryptedOriginalPassword, true
}

// HasEncryptedOriginalPassword returns a boolean if a field has been set.
func (o *ChangePasswordReqReq) HasEncryptedOriginalPassword() bool {
	if o != nil && !IsNil(o.EncryptedOriginalPassword) {
		return true
	}

	return false
}

// SetEncryptedOriginalPassword gets a reference to the given string and assigns it to the EncryptedOriginalPassword field.
func (o *ChangePasswordReqReq) SetEncryptedOriginalPassword(v string) {
	o.EncryptedOriginalPassword = &v
}

// GetEncryptedPassword returns the EncryptedPassword field value if set, zero value otherwise.
func (o *ChangePasswordReqReq) GetEncryptedPassword() string {
	if o == nil || IsNil(o.EncryptedPassword) {
		var ret string
		return ret
	}
	return *o.EncryptedPassword
}

// GetEncryptedPasswordOk returns a tuple with the EncryptedPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangePasswordReqReq) GetEncryptedPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.EncryptedPassword) {
		return nil, false
	}
	return o.EncryptedPassword, true
}

// HasEncryptedPassword returns a boolean if a field has been set.
func (o *ChangePasswordReqReq) HasEncryptedPassword() bool {
	if o != nil && !IsNil(o.EncryptedPassword) {
		return true
	}

	return false
}

// SetEncryptedPassword gets a reference to the given string and assigns it to the EncryptedPassword field.
func (o *ChangePasswordReqReq) SetEncryptedPassword(v string) {
	o.EncryptedPassword = &v
}

// GetOriginalPassword returns the OriginalPassword field value
func (o *ChangePasswordReqReq) GetOriginalPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OriginalPassword
}

// GetOriginalPasswordOk returns a tuple with the OriginalPassword field value
// and a boolean to check if the value has been set.
func (o *ChangePasswordReqReq) GetOriginalPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OriginalPassword, true
}

// SetOriginalPassword sets field value
func (o *ChangePasswordReqReq) SetOriginalPassword(v string) {
	o.OriginalPassword = v
}

// GetPassword returns the Password field value
func (o *ChangePasswordReqReq) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *ChangePasswordReqReq) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *ChangePasswordReqReq) SetPassword(v string) {
	o.Password = v
}

// GetRsaKeyId returns the RsaKeyId field value if set, zero value otherwise.
func (o *ChangePasswordReqReq) GetRsaKeyId() string {
	if o == nil || IsNil(o.RsaKeyId) {
		var ret string
		return ret
	}
	return *o.RsaKeyId
}

// GetRsaKeyIdOk returns a tuple with the RsaKeyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangePasswordReqReq) GetRsaKeyIdOk() (*string, bool) {
	if o == nil || IsNil(o.RsaKeyId) {
		return nil, false
	}
	return o.RsaKeyId, true
}

// HasRsaKeyId returns a boolean if a field has been set.
func (o *ChangePasswordReqReq) HasRsaKeyId() bool {
	if o != nil && !IsNil(o.RsaKeyId) {
		return true
	}

	return false
}

// SetRsaKeyId gets a reference to the given string and assigns it to the RsaKeyId field.
func (o *ChangePasswordReqReq) SetRsaKeyId(v string) {
	o.RsaKeyId = &v
}

func (o ChangePasswordReqReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChangePasswordReqReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EncryptedOriginalPassword) {
		toSerialize["encrypted_original_password"] = o.EncryptedOriginalPassword
	}
	if !IsNil(o.EncryptedPassword) {
		toSerialize["encrypted_password"] = o.EncryptedPassword
	}
	toSerialize["original_password"] = o.OriginalPassword
	toSerialize["password"] = o.Password
	if !IsNil(o.RsaKeyId) {
		toSerialize["rsa_key_id"] = o.RsaKeyId
	}
	return toSerialize, nil
}

func (o *ChangePasswordReqReq) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"original_password",
		"password",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChangePasswordReqReq := _ChangePasswordReqReq{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChangePasswordReqReq)

	if err != nil {
		return err
	}

	*o = ChangePasswordReqReq(varChangePasswordReqReq)

	return err
}

type NullableChangePasswordReqReq struct {
	value *ChangePasswordReqReq
	isSet bool
}

func (v NullableChangePasswordReqReq) Get() *ChangePasswordReqReq {
	return v.value
}

func (v *NullableChangePasswordReqReq) Set(val *ChangePasswordReqReq) {
	v.value = val
	v.isSet = true
}

func (v NullableChangePasswordReqReq) IsSet() bool {
	return v.isSet
}

func (v *NullableChangePasswordReqReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangePasswordReqReq(val *ChangePasswordReqReq) *NullableChangePasswordReqReq {
	return &NullableChangePasswordReqReq{value: val, isSet: true}
}

func (v NullableChangePasswordReqReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangePasswordReqReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


