/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the VipConnectionStat type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VipConnectionStat{}

// VipConnectionStat VipConnectionStat define vips connections stat
type VipConnectionStat struct {
	Connections *int64 `json:"connections,omitempty"`
	Vip *string `json:"vip,omitempty"`
}

// NewVipConnectionStat instantiates a new VipConnectionStat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVipConnectionStat() *VipConnectionStat {
	this := VipConnectionStat{}
	return &this
}

// NewVipConnectionStatWithDefaults instantiates a new VipConnectionStat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVipConnectionStatWithDefaults() *VipConnectionStat {
	this := VipConnectionStat{}
	return &this
}

// GetConnections returns the Connections field value if set, zero value otherwise.
func (o *VipConnectionStat) GetConnections() int64 {
	if o == nil || IsNil(o.Connections) {
		var ret int64
		return ret
	}
	return *o.Connections
}

// GetConnectionsOk returns a tuple with the Connections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VipConnectionStat) GetConnectionsOk() (*int64, bool) {
	if o == nil || IsNil(o.Connections) {
		return nil, false
	}
	return o.Connections, true
}

// HasConnections returns a boolean if a field has been set.
func (o *VipConnectionStat) HasConnections() bool {
	if o != nil && !IsNil(o.Connections) {
		return true
	}

	return false
}

// SetConnections gets a reference to the given int64 and assigns it to the Connections field.
func (o *VipConnectionStat) SetConnections(v int64) {
	o.Connections = &v
}

// GetVip returns the Vip field value if set, zero value otherwise.
func (o *VipConnectionStat) GetVip() string {
	if o == nil || IsNil(o.Vip) {
		var ret string
		return ret
	}
	return *o.Vip
}

// GetVipOk returns a tuple with the Vip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VipConnectionStat) GetVipOk() (*string, bool) {
	if o == nil || IsNil(o.Vip) {
		return nil, false
	}
	return o.Vip, true
}

// HasVip returns a boolean if a field has been set.
func (o *VipConnectionStat) HasVip() bool {
	if o != nil && !IsNil(o.Vip) {
		return true
	}

	return false
}

// SetVip gets a reference to the given string and assigns it to the Vip field.
func (o *VipConnectionStat) SetVip(v string) {
	o.Vip = &v
}

func (o VipConnectionStat) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VipConnectionStat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Connections) {
		toSerialize["connections"] = o.Connections
	}
	if !IsNil(o.Vip) {
		toSerialize["vip"] = o.Vip
	}
	return toSerialize, nil
}

type NullableVipConnectionStat struct {
	value *VipConnectionStat
	isSet bool
}

func (v NullableVipConnectionStat) Get() *VipConnectionStat {
	return v.value
}

func (v *NullableVipConnectionStat) Set(val *VipConnectionStat) {
	v.value = val
	v.isSet = true
}

func (v NullableVipConnectionStat) IsSet() bool {
	return v.isSet
}

func (v *NullableVipConnectionStat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVipConnectionStat(val *VipConnectionStat) *NullableVipConnectionStat {
	return &NullableVipConnectionStat{value: val, isSet: true}
}

func (v NullableVipConnectionStat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVipConnectionStat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


