/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DfsGatewayZoneCreateReqGatewayZone type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsGatewayZoneCreateReqGatewayZone{}

// DfsGatewayZoneCreateReqGatewayZone struct for DfsGatewayZoneCreateReqGatewayZone
type DfsGatewayZoneCreateReqGatewayZone struct {
	// id of dfs gateway group
	DfsGatewayGroupId int64 `json:"dfs_gateway_group_id"`
	// dfs gateways list
	DfsGateways []DfsGatewayReq `json:"dfs_gateways"`
	// vip gateway list
	DfsVipGateways []string `json:"dfs_vip_gateways,omitempty"`
	// vip list
	DfsVips []string `json:"dfs_vips"`
	// gateway zone name
	Name string `json:"name"`
}

type _DfsGatewayZoneCreateReqGatewayZone DfsGatewayZoneCreateReqGatewayZone

// NewDfsGatewayZoneCreateReqGatewayZone instantiates a new DfsGatewayZoneCreateReqGatewayZone object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsGatewayZoneCreateReqGatewayZone(dfsGatewayGroupId int64, dfsGateways []DfsGatewayReq, dfsVips []string, name string) *DfsGatewayZoneCreateReqGatewayZone {
	this := DfsGatewayZoneCreateReqGatewayZone{}
	this.DfsGatewayGroupId = dfsGatewayGroupId
	this.DfsGateways = dfsGateways
	this.DfsVips = dfsVips
	this.Name = name
	return &this
}

// NewDfsGatewayZoneCreateReqGatewayZoneWithDefaults instantiates a new DfsGatewayZoneCreateReqGatewayZone object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsGatewayZoneCreateReqGatewayZoneWithDefaults() *DfsGatewayZoneCreateReqGatewayZone {
	this := DfsGatewayZoneCreateReqGatewayZone{}
	return &this
}

// GetDfsGatewayGroupId returns the DfsGatewayGroupId field value
func (o *DfsGatewayZoneCreateReqGatewayZone) GetDfsGatewayGroupId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DfsGatewayGroupId
}

// GetDfsGatewayGroupIdOk returns a tuple with the DfsGatewayGroupId field value
// and a boolean to check if the value has been set.
func (o *DfsGatewayZoneCreateReqGatewayZone) GetDfsGatewayGroupIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DfsGatewayGroupId, true
}

// SetDfsGatewayGroupId sets field value
func (o *DfsGatewayZoneCreateReqGatewayZone) SetDfsGatewayGroupId(v int64) {
	o.DfsGatewayGroupId = v
}

// GetDfsGateways returns the DfsGateways field value
func (o *DfsGatewayZoneCreateReqGatewayZone) GetDfsGateways() []DfsGatewayReq {
	if o == nil {
		var ret []DfsGatewayReq
		return ret
	}

	return o.DfsGateways
}

// GetDfsGatewaysOk returns a tuple with the DfsGateways field value
// and a boolean to check if the value has been set.
func (o *DfsGatewayZoneCreateReqGatewayZone) GetDfsGatewaysOk() ([]DfsGatewayReq, bool) {
	if o == nil {
		return nil, false
	}
	return o.DfsGateways, true
}

// SetDfsGateways sets field value
func (o *DfsGatewayZoneCreateReqGatewayZone) SetDfsGateways(v []DfsGatewayReq) {
	o.DfsGateways = v
}

// GetDfsVipGateways returns the DfsVipGateways field value if set, zero value otherwise.
func (o *DfsGatewayZoneCreateReqGatewayZone) GetDfsVipGateways() []string {
	if o == nil || IsNil(o.DfsVipGateways) {
		var ret []string
		return ret
	}
	return o.DfsVipGateways
}

// GetDfsVipGatewaysOk returns a tuple with the DfsVipGateways field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsGatewayZoneCreateReqGatewayZone) GetDfsVipGatewaysOk() ([]string, bool) {
	if o == nil || IsNil(o.DfsVipGateways) {
		return nil, false
	}
	return o.DfsVipGateways, true
}

// HasDfsVipGateways returns a boolean if a field has been set.
func (o *DfsGatewayZoneCreateReqGatewayZone) HasDfsVipGateways() bool {
	if o != nil && !IsNil(o.DfsVipGateways) {
		return true
	}

	return false
}

// SetDfsVipGateways gets a reference to the given []string and assigns it to the DfsVipGateways field.
func (o *DfsGatewayZoneCreateReqGatewayZone) SetDfsVipGateways(v []string) {
	o.DfsVipGateways = v
}

// GetDfsVips returns the DfsVips field value
func (o *DfsGatewayZoneCreateReqGatewayZone) GetDfsVips() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.DfsVips
}

// GetDfsVipsOk returns a tuple with the DfsVips field value
// and a boolean to check if the value has been set.
func (o *DfsGatewayZoneCreateReqGatewayZone) GetDfsVipsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DfsVips, true
}

// SetDfsVips sets field value
func (o *DfsGatewayZoneCreateReqGatewayZone) SetDfsVips(v []string) {
	o.DfsVips = v
}

// GetName returns the Name field value
func (o *DfsGatewayZoneCreateReqGatewayZone) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DfsGatewayZoneCreateReqGatewayZone) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DfsGatewayZoneCreateReqGatewayZone) SetName(v string) {
	o.Name = v
}

func (o DfsGatewayZoneCreateReqGatewayZone) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsGatewayZoneCreateReqGatewayZone) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dfs_gateway_group_id"] = o.DfsGatewayGroupId
	toSerialize["dfs_gateways"] = o.DfsGateways
	if !IsNil(o.DfsVipGateways) {
		toSerialize["dfs_vip_gateways"] = o.DfsVipGateways
	}
	toSerialize["dfs_vips"] = o.DfsVips
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

func (o *DfsGatewayZoneCreateReqGatewayZone) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dfs_gateway_group_id",
		"dfs_gateways",
		"dfs_vips",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDfsGatewayZoneCreateReqGatewayZone := _DfsGatewayZoneCreateReqGatewayZone{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDfsGatewayZoneCreateReqGatewayZone)

	if err != nil {
		return err
	}

	*o = DfsGatewayZoneCreateReqGatewayZone(varDfsGatewayZoneCreateReqGatewayZone)

	return err
}

type NullableDfsGatewayZoneCreateReqGatewayZone struct {
	value *DfsGatewayZoneCreateReqGatewayZone
	isSet bool
}

func (v NullableDfsGatewayZoneCreateReqGatewayZone) Get() *DfsGatewayZoneCreateReqGatewayZone {
	return v.value
}

func (v *NullableDfsGatewayZoneCreateReqGatewayZone) Set(val *DfsGatewayZoneCreateReqGatewayZone) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsGatewayZoneCreateReqGatewayZone) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsGatewayZoneCreateReqGatewayZone) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsGatewayZoneCreateReqGatewayZone(val *DfsGatewayZoneCreateReqGatewayZone) *NullableDfsGatewayZoneCreateReqGatewayZone {
	return &NullableDfsGatewayZoneCreateReqGatewayZone{value: val, isSet: true}
}

func (v NullableDfsGatewayZoneCreateReqGatewayZone) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsGatewayZoneCreateReqGatewayZone) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


