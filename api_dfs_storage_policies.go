/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DfsStoragePoliciesAPIService DfsStoragePoliciesAPI service
type DfsStoragePoliciesAPIService service

type ApiCreateDfsStoragePolicyRequest struct {
	ctx context.Context
	ApiService *DfsStoragePoliciesAPIService
	body *DfsStoragePolicyCreateReq
}

// storagepolicy info
func (r ApiCreateDfsStoragePolicyRequest) Body(body DfsStoragePolicyCreateReq) ApiCreateDfsStoragePolicyRequest {
	r.body = &body
	return r
}

func (r ApiCreateDfsStoragePolicyRequest) Execute() (*DfsStoragePolicyResp, *http.Response, error) {
	return r.ApiService.CreateDfsStoragePolicyExecute(r)
}

/*
CreateDfsStoragePolicy Method for CreateDfsStoragePolicy

Create dfs storage policies

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateDfsStoragePolicyRequest
*/
func (a *DfsStoragePoliciesAPIService) CreateDfsStoragePolicy(ctx context.Context) ApiCreateDfsStoragePolicyRequest {
	return ApiCreateDfsStoragePolicyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DfsStoragePolicyResp
func (a *DfsStoragePoliciesAPIService) CreateDfsStoragePolicyExecute(r ApiCreateDfsStoragePolicyRequest) (*DfsStoragePolicyResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsStoragePolicyResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsStoragePoliciesAPIService.CreateDfsStoragePolicy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-storage-policies/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteDfsStoragePolicyRequest struct {
	ctx context.Context
	ApiService *DfsStoragePoliciesAPIService
	dfsStoragePolicyId int64
}

func (r ApiDeleteDfsStoragePolicyRequest) Execute() (*DfsStoragePolicyResp, *http.Response, error) {
	return r.ApiService.DeleteDfsStoragePolicyExecute(r)
}

/*
DeleteDfsStoragePolicy Method for DeleteDfsStoragePolicy

delete dfs storage policy

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dfsStoragePolicyId dfs storage policy id
 @return ApiDeleteDfsStoragePolicyRequest
*/
func (a *DfsStoragePoliciesAPIService) DeleteDfsStoragePolicy(ctx context.Context, dfsStoragePolicyId int64) ApiDeleteDfsStoragePolicyRequest {
	return ApiDeleteDfsStoragePolicyRequest{
		ApiService: a,
		ctx: ctx,
		dfsStoragePolicyId: dfsStoragePolicyId,
	}
}

// Execute executes the request
//  @return DfsStoragePolicyResp
func (a *DfsStoragePoliciesAPIService) DeleteDfsStoragePolicyExecute(r ApiDeleteDfsStoragePolicyRequest) (*DfsStoragePolicyResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsStoragePolicyResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsStoragePoliciesAPIService.DeleteDfsStoragePolicy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-storage-policies/{dfs_storage_policy_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"dfs_storage_policy_id"+"}", url.PathEscape(parameterValueToString(r.dfsStoragePolicyId, "dfsStoragePolicyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDfsStoragePolicyRequest struct {
	ctx context.Context
	ApiService *DfsStoragePoliciesAPIService
	dfsStoragePolicyId int64
}

func (r ApiGetDfsStoragePolicyRequest) Execute() (*DfsStoragePolicyResp, *http.Response, error) {
	return r.ApiService.GetDfsStoragePolicyExecute(r)
}

/*
GetDfsStoragePolicy Method for GetDfsStoragePolicy

Get dfs storage policy

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dfsStoragePolicyId dfs storage policy id
 @return ApiGetDfsStoragePolicyRequest
*/
func (a *DfsStoragePoliciesAPIService) GetDfsStoragePolicy(ctx context.Context, dfsStoragePolicyId int64) ApiGetDfsStoragePolicyRequest {
	return ApiGetDfsStoragePolicyRequest{
		ApiService: a,
		ctx: ctx,
		dfsStoragePolicyId: dfsStoragePolicyId,
	}
}

// Execute executes the request
//  @return DfsStoragePolicyResp
func (a *DfsStoragePoliciesAPIService) GetDfsStoragePolicyExecute(r ApiGetDfsStoragePolicyRequest) (*DfsStoragePolicyResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsStoragePolicyResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsStoragePoliciesAPIService.GetDfsStoragePolicy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-storage-policies/{dfs_storage_policy_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"dfs_storage_policy_id"+"}", url.PathEscape(parameterValueToString(r.dfsStoragePolicyId, "dfsStoragePolicyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListDfsStoragePoliciesRequest struct {
	ctx context.Context
	ApiService *DfsStoragePoliciesAPIService
	limit *int64
	offset *int64
	dfsRootfsId *int64
	dfsPathId *int64
	dfsStorageClassId *int64
	clusterId *string
}

// paging param
func (r ApiListDfsStoragePoliciesRequest) Limit(limit int64) ApiListDfsStoragePoliciesRequest {
	r.limit = &limit
	return r
}

// paging param
func (r ApiListDfsStoragePoliciesRequest) Offset(offset int64) ApiListDfsStoragePoliciesRequest {
	r.offset = &offset
	return r
}

// dfs rootfs id
func (r ApiListDfsStoragePoliciesRequest) DfsRootfsId(dfsRootfsId int64) ApiListDfsStoragePoliciesRequest {
	r.dfsRootfsId = &dfsRootfsId
	return r
}

// dfs path id
func (r ApiListDfsStoragePoliciesRequest) DfsPathId(dfsPathId int64) ApiListDfsStoragePoliciesRequest {
	r.dfsPathId = &dfsPathId
	return r
}

// dfs class id
func (r ApiListDfsStoragePoliciesRequest) DfsStorageClassId(dfsStorageClassId int64) ApiListDfsStoragePoliciesRequest {
	r.dfsStorageClassId = &dfsStorageClassId
	return r
}

// cluster id
func (r ApiListDfsStoragePoliciesRequest) ClusterId(clusterId string) ApiListDfsStoragePoliciesRequest {
	r.clusterId = &clusterId
	return r
}

func (r ApiListDfsStoragePoliciesRequest) Execute() (*DfsStoragePoliciesResp, *http.Response, error) {
	return r.ApiService.ListDfsStoragePoliciesExecute(r)
}

/*
ListDfsStoragePolicies Method for ListDfsStoragePolicies

List dfs Policies

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListDfsStoragePoliciesRequest
*/
func (a *DfsStoragePoliciesAPIService) ListDfsStoragePolicies(ctx context.Context) ApiListDfsStoragePoliciesRequest {
	return ApiListDfsStoragePoliciesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DfsStoragePoliciesResp
func (a *DfsStoragePoliciesAPIService) ListDfsStoragePoliciesExecute(r ApiListDfsStoragePoliciesRequest) (*DfsStoragePoliciesResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsStoragePoliciesResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsStoragePoliciesAPIService.ListDfsStoragePolicies")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-storage-policies/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.dfsRootfsId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dfs_rootfs_id", r.dfsRootfsId, "form", "")
	}
	if r.dfsPathId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dfs_path_id", r.dfsPathId, "form", "")
	}
	if r.dfsStorageClassId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dfs_storage_class_id", r.dfsStorageClassId, "form", "")
	}
	if r.clusterId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_id", r.clusterId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUnlinkDfsStoragePolicyAndDfsPathRequest struct {
	ctx context.Context
	ApiService *DfsStoragePoliciesAPIService
	dfsStoragePolicyId int64
	body *DfsStoragePolicyUnlinkDfsPathReq
}

// policy info
func (r ApiUnlinkDfsStoragePolicyAndDfsPathRequest) Body(body DfsStoragePolicyUnlinkDfsPathReq) ApiUnlinkDfsStoragePolicyAndDfsPathRequest {
	r.body = &body
	return r
}

func (r ApiUnlinkDfsStoragePolicyAndDfsPathRequest) Execute() (*DfsStoragePolicyResp, *http.Response, error) {
	return r.ApiService.UnlinkDfsStoragePolicyAndDfsPathExecute(r)
}

/*
UnlinkDfsStoragePolicyAndDfsPath Method for UnlinkDfsStoragePolicyAndDfsPath

Policy unlink Path

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dfsStoragePolicyId dfs storage policy id
 @return ApiUnlinkDfsStoragePolicyAndDfsPathRequest
*/
func (a *DfsStoragePoliciesAPIService) UnlinkDfsStoragePolicyAndDfsPath(ctx context.Context, dfsStoragePolicyId int64) ApiUnlinkDfsStoragePolicyAndDfsPathRequest {
	return ApiUnlinkDfsStoragePolicyAndDfsPathRequest{
		ApiService: a,
		ctx: ctx,
		dfsStoragePolicyId: dfsStoragePolicyId,
	}
}

// Execute executes the request
//  @return DfsStoragePolicyResp
func (a *DfsStoragePoliciesAPIService) UnlinkDfsStoragePolicyAndDfsPathExecute(r ApiUnlinkDfsStoragePolicyAndDfsPathRequest) (*DfsStoragePolicyResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsStoragePolicyResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsStoragePoliciesAPIService.UnlinkDfsStoragePolicyAndDfsPath")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-storage-policies/{dfs_storage_policy_id}:unlink-dfs-path"
	localVarPath = strings.Replace(localVarPath, "{"+"dfs_storage_policy_id"+"}", url.PathEscape(parameterValueToString(r.dfsStoragePolicyId, "dfsStoragePolicyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateDfsStoragePolicyRequest struct {
	ctx context.Context
	ApiService *DfsStoragePoliciesAPIService
	dfsStoragePolicyId int64
	body *DfsStoragePolicyUpdateReq
}

// storagepolicy info
func (r ApiUpdateDfsStoragePolicyRequest) Body(body DfsStoragePolicyUpdateReq) ApiUpdateDfsStoragePolicyRequest {
	r.body = &body
	return r
}

func (r ApiUpdateDfsStoragePolicyRequest) Execute() (*DfsStoragePolicyResp, *http.Response, error) {
	return r.ApiService.UpdateDfsStoragePolicyExecute(r)
}

/*
UpdateDfsStoragePolicy Method for UpdateDfsStoragePolicy

Update dfs storage policy

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dfsStoragePolicyId dfs storage policy id
 @return ApiUpdateDfsStoragePolicyRequest
*/
func (a *DfsStoragePoliciesAPIService) UpdateDfsStoragePolicy(ctx context.Context, dfsStoragePolicyId int64) ApiUpdateDfsStoragePolicyRequest {
	return ApiUpdateDfsStoragePolicyRequest{
		ApiService: a,
		ctx: ctx,
		dfsStoragePolicyId: dfsStoragePolicyId,
	}
}

// Execute executes the request
//  @return DfsStoragePolicyResp
func (a *DfsStoragePoliciesAPIService) UpdateDfsStoragePolicyExecute(r ApiUpdateDfsStoragePolicyRequest) (*DfsStoragePolicyResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsStoragePolicyResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsStoragePoliciesAPIService.UpdateDfsStoragePolicy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-storage-policies/{dfs_storage_policy_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"dfs_storage_policy_id"+"}", url.PathEscape(parameterValueToString(r.dfsStoragePolicyId, "dfsStoragePolicyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
