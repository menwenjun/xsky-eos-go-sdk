/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the DpBlockSnapshotRecoveryJobCreateReqJobBackupSnapshot type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DpBlockSnapshotRecoveryJobCreateReqJobBackupSnapshot{}

// DpBlockSnapshotRecoveryJobCreateReqJobBackupSnapshot struct for DpBlockSnapshotRecoveryJobCreateReqJobBackupSnapshot
type DpBlockSnapshotRecoveryJobCreateReqJobBackupSnapshot struct {
	Create time.Time `json:"create"`
	VolumeSize int64 `json:"volume_size"`
}

type _DpBlockSnapshotRecoveryJobCreateReqJobBackupSnapshot DpBlockSnapshotRecoveryJobCreateReqJobBackupSnapshot

// NewDpBlockSnapshotRecoveryJobCreateReqJobBackupSnapshot instantiates a new DpBlockSnapshotRecoveryJobCreateReqJobBackupSnapshot object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDpBlockSnapshotRecoveryJobCreateReqJobBackupSnapshot(create time.Time, volumeSize int64) *DpBlockSnapshotRecoveryJobCreateReqJobBackupSnapshot {
	this := DpBlockSnapshotRecoveryJobCreateReqJobBackupSnapshot{}
	this.Create = create
	this.VolumeSize = volumeSize
	return &this
}

// NewDpBlockSnapshotRecoveryJobCreateReqJobBackupSnapshotWithDefaults instantiates a new DpBlockSnapshotRecoveryJobCreateReqJobBackupSnapshot object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDpBlockSnapshotRecoveryJobCreateReqJobBackupSnapshotWithDefaults() *DpBlockSnapshotRecoveryJobCreateReqJobBackupSnapshot {
	this := DpBlockSnapshotRecoveryJobCreateReqJobBackupSnapshot{}
	return &this
}

// GetCreate returns the Create field value
func (o *DpBlockSnapshotRecoveryJobCreateReqJobBackupSnapshot) GetCreate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Create
}

// GetCreateOk returns a tuple with the Create field value
// and a boolean to check if the value has been set.
func (o *DpBlockSnapshotRecoveryJobCreateReqJobBackupSnapshot) GetCreateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Create, true
}

// SetCreate sets field value
func (o *DpBlockSnapshotRecoveryJobCreateReqJobBackupSnapshot) SetCreate(v time.Time) {
	o.Create = v
}

// GetVolumeSize returns the VolumeSize field value
func (o *DpBlockSnapshotRecoveryJobCreateReqJobBackupSnapshot) GetVolumeSize() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.VolumeSize
}

// GetVolumeSizeOk returns a tuple with the VolumeSize field value
// and a boolean to check if the value has been set.
func (o *DpBlockSnapshotRecoveryJobCreateReqJobBackupSnapshot) GetVolumeSizeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VolumeSize, true
}

// SetVolumeSize sets field value
func (o *DpBlockSnapshotRecoveryJobCreateReqJobBackupSnapshot) SetVolumeSize(v int64) {
	o.VolumeSize = v
}

func (o DpBlockSnapshotRecoveryJobCreateReqJobBackupSnapshot) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DpBlockSnapshotRecoveryJobCreateReqJobBackupSnapshot) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["create"] = o.Create
	toSerialize["volume_size"] = o.VolumeSize
	return toSerialize, nil
}

func (o *DpBlockSnapshotRecoveryJobCreateReqJobBackupSnapshot) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"create",
		"volume_size",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDpBlockSnapshotRecoveryJobCreateReqJobBackupSnapshot := _DpBlockSnapshotRecoveryJobCreateReqJobBackupSnapshot{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDpBlockSnapshotRecoveryJobCreateReqJobBackupSnapshot)

	if err != nil {
		return err
	}

	*o = DpBlockSnapshotRecoveryJobCreateReqJobBackupSnapshot(varDpBlockSnapshotRecoveryJobCreateReqJobBackupSnapshot)

	return err
}

type NullableDpBlockSnapshotRecoveryJobCreateReqJobBackupSnapshot struct {
	value *DpBlockSnapshotRecoveryJobCreateReqJobBackupSnapshot
	isSet bool
}

func (v NullableDpBlockSnapshotRecoveryJobCreateReqJobBackupSnapshot) Get() *DpBlockSnapshotRecoveryJobCreateReqJobBackupSnapshot {
	return v.value
}

func (v *NullableDpBlockSnapshotRecoveryJobCreateReqJobBackupSnapshot) Set(val *DpBlockSnapshotRecoveryJobCreateReqJobBackupSnapshot) {
	v.value = val
	v.isSet = true
}

func (v NullableDpBlockSnapshotRecoveryJobCreateReqJobBackupSnapshot) IsSet() bool {
	return v.isSet
}

func (v *NullableDpBlockSnapshotRecoveryJobCreateReqJobBackupSnapshot) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDpBlockSnapshotRecoveryJobCreateReqJobBackupSnapshot(val *DpBlockSnapshotRecoveryJobCreateReqJobBackupSnapshot) *NullableDpBlockSnapshotRecoveryJobCreateReqJobBackupSnapshot {
	return &NullableDpBlockSnapshotRecoveryJobCreateReqJobBackupSnapshot{value: val, isSet: true}
}

func (v NullableDpBlockSnapshotRecoveryJobCreateReqJobBackupSnapshot) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDpBlockSnapshotRecoveryJobCreateReqJobBackupSnapshot) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


