/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RBDClientValidateResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RBDClientValidateResult{}

// RBDClientValidateResult struct for RBDClientValidateResult
type RBDClientValidateResult struct {
	// admin ip of rbd client
	AdminIp *string `json:"admin_ip,omitempty"`
	// hostname of rbd client, only appears when name_exist is true
	Hostname *string `json:"hostname,omitempty"`
	// ip of rbd client already exist
	IpExist *bool `json:"ip_exist,omitempty"`
	// name of rbd client already exist
	NameExist *bool `json:"name_exist,omitempty"`
	// public ip of rbd client
	PublicIp *string `json:"public_ip,omitempty"`
	// token is invalid
	TokenInvalid *bool `json:"token_invalid,omitempty"`
	// rbd client is unreachable or not
	Unreachable *bool `json:"unreachable,omitempty"`
}

// NewRBDClientValidateResult instantiates a new RBDClientValidateResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRBDClientValidateResult() *RBDClientValidateResult {
	this := RBDClientValidateResult{}
	return &this
}

// NewRBDClientValidateResultWithDefaults instantiates a new RBDClientValidateResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRBDClientValidateResultWithDefaults() *RBDClientValidateResult {
	this := RBDClientValidateResult{}
	return &this
}

// GetAdminIp returns the AdminIp field value if set, zero value otherwise.
func (o *RBDClientValidateResult) GetAdminIp() string {
	if o == nil || IsNil(o.AdminIp) {
		var ret string
		return ret
	}
	return *o.AdminIp
}

// GetAdminIpOk returns a tuple with the AdminIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RBDClientValidateResult) GetAdminIpOk() (*string, bool) {
	if o == nil || IsNil(o.AdminIp) {
		return nil, false
	}
	return o.AdminIp, true
}

// HasAdminIp returns a boolean if a field has been set.
func (o *RBDClientValidateResult) HasAdminIp() bool {
	if o != nil && !IsNil(o.AdminIp) {
		return true
	}

	return false
}

// SetAdminIp gets a reference to the given string and assigns it to the AdminIp field.
func (o *RBDClientValidateResult) SetAdminIp(v string) {
	o.AdminIp = &v
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *RBDClientValidateResult) GetHostname() string {
	if o == nil || IsNil(o.Hostname) {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RBDClientValidateResult) GetHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.Hostname) {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *RBDClientValidateResult) HasHostname() bool {
	if o != nil && !IsNil(o.Hostname) {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *RBDClientValidateResult) SetHostname(v string) {
	o.Hostname = &v
}

// GetIpExist returns the IpExist field value if set, zero value otherwise.
func (o *RBDClientValidateResult) GetIpExist() bool {
	if o == nil || IsNil(o.IpExist) {
		var ret bool
		return ret
	}
	return *o.IpExist
}

// GetIpExistOk returns a tuple with the IpExist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RBDClientValidateResult) GetIpExistOk() (*bool, bool) {
	if o == nil || IsNil(o.IpExist) {
		return nil, false
	}
	return o.IpExist, true
}

// HasIpExist returns a boolean if a field has been set.
func (o *RBDClientValidateResult) HasIpExist() bool {
	if o != nil && !IsNil(o.IpExist) {
		return true
	}

	return false
}

// SetIpExist gets a reference to the given bool and assigns it to the IpExist field.
func (o *RBDClientValidateResult) SetIpExist(v bool) {
	o.IpExist = &v
}

// GetNameExist returns the NameExist field value if set, zero value otherwise.
func (o *RBDClientValidateResult) GetNameExist() bool {
	if o == nil || IsNil(o.NameExist) {
		var ret bool
		return ret
	}
	return *o.NameExist
}

// GetNameExistOk returns a tuple with the NameExist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RBDClientValidateResult) GetNameExistOk() (*bool, bool) {
	if o == nil || IsNil(o.NameExist) {
		return nil, false
	}
	return o.NameExist, true
}

// HasNameExist returns a boolean if a field has been set.
func (o *RBDClientValidateResult) HasNameExist() bool {
	if o != nil && !IsNil(o.NameExist) {
		return true
	}

	return false
}

// SetNameExist gets a reference to the given bool and assigns it to the NameExist field.
func (o *RBDClientValidateResult) SetNameExist(v bool) {
	o.NameExist = &v
}

// GetPublicIp returns the PublicIp field value if set, zero value otherwise.
func (o *RBDClientValidateResult) GetPublicIp() string {
	if o == nil || IsNil(o.PublicIp) {
		var ret string
		return ret
	}
	return *o.PublicIp
}

// GetPublicIpOk returns a tuple with the PublicIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RBDClientValidateResult) GetPublicIpOk() (*string, bool) {
	if o == nil || IsNil(o.PublicIp) {
		return nil, false
	}
	return o.PublicIp, true
}

// HasPublicIp returns a boolean if a field has been set.
func (o *RBDClientValidateResult) HasPublicIp() bool {
	if o != nil && !IsNil(o.PublicIp) {
		return true
	}

	return false
}

// SetPublicIp gets a reference to the given string and assigns it to the PublicIp field.
func (o *RBDClientValidateResult) SetPublicIp(v string) {
	o.PublicIp = &v
}

// GetTokenInvalid returns the TokenInvalid field value if set, zero value otherwise.
func (o *RBDClientValidateResult) GetTokenInvalid() bool {
	if o == nil || IsNil(o.TokenInvalid) {
		var ret bool
		return ret
	}
	return *o.TokenInvalid
}

// GetTokenInvalidOk returns a tuple with the TokenInvalid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RBDClientValidateResult) GetTokenInvalidOk() (*bool, bool) {
	if o == nil || IsNil(o.TokenInvalid) {
		return nil, false
	}
	return o.TokenInvalid, true
}

// HasTokenInvalid returns a boolean if a field has been set.
func (o *RBDClientValidateResult) HasTokenInvalid() bool {
	if o != nil && !IsNil(o.TokenInvalid) {
		return true
	}

	return false
}

// SetTokenInvalid gets a reference to the given bool and assigns it to the TokenInvalid field.
func (o *RBDClientValidateResult) SetTokenInvalid(v bool) {
	o.TokenInvalid = &v
}

// GetUnreachable returns the Unreachable field value if set, zero value otherwise.
func (o *RBDClientValidateResult) GetUnreachable() bool {
	if o == nil || IsNil(o.Unreachable) {
		var ret bool
		return ret
	}
	return *o.Unreachable
}

// GetUnreachableOk returns a tuple with the Unreachable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RBDClientValidateResult) GetUnreachableOk() (*bool, bool) {
	if o == nil || IsNil(o.Unreachable) {
		return nil, false
	}
	return o.Unreachable, true
}

// HasUnreachable returns a boolean if a field has been set.
func (o *RBDClientValidateResult) HasUnreachable() bool {
	if o != nil && !IsNil(o.Unreachable) {
		return true
	}

	return false
}

// SetUnreachable gets a reference to the given bool and assigns it to the Unreachable field.
func (o *RBDClientValidateResult) SetUnreachable(v bool) {
	o.Unreachable = &v
}

func (o RBDClientValidateResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RBDClientValidateResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AdminIp) {
		toSerialize["admin_ip"] = o.AdminIp
	}
	if !IsNil(o.Hostname) {
		toSerialize["hostname"] = o.Hostname
	}
	if !IsNil(o.IpExist) {
		toSerialize["ip_exist"] = o.IpExist
	}
	if !IsNil(o.NameExist) {
		toSerialize["name_exist"] = o.NameExist
	}
	if !IsNil(o.PublicIp) {
		toSerialize["public_ip"] = o.PublicIp
	}
	if !IsNil(o.TokenInvalid) {
		toSerialize["token_invalid"] = o.TokenInvalid
	}
	if !IsNil(o.Unreachable) {
		toSerialize["unreachable"] = o.Unreachable
	}
	return toSerialize, nil
}

type NullableRBDClientValidateResult struct {
	value *RBDClientValidateResult
	isSet bool
}

func (v NullableRBDClientValidateResult) Get() *RBDClientValidateResult {
	return v.value
}

func (v *NullableRBDClientValidateResult) Set(val *RBDClientValidateResult) {
	v.value = val
	v.isSet = true
}

func (v NullableRBDClientValidateResult) IsSet() bool {
	return v.isSet
}

func (v *NullableRBDClientValidateResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRBDClientValidateResult(val *RBDClientValidateResult) *NullableRBDClientValidateResult {
	return &NullableRBDClientValidateResult{value: val, isSet: true}
}

func (v NullableRBDClientValidateResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRBDClientValidateResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


