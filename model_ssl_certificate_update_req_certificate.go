/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SSLCertificateUpdateReqCertificate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SSLCertificateUpdateReqCertificate{}

// SSLCertificateUpdateReqCertificate struct for SSLCertificateUpdateReqCertificate
type SSLCertificateUpdateReqCertificate struct {
	// certificate description
	Description *string `json:"description,omitempty"`
	// enabled or not
	Enabled *bool `json:"enabled,omitempty"`
	// redirect http request to https
	ForceHttps *bool `json:"force_https,omitempty"`
	// global_apply or not
	GlobalApply *bool `json:"global_apply,omitempty"`
	// certificate name
	Name *string `json:"name,omitempty"`
	// s3 load balencer ids
	S3LoadBalancerGroupIds []int64 `json:"s3_load_balancer_group_ids,omitempty"`
	// applied type: admin, s3, dfs_s3
	Type *string `json:"type,omitempty"`
}

// NewSSLCertificateUpdateReqCertificate instantiates a new SSLCertificateUpdateReqCertificate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSSLCertificateUpdateReqCertificate() *SSLCertificateUpdateReqCertificate {
	this := SSLCertificateUpdateReqCertificate{}
	return &this
}

// NewSSLCertificateUpdateReqCertificateWithDefaults instantiates a new SSLCertificateUpdateReqCertificate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSSLCertificateUpdateReqCertificateWithDefaults() *SSLCertificateUpdateReqCertificate {
	this := SSLCertificateUpdateReqCertificate{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SSLCertificateUpdateReqCertificate) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLCertificateUpdateReqCertificate) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SSLCertificateUpdateReqCertificate) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SSLCertificateUpdateReqCertificate) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *SSLCertificateUpdateReqCertificate) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLCertificateUpdateReqCertificate) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *SSLCertificateUpdateReqCertificate) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *SSLCertificateUpdateReqCertificate) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetForceHttps returns the ForceHttps field value if set, zero value otherwise.
func (o *SSLCertificateUpdateReqCertificate) GetForceHttps() bool {
	if o == nil || IsNil(o.ForceHttps) {
		var ret bool
		return ret
	}
	return *o.ForceHttps
}

// GetForceHttpsOk returns a tuple with the ForceHttps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLCertificateUpdateReqCertificate) GetForceHttpsOk() (*bool, bool) {
	if o == nil || IsNil(o.ForceHttps) {
		return nil, false
	}
	return o.ForceHttps, true
}

// HasForceHttps returns a boolean if a field has been set.
func (o *SSLCertificateUpdateReqCertificate) HasForceHttps() bool {
	if o != nil && !IsNil(o.ForceHttps) {
		return true
	}

	return false
}

// SetForceHttps gets a reference to the given bool and assigns it to the ForceHttps field.
func (o *SSLCertificateUpdateReqCertificate) SetForceHttps(v bool) {
	o.ForceHttps = &v
}

// GetGlobalApply returns the GlobalApply field value if set, zero value otherwise.
func (o *SSLCertificateUpdateReqCertificate) GetGlobalApply() bool {
	if o == nil || IsNil(o.GlobalApply) {
		var ret bool
		return ret
	}
	return *o.GlobalApply
}

// GetGlobalApplyOk returns a tuple with the GlobalApply field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLCertificateUpdateReqCertificate) GetGlobalApplyOk() (*bool, bool) {
	if o == nil || IsNil(o.GlobalApply) {
		return nil, false
	}
	return o.GlobalApply, true
}

// HasGlobalApply returns a boolean if a field has been set.
func (o *SSLCertificateUpdateReqCertificate) HasGlobalApply() bool {
	if o != nil && !IsNil(o.GlobalApply) {
		return true
	}

	return false
}

// SetGlobalApply gets a reference to the given bool and assigns it to the GlobalApply field.
func (o *SSLCertificateUpdateReqCertificate) SetGlobalApply(v bool) {
	o.GlobalApply = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SSLCertificateUpdateReqCertificate) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLCertificateUpdateReqCertificate) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SSLCertificateUpdateReqCertificate) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SSLCertificateUpdateReqCertificate) SetName(v string) {
	o.Name = &v
}

// GetS3LoadBalancerGroupIds returns the S3LoadBalancerGroupIds field value if set, zero value otherwise.
func (o *SSLCertificateUpdateReqCertificate) GetS3LoadBalancerGroupIds() []int64 {
	if o == nil || IsNil(o.S3LoadBalancerGroupIds) {
		var ret []int64
		return ret
	}
	return o.S3LoadBalancerGroupIds
}

// GetS3LoadBalancerGroupIdsOk returns a tuple with the S3LoadBalancerGroupIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLCertificateUpdateReqCertificate) GetS3LoadBalancerGroupIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.S3LoadBalancerGroupIds) {
		return nil, false
	}
	return o.S3LoadBalancerGroupIds, true
}

// HasS3LoadBalancerGroupIds returns a boolean if a field has been set.
func (o *SSLCertificateUpdateReqCertificate) HasS3LoadBalancerGroupIds() bool {
	if o != nil && !IsNil(o.S3LoadBalancerGroupIds) {
		return true
	}

	return false
}

// SetS3LoadBalancerGroupIds gets a reference to the given []int64 and assigns it to the S3LoadBalancerGroupIds field.
func (o *SSLCertificateUpdateReqCertificate) SetS3LoadBalancerGroupIds(v []int64) {
	o.S3LoadBalancerGroupIds = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SSLCertificateUpdateReqCertificate) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLCertificateUpdateReqCertificate) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SSLCertificateUpdateReqCertificate) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SSLCertificateUpdateReqCertificate) SetType(v string) {
	o.Type = &v
}

func (o SSLCertificateUpdateReqCertificate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SSLCertificateUpdateReqCertificate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.ForceHttps) {
		toSerialize["force_https"] = o.ForceHttps
	}
	if !IsNil(o.GlobalApply) {
		toSerialize["global_apply"] = o.GlobalApply
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.S3LoadBalancerGroupIds) {
		toSerialize["s3_load_balancer_group_ids"] = o.S3LoadBalancerGroupIds
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableSSLCertificateUpdateReqCertificate struct {
	value *SSLCertificateUpdateReqCertificate
	isSet bool
}

func (v NullableSSLCertificateUpdateReqCertificate) Get() *SSLCertificateUpdateReqCertificate {
	return v.value
}

func (v *NullableSSLCertificateUpdateReqCertificate) Set(val *SSLCertificateUpdateReqCertificate) {
	v.value = val
	v.isSet = true
}

func (v NullableSSLCertificateUpdateReqCertificate) IsSet() bool {
	return v.isSet
}

func (v *NullableSSLCertificateUpdateReqCertificate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSSLCertificateUpdateReqCertificate(val *SSLCertificateUpdateReqCertificate) *NullableSSLCertificateUpdateReqCertificate {
	return &NullableSSLCertificateUpdateReqCertificate{value: val, isSet: true}
}

func (v NullableSSLCertificateUpdateReqCertificate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSSLCertificateUpdateReqCertificate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


