/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UsedQuota type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UsedQuota{}

// UsedQuota struct for UsedQuota
type UsedQuota struct {
	UsedArchiveCapacity int64 `json:"used_archive_capacity"`
	UsedCapacity int64 `json:"used_capacity"`
	UsedHddCapacity int64 `json:"used_hdd_capacity"`
	UsedHostNum int64 `json:"used_host_num"`
	UsedSsdCapacity int64 `json:"used_ssd_capacity"`
}

type _UsedQuota UsedQuota

// NewUsedQuota instantiates a new UsedQuota object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsedQuota(usedArchiveCapacity int64, usedCapacity int64, usedHddCapacity int64, usedHostNum int64, usedSsdCapacity int64) *UsedQuota {
	this := UsedQuota{}
	this.UsedArchiveCapacity = usedArchiveCapacity
	this.UsedCapacity = usedCapacity
	this.UsedHddCapacity = usedHddCapacity
	this.UsedHostNum = usedHostNum
	this.UsedSsdCapacity = usedSsdCapacity
	return &this
}

// NewUsedQuotaWithDefaults instantiates a new UsedQuota object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsedQuotaWithDefaults() *UsedQuota {
	this := UsedQuota{}
	return &this
}

// GetUsedArchiveCapacity returns the UsedArchiveCapacity field value
func (o *UsedQuota) GetUsedArchiveCapacity() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UsedArchiveCapacity
}

// GetUsedArchiveCapacityOk returns a tuple with the UsedArchiveCapacity field value
// and a boolean to check if the value has been set.
func (o *UsedQuota) GetUsedArchiveCapacityOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UsedArchiveCapacity, true
}

// SetUsedArchiveCapacity sets field value
func (o *UsedQuota) SetUsedArchiveCapacity(v int64) {
	o.UsedArchiveCapacity = v
}

// GetUsedCapacity returns the UsedCapacity field value
func (o *UsedQuota) GetUsedCapacity() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UsedCapacity
}

// GetUsedCapacityOk returns a tuple with the UsedCapacity field value
// and a boolean to check if the value has been set.
func (o *UsedQuota) GetUsedCapacityOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UsedCapacity, true
}

// SetUsedCapacity sets field value
func (o *UsedQuota) SetUsedCapacity(v int64) {
	o.UsedCapacity = v
}

// GetUsedHddCapacity returns the UsedHddCapacity field value
func (o *UsedQuota) GetUsedHddCapacity() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UsedHddCapacity
}

// GetUsedHddCapacityOk returns a tuple with the UsedHddCapacity field value
// and a boolean to check if the value has been set.
func (o *UsedQuota) GetUsedHddCapacityOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UsedHddCapacity, true
}

// SetUsedHddCapacity sets field value
func (o *UsedQuota) SetUsedHddCapacity(v int64) {
	o.UsedHddCapacity = v
}

// GetUsedHostNum returns the UsedHostNum field value
func (o *UsedQuota) GetUsedHostNum() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UsedHostNum
}

// GetUsedHostNumOk returns a tuple with the UsedHostNum field value
// and a boolean to check if the value has been set.
func (o *UsedQuota) GetUsedHostNumOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UsedHostNum, true
}

// SetUsedHostNum sets field value
func (o *UsedQuota) SetUsedHostNum(v int64) {
	o.UsedHostNum = v
}

// GetUsedSsdCapacity returns the UsedSsdCapacity field value
func (o *UsedQuota) GetUsedSsdCapacity() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UsedSsdCapacity
}

// GetUsedSsdCapacityOk returns a tuple with the UsedSsdCapacity field value
// and a boolean to check if the value has been set.
func (o *UsedQuota) GetUsedSsdCapacityOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UsedSsdCapacity, true
}

// SetUsedSsdCapacity sets field value
func (o *UsedQuota) SetUsedSsdCapacity(v int64) {
	o.UsedSsdCapacity = v
}

func (o UsedQuota) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UsedQuota) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["used_archive_capacity"] = o.UsedArchiveCapacity
	toSerialize["used_capacity"] = o.UsedCapacity
	toSerialize["used_hdd_capacity"] = o.UsedHddCapacity
	toSerialize["used_host_num"] = o.UsedHostNum
	toSerialize["used_ssd_capacity"] = o.UsedSsdCapacity
	return toSerialize, nil
}

func (o *UsedQuota) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"used_archive_capacity",
		"used_capacity",
		"used_hdd_capacity",
		"used_host_num",
		"used_ssd_capacity",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUsedQuota := _UsedQuota{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUsedQuota)

	if err != nil {
		return err
	}

	*o = UsedQuota(varUsedQuota)

	return err
}

type NullableUsedQuota struct {
	value *UsedQuota
	isSet bool
}

func (v NullableUsedQuota) Get() *UsedQuota {
	return v.value
}

func (v *NullableUsedQuota) Set(val *UsedQuota) {
	v.value = val
	v.isSet = true
}

func (v NullableUsedQuota) IsSet() bool {
	return v.isSet
}

func (v *NullableUsedQuota) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsedQuota(val *UsedQuota) *NullableUsedQuota {
	return &NullableUsedQuota{value: val, isSet: true}
}

func (v NullableUsedQuota) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsedQuota) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


