/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// S3LoadBalancersAPIService S3LoadBalancersAPI service
type S3LoadBalancersAPIService service

type ApiBatchGetS3LoadBalancerSamplesRequest struct {
	ctx context.Context
	ApiService *S3LoadBalancersAPIService
}

func (r ApiBatchGetS3LoadBalancerSamplesRequest) Execute() (*MultiS3LoadBalancersSamplesResp, *http.Response, error) {
	return r.ApiService.BatchGetS3LoadBalancerSamplesExecute(r)
}

/*
BatchGetS3LoadBalancerSamples Method for BatchGetS3LoadBalancerSamples

Get samples of multiple s3 load balancers

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBatchGetS3LoadBalancerSamplesRequest
*/
func (a *S3LoadBalancersAPIService) BatchGetS3LoadBalancerSamples(ctx context.Context) ApiBatchGetS3LoadBalancerSamplesRequest {
	return ApiBatchGetS3LoadBalancerSamplesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MultiS3LoadBalancersSamplesResp
func (a *S3LoadBalancersAPIService) BatchGetS3LoadBalancerSamplesExecute(r ApiBatchGetS3LoadBalancerSamplesRequest) (*MultiS3LoadBalancersSamplesResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MultiS3LoadBalancersSamplesResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "S3LoadBalancersAPIService.BatchGetS3LoadBalancerSamples")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/s3-load-balancers/samples"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetS3LoadBalancerRequest struct {
	ctx context.Context
	ApiService *S3LoadBalancersAPIService
	loadBalancerId int64
}

func (r ApiGetS3LoadBalancerRequest) Execute() (*S3LoadBalancerResp, *http.Response, error) {
	return r.ApiService.GetS3LoadBalancerExecute(r)
}

/*
GetS3LoadBalancer Method for GetS3LoadBalancer

Get s3 load balancer

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param loadBalancerId s3 load balancer id
 @return ApiGetS3LoadBalancerRequest
*/
func (a *S3LoadBalancersAPIService) GetS3LoadBalancer(ctx context.Context, loadBalancerId int64) ApiGetS3LoadBalancerRequest {
	return ApiGetS3LoadBalancerRequest{
		ApiService: a,
		ctx: ctx,
		loadBalancerId: loadBalancerId,
	}
}

// Execute executes the request
//  @return S3LoadBalancerResp
func (a *S3LoadBalancersAPIService) GetS3LoadBalancerExecute(r ApiGetS3LoadBalancerRequest) (*S3LoadBalancerResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *S3LoadBalancerResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "S3LoadBalancersAPIService.GetS3LoadBalancer")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/s3-load-balancers/{load_balancer_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"load_balancer_id"+"}", url.PathEscape(parameterValueToString(r.loadBalancerId, "loadBalancerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetS3LoadBalancerSamplesRequest struct {
	ctx context.Context
	ApiService *S3LoadBalancersAPIService
	s3LoadBalancerId int64
	durationBegin *string
	durationEnd *string
	period *string
}

// duration begin timestamp
func (r ApiGetS3LoadBalancerSamplesRequest) DurationBegin(durationBegin string) ApiGetS3LoadBalancerSamplesRequest {
	r.durationBegin = &durationBegin
	return r
}

// duration end timestamp
func (r ApiGetS3LoadBalancerSamplesRequest) DurationEnd(durationEnd string) ApiGetS3LoadBalancerSamplesRequest {
	r.durationEnd = &durationEnd
	return r
}

// samples period
func (r ApiGetS3LoadBalancerSamplesRequest) Period(period string) ApiGetS3LoadBalancerSamplesRequest {
	r.period = &period
	return r
}

func (r ApiGetS3LoadBalancerSamplesRequest) Execute() (*S3LoadBalancerSamplesResp, *http.Response, error) {
	return r.ApiService.GetS3LoadBalancerSamplesExecute(r)
}

/*
GetS3LoadBalancerSamples Method for GetS3LoadBalancerSamples

get a s3 load balancer's samples

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param s3LoadBalancerId s3 load balancer id
 @return ApiGetS3LoadBalancerSamplesRequest
*/
func (a *S3LoadBalancersAPIService) GetS3LoadBalancerSamples(ctx context.Context, s3LoadBalancerId int64) ApiGetS3LoadBalancerSamplesRequest {
	return ApiGetS3LoadBalancerSamplesRequest{
		ApiService: a,
		ctx: ctx,
		s3LoadBalancerId: s3LoadBalancerId,
	}
}

// Execute executes the request
//  @return S3LoadBalancerSamplesResp
func (a *S3LoadBalancersAPIService) GetS3LoadBalancerSamplesExecute(r ApiGetS3LoadBalancerSamplesRequest) (*S3LoadBalancerSamplesResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *S3LoadBalancerSamplesResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "S3LoadBalancersAPIService.GetS3LoadBalancerSamples")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/s3-load-balancers/{s3_load_balancer_id}/samples"
	localVarPath = strings.Replace(localVarPath, "{"+"s3_load_balancer_id"+"}", url.PathEscape(parameterValueToString(r.s3LoadBalancerId, "s3LoadBalancerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.durationBegin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration_begin", r.durationBegin, "form", "")
	}
	if r.durationEnd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration_end", r.durationEnd, "form", "")
	}
	if r.period != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "period", r.period, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListS3LoadBalancersRequest struct {
	ctx context.Context
	ApiService *S3LoadBalancersAPIService
	limit *int64
	offset *int64
	q *string
	sort *string
	clusterId *string
	groupId *int64
	ospZoneId *int64
	hostId *int64
}

// paging param
func (r ApiListS3LoadBalancersRequest) Limit(limit int64) ApiListS3LoadBalancersRequest {
	r.limit = &limit
	return r
}

// paging param
func (r ApiListS3LoadBalancersRequest) Offset(offset int64) ApiListS3LoadBalancersRequest {
	r.offset = &offset
	return r
}

// query param of search
func (r ApiListS3LoadBalancersRequest) Q(q string) ApiListS3LoadBalancersRequest {
	r.q = &q
	return r
}

// sort param of search
func (r ApiListS3LoadBalancersRequest) Sort(sort string) ApiListS3LoadBalancersRequest {
	r.sort = &sort
	return r
}

// cluster id
func (r ApiListS3LoadBalancersRequest) ClusterId(clusterId string) ApiListS3LoadBalancersRequest {
	r.clusterId = &clusterId
	return r
}

// s3 load balancer group id
func (r ApiListS3LoadBalancersRequest) GroupId(groupId int64) ApiListS3LoadBalancersRequest {
	r.groupId = &groupId
	return r
}

// osp zone id
func (r ApiListS3LoadBalancersRequest) OspZoneId(ospZoneId int64) ApiListS3LoadBalancersRequest {
	r.ospZoneId = &ospZoneId
	return r
}

// host id
func (r ApiListS3LoadBalancersRequest) HostId(hostId int64) ApiListS3LoadBalancersRequest {
	r.hostId = &hostId
	return r
}

func (r ApiListS3LoadBalancersRequest) Execute() (*S3LoadBalancersResp, *http.Response, error) {
	return r.ApiService.ListS3LoadBalancersExecute(r)
}

/*
ListS3LoadBalancers Method for ListS3LoadBalancers

List s3 load balancers

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListS3LoadBalancersRequest
*/
func (a *S3LoadBalancersAPIService) ListS3LoadBalancers(ctx context.Context) ApiListS3LoadBalancersRequest {
	return ApiListS3LoadBalancersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return S3LoadBalancersResp
func (a *S3LoadBalancersAPIService) ListS3LoadBalancersExecute(r ApiListS3LoadBalancersRequest) (*S3LoadBalancersResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *S3LoadBalancersResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "S3LoadBalancersAPIService.ListS3LoadBalancers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/s3-load-balancers/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.clusterId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_id", r.clusterId, "form", "")
	}
	if r.groupId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "group_id", r.groupId, "form", "")
	}
	if r.ospZoneId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "osp_zone_id", r.ospZoneId, "form", "")
	}
	if r.hostId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "host_id", r.hostId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
