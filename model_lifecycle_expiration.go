/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the LifecycleExpiration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LifecycleExpiration{}

// LifecycleExpiration LifecycleExpiration is the details of expiration of LifecycleRule
type LifecycleExpiration struct {
	Days *int64 `json:"days,omitempty"`
	StartAt *string `json:"start_at,omitempty"`
	StopAt *string `json:"stop_at,omitempty"`
	DeleteType *string `json:"delete_type,omitempty"`
}

// NewLifecycleExpiration instantiates a new LifecycleExpiration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLifecycleExpiration() *LifecycleExpiration {
	this := LifecycleExpiration{}
	return &this
}

// NewLifecycleExpirationWithDefaults instantiates a new LifecycleExpiration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLifecycleExpirationWithDefaults() *LifecycleExpiration {
	this := LifecycleExpiration{}
	return &this
}

// GetDays returns the Days field value if set, zero value otherwise.
func (o *LifecycleExpiration) GetDays() int64 {
	if o == nil || IsNil(o.Days) {
		var ret int64
		return ret
	}
	return *o.Days
}

// GetDaysOk returns a tuple with the Days field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LifecycleExpiration) GetDaysOk() (*int64, bool) {
	if o == nil || IsNil(o.Days) {
		return nil, false
	}
	return o.Days, true
}

// HasDays returns a boolean if a field has been set.
func (o *LifecycleExpiration) HasDays() bool {
	if o != nil && !IsNil(o.Days) {
		return true
	}

	return false
}

// SetDays gets a reference to the given int64 and assigns it to the Days field.
func (o *LifecycleExpiration) SetDays(v int64) {
	o.Days = &v
}

// GetStartAt returns the StartAt field value if set, zero value otherwise.
func (o *LifecycleExpiration) GetStartAt() string {
	if o == nil || IsNil(o.StartAt) {
		var ret string
		return ret
	}
	return *o.StartAt
}

// GetStartAtOk returns a tuple with the StartAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LifecycleExpiration) GetStartAtOk() (*string, bool) {
	if o == nil || IsNil(o.StartAt) {
		return nil, false
	}
	return o.StartAt, true
}

// HasStartAt returns a boolean if a field has been set.
func (o *LifecycleExpiration) HasStartAt() bool {
	if o != nil && !IsNil(o.StartAt) {
		return true
	}

	return false
}

// SetStartAt gets a reference to the given string and assigns it to the StartAt field.
func (o *LifecycleExpiration) SetStartAt(v string) {
	o.StartAt = &v
}

// GetStopAt returns the StopAt field value if set, zero value otherwise.
func (o *LifecycleExpiration) GetStopAt() string {
	if o == nil || IsNil(o.StopAt) {
		var ret string
		return ret
	}
	return *o.StopAt
}

// GetStopAtOk returns a tuple with the StopAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LifecycleExpiration) GetStopAtOk() (*string, bool) {
	if o == nil || IsNil(o.StopAt) {
		return nil, false
	}
	return o.StopAt, true
}

// HasStopAt returns a boolean if a field has been set.
func (o *LifecycleExpiration) HasStopAt() bool {
	if o != nil && !IsNil(o.StopAt) {
		return true
	}

	return false
}

// SetStopAt gets a reference to the given string and assigns it to the StopAt field.
func (o *LifecycleExpiration) SetStopAt(v string) {
	o.StopAt = &v
}

// GetDeleteType returns the DeleteType field value if set, zero value otherwise.
func (o *LifecycleExpiration) GetDeleteType() string {
	if o == nil || IsNil(o.DeleteType) {
		var ret string
		return ret
	}
	return *o.DeleteType
}

// GetDeleteTypeOk returns a tuple with the DeleteType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LifecycleExpiration) GetDeleteTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DeleteType) {
		return nil, false
	}
	return o.DeleteType, true
}

// HasDeleteType returns a boolean if a field has been set.
func (o *LifecycleExpiration) HasDeleteType() bool {
	if o != nil && !IsNil(o.DeleteType) {
		return true
	}

	return false
}

// SetDeleteType gets a reference to the given string and assigns it to the DeleteType field.
func (o *LifecycleExpiration) SetDeleteType(v string) {
	o.DeleteType = &v
}

func (o LifecycleExpiration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LifecycleExpiration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Days) {
		toSerialize["days"] = o.Days
	}
	if !IsNil(o.StartAt) {
		toSerialize["start_at"] = o.StartAt
	}
	if !IsNil(o.StopAt) {
		toSerialize["stop_at"] = o.StopAt
	}
	if !IsNil(o.DeleteType) {
		toSerialize["delete_type"] = o.DeleteType
	}
	return toSerialize, nil
}

type NullableLifecycleExpiration struct {
	value *LifecycleExpiration
	isSet bool
}

func (v NullableLifecycleExpiration) Get() *LifecycleExpiration {
	return v.value
}

func (v *NullableLifecycleExpiration) Set(val *LifecycleExpiration) {
	v.value = val
	v.isSet = true
}

func (v NullableLifecycleExpiration) IsSet() bool {
	return v.isSet
}

func (v *NullableLifecycleExpiration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLifecycleExpiration(val *LifecycleExpiration) *NullableLifecycleExpiration {
	return &NullableLifecycleExpiration{value: val, isSet: true}
}

func (v NullableLifecycleExpiration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLifecycleExpiration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


