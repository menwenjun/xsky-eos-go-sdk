/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EmailResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailResp{}

// EmailResp struct for EmailResp
type EmailResp struct {
	Email *Email `json:"email,omitempty"`
}

// NewEmailResp instantiates a new EmailResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailResp() *EmailResp {
	this := EmailResp{}
	return &this
}

// NewEmailRespWithDefaults instantiates a new EmailResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailRespWithDefaults() *EmailResp {
	this := EmailResp{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *EmailResp) GetEmail() Email {
	if o == nil || IsNil(o.Email) {
		var ret Email
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailResp) GetEmailOk() (*Email, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *EmailResp) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given Email and assigns it to the Email field.
func (o *EmailResp) SetEmail(v Email) {
	o.Email = &v
}

func (o EmailResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	return toSerialize, nil
}

type NullableEmailResp struct {
	value *EmailResp
	isSet bool
}

func (v NullableEmailResp) Get() *EmailResp {
	return v.value
}

func (v *NullableEmailResp) Set(val *EmailResp) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailResp) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailResp(val *EmailResp) *NullableEmailResp {
	return &NullableEmailResp{value: val, isSet: true}
}

func (v NullableEmailResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


