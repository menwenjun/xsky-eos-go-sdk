/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the PartitionStat type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PartitionStat{}

// PartitionStat PartitionStat defines the basic info of a PartitionStat
type PartitionStat struct {
	AvgQueueLen *float64 `json:"avg_queue_len,omitempty"`
	Create *time.Time `json:"create,omitempty"`
	IoUtil *float64 `json:"io_util,omitempty"`
	KbytePerIo *float64 `json:"kbyte_per_io,omitempty"`
	ReadBandwidthKbyte *float64 `json:"read_bandwidth_kbyte,omitempty"`
	ReadIops *float64 `json:"read_iops,omitempty"`
	ReadMergedPs *float64 `json:"read_merged_ps,omitempty"`
	ReadWaitUs *float64 `json:"read_wait_us,omitempty"`
	TotalBandwidthKbyte *float64 `json:"total_bandwidth_kbyte,omitempty"`
	TotalIoWaitUs *float64 `json:"total_io_wait_us,omitempty"`
	TotalIops *float64 `json:"total_iops,omitempty"`
	TotalKbyte *int64 `json:"total_kbyte,omitempty"`
	UsedKbyte *int64 `json:"used_kbyte,omitempty"`
	UsedPercent *float64 `json:"used_percent,omitempty"`
	WriteBandwidthKbyte *float64 `json:"write_bandwidth_kbyte,omitempty"`
	WriteIops *float64 `json:"write_iops,omitempty"`
	WriteMergedPs *float64 `json:"write_merged_ps,omitempty"`
	WriteWaitUs *float64 `json:"write_wait_us,omitempty"`
}

// NewPartitionStat instantiates a new PartitionStat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPartitionStat() *PartitionStat {
	this := PartitionStat{}
	return &this
}

// NewPartitionStatWithDefaults instantiates a new PartitionStat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPartitionStatWithDefaults() *PartitionStat {
	this := PartitionStat{}
	return &this
}

// GetAvgQueueLen returns the AvgQueueLen field value if set, zero value otherwise.
func (o *PartitionStat) GetAvgQueueLen() float64 {
	if o == nil || IsNil(o.AvgQueueLen) {
		var ret float64
		return ret
	}
	return *o.AvgQueueLen
}

// GetAvgQueueLenOk returns a tuple with the AvgQueueLen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionStat) GetAvgQueueLenOk() (*float64, bool) {
	if o == nil || IsNil(o.AvgQueueLen) {
		return nil, false
	}
	return o.AvgQueueLen, true
}

// HasAvgQueueLen returns a boolean if a field has been set.
func (o *PartitionStat) HasAvgQueueLen() bool {
	if o != nil && !IsNil(o.AvgQueueLen) {
		return true
	}

	return false
}

// SetAvgQueueLen gets a reference to the given float64 and assigns it to the AvgQueueLen field.
func (o *PartitionStat) SetAvgQueueLen(v float64) {
	o.AvgQueueLen = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *PartitionStat) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionStat) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *PartitionStat) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *PartitionStat) SetCreate(v time.Time) {
	o.Create = &v
}

// GetIoUtil returns the IoUtil field value if set, zero value otherwise.
func (o *PartitionStat) GetIoUtil() float64 {
	if o == nil || IsNil(o.IoUtil) {
		var ret float64
		return ret
	}
	return *o.IoUtil
}

// GetIoUtilOk returns a tuple with the IoUtil field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionStat) GetIoUtilOk() (*float64, bool) {
	if o == nil || IsNil(o.IoUtil) {
		return nil, false
	}
	return o.IoUtil, true
}

// HasIoUtil returns a boolean if a field has been set.
func (o *PartitionStat) HasIoUtil() bool {
	if o != nil && !IsNil(o.IoUtil) {
		return true
	}

	return false
}

// SetIoUtil gets a reference to the given float64 and assigns it to the IoUtil field.
func (o *PartitionStat) SetIoUtil(v float64) {
	o.IoUtil = &v
}

// GetKbytePerIo returns the KbytePerIo field value if set, zero value otherwise.
func (o *PartitionStat) GetKbytePerIo() float64 {
	if o == nil || IsNil(o.KbytePerIo) {
		var ret float64
		return ret
	}
	return *o.KbytePerIo
}

// GetKbytePerIoOk returns a tuple with the KbytePerIo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionStat) GetKbytePerIoOk() (*float64, bool) {
	if o == nil || IsNil(o.KbytePerIo) {
		return nil, false
	}
	return o.KbytePerIo, true
}

// HasKbytePerIo returns a boolean if a field has been set.
func (o *PartitionStat) HasKbytePerIo() bool {
	if o != nil && !IsNil(o.KbytePerIo) {
		return true
	}

	return false
}

// SetKbytePerIo gets a reference to the given float64 and assigns it to the KbytePerIo field.
func (o *PartitionStat) SetKbytePerIo(v float64) {
	o.KbytePerIo = &v
}

// GetReadBandwidthKbyte returns the ReadBandwidthKbyte field value if set, zero value otherwise.
func (o *PartitionStat) GetReadBandwidthKbyte() float64 {
	if o == nil || IsNil(o.ReadBandwidthKbyte) {
		var ret float64
		return ret
	}
	return *o.ReadBandwidthKbyte
}

// GetReadBandwidthKbyteOk returns a tuple with the ReadBandwidthKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionStat) GetReadBandwidthKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.ReadBandwidthKbyte) {
		return nil, false
	}
	return o.ReadBandwidthKbyte, true
}

// HasReadBandwidthKbyte returns a boolean if a field has been set.
func (o *PartitionStat) HasReadBandwidthKbyte() bool {
	if o != nil && !IsNil(o.ReadBandwidthKbyte) {
		return true
	}

	return false
}

// SetReadBandwidthKbyte gets a reference to the given float64 and assigns it to the ReadBandwidthKbyte field.
func (o *PartitionStat) SetReadBandwidthKbyte(v float64) {
	o.ReadBandwidthKbyte = &v
}

// GetReadIops returns the ReadIops field value if set, zero value otherwise.
func (o *PartitionStat) GetReadIops() float64 {
	if o == nil || IsNil(o.ReadIops) {
		var ret float64
		return ret
	}
	return *o.ReadIops
}

// GetReadIopsOk returns a tuple with the ReadIops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionStat) GetReadIopsOk() (*float64, bool) {
	if o == nil || IsNil(o.ReadIops) {
		return nil, false
	}
	return o.ReadIops, true
}

// HasReadIops returns a boolean if a field has been set.
func (o *PartitionStat) HasReadIops() bool {
	if o != nil && !IsNil(o.ReadIops) {
		return true
	}

	return false
}

// SetReadIops gets a reference to the given float64 and assigns it to the ReadIops field.
func (o *PartitionStat) SetReadIops(v float64) {
	o.ReadIops = &v
}

// GetReadMergedPs returns the ReadMergedPs field value if set, zero value otherwise.
func (o *PartitionStat) GetReadMergedPs() float64 {
	if o == nil || IsNil(o.ReadMergedPs) {
		var ret float64
		return ret
	}
	return *o.ReadMergedPs
}

// GetReadMergedPsOk returns a tuple with the ReadMergedPs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionStat) GetReadMergedPsOk() (*float64, bool) {
	if o == nil || IsNil(o.ReadMergedPs) {
		return nil, false
	}
	return o.ReadMergedPs, true
}

// HasReadMergedPs returns a boolean if a field has been set.
func (o *PartitionStat) HasReadMergedPs() bool {
	if o != nil && !IsNil(o.ReadMergedPs) {
		return true
	}

	return false
}

// SetReadMergedPs gets a reference to the given float64 and assigns it to the ReadMergedPs field.
func (o *PartitionStat) SetReadMergedPs(v float64) {
	o.ReadMergedPs = &v
}

// GetReadWaitUs returns the ReadWaitUs field value if set, zero value otherwise.
func (o *PartitionStat) GetReadWaitUs() float64 {
	if o == nil || IsNil(o.ReadWaitUs) {
		var ret float64
		return ret
	}
	return *o.ReadWaitUs
}

// GetReadWaitUsOk returns a tuple with the ReadWaitUs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionStat) GetReadWaitUsOk() (*float64, bool) {
	if o == nil || IsNil(o.ReadWaitUs) {
		return nil, false
	}
	return o.ReadWaitUs, true
}

// HasReadWaitUs returns a boolean if a field has been set.
func (o *PartitionStat) HasReadWaitUs() bool {
	if o != nil && !IsNil(o.ReadWaitUs) {
		return true
	}

	return false
}

// SetReadWaitUs gets a reference to the given float64 and assigns it to the ReadWaitUs field.
func (o *PartitionStat) SetReadWaitUs(v float64) {
	o.ReadWaitUs = &v
}

// GetTotalBandwidthKbyte returns the TotalBandwidthKbyte field value if set, zero value otherwise.
func (o *PartitionStat) GetTotalBandwidthKbyte() float64 {
	if o == nil || IsNil(o.TotalBandwidthKbyte) {
		var ret float64
		return ret
	}
	return *o.TotalBandwidthKbyte
}

// GetTotalBandwidthKbyteOk returns a tuple with the TotalBandwidthKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionStat) GetTotalBandwidthKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.TotalBandwidthKbyte) {
		return nil, false
	}
	return o.TotalBandwidthKbyte, true
}

// HasTotalBandwidthKbyte returns a boolean if a field has been set.
func (o *PartitionStat) HasTotalBandwidthKbyte() bool {
	if o != nil && !IsNil(o.TotalBandwidthKbyte) {
		return true
	}

	return false
}

// SetTotalBandwidthKbyte gets a reference to the given float64 and assigns it to the TotalBandwidthKbyte field.
func (o *PartitionStat) SetTotalBandwidthKbyte(v float64) {
	o.TotalBandwidthKbyte = &v
}

// GetTotalIoWaitUs returns the TotalIoWaitUs field value if set, zero value otherwise.
func (o *PartitionStat) GetTotalIoWaitUs() float64 {
	if o == nil || IsNil(o.TotalIoWaitUs) {
		var ret float64
		return ret
	}
	return *o.TotalIoWaitUs
}

// GetTotalIoWaitUsOk returns a tuple with the TotalIoWaitUs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionStat) GetTotalIoWaitUsOk() (*float64, bool) {
	if o == nil || IsNil(o.TotalIoWaitUs) {
		return nil, false
	}
	return o.TotalIoWaitUs, true
}

// HasTotalIoWaitUs returns a boolean if a field has been set.
func (o *PartitionStat) HasTotalIoWaitUs() bool {
	if o != nil && !IsNil(o.TotalIoWaitUs) {
		return true
	}

	return false
}

// SetTotalIoWaitUs gets a reference to the given float64 and assigns it to the TotalIoWaitUs field.
func (o *PartitionStat) SetTotalIoWaitUs(v float64) {
	o.TotalIoWaitUs = &v
}

// GetTotalIops returns the TotalIops field value if set, zero value otherwise.
func (o *PartitionStat) GetTotalIops() float64 {
	if o == nil || IsNil(o.TotalIops) {
		var ret float64
		return ret
	}
	return *o.TotalIops
}

// GetTotalIopsOk returns a tuple with the TotalIops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionStat) GetTotalIopsOk() (*float64, bool) {
	if o == nil || IsNil(o.TotalIops) {
		return nil, false
	}
	return o.TotalIops, true
}

// HasTotalIops returns a boolean if a field has been set.
func (o *PartitionStat) HasTotalIops() bool {
	if o != nil && !IsNil(o.TotalIops) {
		return true
	}

	return false
}

// SetTotalIops gets a reference to the given float64 and assigns it to the TotalIops field.
func (o *PartitionStat) SetTotalIops(v float64) {
	o.TotalIops = &v
}

// GetTotalKbyte returns the TotalKbyte field value if set, zero value otherwise.
func (o *PartitionStat) GetTotalKbyte() int64 {
	if o == nil || IsNil(o.TotalKbyte) {
		var ret int64
		return ret
	}
	return *o.TotalKbyte
}

// GetTotalKbyteOk returns a tuple with the TotalKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionStat) GetTotalKbyteOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalKbyte) {
		return nil, false
	}
	return o.TotalKbyte, true
}

// HasTotalKbyte returns a boolean if a field has been set.
func (o *PartitionStat) HasTotalKbyte() bool {
	if o != nil && !IsNil(o.TotalKbyte) {
		return true
	}

	return false
}

// SetTotalKbyte gets a reference to the given int64 and assigns it to the TotalKbyte field.
func (o *PartitionStat) SetTotalKbyte(v int64) {
	o.TotalKbyte = &v
}

// GetUsedKbyte returns the UsedKbyte field value if set, zero value otherwise.
func (o *PartitionStat) GetUsedKbyte() int64 {
	if o == nil || IsNil(o.UsedKbyte) {
		var ret int64
		return ret
	}
	return *o.UsedKbyte
}

// GetUsedKbyteOk returns a tuple with the UsedKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionStat) GetUsedKbyteOk() (*int64, bool) {
	if o == nil || IsNil(o.UsedKbyte) {
		return nil, false
	}
	return o.UsedKbyte, true
}

// HasUsedKbyte returns a boolean if a field has been set.
func (o *PartitionStat) HasUsedKbyte() bool {
	if o != nil && !IsNil(o.UsedKbyte) {
		return true
	}

	return false
}

// SetUsedKbyte gets a reference to the given int64 and assigns it to the UsedKbyte field.
func (o *PartitionStat) SetUsedKbyte(v int64) {
	o.UsedKbyte = &v
}

// GetUsedPercent returns the UsedPercent field value if set, zero value otherwise.
func (o *PartitionStat) GetUsedPercent() float64 {
	if o == nil || IsNil(o.UsedPercent) {
		var ret float64
		return ret
	}
	return *o.UsedPercent
}

// GetUsedPercentOk returns a tuple with the UsedPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionStat) GetUsedPercentOk() (*float64, bool) {
	if o == nil || IsNil(o.UsedPercent) {
		return nil, false
	}
	return o.UsedPercent, true
}

// HasUsedPercent returns a boolean if a field has been set.
func (o *PartitionStat) HasUsedPercent() bool {
	if o != nil && !IsNil(o.UsedPercent) {
		return true
	}

	return false
}

// SetUsedPercent gets a reference to the given float64 and assigns it to the UsedPercent field.
func (o *PartitionStat) SetUsedPercent(v float64) {
	o.UsedPercent = &v
}

// GetWriteBandwidthKbyte returns the WriteBandwidthKbyte field value if set, zero value otherwise.
func (o *PartitionStat) GetWriteBandwidthKbyte() float64 {
	if o == nil || IsNil(o.WriteBandwidthKbyte) {
		var ret float64
		return ret
	}
	return *o.WriteBandwidthKbyte
}

// GetWriteBandwidthKbyteOk returns a tuple with the WriteBandwidthKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionStat) GetWriteBandwidthKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.WriteBandwidthKbyte) {
		return nil, false
	}
	return o.WriteBandwidthKbyte, true
}

// HasWriteBandwidthKbyte returns a boolean if a field has been set.
func (o *PartitionStat) HasWriteBandwidthKbyte() bool {
	if o != nil && !IsNil(o.WriteBandwidthKbyte) {
		return true
	}

	return false
}

// SetWriteBandwidthKbyte gets a reference to the given float64 and assigns it to the WriteBandwidthKbyte field.
func (o *PartitionStat) SetWriteBandwidthKbyte(v float64) {
	o.WriteBandwidthKbyte = &v
}

// GetWriteIops returns the WriteIops field value if set, zero value otherwise.
func (o *PartitionStat) GetWriteIops() float64 {
	if o == nil || IsNil(o.WriteIops) {
		var ret float64
		return ret
	}
	return *o.WriteIops
}

// GetWriteIopsOk returns a tuple with the WriteIops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionStat) GetWriteIopsOk() (*float64, bool) {
	if o == nil || IsNil(o.WriteIops) {
		return nil, false
	}
	return o.WriteIops, true
}

// HasWriteIops returns a boolean if a field has been set.
func (o *PartitionStat) HasWriteIops() bool {
	if o != nil && !IsNil(o.WriteIops) {
		return true
	}

	return false
}

// SetWriteIops gets a reference to the given float64 and assigns it to the WriteIops field.
func (o *PartitionStat) SetWriteIops(v float64) {
	o.WriteIops = &v
}

// GetWriteMergedPs returns the WriteMergedPs field value if set, zero value otherwise.
func (o *PartitionStat) GetWriteMergedPs() float64 {
	if o == nil || IsNil(o.WriteMergedPs) {
		var ret float64
		return ret
	}
	return *o.WriteMergedPs
}

// GetWriteMergedPsOk returns a tuple with the WriteMergedPs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionStat) GetWriteMergedPsOk() (*float64, bool) {
	if o == nil || IsNil(o.WriteMergedPs) {
		return nil, false
	}
	return o.WriteMergedPs, true
}

// HasWriteMergedPs returns a boolean if a field has been set.
func (o *PartitionStat) HasWriteMergedPs() bool {
	if o != nil && !IsNil(o.WriteMergedPs) {
		return true
	}

	return false
}

// SetWriteMergedPs gets a reference to the given float64 and assigns it to the WriteMergedPs field.
func (o *PartitionStat) SetWriteMergedPs(v float64) {
	o.WriteMergedPs = &v
}

// GetWriteWaitUs returns the WriteWaitUs field value if set, zero value otherwise.
func (o *PartitionStat) GetWriteWaitUs() float64 {
	if o == nil || IsNil(o.WriteWaitUs) {
		var ret float64
		return ret
	}
	return *o.WriteWaitUs
}

// GetWriteWaitUsOk returns a tuple with the WriteWaitUs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionStat) GetWriteWaitUsOk() (*float64, bool) {
	if o == nil || IsNil(o.WriteWaitUs) {
		return nil, false
	}
	return o.WriteWaitUs, true
}

// HasWriteWaitUs returns a boolean if a field has been set.
func (o *PartitionStat) HasWriteWaitUs() bool {
	if o != nil && !IsNil(o.WriteWaitUs) {
		return true
	}

	return false
}

// SetWriteWaitUs gets a reference to the given float64 and assigns it to the WriteWaitUs field.
func (o *PartitionStat) SetWriteWaitUs(v float64) {
	o.WriteWaitUs = &v
}

func (o PartitionStat) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PartitionStat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AvgQueueLen) {
		toSerialize["avg_queue_len"] = o.AvgQueueLen
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.IoUtil) {
		toSerialize["io_util"] = o.IoUtil
	}
	if !IsNil(o.KbytePerIo) {
		toSerialize["kbyte_per_io"] = o.KbytePerIo
	}
	if !IsNil(o.ReadBandwidthKbyte) {
		toSerialize["read_bandwidth_kbyte"] = o.ReadBandwidthKbyte
	}
	if !IsNil(o.ReadIops) {
		toSerialize["read_iops"] = o.ReadIops
	}
	if !IsNil(o.ReadMergedPs) {
		toSerialize["read_merged_ps"] = o.ReadMergedPs
	}
	if !IsNil(o.ReadWaitUs) {
		toSerialize["read_wait_us"] = o.ReadWaitUs
	}
	if !IsNil(o.TotalBandwidthKbyte) {
		toSerialize["total_bandwidth_kbyte"] = o.TotalBandwidthKbyte
	}
	if !IsNil(o.TotalIoWaitUs) {
		toSerialize["total_io_wait_us"] = o.TotalIoWaitUs
	}
	if !IsNil(o.TotalIops) {
		toSerialize["total_iops"] = o.TotalIops
	}
	if !IsNil(o.TotalKbyte) {
		toSerialize["total_kbyte"] = o.TotalKbyte
	}
	if !IsNil(o.UsedKbyte) {
		toSerialize["used_kbyte"] = o.UsedKbyte
	}
	if !IsNil(o.UsedPercent) {
		toSerialize["used_percent"] = o.UsedPercent
	}
	if !IsNil(o.WriteBandwidthKbyte) {
		toSerialize["write_bandwidth_kbyte"] = o.WriteBandwidthKbyte
	}
	if !IsNil(o.WriteIops) {
		toSerialize["write_iops"] = o.WriteIops
	}
	if !IsNil(o.WriteMergedPs) {
		toSerialize["write_merged_ps"] = o.WriteMergedPs
	}
	if !IsNil(o.WriteWaitUs) {
		toSerialize["write_wait_us"] = o.WriteWaitUs
	}
	return toSerialize, nil
}

type NullablePartitionStat struct {
	value *PartitionStat
	isSet bool
}

func (v NullablePartitionStat) Get() *PartitionStat {
	return v.value
}

func (v *NullablePartitionStat) Set(val *PartitionStat) {
	v.value = val
	v.isSet = true
}

func (v NullablePartitionStat) IsSet() bool {
	return v.isSet
}

func (v *NullablePartitionStat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePartitionStat(val *PartitionStat) *NullablePartitionStat {
	return &NullablePartitionStat{value: val, isSet: true}
}

func (v NullablePartitionStat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePartitionStat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


