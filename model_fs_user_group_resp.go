/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FSUserGroupResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FSUserGroupResp{}

// FSUserGroupResp struct for FSUserGroupResp
type FSUserGroupResp struct {
	FsUserGroup FSUserGroup `json:"fs_user_group"`
}

type _FSUserGroupResp FSUserGroupResp

// NewFSUserGroupResp instantiates a new FSUserGroupResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFSUserGroupResp(fsUserGroup FSUserGroup) *FSUserGroupResp {
	this := FSUserGroupResp{}
	this.FsUserGroup = fsUserGroup
	return &this
}

// NewFSUserGroupRespWithDefaults instantiates a new FSUserGroupResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFSUserGroupRespWithDefaults() *FSUserGroupResp {
	this := FSUserGroupResp{}
	return &this
}

// GetFsUserGroup returns the FsUserGroup field value
func (o *FSUserGroupResp) GetFsUserGroup() FSUserGroup {
	if o == nil {
		var ret FSUserGroup
		return ret
	}

	return o.FsUserGroup
}

// GetFsUserGroupOk returns a tuple with the FsUserGroup field value
// and a boolean to check if the value has been set.
func (o *FSUserGroupResp) GetFsUserGroupOk() (*FSUserGroup, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FsUserGroup, true
}

// SetFsUserGroup sets field value
func (o *FSUserGroupResp) SetFsUserGroup(v FSUserGroup) {
	o.FsUserGroup = v
}

func (o FSUserGroupResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FSUserGroupResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fs_user_group"] = o.FsUserGroup
	return toSerialize, nil
}

func (o *FSUserGroupResp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fs_user_group",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFSUserGroupResp := _FSUserGroupResp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFSUserGroupResp)

	if err != nil {
		return err
	}

	*o = FSUserGroupResp(varFSUserGroupResp)

	return err
}

type NullableFSUserGroupResp struct {
	value *FSUserGroupResp
	isSet bool
}

func (v NullableFSUserGroupResp) Get() *FSUserGroupResp {
	return v.value
}

func (v *NullableFSUserGroupResp) Set(val *FSUserGroupResp) {
	v.value = val
	v.isSet = true
}

func (v NullableFSUserGroupResp) IsSet() bool {
	return v.isSet
}

func (v *NullableFSUserGroupResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFSUserGroupResp(val *FSUserGroupResp) *NullableFSUserGroupResp {
	return &NullableFSUserGroupResp{value: val, isSet: true}
}

func (v NullableFSUserGroupResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFSUserGroupResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


