/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BootNode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BootNode{}

// BootNode BootNode defines the status of boot node +X:model:generate +X:benchmark:
type BootNode struct {
	AdminNetwork string `json:"admin_network"`
	Cluster *ClusterNestview `json:"cluster,omitempty"`
	GatewayNetwork string `json:"gateway_network"`
	Host *HostNestview `json:"host,omitempty"`
	Id *int64 `json:"id,omitempty"`
	PrivateNetwork string `json:"private_network"`
	PublicNetwork string `json:"public_network"`
	Status *string `json:"status,omitempty"`
}

type _BootNode BootNode

// NewBootNode instantiates a new BootNode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBootNode(adminNetwork string, gatewayNetwork string, privateNetwork string, publicNetwork string) *BootNode {
	this := BootNode{}
	this.AdminNetwork = adminNetwork
	this.GatewayNetwork = gatewayNetwork
	this.PrivateNetwork = privateNetwork
	this.PublicNetwork = publicNetwork
	return &this
}

// NewBootNodeWithDefaults instantiates a new BootNode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBootNodeWithDefaults() *BootNode {
	this := BootNode{}
	return &this
}

// GetAdminNetwork returns the AdminNetwork field value
func (o *BootNode) GetAdminNetwork() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AdminNetwork
}

// GetAdminNetworkOk returns a tuple with the AdminNetwork field value
// and a boolean to check if the value has been set.
func (o *BootNode) GetAdminNetworkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AdminNetwork, true
}

// SetAdminNetwork sets field value
func (o *BootNode) SetAdminNetwork(v string) {
	o.AdminNetwork = v
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *BootNode) GetCluster() ClusterNestview {
	if o == nil || IsNil(o.Cluster) {
		var ret ClusterNestview
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BootNode) GetClusterOk() (*ClusterNestview, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *BootNode) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given ClusterNestview and assigns it to the Cluster field.
func (o *BootNode) SetCluster(v ClusterNestview) {
	o.Cluster = &v
}

// GetGatewayNetwork returns the GatewayNetwork field value
func (o *BootNode) GetGatewayNetwork() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GatewayNetwork
}

// GetGatewayNetworkOk returns a tuple with the GatewayNetwork field value
// and a boolean to check if the value has been set.
func (o *BootNode) GetGatewayNetworkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GatewayNetwork, true
}

// SetGatewayNetwork sets field value
func (o *BootNode) SetGatewayNetwork(v string) {
	o.GatewayNetwork = v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *BootNode) GetHost() HostNestview {
	if o == nil || IsNil(o.Host) {
		var ret HostNestview
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BootNode) GetHostOk() (*HostNestview, bool) {
	if o == nil || IsNil(o.Host) {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *BootNode) HasHost() bool {
	if o != nil && !IsNil(o.Host) {
		return true
	}

	return false
}

// SetHost gets a reference to the given HostNestview and assigns it to the Host field.
func (o *BootNode) SetHost(v HostNestview) {
	o.Host = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BootNode) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BootNode) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BootNode) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *BootNode) SetId(v int64) {
	o.Id = &v
}

// GetPrivateNetwork returns the PrivateNetwork field value
func (o *BootNode) GetPrivateNetwork() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PrivateNetwork
}

// GetPrivateNetworkOk returns a tuple with the PrivateNetwork field value
// and a boolean to check if the value has been set.
func (o *BootNode) GetPrivateNetworkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrivateNetwork, true
}

// SetPrivateNetwork sets field value
func (o *BootNode) SetPrivateNetwork(v string) {
	o.PrivateNetwork = v
}

// GetPublicNetwork returns the PublicNetwork field value
func (o *BootNode) GetPublicNetwork() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PublicNetwork
}

// GetPublicNetworkOk returns a tuple with the PublicNetwork field value
// and a boolean to check if the value has been set.
func (o *BootNode) GetPublicNetworkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PublicNetwork, true
}

// SetPublicNetwork sets field value
func (o *BootNode) SetPublicNetwork(v string) {
	o.PublicNetwork = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *BootNode) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BootNode) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *BootNode) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *BootNode) SetStatus(v string) {
	o.Status = &v
}

func (o BootNode) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BootNode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["admin_network"] = o.AdminNetwork
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	toSerialize["gateway_network"] = o.GatewayNetwork
	if !IsNil(o.Host) {
		toSerialize["host"] = o.Host
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["private_network"] = o.PrivateNetwork
	toSerialize["public_network"] = o.PublicNetwork
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

func (o *BootNode) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"admin_network",
		"gateway_network",
		"private_network",
		"public_network",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBootNode := _BootNode{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBootNode)

	if err != nil {
		return err
	}

	*o = BootNode(varBootNode)

	return err
}

type NullableBootNode struct {
	value *BootNode
	isSet bool
}

func (v NullableBootNode) Get() *BootNode {
	return v.value
}

func (v *NullableBootNode) Set(val *BootNode) {
	v.value = val
	v.isSet = true
}

func (v NullableBootNode) IsSet() bool {
	return v.isSet
}

func (v *NullableBootNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBootNode(val *BootNode) *NullableBootNode {
	return &NullableBootNode{value: val, isSet: true}
}

func (v NullableBootNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBootNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


