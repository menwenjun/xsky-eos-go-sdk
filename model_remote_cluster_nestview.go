/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RemoteClusterNestview type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RemoteClusterNestview{}

// RemoteClusterNestview struct for RemoteClusterNestview
type RemoteClusterNestview struct {
	FsId *string `json:"fs_id,omitempty"`
	Id *int64 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	RemoteClusterId *int64 `json:"remote_cluster_id,omitempty"`
	Url *string `json:"url,omitempty"`
}

// NewRemoteClusterNestview instantiates a new RemoteClusterNestview object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoteClusterNestview() *RemoteClusterNestview {
	this := RemoteClusterNestview{}
	return &this
}

// NewRemoteClusterNestviewWithDefaults instantiates a new RemoteClusterNestview object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoteClusterNestviewWithDefaults() *RemoteClusterNestview {
	this := RemoteClusterNestview{}
	return &this
}

// GetFsId returns the FsId field value if set, zero value otherwise.
func (o *RemoteClusterNestview) GetFsId() string {
	if o == nil || IsNil(o.FsId) {
		var ret string
		return ret
	}
	return *o.FsId
}

// GetFsIdOk returns a tuple with the FsId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteClusterNestview) GetFsIdOk() (*string, bool) {
	if o == nil || IsNil(o.FsId) {
		return nil, false
	}
	return o.FsId, true
}

// HasFsId returns a boolean if a field has been set.
func (o *RemoteClusterNestview) HasFsId() bool {
	if o != nil && !IsNil(o.FsId) {
		return true
	}

	return false
}

// SetFsId gets a reference to the given string and assigns it to the FsId field.
func (o *RemoteClusterNestview) SetFsId(v string) {
	o.FsId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RemoteClusterNestview) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteClusterNestview) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RemoteClusterNestview) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *RemoteClusterNestview) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RemoteClusterNestview) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteClusterNestview) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RemoteClusterNestview) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RemoteClusterNestview) SetName(v string) {
	o.Name = &v
}

// GetRemoteClusterId returns the RemoteClusterId field value if set, zero value otherwise.
func (o *RemoteClusterNestview) GetRemoteClusterId() int64 {
	if o == nil || IsNil(o.RemoteClusterId) {
		var ret int64
		return ret
	}
	return *o.RemoteClusterId
}

// GetRemoteClusterIdOk returns a tuple with the RemoteClusterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteClusterNestview) GetRemoteClusterIdOk() (*int64, bool) {
	if o == nil || IsNil(o.RemoteClusterId) {
		return nil, false
	}
	return o.RemoteClusterId, true
}

// HasRemoteClusterId returns a boolean if a field has been set.
func (o *RemoteClusterNestview) HasRemoteClusterId() bool {
	if o != nil && !IsNil(o.RemoteClusterId) {
		return true
	}

	return false
}

// SetRemoteClusterId gets a reference to the given int64 and assigns it to the RemoteClusterId field.
func (o *RemoteClusterNestview) SetRemoteClusterId(v int64) {
	o.RemoteClusterId = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *RemoteClusterNestview) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteClusterNestview) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *RemoteClusterNestview) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *RemoteClusterNestview) SetUrl(v string) {
	o.Url = &v
}

func (o RemoteClusterNestview) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RemoteClusterNestview) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FsId) {
		toSerialize["fs_id"] = o.FsId
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.RemoteClusterId) {
		toSerialize["remote_cluster_id"] = o.RemoteClusterId
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableRemoteClusterNestview struct {
	value *RemoteClusterNestview
	isSet bool
}

func (v NullableRemoteClusterNestview) Get() *RemoteClusterNestview {
	return v.value
}

func (v *NullableRemoteClusterNestview) Set(val *RemoteClusterNestview) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoteClusterNestview) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoteClusterNestview) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoteClusterNestview(val *RemoteClusterNestview) *NullableRemoteClusterNestview {
	return &NullableRemoteClusterNestview{value: val, isSet: true}
}

func (v NullableRemoteClusterNestview) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoteClusterNestview) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


