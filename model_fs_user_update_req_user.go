/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FSUserUpdateReqUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FSUserUpdateReqUser{}

// FSUserUpdateReqUser struct for FSUserUpdateReqUser
type FSUserUpdateReqUser struct {
	BucketLimit *int64 `json:"bucket_limit,omitempty"`
	BucketPath *string `json:"bucket_path,omitempty"`
	BucketPermission *string `json:"bucket_permission,omitempty"`
	GatewayGroupId *int64 `json:"gateway_group_id,omitempty"`
	S3Enabled *bool `json:"s3_enabled,omitempty"`
	S3Keys []S3Key `json:"s3_keys,omitempty"`
	// description of file storage user
	Description *string `json:"description,omitempty"`
	// email of user
	Email *string `json:"email,omitempty"`
	// name of user (deprecated, fs user name cannot be changed)
	Name *string `json:"name,omitempty"`
	// password of user
	Password *string `json:"password,omitempty"`
}

// NewFSUserUpdateReqUser instantiates a new FSUserUpdateReqUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFSUserUpdateReqUser() *FSUserUpdateReqUser {
	this := FSUserUpdateReqUser{}
	return &this
}

// NewFSUserUpdateReqUserWithDefaults instantiates a new FSUserUpdateReqUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFSUserUpdateReqUserWithDefaults() *FSUserUpdateReqUser {
	this := FSUserUpdateReqUser{}
	return &this
}

// GetBucketLimit returns the BucketLimit field value if set, zero value otherwise.
func (o *FSUserUpdateReqUser) GetBucketLimit() int64 {
	if o == nil || IsNil(o.BucketLimit) {
		var ret int64
		return ret
	}
	return *o.BucketLimit
}

// GetBucketLimitOk returns a tuple with the BucketLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSUserUpdateReqUser) GetBucketLimitOk() (*int64, bool) {
	if o == nil || IsNil(o.BucketLimit) {
		return nil, false
	}
	return o.BucketLimit, true
}

// HasBucketLimit returns a boolean if a field has been set.
func (o *FSUserUpdateReqUser) HasBucketLimit() bool {
	if o != nil && !IsNil(o.BucketLimit) {
		return true
	}

	return false
}

// SetBucketLimit gets a reference to the given int64 and assigns it to the BucketLimit field.
func (o *FSUserUpdateReqUser) SetBucketLimit(v int64) {
	o.BucketLimit = &v
}

// GetBucketPath returns the BucketPath field value if set, zero value otherwise.
func (o *FSUserUpdateReqUser) GetBucketPath() string {
	if o == nil || IsNil(o.BucketPath) {
		var ret string
		return ret
	}
	return *o.BucketPath
}

// GetBucketPathOk returns a tuple with the BucketPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSUserUpdateReqUser) GetBucketPathOk() (*string, bool) {
	if o == nil || IsNil(o.BucketPath) {
		return nil, false
	}
	return o.BucketPath, true
}

// HasBucketPath returns a boolean if a field has been set.
func (o *FSUserUpdateReqUser) HasBucketPath() bool {
	if o != nil && !IsNil(o.BucketPath) {
		return true
	}

	return false
}

// SetBucketPath gets a reference to the given string and assigns it to the BucketPath field.
func (o *FSUserUpdateReqUser) SetBucketPath(v string) {
	o.BucketPath = &v
}

// GetBucketPermission returns the BucketPermission field value if set, zero value otherwise.
func (o *FSUserUpdateReqUser) GetBucketPermission() string {
	if o == nil || IsNil(o.BucketPermission) {
		var ret string
		return ret
	}
	return *o.BucketPermission
}

// GetBucketPermissionOk returns a tuple with the BucketPermission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSUserUpdateReqUser) GetBucketPermissionOk() (*string, bool) {
	if o == nil || IsNil(o.BucketPermission) {
		return nil, false
	}
	return o.BucketPermission, true
}

// HasBucketPermission returns a boolean if a field has been set.
func (o *FSUserUpdateReqUser) HasBucketPermission() bool {
	if o != nil && !IsNil(o.BucketPermission) {
		return true
	}

	return false
}

// SetBucketPermission gets a reference to the given string and assigns it to the BucketPermission field.
func (o *FSUserUpdateReqUser) SetBucketPermission(v string) {
	o.BucketPermission = &v
}

// GetGatewayGroupId returns the GatewayGroupId field value if set, zero value otherwise.
func (o *FSUserUpdateReqUser) GetGatewayGroupId() int64 {
	if o == nil || IsNil(o.GatewayGroupId) {
		var ret int64
		return ret
	}
	return *o.GatewayGroupId
}

// GetGatewayGroupIdOk returns a tuple with the GatewayGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSUserUpdateReqUser) GetGatewayGroupIdOk() (*int64, bool) {
	if o == nil || IsNil(o.GatewayGroupId) {
		return nil, false
	}
	return o.GatewayGroupId, true
}

// HasGatewayGroupId returns a boolean if a field has been set.
func (o *FSUserUpdateReqUser) HasGatewayGroupId() bool {
	if o != nil && !IsNil(o.GatewayGroupId) {
		return true
	}

	return false
}

// SetGatewayGroupId gets a reference to the given int64 and assigns it to the GatewayGroupId field.
func (o *FSUserUpdateReqUser) SetGatewayGroupId(v int64) {
	o.GatewayGroupId = &v
}

// GetS3Enabled returns the S3Enabled field value if set, zero value otherwise.
func (o *FSUserUpdateReqUser) GetS3Enabled() bool {
	if o == nil || IsNil(o.S3Enabled) {
		var ret bool
		return ret
	}
	return *o.S3Enabled
}

// GetS3EnabledOk returns a tuple with the S3Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSUserUpdateReqUser) GetS3EnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.S3Enabled) {
		return nil, false
	}
	return o.S3Enabled, true
}

// HasS3Enabled returns a boolean if a field has been set.
func (o *FSUserUpdateReqUser) HasS3Enabled() bool {
	if o != nil && !IsNil(o.S3Enabled) {
		return true
	}

	return false
}

// SetS3Enabled gets a reference to the given bool and assigns it to the S3Enabled field.
func (o *FSUserUpdateReqUser) SetS3Enabled(v bool) {
	o.S3Enabled = &v
}

// GetS3Keys returns the S3Keys field value if set, zero value otherwise.
func (o *FSUserUpdateReqUser) GetS3Keys() []S3Key {
	if o == nil || IsNil(o.S3Keys) {
		var ret []S3Key
		return ret
	}
	return o.S3Keys
}

// GetS3KeysOk returns a tuple with the S3Keys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSUserUpdateReqUser) GetS3KeysOk() ([]S3Key, bool) {
	if o == nil || IsNil(o.S3Keys) {
		return nil, false
	}
	return o.S3Keys, true
}

// HasS3Keys returns a boolean if a field has been set.
func (o *FSUserUpdateReqUser) HasS3Keys() bool {
	if o != nil && !IsNil(o.S3Keys) {
		return true
	}

	return false
}

// SetS3Keys gets a reference to the given []S3Key and assigns it to the S3Keys field.
func (o *FSUserUpdateReqUser) SetS3Keys(v []S3Key) {
	o.S3Keys = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *FSUserUpdateReqUser) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSUserUpdateReqUser) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *FSUserUpdateReqUser) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *FSUserUpdateReqUser) SetDescription(v string) {
	o.Description = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *FSUserUpdateReqUser) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSUserUpdateReqUser) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *FSUserUpdateReqUser) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *FSUserUpdateReqUser) SetEmail(v string) {
	o.Email = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FSUserUpdateReqUser) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSUserUpdateReqUser) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FSUserUpdateReqUser) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FSUserUpdateReqUser) SetName(v string) {
	o.Name = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *FSUserUpdateReqUser) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSUserUpdateReqUser) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *FSUserUpdateReqUser) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *FSUserUpdateReqUser) SetPassword(v string) {
	o.Password = &v
}

func (o FSUserUpdateReqUser) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FSUserUpdateReqUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BucketLimit) {
		toSerialize["bucket_limit"] = o.BucketLimit
	}
	if !IsNil(o.BucketPath) {
		toSerialize["bucket_path"] = o.BucketPath
	}
	if !IsNil(o.BucketPermission) {
		toSerialize["bucket_permission"] = o.BucketPermission
	}
	if !IsNil(o.GatewayGroupId) {
		toSerialize["gateway_group_id"] = o.GatewayGroupId
	}
	if !IsNil(o.S3Enabled) {
		toSerialize["s3_enabled"] = o.S3Enabled
	}
	if !IsNil(o.S3Keys) {
		toSerialize["s3_keys"] = o.S3Keys
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	return toSerialize, nil
}

type NullableFSUserUpdateReqUser struct {
	value *FSUserUpdateReqUser
	isSet bool
}

func (v NullableFSUserUpdateReqUser) Get() *FSUserUpdateReqUser {
	return v.value
}

func (v *NullableFSUserUpdateReqUser) Set(val *FSUserUpdateReqUser) {
	v.value = val
	v.isSet = true
}

func (v NullableFSUserUpdateReqUser) IsSet() bool {
	return v.isSet
}

func (v *NullableFSUserUpdateReqUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFSUserUpdateReqUser(val *FSUserUpdateReqUser) *NullableFSUserUpdateReqUser {
	return &NullableFSUserUpdateReqUser{value: val, isSet: true}
}

func (v NullableFSUserUpdateReqUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFSUserUpdateReqUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


