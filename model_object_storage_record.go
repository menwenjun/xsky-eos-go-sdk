/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the ObjectStorageRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectStorageRecord{}

// ObjectStorageRecord ObjectStorageRecord combine ObjectStorage and ObjectStorageStat as API response
type ObjectStorageRecord struct {
	ActionStatus *string `json:"action_status,omitempty"`
	Cluster *ClusterNestview `json:"cluster,omitempty"`
	CnameEnabled *bool `json:"cname_enabled,omitempty"`
	Create *time.Time `json:"create,omitempty"`
	DnsNames []string `json:"dns_names,omitempty"`
	Id *int64 `json:"id,omitempty"`
	IndexPool *PoolNestview `json:"index_pool,omitempty"`
	LifecycleEndOn *string `json:"lifecycle_end_on,omitempty"`
	LifecycleStartOn *string `json:"lifecycle_start_on,omitempty"`
	MultiZoneEnabled *bool `json:"multi_zone_enabled,omitempty"`
	Name *string `json:"name,omitempty"`
	OriginPullHostIds []int64 `json:"origin_pull_host_ids,omitempty"`
	S3LbSystemUserAk *string `json:"s3_lb_system_user_ak,omitempty"`
	S3LbSystemUserSk *string `json:"s3_lb_system_user_sk,omitempty"`
	SearchEnabled *bool `json:"search_enabled,omitempty"`
	SecondMergenceEnabled *bool `json:"second_mergence_enabled,omitempty"`
	SecondMergenceEndOn *string `json:"second_mergence_end_on,omitempty"`
	SecondMergenceStartOn *string `json:"second_mergence_start_on,omitempty"`
	Status *string `json:"status,omitempty"`
	TieringHostIds []int64 `json:"tiering_host_ids,omitempty"`
	Update *time.Time `json:"update,omitempty"`
	Samples []ObjectStorageStat `json:"samples,omitempty"`
}

// NewObjectStorageRecord instantiates a new ObjectStorageRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectStorageRecord() *ObjectStorageRecord {
	this := ObjectStorageRecord{}
	return &this
}

// NewObjectStorageRecordWithDefaults instantiates a new ObjectStorageRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectStorageRecordWithDefaults() *ObjectStorageRecord {
	this := ObjectStorageRecord{}
	return &this
}

// GetActionStatus returns the ActionStatus field value if set, zero value otherwise.
func (o *ObjectStorageRecord) GetActionStatus() string {
	if o == nil || IsNil(o.ActionStatus) {
		var ret string
		return ret
	}
	return *o.ActionStatus
}

// GetActionStatusOk returns a tuple with the ActionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageRecord) GetActionStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ActionStatus) {
		return nil, false
	}
	return o.ActionStatus, true
}

// HasActionStatus returns a boolean if a field has been set.
func (o *ObjectStorageRecord) HasActionStatus() bool {
	if o != nil && !IsNil(o.ActionStatus) {
		return true
	}

	return false
}

// SetActionStatus gets a reference to the given string and assigns it to the ActionStatus field.
func (o *ObjectStorageRecord) SetActionStatus(v string) {
	o.ActionStatus = &v
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *ObjectStorageRecord) GetCluster() ClusterNestview {
	if o == nil || IsNil(o.Cluster) {
		var ret ClusterNestview
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageRecord) GetClusterOk() (*ClusterNestview, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *ObjectStorageRecord) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given ClusterNestview and assigns it to the Cluster field.
func (o *ObjectStorageRecord) SetCluster(v ClusterNestview) {
	o.Cluster = &v
}

// GetCnameEnabled returns the CnameEnabled field value if set, zero value otherwise.
func (o *ObjectStorageRecord) GetCnameEnabled() bool {
	if o == nil || IsNil(o.CnameEnabled) {
		var ret bool
		return ret
	}
	return *o.CnameEnabled
}

// GetCnameEnabledOk returns a tuple with the CnameEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageRecord) GetCnameEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.CnameEnabled) {
		return nil, false
	}
	return o.CnameEnabled, true
}

// HasCnameEnabled returns a boolean if a field has been set.
func (o *ObjectStorageRecord) HasCnameEnabled() bool {
	if o != nil && !IsNil(o.CnameEnabled) {
		return true
	}

	return false
}

// SetCnameEnabled gets a reference to the given bool and assigns it to the CnameEnabled field.
func (o *ObjectStorageRecord) SetCnameEnabled(v bool) {
	o.CnameEnabled = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *ObjectStorageRecord) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageRecord) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *ObjectStorageRecord) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *ObjectStorageRecord) SetCreate(v time.Time) {
	o.Create = &v
}

// GetDnsNames returns the DnsNames field value if set, zero value otherwise.
func (o *ObjectStorageRecord) GetDnsNames() []string {
	if o == nil || IsNil(o.DnsNames) {
		var ret []string
		return ret
	}
	return o.DnsNames
}

// GetDnsNamesOk returns a tuple with the DnsNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageRecord) GetDnsNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.DnsNames) {
		return nil, false
	}
	return o.DnsNames, true
}

// HasDnsNames returns a boolean if a field has been set.
func (o *ObjectStorageRecord) HasDnsNames() bool {
	if o != nil && !IsNil(o.DnsNames) {
		return true
	}

	return false
}

// SetDnsNames gets a reference to the given []string and assigns it to the DnsNames field.
func (o *ObjectStorageRecord) SetDnsNames(v []string) {
	o.DnsNames = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ObjectStorageRecord) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageRecord) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ObjectStorageRecord) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *ObjectStorageRecord) SetId(v int64) {
	o.Id = &v
}

// GetIndexPool returns the IndexPool field value if set, zero value otherwise.
func (o *ObjectStorageRecord) GetIndexPool() PoolNestview {
	if o == nil || IsNil(o.IndexPool) {
		var ret PoolNestview
		return ret
	}
	return *o.IndexPool
}

// GetIndexPoolOk returns a tuple with the IndexPool field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageRecord) GetIndexPoolOk() (*PoolNestview, bool) {
	if o == nil || IsNil(o.IndexPool) {
		return nil, false
	}
	return o.IndexPool, true
}

// HasIndexPool returns a boolean if a field has been set.
func (o *ObjectStorageRecord) HasIndexPool() bool {
	if o != nil && !IsNil(o.IndexPool) {
		return true
	}

	return false
}

// SetIndexPool gets a reference to the given PoolNestview and assigns it to the IndexPool field.
func (o *ObjectStorageRecord) SetIndexPool(v PoolNestview) {
	o.IndexPool = &v
}

// GetLifecycleEndOn returns the LifecycleEndOn field value if set, zero value otherwise.
func (o *ObjectStorageRecord) GetLifecycleEndOn() string {
	if o == nil || IsNil(o.LifecycleEndOn) {
		var ret string
		return ret
	}
	return *o.LifecycleEndOn
}

// GetLifecycleEndOnOk returns a tuple with the LifecycleEndOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageRecord) GetLifecycleEndOnOk() (*string, bool) {
	if o == nil || IsNil(o.LifecycleEndOn) {
		return nil, false
	}
	return o.LifecycleEndOn, true
}

// HasLifecycleEndOn returns a boolean if a field has been set.
func (o *ObjectStorageRecord) HasLifecycleEndOn() bool {
	if o != nil && !IsNil(o.LifecycleEndOn) {
		return true
	}

	return false
}

// SetLifecycleEndOn gets a reference to the given string and assigns it to the LifecycleEndOn field.
func (o *ObjectStorageRecord) SetLifecycleEndOn(v string) {
	o.LifecycleEndOn = &v
}

// GetLifecycleStartOn returns the LifecycleStartOn field value if set, zero value otherwise.
func (o *ObjectStorageRecord) GetLifecycleStartOn() string {
	if o == nil || IsNil(o.LifecycleStartOn) {
		var ret string
		return ret
	}
	return *o.LifecycleStartOn
}

// GetLifecycleStartOnOk returns a tuple with the LifecycleStartOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageRecord) GetLifecycleStartOnOk() (*string, bool) {
	if o == nil || IsNil(o.LifecycleStartOn) {
		return nil, false
	}
	return o.LifecycleStartOn, true
}

// HasLifecycleStartOn returns a boolean if a field has been set.
func (o *ObjectStorageRecord) HasLifecycleStartOn() bool {
	if o != nil && !IsNil(o.LifecycleStartOn) {
		return true
	}

	return false
}

// SetLifecycleStartOn gets a reference to the given string and assigns it to the LifecycleStartOn field.
func (o *ObjectStorageRecord) SetLifecycleStartOn(v string) {
	o.LifecycleStartOn = &v
}

// GetMultiZoneEnabled returns the MultiZoneEnabled field value if set, zero value otherwise.
func (o *ObjectStorageRecord) GetMultiZoneEnabled() bool {
	if o == nil || IsNil(o.MultiZoneEnabled) {
		var ret bool
		return ret
	}
	return *o.MultiZoneEnabled
}

// GetMultiZoneEnabledOk returns a tuple with the MultiZoneEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageRecord) GetMultiZoneEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.MultiZoneEnabled) {
		return nil, false
	}
	return o.MultiZoneEnabled, true
}

// HasMultiZoneEnabled returns a boolean if a field has been set.
func (o *ObjectStorageRecord) HasMultiZoneEnabled() bool {
	if o != nil && !IsNil(o.MultiZoneEnabled) {
		return true
	}

	return false
}

// SetMultiZoneEnabled gets a reference to the given bool and assigns it to the MultiZoneEnabled field.
func (o *ObjectStorageRecord) SetMultiZoneEnabled(v bool) {
	o.MultiZoneEnabled = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ObjectStorageRecord) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageRecord) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ObjectStorageRecord) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ObjectStorageRecord) SetName(v string) {
	o.Name = &v
}

// GetOriginPullHostIds returns the OriginPullHostIds field value if set, zero value otherwise.
func (o *ObjectStorageRecord) GetOriginPullHostIds() []int64 {
	if o == nil || IsNil(o.OriginPullHostIds) {
		var ret []int64
		return ret
	}
	return o.OriginPullHostIds
}

// GetOriginPullHostIdsOk returns a tuple with the OriginPullHostIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageRecord) GetOriginPullHostIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.OriginPullHostIds) {
		return nil, false
	}
	return o.OriginPullHostIds, true
}

// HasOriginPullHostIds returns a boolean if a field has been set.
func (o *ObjectStorageRecord) HasOriginPullHostIds() bool {
	if o != nil && !IsNil(o.OriginPullHostIds) {
		return true
	}

	return false
}

// SetOriginPullHostIds gets a reference to the given []int64 and assigns it to the OriginPullHostIds field.
func (o *ObjectStorageRecord) SetOriginPullHostIds(v []int64) {
	o.OriginPullHostIds = v
}

// GetS3LbSystemUserAk returns the S3LbSystemUserAk field value if set, zero value otherwise.
func (o *ObjectStorageRecord) GetS3LbSystemUserAk() string {
	if o == nil || IsNil(o.S3LbSystemUserAk) {
		var ret string
		return ret
	}
	return *o.S3LbSystemUserAk
}

// GetS3LbSystemUserAkOk returns a tuple with the S3LbSystemUserAk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageRecord) GetS3LbSystemUserAkOk() (*string, bool) {
	if o == nil || IsNil(o.S3LbSystemUserAk) {
		return nil, false
	}
	return o.S3LbSystemUserAk, true
}

// HasS3LbSystemUserAk returns a boolean if a field has been set.
func (o *ObjectStorageRecord) HasS3LbSystemUserAk() bool {
	if o != nil && !IsNil(o.S3LbSystemUserAk) {
		return true
	}

	return false
}

// SetS3LbSystemUserAk gets a reference to the given string and assigns it to the S3LbSystemUserAk field.
func (o *ObjectStorageRecord) SetS3LbSystemUserAk(v string) {
	o.S3LbSystemUserAk = &v
}

// GetS3LbSystemUserSk returns the S3LbSystemUserSk field value if set, zero value otherwise.
func (o *ObjectStorageRecord) GetS3LbSystemUserSk() string {
	if o == nil || IsNil(o.S3LbSystemUserSk) {
		var ret string
		return ret
	}
	return *o.S3LbSystemUserSk
}

// GetS3LbSystemUserSkOk returns a tuple with the S3LbSystemUserSk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageRecord) GetS3LbSystemUserSkOk() (*string, bool) {
	if o == nil || IsNil(o.S3LbSystemUserSk) {
		return nil, false
	}
	return o.S3LbSystemUserSk, true
}

// HasS3LbSystemUserSk returns a boolean if a field has been set.
func (o *ObjectStorageRecord) HasS3LbSystemUserSk() bool {
	if o != nil && !IsNil(o.S3LbSystemUserSk) {
		return true
	}

	return false
}

// SetS3LbSystemUserSk gets a reference to the given string and assigns it to the S3LbSystemUserSk field.
func (o *ObjectStorageRecord) SetS3LbSystemUserSk(v string) {
	o.S3LbSystemUserSk = &v
}

// GetSearchEnabled returns the SearchEnabled field value if set, zero value otherwise.
func (o *ObjectStorageRecord) GetSearchEnabled() bool {
	if o == nil || IsNil(o.SearchEnabled) {
		var ret bool
		return ret
	}
	return *o.SearchEnabled
}

// GetSearchEnabledOk returns a tuple with the SearchEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageRecord) GetSearchEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.SearchEnabled) {
		return nil, false
	}
	return o.SearchEnabled, true
}

// HasSearchEnabled returns a boolean if a field has been set.
func (o *ObjectStorageRecord) HasSearchEnabled() bool {
	if o != nil && !IsNil(o.SearchEnabled) {
		return true
	}

	return false
}

// SetSearchEnabled gets a reference to the given bool and assigns it to the SearchEnabled field.
func (o *ObjectStorageRecord) SetSearchEnabled(v bool) {
	o.SearchEnabled = &v
}

// GetSecondMergenceEnabled returns the SecondMergenceEnabled field value if set, zero value otherwise.
func (o *ObjectStorageRecord) GetSecondMergenceEnabled() bool {
	if o == nil || IsNil(o.SecondMergenceEnabled) {
		var ret bool
		return ret
	}
	return *o.SecondMergenceEnabled
}

// GetSecondMergenceEnabledOk returns a tuple with the SecondMergenceEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageRecord) GetSecondMergenceEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.SecondMergenceEnabled) {
		return nil, false
	}
	return o.SecondMergenceEnabled, true
}

// HasSecondMergenceEnabled returns a boolean if a field has been set.
func (o *ObjectStorageRecord) HasSecondMergenceEnabled() bool {
	if o != nil && !IsNil(o.SecondMergenceEnabled) {
		return true
	}

	return false
}

// SetSecondMergenceEnabled gets a reference to the given bool and assigns it to the SecondMergenceEnabled field.
func (o *ObjectStorageRecord) SetSecondMergenceEnabled(v bool) {
	o.SecondMergenceEnabled = &v
}

// GetSecondMergenceEndOn returns the SecondMergenceEndOn field value if set, zero value otherwise.
func (o *ObjectStorageRecord) GetSecondMergenceEndOn() string {
	if o == nil || IsNil(o.SecondMergenceEndOn) {
		var ret string
		return ret
	}
	return *o.SecondMergenceEndOn
}

// GetSecondMergenceEndOnOk returns a tuple with the SecondMergenceEndOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageRecord) GetSecondMergenceEndOnOk() (*string, bool) {
	if o == nil || IsNil(o.SecondMergenceEndOn) {
		return nil, false
	}
	return o.SecondMergenceEndOn, true
}

// HasSecondMergenceEndOn returns a boolean if a field has been set.
func (o *ObjectStorageRecord) HasSecondMergenceEndOn() bool {
	if o != nil && !IsNil(o.SecondMergenceEndOn) {
		return true
	}

	return false
}

// SetSecondMergenceEndOn gets a reference to the given string and assigns it to the SecondMergenceEndOn field.
func (o *ObjectStorageRecord) SetSecondMergenceEndOn(v string) {
	o.SecondMergenceEndOn = &v
}

// GetSecondMergenceStartOn returns the SecondMergenceStartOn field value if set, zero value otherwise.
func (o *ObjectStorageRecord) GetSecondMergenceStartOn() string {
	if o == nil || IsNil(o.SecondMergenceStartOn) {
		var ret string
		return ret
	}
	return *o.SecondMergenceStartOn
}

// GetSecondMergenceStartOnOk returns a tuple with the SecondMergenceStartOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageRecord) GetSecondMergenceStartOnOk() (*string, bool) {
	if o == nil || IsNil(o.SecondMergenceStartOn) {
		return nil, false
	}
	return o.SecondMergenceStartOn, true
}

// HasSecondMergenceStartOn returns a boolean if a field has been set.
func (o *ObjectStorageRecord) HasSecondMergenceStartOn() bool {
	if o != nil && !IsNil(o.SecondMergenceStartOn) {
		return true
	}

	return false
}

// SetSecondMergenceStartOn gets a reference to the given string and assigns it to the SecondMergenceStartOn field.
func (o *ObjectStorageRecord) SetSecondMergenceStartOn(v string) {
	o.SecondMergenceStartOn = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ObjectStorageRecord) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageRecord) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ObjectStorageRecord) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ObjectStorageRecord) SetStatus(v string) {
	o.Status = &v
}

// GetTieringHostIds returns the TieringHostIds field value if set, zero value otherwise.
func (o *ObjectStorageRecord) GetTieringHostIds() []int64 {
	if o == nil || IsNil(o.TieringHostIds) {
		var ret []int64
		return ret
	}
	return o.TieringHostIds
}

// GetTieringHostIdsOk returns a tuple with the TieringHostIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageRecord) GetTieringHostIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.TieringHostIds) {
		return nil, false
	}
	return o.TieringHostIds, true
}

// HasTieringHostIds returns a boolean if a field has been set.
func (o *ObjectStorageRecord) HasTieringHostIds() bool {
	if o != nil && !IsNil(o.TieringHostIds) {
		return true
	}

	return false
}

// SetTieringHostIds gets a reference to the given []int64 and assigns it to the TieringHostIds field.
func (o *ObjectStorageRecord) SetTieringHostIds(v []int64) {
	o.TieringHostIds = v
}

// GetUpdate returns the Update field value if set, zero value otherwise.
func (o *ObjectStorageRecord) GetUpdate() time.Time {
	if o == nil || IsNil(o.Update) {
		var ret time.Time
		return ret
	}
	return *o.Update
}

// GetUpdateOk returns a tuple with the Update field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageRecord) GetUpdateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Update) {
		return nil, false
	}
	return o.Update, true
}

// HasUpdate returns a boolean if a field has been set.
func (o *ObjectStorageRecord) HasUpdate() bool {
	if o != nil && !IsNil(o.Update) {
		return true
	}

	return false
}

// SetUpdate gets a reference to the given time.Time and assigns it to the Update field.
func (o *ObjectStorageRecord) SetUpdate(v time.Time) {
	o.Update = &v
}

// GetSamples returns the Samples field value if set, zero value otherwise.
func (o *ObjectStorageRecord) GetSamples() []ObjectStorageStat {
	if o == nil || IsNil(o.Samples) {
		var ret []ObjectStorageStat
		return ret
	}
	return o.Samples
}

// GetSamplesOk returns a tuple with the Samples field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageRecord) GetSamplesOk() ([]ObjectStorageStat, bool) {
	if o == nil || IsNil(o.Samples) {
		return nil, false
	}
	return o.Samples, true
}

// HasSamples returns a boolean if a field has been set.
func (o *ObjectStorageRecord) HasSamples() bool {
	if o != nil && !IsNil(o.Samples) {
		return true
	}

	return false
}

// SetSamples gets a reference to the given []ObjectStorageStat and assigns it to the Samples field.
func (o *ObjectStorageRecord) SetSamples(v []ObjectStorageStat) {
	o.Samples = v
}

func (o ObjectStorageRecord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectStorageRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActionStatus) {
		toSerialize["action_status"] = o.ActionStatus
	}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !IsNil(o.CnameEnabled) {
		toSerialize["cname_enabled"] = o.CnameEnabled
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.DnsNames) {
		toSerialize["dns_names"] = o.DnsNames
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IndexPool) {
		toSerialize["index_pool"] = o.IndexPool
	}
	if !IsNil(o.LifecycleEndOn) {
		toSerialize["lifecycle_end_on"] = o.LifecycleEndOn
	}
	if !IsNil(o.LifecycleStartOn) {
		toSerialize["lifecycle_start_on"] = o.LifecycleStartOn
	}
	if !IsNil(o.MultiZoneEnabled) {
		toSerialize["multi_zone_enabled"] = o.MultiZoneEnabled
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.OriginPullHostIds) {
		toSerialize["origin_pull_host_ids"] = o.OriginPullHostIds
	}
	if !IsNil(o.S3LbSystemUserAk) {
		toSerialize["s3_lb_system_user_ak"] = o.S3LbSystemUserAk
	}
	if !IsNil(o.S3LbSystemUserSk) {
		toSerialize["s3_lb_system_user_sk"] = o.S3LbSystemUserSk
	}
	if !IsNil(o.SearchEnabled) {
		toSerialize["search_enabled"] = o.SearchEnabled
	}
	if !IsNil(o.SecondMergenceEnabled) {
		toSerialize["second_mergence_enabled"] = o.SecondMergenceEnabled
	}
	if !IsNil(o.SecondMergenceEndOn) {
		toSerialize["second_mergence_end_on"] = o.SecondMergenceEndOn
	}
	if !IsNil(o.SecondMergenceStartOn) {
		toSerialize["second_mergence_start_on"] = o.SecondMergenceStartOn
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.TieringHostIds) {
		toSerialize["tiering_host_ids"] = o.TieringHostIds
	}
	if !IsNil(o.Update) {
		toSerialize["update"] = o.Update
	}
	if !IsNil(o.Samples) {
		toSerialize["samples"] = o.Samples
	}
	return toSerialize, nil
}

type NullableObjectStorageRecord struct {
	value *ObjectStorageRecord
	isSet bool
}

func (v NullableObjectStorageRecord) Get() *ObjectStorageRecord {
	return v.value
}

func (v *NullableObjectStorageRecord) Set(val *ObjectStorageRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectStorageRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectStorageRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectStorageRecord(val *ObjectStorageRecord) *NullableObjectStorageRecord {
	return &NullableObjectStorageRecord{value: val, isSet: true}
}

func (v NullableObjectStorageRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectStorageRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


