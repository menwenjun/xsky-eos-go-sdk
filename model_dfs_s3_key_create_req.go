/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DfsS3KeyCreateReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsS3KeyCreateReq{}

// DfsS3KeyCreateReq struct for DfsS3KeyCreateReq
type DfsS3KeyCreateReq struct {
	DfsS3Key *DfsS3KeyCreateReqKey `json:"dfs_s3_key,omitempty"`
}

// NewDfsS3KeyCreateReq instantiates a new DfsS3KeyCreateReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsS3KeyCreateReq() *DfsS3KeyCreateReq {
	this := DfsS3KeyCreateReq{}
	return &this
}

// NewDfsS3KeyCreateReqWithDefaults instantiates a new DfsS3KeyCreateReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsS3KeyCreateReqWithDefaults() *DfsS3KeyCreateReq {
	this := DfsS3KeyCreateReq{}
	return &this
}

// GetDfsS3Key returns the DfsS3Key field value if set, zero value otherwise.
func (o *DfsS3KeyCreateReq) GetDfsS3Key() DfsS3KeyCreateReqKey {
	if o == nil || IsNil(o.DfsS3Key) {
		var ret DfsS3KeyCreateReqKey
		return ret
	}
	return *o.DfsS3Key
}

// GetDfsS3KeyOk returns a tuple with the DfsS3Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsS3KeyCreateReq) GetDfsS3KeyOk() (*DfsS3KeyCreateReqKey, bool) {
	if o == nil || IsNil(o.DfsS3Key) {
		return nil, false
	}
	return o.DfsS3Key, true
}

// HasDfsS3Key returns a boolean if a field has been set.
func (o *DfsS3KeyCreateReq) HasDfsS3Key() bool {
	if o != nil && !IsNil(o.DfsS3Key) {
		return true
	}

	return false
}

// SetDfsS3Key gets a reference to the given DfsS3KeyCreateReqKey and assigns it to the DfsS3Key field.
func (o *DfsS3KeyCreateReq) SetDfsS3Key(v DfsS3KeyCreateReqKey) {
	o.DfsS3Key = &v
}

func (o DfsS3KeyCreateReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsS3KeyCreateReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DfsS3Key) {
		toSerialize["dfs_s3_key"] = o.DfsS3Key
	}
	return toSerialize, nil
}

type NullableDfsS3KeyCreateReq struct {
	value *DfsS3KeyCreateReq
	isSet bool
}

func (v NullableDfsS3KeyCreateReq) Get() *DfsS3KeyCreateReq {
	return v.value
}

func (v *NullableDfsS3KeyCreateReq) Set(val *DfsS3KeyCreateReq) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsS3KeyCreateReq) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsS3KeyCreateReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsS3KeyCreateReq(val *DfsS3KeyCreateReq) *NullableDfsS3KeyCreateReq {
	return &NullableDfsS3KeyCreateReq{value: val, isSet: true}
}

func (v NullableDfsS3KeyCreateReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsS3KeyCreateReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


