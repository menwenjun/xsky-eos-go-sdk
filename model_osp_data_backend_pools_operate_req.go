/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OspDataBackendPoolsOperateReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OspDataBackendPoolsOperateReq{}

// OspDataBackendPoolsOperateReq struct for OspDataBackendPoolsOperateReq
type OspDataBackendPoolsOperateReq struct {
	ClusterId *int64 `json:"cluster_id,omitempty"`
	DataBackendId *int64 `json:"data_backend_id,omitempty"`
	PoolIds []int64 `json:"pool_ids,omitempty"`
	Pools *map[string]bool `json:"pools,omitempty"`
}

// NewOspDataBackendPoolsOperateReq instantiates a new OspDataBackendPoolsOperateReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOspDataBackendPoolsOperateReq() *OspDataBackendPoolsOperateReq {
	this := OspDataBackendPoolsOperateReq{}
	return &this
}

// NewOspDataBackendPoolsOperateReqWithDefaults instantiates a new OspDataBackendPoolsOperateReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOspDataBackendPoolsOperateReqWithDefaults() *OspDataBackendPoolsOperateReq {
	this := OspDataBackendPoolsOperateReq{}
	return &this
}

// GetClusterId returns the ClusterId field value if set, zero value otherwise.
func (o *OspDataBackendPoolsOperateReq) GetClusterId() int64 {
	if o == nil || IsNil(o.ClusterId) {
		var ret int64
		return ret
	}
	return *o.ClusterId
}

// GetClusterIdOk returns a tuple with the ClusterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OspDataBackendPoolsOperateReq) GetClusterIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ClusterId) {
		return nil, false
	}
	return o.ClusterId, true
}

// HasClusterId returns a boolean if a field has been set.
func (o *OspDataBackendPoolsOperateReq) HasClusterId() bool {
	if o != nil && !IsNil(o.ClusterId) {
		return true
	}

	return false
}

// SetClusterId gets a reference to the given int64 and assigns it to the ClusterId field.
func (o *OspDataBackendPoolsOperateReq) SetClusterId(v int64) {
	o.ClusterId = &v
}

// GetDataBackendId returns the DataBackendId field value if set, zero value otherwise.
func (o *OspDataBackendPoolsOperateReq) GetDataBackendId() int64 {
	if o == nil || IsNil(o.DataBackendId) {
		var ret int64
		return ret
	}
	return *o.DataBackendId
}

// GetDataBackendIdOk returns a tuple with the DataBackendId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OspDataBackendPoolsOperateReq) GetDataBackendIdOk() (*int64, bool) {
	if o == nil || IsNil(o.DataBackendId) {
		return nil, false
	}
	return o.DataBackendId, true
}

// HasDataBackendId returns a boolean if a field has been set.
func (o *OspDataBackendPoolsOperateReq) HasDataBackendId() bool {
	if o != nil && !IsNil(o.DataBackendId) {
		return true
	}

	return false
}

// SetDataBackendId gets a reference to the given int64 and assigns it to the DataBackendId field.
func (o *OspDataBackendPoolsOperateReq) SetDataBackendId(v int64) {
	o.DataBackendId = &v
}

// GetPoolIds returns the PoolIds field value if set, zero value otherwise.
func (o *OspDataBackendPoolsOperateReq) GetPoolIds() []int64 {
	if o == nil || IsNil(o.PoolIds) {
		var ret []int64
		return ret
	}
	return o.PoolIds
}

// GetPoolIdsOk returns a tuple with the PoolIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OspDataBackendPoolsOperateReq) GetPoolIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.PoolIds) {
		return nil, false
	}
	return o.PoolIds, true
}

// HasPoolIds returns a boolean if a field has been set.
func (o *OspDataBackendPoolsOperateReq) HasPoolIds() bool {
	if o != nil && !IsNil(o.PoolIds) {
		return true
	}

	return false
}

// SetPoolIds gets a reference to the given []int64 and assigns it to the PoolIds field.
func (o *OspDataBackendPoolsOperateReq) SetPoolIds(v []int64) {
	o.PoolIds = v
}

// GetPools returns the Pools field value if set, zero value otherwise.
func (o *OspDataBackendPoolsOperateReq) GetPools() map[string]bool {
	if o == nil || IsNil(o.Pools) {
		var ret map[string]bool
		return ret
	}
	return *o.Pools
}

// GetPoolsOk returns a tuple with the Pools field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OspDataBackendPoolsOperateReq) GetPoolsOk() (*map[string]bool, bool) {
	if o == nil || IsNil(o.Pools) {
		return nil, false
	}
	return o.Pools, true
}

// HasPools returns a boolean if a field has been set.
func (o *OspDataBackendPoolsOperateReq) HasPools() bool {
	if o != nil && !IsNil(o.Pools) {
		return true
	}

	return false
}

// SetPools gets a reference to the given map[string]bool and assigns it to the Pools field.
func (o *OspDataBackendPoolsOperateReq) SetPools(v map[string]bool) {
	o.Pools = &v
}

func (o OspDataBackendPoolsOperateReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OspDataBackendPoolsOperateReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ClusterId) {
		toSerialize["cluster_id"] = o.ClusterId
	}
	if !IsNil(o.DataBackendId) {
		toSerialize["data_backend_id"] = o.DataBackendId
	}
	if !IsNil(o.PoolIds) {
		toSerialize["pool_ids"] = o.PoolIds
	}
	if !IsNil(o.Pools) {
		toSerialize["pools"] = o.Pools
	}
	return toSerialize, nil
}

type NullableOspDataBackendPoolsOperateReq struct {
	value *OspDataBackendPoolsOperateReq
	isSet bool
}

func (v NullableOspDataBackendPoolsOperateReq) Get() *OspDataBackendPoolsOperateReq {
	return v.value
}

func (v *NullableOspDataBackendPoolsOperateReq) Set(val *OspDataBackendPoolsOperateReq) {
	v.value = val
	v.isSet = true
}

func (v NullableOspDataBackendPoolsOperateReq) IsSet() bool {
	return v.isSet
}

func (v *NullableOspDataBackendPoolsOperateReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOspDataBackendPoolsOperateReq(val *OspDataBackendPoolsOperateReq) *NullableOspDataBackendPoolsOperateReq {
	return &NullableOspDataBackendPoolsOperateReq{value: val, isSet: true}
}

func (v NullableOspDataBackendPoolsOperateReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOspDataBackendPoolsOperateReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


