/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RoleMappingUpdateReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoleMappingUpdateReq{}

// RoleMappingUpdateReq struct for RoleMappingUpdateReq
type RoleMappingUpdateReq struct {
	RoleMapping *RoleMappingUpdateReqMapping `json:"role_mapping,omitempty"`
}

// NewRoleMappingUpdateReq instantiates a new RoleMappingUpdateReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleMappingUpdateReq() *RoleMappingUpdateReq {
	this := RoleMappingUpdateReq{}
	return &this
}

// NewRoleMappingUpdateReqWithDefaults instantiates a new RoleMappingUpdateReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleMappingUpdateReqWithDefaults() *RoleMappingUpdateReq {
	this := RoleMappingUpdateReq{}
	return &this
}

// GetRoleMapping returns the RoleMapping field value if set, zero value otherwise.
func (o *RoleMappingUpdateReq) GetRoleMapping() RoleMappingUpdateReqMapping {
	if o == nil || IsNil(o.RoleMapping) {
		var ret RoleMappingUpdateReqMapping
		return ret
	}
	return *o.RoleMapping
}

// GetRoleMappingOk returns a tuple with the RoleMapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleMappingUpdateReq) GetRoleMappingOk() (*RoleMappingUpdateReqMapping, bool) {
	if o == nil || IsNil(o.RoleMapping) {
		return nil, false
	}
	return o.RoleMapping, true
}

// HasRoleMapping returns a boolean if a field has been set.
func (o *RoleMappingUpdateReq) HasRoleMapping() bool {
	if o != nil && !IsNil(o.RoleMapping) {
		return true
	}

	return false
}

// SetRoleMapping gets a reference to the given RoleMappingUpdateReqMapping and assigns it to the RoleMapping field.
func (o *RoleMappingUpdateReq) SetRoleMapping(v RoleMappingUpdateReqMapping) {
	o.RoleMapping = &v
}

func (o RoleMappingUpdateReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoleMappingUpdateReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RoleMapping) {
		toSerialize["role_mapping"] = o.RoleMapping
	}
	return toSerialize, nil
}

type NullableRoleMappingUpdateReq struct {
	value *RoleMappingUpdateReq
	isSet bool
}

func (v NullableRoleMappingUpdateReq) Get() *RoleMappingUpdateReq {
	return v.value
}

func (v *NullableRoleMappingUpdateReq) Set(val *RoleMappingUpdateReq) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleMappingUpdateReq) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleMappingUpdateReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleMappingUpdateReq(val *RoleMappingUpdateReq) *NullableRoleMappingUpdateReq {
	return &NullableRoleMappingUpdateReq{value: val, isSet: true}
}

func (v NullableRoleMappingUpdateReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleMappingUpdateReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


