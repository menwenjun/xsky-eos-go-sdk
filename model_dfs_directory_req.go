/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DfsDirectoryReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsDirectoryReq{}

// DfsDirectoryReq struct for DfsDirectoryReq
type DfsDirectoryReq struct {
	DfsDirectory DfsDirectoryReqDirectory `json:"dfs_directory"`
}

type _DfsDirectoryReq DfsDirectoryReq

// NewDfsDirectoryReq instantiates a new DfsDirectoryReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsDirectoryReq(dfsDirectory DfsDirectoryReqDirectory) *DfsDirectoryReq {
	this := DfsDirectoryReq{}
	this.DfsDirectory = dfsDirectory
	return &this
}

// NewDfsDirectoryReqWithDefaults instantiates a new DfsDirectoryReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsDirectoryReqWithDefaults() *DfsDirectoryReq {
	this := DfsDirectoryReq{}
	return &this
}

// GetDfsDirectory returns the DfsDirectory field value
func (o *DfsDirectoryReq) GetDfsDirectory() DfsDirectoryReqDirectory {
	if o == nil {
		var ret DfsDirectoryReqDirectory
		return ret
	}

	return o.DfsDirectory
}

// GetDfsDirectoryOk returns a tuple with the DfsDirectory field value
// and a boolean to check if the value has been set.
func (o *DfsDirectoryReq) GetDfsDirectoryOk() (*DfsDirectoryReqDirectory, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DfsDirectory, true
}

// SetDfsDirectory sets field value
func (o *DfsDirectoryReq) SetDfsDirectory(v DfsDirectoryReqDirectory) {
	o.DfsDirectory = v
}

func (o DfsDirectoryReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsDirectoryReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dfs_directory"] = o.DfsDirectory
	return toSerialize, nil
}

func (o *DfsDirectoryReq) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dfs_directory",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDfsDirectoryReq := _DfsDirectoryReq{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDfsDirectoryReq)

	if err != nil {
		return err
	}

	*o = DfsDirectoryReq(varDfsDirectoryReq)

	return err
}

type NullableDfsDirectoryReq struct {
	value *DfsDirectoryReq
	isSet bool
}

func (v NullableDfsDirectoryReq) Get() *DfsDirectoryReq {
	return v.value
}

func (v *NullableDfsDirectoryReq) Set(val *DfsDirectoryReq) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsDirectoryReq) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsDirectoryReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsDirectoryReq(val *DfsDirectoryReq) *NullableDfsDirectoryReq {
	return &NullableDfsDirectoryReq{value: val, isSet: true}
}

func (v NullableDfsDirectoryReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsDirectoryReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


