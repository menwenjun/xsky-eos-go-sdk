/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the DfsFile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsFile{}

// DfsFile DfsFile defines response for rmdir
type DfsFile struct {
	// access time
	Access *time.Time `json:"access,omitempty"`
	Bucket *DfsS3Bucket `json:"bucket,omitempty"`
	// change time
	Change *time.Time `json:"change,omitempty"`
	// dfs path id
	DfsPathId *int64 `json:"dfs_path_id,omitempty"`
	// dfs path performance id
	DfsPathPerformanceId *int64 `json:"dfs_path_performance_id,omitempty"`
	DfsRootfs *NestedRootfs `json:"dfs_rootfs,omitempty"`
	// dfs storage policies
	DfsStoragePolicies []DfsStoragePolicy `json:"dfs_storage_policies,omitempty"`
	// count of dir quota
	DirQuotaNum *int64 `json:"dir_quota_num,omitempty"`
	// count of data protection snapshot
	DpSnapshotNum *int64 `json:"dp_snapshot_num,omitempty"`
	// sub file count when it is a directory
	Files *int64 `json:"files,omitempty"`
	FtpShare *DfsFTPShare `json:"ftp_share,omitempty"`
	// count of full path snapshot
	FullPathSnapNum *int64 `json:"full_path_snap_num,omitempty"`
	// owner group
	Group *int64 `json:"group,omitempty"`
	// count of hdfs
	HdfsNum *int64 `json:"hdfs_num,omitempty"`
	// hdfses
	Hdfses []DfsHdfs `json:"hdfses,omitempty"`
	// inode count
	Inode *int64 `json:"inode,omitempty"`
	// is bucket path
	IsBucket *bool `json:"is_bucket,omitempty"`
	// is bucked parent path
	IsBucketParent *bool `json:"is_bucket_parent,omitempty"`
	LocalGroupInfo *LocalGroupInfo `json:"local_group_info,omitempty"`
	LocalUserInfo *LocalUserInfo `json:"local_user_info,omitempty"`
	// file mode
	Mode *string `json:"mode,omitempty"`
	// modify time
	Modify *time.Time `json:"modify,omitempty"`
	// file name
	Name *string `json:"name,omitempty"`
	NfsShare *DfsNFSShare `json:"nfs_share,omitempty"`
	// original name before file moved to trash
	OriginalName *string `json:"original_name,omitempty"`
	// owner user
	Owner *int64 `json:"owner,omitempty"`
	// parent path
	Parent *string `json:"parent,omitempty"`
	// par path link dfs storage policies
	ParentPathStoragePolicies []DfsStoragePolicy `json:"parent_path_storage_policies,omitempty"`
	// full path
	Path *string `json:"path,omitempty"`
	Qos *DfsFileQos `json:"qos,omitempty"`
	// count of quota
	QuotaNum *int64 `json:"quota_num,omitempty"`
	// shared
	Shared *bool `json:"shared,omitempty"`
	// share types
	Shares []string `json:"shares,omitempty"`
	// file size
	Size *int64 `json:"size,omitempty"`
	// smb shares
	SmbShares []DfsSMBShare `json:"smb_shares,omitempty"`
	// count of snapshot
	SnapshotNum *int64 `json:"snapshot_num,omitempty"`
	// is stretched directory
	Stretched *bool `json:"stretched,omitempty"`
	// count of total snapshot
	TotalSnapshotNum *int64 `json:"total_snapshot_num,omitempty"`
	Trash *DfsFileTrash `json:"trash,omitempty"`
	// file type
	Type *string `json:"type,omitempty"`
	Worm *DfsFileWorm `json:"worm,omitempty"`
}

// NewDfsFile instantiates a new DfsFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsFile() *DfsFile {
	this := DfsFile{}
	return &this
}

// NewDfsFileWithDefaults instantiates a new DfsFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsFileWithDefaults() *DfsFile {
	this := DfsFile{}
	return &this
}

// GetAccess returns the Access field value if set, zero value otherwise.
func (o *DfsFile) GetAccess() time.Time {
	if o == nil || IsNil(o.Access) {
		var ret time.Time
		return ret
	}
	return *o.Access
}

// GetAccessOk returns a tuple with the Access field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFile) GetAccessOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Access) {
		return nil, false
	}
	return o.Access, true
}

// HasAccess returns a boolean if a field has been set.
func (o *DfsFile) HasAccess() bool {
	if o != nil && !IsNil(o.Access) {
		return true
	}

	return false
}

// SetAccess gets a reference to the given time.Time and assigns it to the Access field.
func (o *DfsFile) SetAccess(v time.Time) {
	o.Access = &v
}

// GetBucket returns the Bucket field value if set, zero value otherwise.
func (o *DfsFile) GetBucket() DfsS3Bucket {
	if o == nil || IsNil(o.Bucket) {
		var ret DfsS3Bucket
		return ret
	}
	return *o.Bucket
}

// GetBucketOk returns a tuple with the Bucket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFile) GetBucketOk() (*DfsS3Bucket, bool) {
	if o == nil || IsNil(o.Bucket) {
		return nil, false
	}
	return o.Bucket, true
}

// HasBucket returns a boolean if a field has been set.
func (o *DfsFile) HasBucket() bool {
	if o != nil && !IsNil(o.Bucket) {
		return true
	}

	return false
}

// SetBucket gets a reference to the given DfsS3Bucket and assigns it to the Bucket field.
func (o *DfsFile) SetBucket(v DfsS3Bucket) {
	o.Bucket = &v
}

// GetChange returns the Change field value if set, zero value otherwise.
func (o *DfsFile) GetChange() time.Time {
	if o == nil || IsNil(o.Change) {
		var ret time.Time
		return ret
	}
	return *o.Change
}

// GetChangeOk returns a tuple with the Change field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFile) GetChangeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Change) {
		return nil, false
	}
	return o.Change, true
}

// HasChange returns a boolean if a field has been set.
func (o *DfsFile) HasChange() bool {
	if o != nil && !IsNil(o.Change) {
		return true
	}

	return false
}

// SetChange gets a reference to the given time.Time and assigns it to the Change field.
func (o *DfsFile) SetChange(v time.Time) {
	o.Change = &v
}

// GetDfsPathId returns the DfsPathId field value if set, zero value otherwise.
func (o *DfsFile) GetDfsPathId() int64 {
	if o == nil || IsNil(o.DfsPathId) {
		var ret int64
		return ret
	}
	return *o.DfsPathId
}

// GetDfsPathIdOk returns a tuple with the DfsPathId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFile) GetDfsPathIdOk() (*int64, bool) {
	if o == nil || IsNil(o.DfsPathId) {
		return nil, false
	}
	return o.DfsPathId, true
}

// HasDfsPathId returns a boolean if a field has been set.
func (o *DfsFile) HasDfsPathId() bool {
	if o != nil && !IsNil(o.DfsPathId) {
		return true
	}

	return false
}

// SetDfsPathId gets a reference to the given int64 and assigns it to the DfsPathId field.
func (o *DfsFile) SetDfsPathId(v int64) {
	o.DfsPathId = &v
}

// GetDfsPathPerformanceId returns the DfsPathPerformanceId field value if set, zero value otherwise.
func (o *DfsFile) GetDfsPathPerformanceId() int64 {
	if o == nil || IsNil(o.DfsPathPerformanceId) {
		var ret int64
		return ret
	}
	return *o.DfsPathPerformanceId
}

// GetDfsPathPerformanceIdOk returns a tuple with the DfsPathPerformanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFile) GetDfsPathPerformanceIdOk() (*int64, bool) {
	if o == nil || IsNil(o.DfsPathPerformanceId) {
		return nil, false
	}
	return o.DfsPathPerformanceId, true
}

// HasDfsPathPerformanceId returns a boolean if a field has been set.
func (o *DfsFile) HasDfsPathPerformanceId() bool {
	if o != nil && !IsNil(o.DfsPathPerformanceId) {
		return true
	}

	return false
}

// SetDfsPathPerformanceId gets a reference to the given int64 and assigns it to the DfsPathPerformanceId field.
func (o *DfsFile) SetDfsPathPerformanceId(v int64) {
	o.DfsPathPerformanceId = &v
}

// GetDfsRootfs returns the DfsRootfs field value if set, zero value otherwise.
func (o *DfsFile) GetDfsRootfs() NestedRootfs {
	if o == nil || IsNil(o.DfsRootfs) {
		var ret NestedRootfs
		return ret
	}
	return *o.DfsRootfs
}

// GetDfsRootfsOk returns a tuple with the DfsRootfs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFile) GetDfsRootfsOk() (*NestedRootfs, bool) {
	if o == nil || IsNil(o.DfsRootfs) {
		return nil, false
	}
	return o.DfsRootfs, true
}

// HasDfsRootfs returns a boolean if a field has been set.
func (o *DfsFile) HasDfsRootfs() bool {
	if o != nil && !IsNil(o.DfsRootfs) {
		return true
	}

	return false
}

// SetDfsRootfs gets a reference to the given NestedRootfs and assigns it to the DfsRootfs field.
func (o *DfsFile) SetDfsRootfs(v NestedRootfs) {
	o.DfsRootfs = &v
}

// GetDfsStoragePolicies returns the DfsStoragePolicies field value if set, zero value otherwise.
func (o *DfsFile) GetDfsStoragePolicies() []DfsStoragePolicy {
	if o == nil || IsNil(o.DfsStoragePolicies) {
		var ret []DfsStoragePolicy
		return ret
	}
	return o.DfsStoragePolicies
}

// GetDfsStoragePoliciesOk returns a tuple with the DfsStoragePolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFile) GetDfsStoragePoliciesOk() ([]DfsStoragePolicy, bool) {
	if o == nil || IsNil(o.DfsStoragePolicies) {
		return nil, false
	}
	return o.DfsStoragePolicies, true
}

// HasDfsStoragePolicies returns a boolean if a field has been set.
func (o *DfsFile) HasDfsStoragePolicies() bool {
	if o != nil && !IsNil(o.DfsStoragePolicies) {
		return true
	}

	return false
}

// SetDfsStoragePolicies gets a reference to the given []DfsStoragePolicy and assigns it to the DfsStoragePolicies field.
func (o *DfsFile) SetDfsStoragePolicies(v []DfsStoragePolicy) {
	o.DfsStoragePolicies = v
}

// GetDirQuotaNum returns the DirQuotaNum field value if set, zero value otherwise.
func (o *DfsFile) GetDirQuotaNum() int64 {
	if o == nil || IsNil(o.DirQuotaNum) {
		var ret int64
		return ret
	}
	return *o.DirQuotaNum
}

// GetDirQuotaNumOk returns a tuple with the DirQuotaNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFile) GetDirQuotaNumOk() (*int64, bool) {
	if o == nil || IsNil(o.DirQuotaNum) {
		return nil, false
	}
	return o.DirQuotaNum, true
}

// HasDirQuotaNum returns a boolean if a field has been set.
func (o *DfsFile) HasDirQuotaNum() bool {
	if o != nil && !IsNil(o.DirQuotaNum) {
		return true
	}

	return false
}

// SetDirQuotaNum gets a reference to the given int64 and assigns it to the DirQuotaNum field.
func (o *DfsFile) SetDirQuotaNum(v int64) {
	o.DirQuotaNum = &v
}

// GetDpSnapshotNum returns the DpSnapshotNum field value if set, zero value otherwise.
func (o *DfsFile) GetDpSnapshotNum() int64 {
	if o == nil || IsNil(o.DpSnapshotNum) {
		var ret int64
		return ret
	}
	return *o.DpSnapshotNum
}

// GetDpSnapshotNumOk returns a tuple with the DpSnapshotNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFile) GetDpSnapshotNumOk() (*int64, bool) {
	if o == nil || IsNil(o.DpSnapshotNum) {
		return nil, false
	}
	return o.DpSnapshotNum, true
}

// HasDpSnapshotNum returns a boolean if a field has been set.
func (o *DfsFile) HasDpSnapshotNum() bool {
	if o != nil && !IsNil(o.DpSnapshotNum) {
		return true
	}

	return false
}

// SetDpSnapshotNum gets a reference to the given int64 and assigns it to the DpSnapshotNum field.
func (o *DfsFile) SetDpSnapshotNum(v int64) {
	o.DpSnapshotNum = &v
}

// GetFiles returns the Files field value if set, zero value otherwise.
func (o *DfsFile) GetFiles() int64 {
	if o == nil || IsNil(o.Files) {
		var ret int64
		return ret
	}
	return *o.Files
}

// GetFilesOk returns a tuple with the Files field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFile) GetFilesOk() (*int64, bool) {
	if o == nil || IsNil(o.Files) {
		return nil, false
	}
	return o.Files, true
}

// HasFiles returns a boolean if a field has been set.
func (o *DfsFile) HasFiles() bool {
	if o != nil && !IsNil(o.Files) {
		return true
	}

	return false
}

// SetFiles gets a reference to the given int64 and assigns it to the Files field.
func (o *DfsFile) SetFiles(v int64) {
	o.Files = &v
}

// GetFtpShare returns the FtpShare field value if set, zero value otherwise.
func (o *DfsFile) GetFtpShare() DfsFTPShare {
	if o == nil || IsNil(o.FtpShare) {
		var ret DfsFTPShare
		return ret
	}
	return *o.FtpShare
}

// GetFtpShareOk returns a tuple with the FtpShare field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFile) GetFtpShareOk() (*DfsFTPShare, bool) {
	if o == nil || IsNil(o.FtpShare) {
		return nil, false
	}
	return o.FtpShare, true
}

// HasFtpShare returns a boolean if a field has been set.
func (o *DfsFile) HasFtpShare() bool {
	if o != nil && !IsNil(o.FtpShare) {
		return true
	}

	return false
}

// SetFtpShare gets a reference to the given DfsFTPShare and assigns it to the FtpShare field.
func (o *DfsFile) SetFtpShare(v DfsFTPShare) {
	o.FtpShare = &v
}

// GetFullPathSnapNum returns the FullPathSnapNum field value if set, zero value otherwise.
func (o *DfsFile) GetFullPathSnapNum() int64 {
	if o == nil || IsNil(o.FullPathSnapNum) {
		var ret int64
		return ret
	}
	return *o.FullPathSnapNum
}

// GetFullPathSnapNumOk returns a tuple with the FullPathSnapNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFile) GetFullPathSnapNumOk() (*int64, bool) {
	if o == nil || IsNil(o.FullPathSnapNum) {
		return nil, false
	}
	return o.FullPathSnapNum, true
}

// HasFullPathSnapNum returns a boolean if a field has been set.
func (o *DfsFile) HasFullPathSnapNum() bool {
	if o != nil && !IsNil(o.FullPathSnapNum) {
		return true
	}

	return false
}

// SetFullPathSnapNum gets a reference to the given int64 and assigns it to the FullPathSnapNum field.
func (o *DfsFile) SetFullPathSnapNum(v int64) {
	o.FullPathSnapNum = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *DfsFile) GetGroup() int64 {
	if o == nil || IsNil(o.Group) {
		var ret int64
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFile) GetGroupOk() (*int64, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *DfsFile) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given int64 and assigns it to the Group field.
func (o *DfsFile) SetGroup(v int64) {
	o.Group = &v
}

// GetHdfsNum returns the HdfsNum field value if set, zero value otherwise.
func (o *DfsFile) GetHdfsNum() int64 {
	if o == nil || IsNil(o.HdfsNum) {
		var ret int64
		return ret
	}
	return *o.HdfsNum
}

// GetHdfsNumOk returns a tuple with the HdfsNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFile) GetHdfsNumOk() (*int64, bool) {
	if o == nil || IsNil(o.HdfsNum) {
		return nil, false
	}
	return o.HdfsNum, true
}

// HasHdfsNum returns a boolean if a field has been set.
func (o *DfsFile) HasHdfsNum() bool {
	if o != nil && !IsNil(o.HdfsNum) {
		return true
	}

	return false
}

// SetHdfsNum gets a reference to the given int64 and assigns it to the HdfsNum field.
func (o *DfsFile) SetHdfsNum(v int64) {
	o.HdfsNum = &v
}

// GetHdfses returns the Hdfses field value if set, zero value otherwise.
func (o *DfsFile) GetHdfses() []DfsHdfs {
	if o == nil || IsNil(o.Hdfses) {
		var ret []DfsHdfs
		return ret
	}
	return o.Hdfses
}

// GetHdfsesOk returns a tuple with the Hdfses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFile) GetHdfsesOk() ([]DfsHdfs, bool) {
	if o == nil || IsNil(o.Hdfses) {
		return nil, false
	}
	return o.Hdfses, true
}

// HasHdfses returns a boolean if a field has been set.
func (o *DfsFile) HasHdfses() bool {
	if o != nil && !IsNil(o.Hdfses) {
		return true
	}

	return false
}

// SetHdfses gets a reference to the given []DfsHdfs and assigns it to the Hdfses field.
func (o *DfsFile) SetHdfses(v []DfsHdfs) {
	o.Hdfses = v
}

// GetInode returns the Inode field value if set, zero value otherwise.
func (o *DfsFile) GetInode() int64 {
	if o == nil || IsNil(o.Inode) {
		var ret int64
		return ret
	}
	return *o.Inode
}

// GetInodeOk returns a tuple with the Inode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFile) GetInodeOk() (*int64, bool) {
	if o == nil || IsNil(o.Inode) {
		return nil, false
	}
	return o.Inode, true
}

// HasInode returns a boolean if a field has been set.
func (o *DfsFile) HasInode() bool {
	if o != nil && !IsNil(o.Inode) {
		return true
	}

	return false
}

// SetInode gets a reference to the given int64 and assigns it to the Inode field.
func (o *DfsFile) SetInode(v int64) {
	o.Inode = &v
}

// GetIsBucket returns the IsBucket field value if set, zero value otherwise.
func (o *DfsFile) GetIsBucket() bool {
	if o == nil || IsNil(o.IsBucket) {
		var ret bool
		return ret
	}
	return *o.IsBucket
}

// GetIsBucketOk returns a tuple with the IsBucket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFile) GetIsBucketOk() (*bool, bool) {
	if o == nil || IsNil(o.IsBucket) {
		return nil, false
	}
	return o.IsBucket, true
}

// HasIsBucket returns a boolean if a field has been set.
func (o *DfsFile) HasIsBucket() bool {
	if o != nil && !IsNil(o.IsBucket) {
		return true
	}

	return false
}

// SetIsBucket gets a reference to the given bool and assigns it to the IsBucket field.
func (o *DfsFile) SetIsBucket(v bool) {
	o.IsBucket = &v
}

// GetIsBucketParent returns the IsBucketParent field value if set, zero value otherwise.
func (o *DfsFile) GetIsBucketParent() bool {
	if o == nil || IsNil(o.IsBucketParent) {
		var ret bool
		return ret
	}
	return *o.IsBucketParent
}

// GetIsBucketParentOk returns a tuple with the IsBucketParent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFile) GetIsBucketParentOk() (*bool, bool) {
	if o == nil || IsNil(o.IsBucketParent) {
		return nil, false
	}
	return o.IsBucketParent, true
}

// HasIsBucketParent returns a boolean if a field has been set.
func (o *DfsFile) HasIsBucketParent() bool {
	if o != nil && !IsNil(o.IsBucketParent) {
		return true
	}

	return false
}

// SetIsBucketParent gets a reference to the given bool and assigns it to the IsBucketParent field.
func (o *DfsFile) SetIsBucketParent(v bool) {
	o.IsBucketParent = &v
}

// GetLocalGroupInfo returns the LocalGroupInfo field value if set, zero value otherwise.
func (o *DfsFile) GetLocalGroupInfo() LocalGroupInfo {
	if o == nil || IsNil(o.LocalGroupInfo) {
		var ret LocalGroupInfo
		return ret
	}
	return *o.LocalGroupInfo
}

// GetLocalGroupInfoOk returns a tuple with the LocalGroupInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFile) GetLocalGroupInfoOk() (*LocalGroupInfo, bool) {
	if o == nil || IsNil(o.LocalGroupInfo) {
		return nil, false
	}
	return o.LocalGroupInfo, true
}

// HasLocalGroupInfo returns a boolean if a field has been set.
func (o *DfsFile) HasLocalGroupInfo() bool {
	if o != nil && !IsNil(o.LocalGroupInfo) {
		return true
	}

	return false
}

// SetLocalGroupInfo gets a reference to the given LocalGroupInfo and assigns it to the LocalGroupInfo field.
func (o *DfsFile) SetLocalGroupInfo(v LocalGroupInfo) {
	o.LocalGroupInfo = &v
}

// GetLocalUserInfo returns the LocalUserInfo field value if set, zero value otherwise.
func (o *DfsFile) GetLocalUserInfo() LocalUserInfo {
	if o == nil || IsNil(o.LocalUserInfo) {
		var ret LocalUserInfo
		return ret
	}
	return *o.LocalUserInfo
}

// GetLocalUserInfoOk returns a tuple with the LocalUserInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFile) GetLocalUserInfoOk() (*LocalUserInfo, bool) {
	if o == nil || IsNil(o.LocalUserInfo) {
		return nil, false
	}
	return o.LocalUserInfo, true
}

// HasLocalUserInfo returns a boolean if a field has been set.
func (o *DfsFile) HasLocalUserInfo() bool {
	if o != nil && !IsNil(o.LocalUserInfo) {
		return true
	}

	return false
}

// SetLocalUserInfo gets a reference to the given LocalUserInfo and assigns it to the LocalUserInfo field.
func (o *DfsFile) SetLocalUserInfo(v LocalUserInfo) {
	o.LocalUserInfo = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *DfsFile) GetMode() string {
	if o == nil || IsNil(o.Mode) {
		var ret string
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFile) GetModeOk() (*string, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *DfsFile) HasMode() bool {
	if o != nil && !IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given string and assigns it to the Mode field.
func (o *DfsFile) SetMode(v string) {
	o.Mode = &v
}

// GetModify returns the Modify field value if set, zero value otherwise.
func (o *DfsFile) GetModify() time.Time {
	if o == nil || IsNil(o.Modify) {
		var ret time.Time
		return ret
	}
	return *o.Modify
}

// GetModifyOk returns a tuple with the Modify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFile) GetModifyOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Modify) {
		return nil, false
	}
	return o.Modify, true
}

// HasModify returns a boolean if a field has been set.
func (o *DfsFile) HasModify() bool {
	if o != nil && !IsNil(o.Modify) {
		return true
	}

	return false
}

// SetModify gets a reference to the given time.Time and assigns it to the Modify field.
func (o *DfsFile) SetModify(v time.Time) {
	o.Modify = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DfsFile) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFile) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DfsFile) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DfsFile) SetName(v string) {
	o.Name = &v
}

// GetNfsShare returns the NfsShare field value if set, zero value otherwise.
func (o *DfsFile) GetNfsShare() DfsNFSShare {
	if o == nil || IsNil(o.NfsShare) {
		var ret DfsNFSShare
		return ret
	}
	return *o.NfsShare
}

// GetNfsShareOk returns a tuple with the NfsShare field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFile) GetNfsShareOk() (*DfsNFSShare, bool) {
	if o == nil || IsNil(o.NfsShare) {
		return nil, false
	}
	return o.NfsShare, true
}

// HasNfsShare returns a boolean if a field has been set.
func (o *DfsFile) HasNfsShare() bool {
	if o != nil && !IsNil(o.NfsShare) {
		return true
	}

	return false
}

// SetNfsShare gets a reference to the given DfsNFSShare and assigns it to the NfsShare field.
func (o *DfsFile) SetNfsShare(v DfsNFSShare) {
	o.NfsShare = &v
}

// GetOriginalName returns the OriginalName field value if set, zero value otherwise.
func (o *DfsFile) GetOriginalName() string {
	if o == nil || IsNil(o.OriginalName) {
		var ret string
		return ret
	}
	return *o.OriginalName
}

// GetOriginalNameOk returns a tuple with the OriginalName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFile) GetOriginalNameOk() (*string, bool) {
	if o == nil || IsNil(o.OriginalName) {
		return nil, false
	}
	return o.OriginalName, true
}

// HasOriginalName returns a boolean if a field has been set.
func (o *DfsFile) HasOriginalName() bool {
	if o != nil && !IsNil(o.OriginalName) {
		return true
	}

	return false
}

// SetOriginalName gets a reference to the given string and assigns it to the OriginalName field.
func (o *DfsFile) SetOriginalName(v string) {
	o.OriginalName = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *DfsFile) GetOwner() int64 {
	if o == nil || IsNil(o.Owner) {
		var ret int64
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFile) GetOwnerOk() (*int64, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *DfsFile) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given int64 and assigns it to the Owner field.
func (o *DfsFile) SetOwner(v int64) {
	o.Owner = &v
}

// GetParent returns the Parent field value if set, zero value otherwise.
func (o *DfsFile) GetParent() string {
	if o == nil || IsNil(o.Parent) {
		var ret string
		return ret
	}
	return *o.Parent
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFile) GetParentOk() (*string, bool) {
	if o == nil || IsNil(o.Parent) {
		return nil, false
	}
	return o.Parent, true
}

// HasParent returns a boolean if a field has been set.
func (o *DfsFile) HasParent() bool {
	if o != nil && !IsNil(o.Parent) {
		return true
	}

	return false
}

// SetParent gets a reference to the given string and assigns it to the Parent field.
func (o *DfsFile) SetParent(v string) {
	o.Parent = &v
}

// GetParentPathStoragePolicies returns the ParentPathStoragePolicies field value if set, zero value otherwise.
func (o *DfsFile) GetParentPathStoragePolicies() []DfsStoragePolicy {
	if o == nil || IsNil(o.ParentPathStoragePolicies) {
		var ret []DfsStoragePolicy
		return ret
	}
	return o.ParentPathStoragePolicies
}

// GetParentPathStoragePoliciesOk returns a tuple with the ParentPathStoragePolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFile) GetParentPathStoragePoliciesOk() ([]DfsStoragePolicy, bool) {
	if o == nil || IsNil(o.ParentPathStoragePolicies) {
		return nil, false
	}
	return o.ParentPathStoragePolicies, true
}

// HasParentPathStoragePolicies returns a boolean if a field has been set.
func (o *DfsFile) HasParentPathStoragePolicies() bool {
	if o != nil && !IsNil(o.ParentPathStoragePolicies) {
		return true
	}

	return false
}

// SetParentPathStoragePolicies gets a reference to the given []DfsStoragePolicy and assigns it to the ParentPathStoragePolicies field.
func (o *DfsFile) SetParentPathStoragePolicies(v []DfsStoragePolicy) {
	o.ParentPathStoragePolicies = v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *DfsFile) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFile) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *DfsFile) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *DfsFile) SetPath(v string) {
	o.Path = &v
}

// GetQos returns the Qos field value if set, zero value otherwise.
func (o *DfsFile) GetQos() DfsFileQos {
	if o == nil || IsNil(o.Qos) {
		var ret DfsFileQos
		return ret
	}
	return *o.Qos
}

// GetQosOk returns a tuple with the Qos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFile) GetQosOk() (*DfsFileQos, bool) {
	if o == nil || IsNil(o.Qos) {
		return nil, false
	}
	return o.Qos, true
}

// HasQos returns a boolean if a field has been set.
func (o *DfsFile) HasQos() bool {
	if o != nil && !IsNil(o.Qos) {
		return true
	}

	return false
}

// SetQos gets a reference to the given DfsFileQos and assigns it to the Qos field.
func (o *DfsFile) SetQos(v DfsFileQos) {
	o.Qos = &v
}

// GetQuotaNum returns the QuotaNum field value if set, zero value otherwise.
func (o *DfsFile) GetQuotaNum() int64 {
	if o == nil || IsNil(o.QuotaNum) {
		var ret int64
		return ret
	}
	return *o.QuotaNum
}

// GetQuotaNumOk returns a tuple with the QuotaNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFile) GetQuotaNumOk() (*int64, bool) {
	if o == nil || IsNil(o.QuotaNum) {
		return nil, false
	}
	return o.QuotaNum, true
}

// HasQuotaNum returns a boolean if a field has been set.
func (o *DfsFile) HasQuotaNum() bool {
	if o != nil && !IsNil(o.QuotaNum) {
		return true
	}

	return false
}

// SetQuotaNum gets a reference to the given int64 and assigns it to the QuotaNum field.
func (o *DfsFile) SetQuotaNum(v int64) {
	o.QuotaNum = &v
}

// GetShared returns the Shared field value if set, zero value otherwise.
func (o *DfsFile) GetShared() bool {
	if o == nil || IsNil(o.Shared) {
		var ret bool
		return ret
	}
	return *o.Shared
}

// GetSharedOk returns a tuple with the Shared field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFile) GetSharedOk() (*bool, bool) {
	if o == nil || IsNil(o.Shared) {
		return nil, false
	}
	return o.Shared, true
}

// HasShared returns a boolean if a field has been set.
func (o *DfsFile) HasShared() bool {
	if o != nil && !IsNil(o.Shared) {
		return true
	}

	return false
}

// SetShared gets a reference to the given bool and assigns it to the Shared field.
func (o *DfsFile) SetShared(v bool) {
	o.Shared = &v
}

// GetShares returns the Shares field value if set, zero value otherwise.
func (o *DfsFile) GetShares() []string {
	if o == nil || IsNil(o.Shares) {
		var ret []string
		return ret
	}
	return o.Shares
}

// GetSharesOk returns a tuple with the Shares field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFile) GetSharesOk() ([]string, bool) {
	if o == nil || IsNil(o.Shares) {
		return nil, false
	}
	return o.Shares, true
}

// HasShares returns a boolean if a field has been set.
func (o *DfsFile) HasShares() bool {
	if o != nil && !IsNil(o.Shares) {
		return true
	}

	return false
}

// SetShares gets a reference to the given []string and assigns it to the Shares field.
func (o *DfsFile) SetShares(v []string) {
	o.Shares = v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *DfsFile) GetSize() int64 {
	if o == nil || IsNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFile) GetSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *DfsFile) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *DfsFile) SetSize(v int64) {
	o.Size = &v
}

// GetSmbShares returns the SmbShares field value if set, zero value otherwise.
func (o *DfsFile) GetSmbShares() []DfsSMBShare {
	if o == nil || IsNil(o.SmbShares) {
		var ret []DfsSMBShare
		return ret
	}
	return o.SmbShares
}

// GetSmbSharesOk returns a tuple with the SmbShares field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFile) GetSmbSharesOk() ([]DfsSMBShare, bool) {
	if o == nil || IsNil(o.SmbShares) {
		return nil, false
	}
	return o.SmbShares, true
}

// HasSmbShares returns a boolean if a field has been set.
func (o *DfsFile) HasSmbShares() bool {
	if o != nil && !IsNil(o.SmbShares) {
		return true
	}

	return false
}

// SetSmbShares gets a reference to the given []DfsSMBShare and assigns it to the SmbShares field.
func (o *DfsFile) SetSmbShares(v []DfsSMBShare) {
	o.SmbShares = v
}

// GetSnapshotNum returns the SnapshotNum field value if set, zero value otherwise.
func (o *DfsFile) GetSnapshotNum() int64 {
	if o == nil || IsNil(o.SnapshotNum) {
		var ret int64
		return ret
	}
	return *o.SnapshotNum
}

// GetSnapshotNumOk returns a tuple with the SnapshotNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFile) GetSnapshotNumOk() (*int64, bool) {
	if o == nil || IsNil(o.SnapshotNum) {
		return nil, false
	}
	return o.SnapshotNum, true
}

// HasSnapshotNum returns a boolean if a field has been set.
func (o *DfsFile) HasSnapshotNum() bool {
	if o != nil && !IsNil(o.SnapshotNum) {
		return true
	}

	return false
}

// SetSnapshotNum gets a reference to the given int64 and assigns it to the SnapshotNum field.
func (o *DfsFile) SetSnapshotNum(v int64) {
	o.SnapshotNum = &v
}

// GetStretched returns the Stretched field value if set, zero value otherwise.
func (o *DfsFile) GetStretched() bool {
	if o == nil || IsNil(o.Stretched) {
		var ret bool
		return ret
	}
	return *o.Stretched
}

// GetStretchedOk returns a tuple with the Stretched field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFile) GetStretchedOk() (*bool, bool) {
	if o == nil || IsNil(o.Stretched) {
		return nil, false
	}
	return o.Stretched, true
}

// HasStretched returns a boolean if a field has been set.
func (o *DfsFile) HasStretched() bool {
	if o != nil && !IsNil(o.Stretched) {
		return true
	}

	return false
}

// SetStretched gets a reference to the given bool and assigns it to the Stretched field.
func (o *DfsFile) SetStretched(v bool) {
	o.Stretched = &v
}

// GetTotalSnapshotNum returns the TotalSnapshotNum field value if set, zero value otherwise.
func (o *DfsFile) GetTotalSnapshotNum() int64 {
	if o == nil || IsNil(o.TotalSnapshotNum) {
		var ret int64
		return ret
	}
	return *o.TotalSnapshotNum
}

// GetTotalSnapshotNumOk returns a tuple with the TotalSnapshotNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFile) GetTotalSnapshotNumOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalSnapshotNum) {
		return nil, false
	}
	return o.TotalSnapshotNum, true
}

// HasTotalSnapshotNum returns a boolean if a field has been set.
func (o *DfsFile) HasTotalSnapshotNum() bool {
	if o != nil && !IsNil(o.TotalSnapshotNum) {
		return true
	}

	return false
}

// SetTotalSnapshotNum gets a reference to the given int64 and assigns it to the TotalSnapshotNum field.
func (o *DfsFile) SetTotalSnapshotNum(v int64) {
	o.TotalSnapshotNum = &v
}

// GetTrash returns the Trash field value if set, zero value otherwise.
func (o *DfsFile) GetTrash() DfsFileTrash {
	if o == nil || IsNil(o.Trash) {
		var ret DfsFileTrash
		return ret
	}
	return *o.Trash
}

// GetTrashOk returns a tuple with the Trash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFile) GetTrashOk() (*DfsFileTrash, bool) {
	if o == nil || IsNil(o.Trash) {
		return nil, false
	}
	return o.Trash, true
}

// HasTrash returns a boolean if a field has been set.
func (o *DfsFile) HasTrash() bool {
	if o != nil && !IsNil(o.Trash) {
		return true
	}

	return false
}

// SetTrash gets a reference to the given DfsFileTrash and assigns it to the Trash field.
func (o *DfsFile) SetTrash(v DfsFileTrash) {
	o.Trash = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DfsFile) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFile) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DfsFile) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DfsFile) SetType(v string) {
	o.Type = &v
}

// GetWorm returns the Worm field value if set, zero value otherwise.
func (o *DfsFile) GetWorm() DfsFileWorm {
	if o == nil || IsNil(o.Worm) {
		var ret DfsFileWorm
		return ret
	}
	return *o.Worm
}

// GetWormOk returns a tuple with the Worm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFile) GetWormOk() (*DfsFileWorm, bool) {
	if o == nil || IsNil(o.Worm) {
		return nil, false
	}
	return o.Worm, true
}

// HasWorm returns a boolean if a field has been set.
func (o *DfsFile) HasWorm() bool {
	if o != nil && !IsNil(o.Worm) {
		return true
	}

	return false
}

// SetWorm gets a reference to the given DfsFileWorm and assigns it to the Worm field.
func (o *DfsFile) SetWorm(v DfsFileWorm) {
	o.Worm = &v
}

func (o DfsFile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsFile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Access) {
		toSerialize["access"] = o.Access
	}
	if !IsNil(o.Bucket) {
		toSerialize["bucket"] = o.Bucket
	}
	if !IsNil(o.Change) {
		toSerialize["change"] = o.Change
	}
	if !IsNil(o.DfsPathId) {
		toSerialize["dfs_path_id"] = o.DfsPathId
	}
	if !IsNil(o.DfsPathPerformanceId) {
		toSerialize["dfs_path_performance_id"] = o.DfsPathPerformanceId
	}
	if !IsNil(o.DfsRootfs) {
		toSerialize["dfs_rootfs"] = o.DfsRootfs
	}
	if !IsNil(o.DfsStoragePolicies) {
		toSerialize["dfs_storage_policies"] = o.DfsStoragePolicies
	}
	if !IsNil(o.DirQuotaNum) {
		toSerialize["dir_quota_num"] = o.DirQuotaNum
	}
	if !IsNil(o.DpSnapshotNum) {
		toSerialize["dp_snapshot_num"] = o.DpSnapshotNum
	}
	if !IsNil(o.Files) {
		toSerialize["files"] = o.Files
	}
	if !IsNil(o.FtpShare) {
		toSerialize["ftp_share"] = o.FtpShare
	}
	if !IsNil(o.FullPathSnapNum) {
		toSerialize["full_path_snap_num"] = o.FullPathSnapNum
	}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	if !IsNil(o.HdfsNum) {
		toSerialize["hdfs_num"] = o.HdfsNum
	}
	if !IsNil(o.Hdfses) {
		toSerialize["hdfses"] = o.Hdfses
	}
	if !IsNil(o.Inode) {
		toSerialize["inode"] = o.Inode
	}
	if !IsNil(o.IsBucket) {
		toSerialize["is_bucket"] = o.IsBucket
	}
	if !IsNil(o.IsBucketParent) {
		toSerialize["is_bucket_parent"] = o.IsBucketParent
	}
	if !IsNil(o.LocalGroupInfo) {
		toSerialize["local_group_info"] = o.LocalGroupInfo
	}
	if !IsNil(o.LocalUserInfo) {
		toSerialize["local_user_info"] = o.LocalUserInfo
	}
	if !IsNil(o.Mode) {
		toSerialize["mode"] = o.Mode
	}
	if !IsNil(o.Modify) {
		toSerialize["modify"] = o.Modify
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NfsShare) {
		toSerialize["nfs_share"] = o.NfsShare
	}
	if !IsNil(o.OriginalName) {
		toSerialize["original_name"] = o.OriginalName
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !IsNil(o.Parent) {
		toSerialize["parent"] = o.Parent
	}
	if !IsNil(o.ParentPathStoragePolicies) {
		toSerialize["parent_path_storage_policies"] = o.ParentPathStoragePolicies
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.Qos) {
		toSerialize["qos"] = o.Qos
	}
	if !IsNil(o.QuotaNum) {
		toSerialize["quota_num"] = o.QuotaNum
	}
	if !IsNil(o.Shared) {
		toSerialize["shared"] = o.Shared
	}
	if !IsNil(o.Shares) {
		toSerialize["shares"] = o.Shares
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.SmbShares) {
		toSerialize["smb_shares"] = o.SmbShares
	}
	if !IsNil(o.SnapshotNum) {
		toSerialize["snapshot_num"] = o.SnapshotNum
	}
	if !IsNil(o.Stretched) {
		toSerialize["stretched"] = o.Stretched
	}
	if !IsNil(o.TotalSnapshotNum) {
		toSerialize["total_snapshot_num"] = o.TotalSnapshotNum
	}
	if !IsNil(o.Trash) {
		toSerialize["trash"] = o.Trash
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Worm) {
		toSerialize["worm"] = o.Worm
	}
	return toSerialize, nil
}

type NullableDfsFile struct {
	value *DfsFile
	isSet bool
}

func (v NullableDfsFile) Get() *DfsFile {
	return v.value
}

func (v *NullableDfsFile) Set(val *DfsFile) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsFile) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsFile(val *DfsFile) *NullableDfsFile {
	return &NullableDfsFile{value: val, isSet: true}
}

func (v NullableDfsFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


