/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DfsTrashFileJobResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsTrashFileJobResp{}

// DfsTrashFileJobResp struct for DfsTrashFileJobResp
type DfsTrashFileJobResp struct {
	DfsTrashFileJob DfsTrashFileJob `json:"dfs_trash_file_job"`
}

type _DfsTrashFileJobResp DfsTrashFileJobResp

// NewDfsTrashFileJobResp instantiates a new DfsTrashFileJobResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsTrashFileJobResp(dfsTrashFileJob DfsTrashFileJob) *DfsTrashFileJobResp {
	this := DfsTrashFileJobResp{}
	this.DfsTrashFileJob = dfsTrashFileJob
	return &this
}

// NewDfsTrashFileJobRespWithDefaults instantiates a new DfsTrashFileJobResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsTrashFileJobRespWithDefaults() *DfsTrashFileJobResp {
	this := DfsTrashFileJobResp{}
	return &this
}

// GetDfsTrashFileJob returns the DfsTrashFileJob field value
func (o *DfsTrashFileJobResp) GetDfsTrashFileJob() DfsTrashFileJob {
	if o == nil {
		var ret DfsTrashFileJob
		return ret
	}

	return o.DfsTrashFileJob
}

// GetDfsTrashFileJobOk returns a tuple with the DfsTrashFileJob field value
// and a boolean to check if the value has been set.
func (o *DfsTrashFileJobResp) GetDfsTrashFileJobOk() (*DfsTrashFileJob, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DfsTrashFileJob, true
}

// SetDfsTrashFileJob sets field value
func (o *DfsTrashFileJobResp) SetDfsTrashFileJob(v DfsTrashFileJob) {
	o.DfsTrashFileJob = v
}

func (o DfsTrashFileJobResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsTrashFileJobResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dfs_trash_file_job"] = o.DfsTrashFileJob
	return toSerialize, nil
}

func (o *DfsTrashFileJobResp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dfs_trash_file_job",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDfsTrashFileJobResp := _DfsTrashFileJobResp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDfsTrashFileJobResp)

	if err != nil {
		return err
	}

	*o = DfsTrashFileJobResp(varDfsTrashFileJobResp)

	return err
}

type NullableDfsTrashFileJobResp struct {
	value *DfsTrashFileJobResp
	isSet bool
}

func (v NullableDfsTrashFileJobResp) Get() *DfsTrashFileJobResp {
	return v.value
}

func (v *NullableDfsTrashFileJobResp) Set(val *DfsTrashFileJobResp) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsTrashFileJobResp) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsTrashFileJobResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsTrashFileJobResp(val *DfsTrashFileJobResp) *NullableDfsTrashFileJobResp {
	return &NullableDfsTrashFileJobResp{value: val, isSet: true}
}

func (v NullableDfsTrashFileJobResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsTrashFileJobResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


