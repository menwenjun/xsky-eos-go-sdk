/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OsdRebuildReqOsd type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OsdRebuildReqOsd{}

// OsdRebuildReqOsd struct for OsdRebuildReqOsd
type OsdRebuildReqOsd struct {
	// new data disk id
	NewDiskId *int64 `json:"new_disk_id,omitempty"`
	// see OsdCreateReq.Osd.MinAllocSize
	NewMinAllocSize *int64 `json:"new_min_alloc_size,omitempty"`
	// new size of omap partition
	NewOmapByte *int64 `json:"new_omap_byte,omitempty"`
	// new cache partition id
	NewPartitionId *int64 `json:"new_partition_id,omitempty"`
	// new read cache size in bytes
	NewReadCacheSize *int64 `json:"new_read_cache_size,omitempty"`
}

// NewOsdRebuildReqOsd instantiates a new OsdRebuildReqOsd object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOsdRebuildReqOsd() *OsdRebuildReqOsd {
	this := OsdRebuildReqOsd{}
	return &this
}

// NewOsdRebuildReqOsdWithDefaults instantiates a new OsdRebuildReqOsd object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOsdRebuildReqOsdWithDefaults() *OsdRebuildReqOsd {
	this := OsdRebuildReqOsd{}
	return &this
}

// GetNewDiskId returns the NewDiskId field value if set, zero value otherwise.
func (o *OsdRebuildReqOsd) GetNewDiskId() int64 {
	if o == nil || IsNil(o.NewDiskId) {
		var ret int64
		return ret
	}
	return *o.NewDiskId
}

// GetNewDiskIdOk returns a tuple with the NewDiskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsdRebuildReqOsd) GetNewDiskIdOk() (*int64, bool) {
	if o == nil || IsNil(o.NewDiskId) {
		return nil, false
	}
	return o.NewDiskId, true
}

// HasNewDiskId returns a boolean if a field has been set.
func (o *OsdRebuildReqOsd) HasNewDiskId() bool {
	if o != nil && !IsNil(o.NewDiskId) {
		return true
	}

	return false
}

// SetNewDiskId gets a reference to the given int64 and assigns it to the NewDiskId field.
func (o *OsdRebuildReqOsd) SetNewDiskId(v int64) {
	o.NewDiskId = &v
}

// GetNewMinAllocSize returns the NewMinAllocSize field value if set, zero value otherwise.
func (o *OsdRebuildReqOsd) GetNewMinAllocSize() int64 {
	if o == nil || IsNil(o.NewMinAllocSize) {
		var ret int64
		return ret
	}
	return *o.NewMinAllocSize
}

// GetNewMinAllocSizeOk returns a tuple with the NewMinAllocSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsdRebuildReqOsd) GetNewMinAllocSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.NewMinAllocSize) {
		return nil, false
	}
	return o.NewMinAllocSize, true
}

// HasNewMinAllocSize returns a boolean if a field has been set.
func (o *OsdRebuildReqOsd) HasNewMinAllocSize() bool {
	if o != nil && !IsNil(o.NewMinAllocSize) {
		return true
	}

	return false
}

// SetNewMinAllocSize gets a reference to the given int64 and assigns it to the NewMinAllocSize field.
func (o *OsdRebuildReqOsd) SetNewMinAllocSize(v int64) {
	o.NewMinAllocSize = &v
}

// GetNewOmapByte returns the NewOmapByte field value if set, zero value otherwise.
func (o *OsdRebuildReqOsd) GetNewOmapByte() int64 {
	if o == nil || IsNil(o.NewOmapByte) {
		var ret int64
		return ret
	}
	return *o.NewOmapByte
}

// GetNewOmapByteOk returns a tuple with the NewOmapByte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsdRebuildReqOsd) GetNewOmapByteOk() (*int64, bool) {
	if o == nil || IsNil(o.NewOmapByte) {
		return nil, false
	}
	return o.NewOmapByte, true
}

// HasNewOmapByte returns a boolean if a field has been set.
func (o *OsdRebuildReqOsd) HasNewOmapByte() bool {
	if o != nil && !IsNil(o.NewOmapByte) {
		return true
	}

	return false
}

// SetNewOmapByte gets a reference to the given int64 and assigns it to the NewOmapByte field.
func (o *OsdRebuildReqOsd) SetNewOmapByte(v int64) {
	o.NewOmapByte = &v
}

// GetNewPartitionId returns the NewPartitionId field value if set, zero value otherwise.
func (o *OsdRebuildReqOsd) GetNewPartitionId() int64 {
	if o == nil || IsNil(o.NewPartitionId) {
		var ret int64
		return ret
	}
	return *o.NewPartitionId
}

// GetNewPartitionIdOk returns a tuple with the NewPartitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsdRebuildReqOsd) GetNewPartitionIdOk() (*int64, bool) {
	if o == nil || IsNil(o.NewPartitionId) {
		return nil, false
	}
	return o.NewPartitionId, true
}

// HasNewPartitionId returns a boolean if a field has been set.
func (o *OsdRebuildReqOsd) HasNewPartitionId() bool {
	if o != nil && !IsNil(o.NewPartitionId) {
		return true
	}

	return false
}

// SetNewPartitionId gets a reference to the given int64 and assigns it to the NewPartitionId field.
func (o *OsdRebuildReqOsd) SetNewPartitionId(v int64) {
	o.NewPartitionId = &v
}

// GetNewReadCacheSize returns the NewReadCacheSize field value if set, zero value otherwise.
func (o *OsdRebuildReqOsd) GetNewReadCacheSize() int64 {
	if o == nil || IsNil(o.NewReadCacheSize) {
		var ret int64
		return ret
	}
	return *o.NewReadCacheSize
}

// GetNewReadCacheSizeOk returns a tuple with the NewReadCacheSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsdRebuildReqOsd) GetNewReadCacheSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.NewReadCacheSize) {
		return nil, false
	}
	return o.NewReadCacheSize, true
}

// HasNewReadCacheSize returns a boolean if a field has been set.
func (o *OsdRebuildReqOsd) HasNewReadCacheSize() bool {
	if o != nil && !IsNil(o.NewReadCacheSize) {
		return true
	}

	return false
}

// SetNewReadCacheSize gets a reference to the given int64 and assigns it to the NewReadCacheSize field.
func (o *OsdRebuildReqOsd) SetNewReadCacheSize(v int64) {
	o.NewReadCacheSize = &v
}

func (o OsdRebuildReqOsd) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OsdRebuildReqOsd) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NewDiskId) {
		toSerialize["new_disk_id"] = o.NewDiskId
	}
	if !IsNil(o.NewMinAllocSize) {
		toSerialize["new_min_alloc_size"] = o.NewMinAllocSize
	}
	if !IsNil(o.NewOmapByte) {
		toSerialize["new_omap_byte"] = o.NewOmapByte
	}
	if !IsNil(o.NewPartitionId) {
		toSerialize["new_partition_id"] = o.NewPartitionId
	}
	if !IsNil(o.NewReadCacheSize) {
		toSerialize["new_read_cache_size"] = o.NewReadCacheSize
	}
	return toSerialize, nil
}

type NullableOsdRebuildReqOsd struct {
	value *OsdRebuildReqOsd
	isSet bool
}

func (v NullableOsdRebuildReqOsd) Get() *OsdRebuildReqOsd {
	return v.value
}

func (v *NullableOsdRebuildReqOsd) Set(val *OsdRebuildReqOsd) {
	v.value = val
	v.isSet = true
}

func (v NullableOsdRebuildReqOsd) IsSet() bool {
	return v.isSet
}

func (v *NullableOsdRebuildReqOsd) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOsdRebuildReqOsd(val *OsdRebuildReqOsd) *NullableOsdRebuildReqOsd {
	return &NullableOsdRebuildReqOsd{value: val, isSet: true}
}

func (v NullableOsdRebuildReqOsd) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOsdRebuildReqOsd) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


