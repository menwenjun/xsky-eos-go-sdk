/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DfsXDCacheViewResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsXDCacheViewResp{}

// DfsXDCacheViewResp struct for DfsXDCacheViewResp
type DfsXDCacheViewResp struct {
	DfsXdcacheView DfsXDCacheView `json:"dfs_xdcache_view"`
}

type _DfsXDCacheViewResp DfsXDCacheViewResp

// NewDfsXDCacheViewResp instantiates a new DfsXDCacheViewResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsXDCacheViewResp(dfsXdcacheView DfsXDCacheView) *DfsXDCacheViewResp {
	this := DfsXDCacheViewResp{}
	this.DfsXdcacheView = dfsXdcacheView
	return &this
}

// NewDfsXDCacheViewRespWithDefaults instantiates a new DfsXDCacheViewResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsXDCacheViewRespWithDefaults() *DfsXDCacheViewResp {
	this := DfsXDCacheViewResp{}
	return &this
}

// GetDfsXdcacheView returns the DfsXdcacheView field value
func (o *DfsXDCacheViewResp) GetDfsXdcacheView() DfsXDCacheView {
	if o == nil {
		var ret DfsXDCacheView
		return ret
	}

	return o.DfsXdcacheView
}

// GetDfsXdcacheViewOk returns a tuple with the DfsXdcacheView field value
// and a boolean to check if the value has been set.
func (o *DfsXDCacheViewResp) GetDfsXdcacheViewOk() (*DfsXDCacheView, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DfsXdcacheView, true
}

// SetDfsXdcacheView sets field value
func (o *DfsXDCacheViewResp) SetDfsXdcacheView(v DfsXDCacheView) {
	o.DfsXdcacheView = v
}

func (o DfsXDCacheViewResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsXDCacheViewResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dfs_xdcache_view"] = o.DfsXdcacheView
	return toSerialize, nil
}

func (o *DfsXDCacheViewResp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dfs_xdcache_view",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDfsXDCacheViewResp := _DfsXDCacheViewResp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDfsXDCacheViewResp)

	if err != nil {
		return err
	}

	*o = DfsXDCacheViewResp(varDfsXDCacheViewResp)

	return err
}

type NullableDfsXDCacheViewResp struct {
	value *DfsXDCacheViewResp
	isSet bool
}

func (v NullableDfsXDCacheViewResp) Get() *DfsXDCacheViewResp {
	return v.value
}

func (v *NullableDfsXDCacheViewResp) Set(val *DfsXDCacheViewResp) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsXDCacheViewResp) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsXDCacheViewResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsXDCacheViewResp(val *DfsXDCacheViewResp) *NullableDfsXDCacheViewResp {
	return &NullableDfsXDCacheViewResp{value: val, isSet: true}
}

func (v NullableDfsXDCacheViewResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsXDCacheViewResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


