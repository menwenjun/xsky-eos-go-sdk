/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PoolCapacityReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PoolCapacityReq{}

// PoolCapacityReq struct for PoolCapacityReq
type PoolCapacityReq struct {
	CodingChunkNum *int64 `json:"coding_chunk_num,omitempty"`
	DataChunkNum *int64 `json:"data_chunk_num,omitempty"`
	OsdIds []int64 `json:"osd_ids,omitempty"`
	PoolType *string `json:"pool_type,omitempty"`
	ReplicateSize *int64 `json:"replicate_size,omitempty"`
	ThinProvisioned *bool `json:"thin_provisioned,omitempty"`
}

// NewPoolCapacityReq instantiates a new PoolCapacityReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPoolCapacityReq() *PoolCapacityReq {
	this := PoolCapacityReq{}
	return &this
}

// NewPoolCapacityReqWithDefaults instantiates a new PoolCapacityReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPoolCapacityReqWithDefaults() *PoolCapacityReq {
	this := PoolCapacityReq{}
	return &this
}

// GetCodingChunkNum returns the CodingChunkNum field value if set, zero value otherwise.
func (o *PoolCapacityReq) GetCodingChunkNum() int64 {
	if o == nil || IsNil(o.CodingChunkNum) {
		var ret int64
		return ret
	}
	return *o.CodingChunkNum
}

// GetCodingChunkNumOk returns a tuple with the CodingChunkNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolCapacityReq) GetCodingChunkNumOk() (*int64, bool) {
	if o == nil || IsNil(o.CodingChunkNum) {
		return nil, false
	}
	return o.CodingChunkNum, true
}

// HasCodingChunkNum returns a boolean if a field has been set.
func (o *PoolCapacityReq) HasCodingChunkNum() bool {
	if o != nil && !IsNil(o.CodingChunkNum) {
		return true
	}

	return false
}

// SetCodingChunkNum gets a reference to the given int64 and assigns it to the CodingChunkNum field.
func (o *PoolCapacityReq) SetCodingChunkNum(v int64) {
	o.CodingChunkNum = &v
}

// GetDataChunkNum returns the DataChunkNum field value if set, zero value otherwise.
func (o *PoolCapacityReq) GetDataChunkNum() int64 {
	if o == nil || IsNil(o.DataChunkNum) {
		var ret int64
		return ret
	}
	return *o.DataChunkNum
}

// GetDataChunkNumOk returns a tuple with the DataChunkNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolCapacityReq) GetDataChunkNumOk() (*int64, bool) {
	if o == nil || IsNil(o.DataChunkNum) {
		return nil, false
	}
	return o.DataChunkNum, true
}

// HasDataChunkNum returns a boolean if a field has been set.
func (o *PoolCapacityReq) HasDataChunkNum() bool {
	if o != nil && !IsNil(o.DataChunkNum) {
		return true
	}

	return false
}

// SetDataChunkNum gets a reference to the given int64 and assigns it to the DataChunkNum field.
func (o *PoolCapacityReq) SetDataChunkNum(v int64) {
	o.DataChunkNum = &v
}

// GetOsdIds returns the OsdIds field value if set, zero value otherwise.
func (o *PoolCapacityReq) GetOsdIds() []int64 {
	if o == nil || IsNil(o.OsdIds) {
		var ret []int64
		return ret
	}
	return o.OsdIds
}

// GetOsdIdsOk returns a tuple with the OsdIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolCapacityReq) GetOsdIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.OsdIds) {
		return nil, false
	}
	return o.OsdIds, true
}

// HasOsdIds returns a boolean if a field has been set.
func (o *PoolCapacityReq) HasOsdIds() bool {
	if o != nil && !IsNil(o.OsdIds) {
		return true
	}

	return false
}

// SetOsdIds gets a reference to the given []int64 and assigns it to the OsdIds field.
func (o *PoolCapacityReq) SetOsdIds(v []int64) {
	o.OsdIds = v
}

// GetPoolType returns the PoolType field value if set, zero value otherwise.
func (o *PoolCapacityReq) GetPoolType() string {
	if o == nil || IsNil(o.PoolType) {
		var ret string
		return ret
	}
	return *o.PoolType
}

// GetPoolTypeOk returns a tuple with the PoolType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolCapacityReq) GetPoolTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PoolType) {
		return nil, false
	}
	return o.PoolType, true
}

// HasPoolType returns a boolean if a field has been set.
func (o *PoolCapacityReq) HasPoolType() bool {
	if o != nil && !IsNil(o.PoolType) {
		return true
	}

	return false
}

// SetPoolType gets a reference to the given string and assigns it to the PoolType field.
func (o *PoolCapacityReq) SetPoolType(v string) {
	o.PoolType = &v
}

// GetReplicateSize returns the ReplicateSize field value if set, zero value otherwise.
func (o *PoolCapacityReq) GetReplicateSize() int64 {
	if o == nil || IsNil(o.ReplicateSize) {
		var ret int64
		return ret
	}
	return *o.ReplicateSize
}

// GetReplicateSizeOk returns a tuple with the ReplicateSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolCapacityReq) GetReplicateSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.ReplicateSize) {
		return nil, false
	}
	return o.ReplicateSize, true
}

// HasReplicateSize returns a boolean if a field has been set.
func (o *PoolCapacityReq) HasReplicateSize() bool {
	if o != nil && !IsNil(o.ReplicateSize) {
		return true
	}

	return false
}

// SetReplicateSize gets a reference to the given int64 and assigns it to the ReplicateSize field.
func (o *PoolCapacityReq) SetReplicateSize(v int64) {
	o.ReplicateSize = &v
}

// GetThinProvisioned returns the ThinProvisioned field value if set, zero value otherwise.
func (o *PoolCapacityReq) GetThinProvisioned() bool {
	if o == nil || IsNil(o.ThinProvisioned) {
		var ret bool
		return ret
	}
	return *o.ThinProvisioned
}

// GetThinProvisionedOk returns a tuple with the ThinProvisioned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolCapacityReq) GetThinProvisionedOk() (*bool, bool) {
	if o == nil || IsNil(o.ThinProvisioned) {
		return nil, false
	}
	return o.ThinProvisioned, true
}

// HasThinProvisioned returns a boolean if a field has been set.
func (o *PoolCapacityReq) HasThinProvisioned() bool {
	if o != nil && !IsNil(o.ThinProvisioned) {
		return true
	}

	return false
}

// SetThinProvisioned gets a reference to the given bool and assigns it to the ThinProvisioned field.
func (o *PoolCapacityReq) SetThinProvisioned(v bool) {
	o.ThinProvisioned = &v
}

func (o PoolCapacityReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PoolCapacityReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CodingChunkNum) {
		toSerialize["coding_chunk_num"] = o.CodingChunkNum
	}
	if !IsNil(o.DataChunkNum) {
		toSerialize["data_chunk_num"] = o.DataChunkNum
	}
	if !IsNil(o.OsdIds) {
		toSerialize["osd_ids"] = o.OsdIds
	}
	if !IsNil(o.PoolType) {
		toSerialize["pool_type"] = o.PoolType
	}
	if !IsNil(o.ReplicateSize) {
		toSerialize["replicate_size"] = o.ReplicateSize
	}
	if !IsNil(o.ThinProvisioned) {
		toSerialize["thin_provisioned"] = o.ThinProvisioned
	}
	return toSerialize, nil
}

type NullablePoolCapacityReq struct {
	value *PoolCapacityReq
	isSet bool
}

func (v NullablePoolCapacityReq) Get() *PoolCapacityReq {
	return v.value
}

func (v *NullablePoolCapacityReq) Set(val *PoolCapacityReq) {
	v.value = val
	v.isSet = true
}

func (v NullablePoolCapacityReq) IsSet() bool {
	return v.isSet
}

func (v *NullablePoolCapacityReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePoolCapacityReq(val *PoolCapacityReq) *NullablePoolCapacityReq {
	return &NullablePoolCapacityReq{value: val, isSet: true}
}

func (v NullablePoolCapacityReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePoolCapacityReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


