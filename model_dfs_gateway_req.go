/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DfsGatewayReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsGatewayReq{}

// DfsGatewayReq struct for DfsGatewayReq
type DfsGatewayReq struct {
	// host id
	HostId int64 `json:"host_id"`
	// network address id
	NetworkAddressId int64 `json:"network_address_id"`
}

type _DfsGatewayReq DfsGatewayReq

// NewDfsGatewayReq instantiates a new DfsGatewayReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsGatewayReq(hostId int64, networkAddressId int64) *DfsGatewayReq {
	this := DfsGatewayReq{}
	this.HostId = hostId
	this.NetworkAddressId = networkAddressId
	return &this
}

// NewDfsGatewayReqWithDefaults instantiates a new DfsGatewayReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsGatewayReqWithDefaults() *DfsGatewayReq {
	this := DfsGatewayReq{}
	return &this
}

// GetHostId returns the HostId field value
func (o *DfsGatewayReq) GetHostId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.HostId
}

// GetHostIdOk returns a tuple with the HostId field value
// and a boolean to check if the value has been set.
func (o *DfsGatewayReq) GetHostIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HostId, true
}

// SetHostId sets field value
func (o *DfsGatewayReq) SetHostId(v int64) {
	o.HostId = v
}

// GetNetworkAddressId returns the NetworkAddressId field value
func (o *DfsGatewayReq) GetNetworkAddressId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.NetworkAddressId
}

// GetNetworkAddressIdOk returns a tuple with the NetworkAddressId field value
// and a boolean to check if the value has been set.
func (o *DfsGatewayReq) GetNetworkAddressIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NetworkAddressId, true
}

// SetNetworkAddressId sets field value
func (o *DfsGatewayReq) SetNetworkAddressId(v int64) {
	o.NetworkAddressId = v
}

func (o DfsGatewayReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsGatewayReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["host_id"] = o.HostId
	toSerialize["network_address_id"] = o.NetworkAddressId
	return toSerialize, nil
}

func (o *DfsGatewayReq) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"host_id",
		"network_address_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDfsGatewayReq := _DfsGatewayReq{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDfsGatewayReq)

	if err != nil {
		return err
	}

	*o = DfsGatewayReq(varDfsGatewayReq)

	return err
}

type NullableDfsGatewayReq struct {
	value *DfsGatewayReq
	isSet bool
}

func (v NullableDfsGatewayReq) Get() *DfsGatewayReq {
	return v.value
}

func (v *NullableDfsGatewayReq) Set(val *DfsGatewayReq) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsGatewayReq) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsGatewayReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsGatewayReq(val *DfsGatewayReq) *NullableDfsGatewayReq {
	return &NullableDfsGatewayReq{value: val, isSet: true}
}

func (v NullableDfsGatewayReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsGatewayReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


