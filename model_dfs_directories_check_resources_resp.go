/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DfsDirectoriesCheckResourcesResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsDirectoriesCheckResourcesResp{}

// DfsDirectoriesCheckResourcesResp struct for DfsDirectoriesCheckResourcesResp
type DfsDirectoriesCheckResourcesResp struct {
	DfsDirectories *DfsDirectoriesCheckResourcesRespDirectory `json:"dfs_directories,omitempty"`
}

// NewDfsDirectoriesCheckResourcesResp instantiates a new DfsDirectoriesCheckResourcesResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsDirectoriesCheckResourcesResp() *DfsDirectoriesCheckResourcesResp {
	this := DfsDirectoriesCheckResourcesResp{}
	return &this
}

// NewDfsDirectoriesCheckResourcesRespWithDefaults instantiates a new DfsDirectoriesCheckResourcesResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsDirectoriesCheckResourcesRespWithDefaults() *DfsDirectoriesCheckResourcesResp {
	this := DfsDirectoriesCheckResourcesResp{}
	return &this
}

// GetDfsDirectories returns the DfsDirectories field value if set, zero value otherwise.
func (o *DfsDirectoriesCheckResourcesResp) GetDfsDirectories() DfsDirectoriesCheckResourcesRespDirectory {
	if o == nil || IsNil(o.DfsDirectories) {
		var ret DfsDirectoriesCheckResourcesRespDirectory
		return ret
	}
	return *o.DfsDirectories
}

// GetDfsDirectoriesOk returns a tuple with the DfsDirectories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsDirectoriesCheckResourcesResp) GetDfsDirectoriesOk() (*DfsDirectoriesCheckResourcesRespDirectory, bool) {
	if o == nil || IsNil(o.DfsDirectories) {
		return nil, false
	}
	return o.DfsDirectories, true
}

// HasDfsDirectories returns a boolean if a field has been set.
func (o *DfsDirectoriesCheckResourcesResp) HasDfsDirectories() bool {
	if o != nil && !IsNil(o.DfsDirectories) {
		return true
	}

	return false
}

// SetDfsDirectories gets a reference to the given DfsDirectoriesCheckResourcesRespDirectory and assigns it to the DfsDirectories field.
func (o *DfsDirectoriesCheckResourcesResp) SetDfsDirectories(v DfsDirectoriesCheckResourcesRespDirectory) {
	o.DfsDirectories = &v
}

func (o DfsDirectoriesCheckResourcesResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsDirectoriesCheckResourcesResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DfsDirectories) {
		toSerialize["dfs_directories"] = o.DfsDirectories
	}
	return toSerialize, nil
}

type NullableDfsDirectoriesCheckResourcesResp struct {
	value *DfsDirectoriesCheckResourcesResp
	isSet bool
}

func (v NullableDfsDirectoriesCheckResourcesResp) Get() *DfsDirectoriesCheckResourcesResp {
	return v.value
}

func (v *NullableDfsDirectoriesCheckResourcesResp) Set(val *DfsDirectoriesCheckResourcesResp) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsDirectoriesCheckResourcesResp) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsDirectoriesCheckResourcesResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsDirectoriesCheckResourcesResp(val *DfsDirectoriesCheckResourcesResp) *NullableDfsDirectoriesCheckResourcesResp {
	return &NullableDfsDirectoriesCheckResourcesResp{value: val, isSet: true}
}

func (v NullableDfsDirectoriesCheckResourcesResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsDirectoriesCheckResourcesResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


