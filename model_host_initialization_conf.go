/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HostInitializationConf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HostInitializationConf{}

// HostInitializationConf struct for HostInitializationConf
type HostInitializationConf struct {
	DefaultSshUser string `json:"default_ssh_user"`
}

type _HostInitializationConf HostInitializationConf

// NewHostInitializationConf instantiates a new HostInitializationConf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHostInitializationConf(defaultSshUser string) *HostInitializationConf {
	this := HostInitializationConf{}
	this.DefaultSshUser = defaultSshUser
	return &this
}

// NewHostInitializationConfWithDefaults instantiates a new HostInitializationConf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHostInitializationConfWithDefaults() *HostInitializationConf {
	this := HostInitializationConf{}
	return &this
}

// GetDefaultSshUser returns the DefaultSshUser field value
func (o *HostInitializationConf) GetDefaultSshUser() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DefaultSshUser
}

// GetDefaultSshUserOk returns a tuple with the DefaultSshUser field value
// and a boolean to check if the value has been set.
func (o *HostInitializationConf) GetDefaultSshUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultSshUser, true
}

// SetDefaultSshUser sets field value
func (o *HostInitializationConf) SetDefaultSshUser(v string) {
	o.DefaultSshUser = v
}

func (o HostInitializationConf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HostInitializationConf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["default_ssh_user"] = o.DefaultSshUser
	return toSerialize, nil
}

func (o *HostInitializationConf) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"default_ssh_user",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHostInitializationConf := _HostInitializationConf{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHostInitializationConf)

	if err != nil {
		return err
	}

	*o = HostInitializationConf(varHostInitializationConf)

	return err
}

type NullableHostInitializationConf struct {
	value *HostInitializationConf
	isSet bool
}

func (v NullableHostInitializationConf) Get() *HostInitializationConf {
	return v.value
}

func (v *NullableHostInitializationConf) Set(val *HostInitializationConf) {
	v.value = val
	v.isSet = true
}

func (v NullableHostInitializationConf) IsSet() bool {
	return v.isSet
}

func (v *NullableHostInitializationConf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHostInitializationConf(val *HostInitializationConf) *NullableHostInitializationConf {
	return &NullableHostInitializationConf{value: val, isSet: true}
}

func (v NullableHostInitializationConf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHostInitializationConf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


