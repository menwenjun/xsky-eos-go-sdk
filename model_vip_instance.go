/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the VIPInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VIPInstance{}

// VIPInstance VIPInstance is an instance of a VIP.
type VIPInstance struct {
	ActionStatus *string `json:"action_status,omitempty"`
	Create *time.Time `json:"create,omitempty"`
	Id *int64 `json:"id,omitempty"`
	NetworkAddress *NetworkAddressNestview `json:"network_address,omitempty"`
	Priority *int64 `json:"priority,omitempty"`
	Status *string `json:"status,omitempty"`
	Update *time.Time `json:"update,omitempty"`
	Vip *VIPNestview `json:"vip,omitempty"`
}

// NewVIPInstance instantiates a new VIPInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVIPInstance() *VIPInstance {
	this := VIPInstance{}
	return &this
}

// NewVIPInstanceWithDefaults instantiates a new VIPInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVIPInstanceWithDefaults() *VIPInstance {
	this := VIPInstance{}
	return &this
}

// GetActionStatus returns the ActionStatus field value if set, zero value otherwise.
func (o *VIPInstance) GetActionStatus() string {
	if o == nil || IsNil(o.ActionStatus) {
		var ret string
		return ret
	}
	return *o.ActionStatus
}

// GetActionStatusOk returns a tuple with the ActionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VIPInstance) GetActionStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ActionStatus) {
		return nil, false
	}
	return o.ActionStatus, true
}

// HasActionStatus returns a boolean if a field has been set.
func (o *VIPInstance) HasActionStatus() bool {
	if o != nil && !IsNil(o.ActionStatus) {
		return true
	}

	return false
}

// SetActionStatus gets a reference to the given string and assigns it to the ActionStatus field.
func (o *VIPInstance) SetActionStatus(v string) {
	o.ActionStatus = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *VIPInstance) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VIPInstance) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *VIPInstance) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *VIPInstance) SetCreate(v time.Time) {
	o.Create = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *VIPInstance) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VIPInstance) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *VIPInstance) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *VIPInstance) SetId(v int64) {
	o.Id = &v
}

// GetNetworkAddress returns the NetworkAddress field value if set, zero value otherwise.
func (o *VIPInstance) GetNetworkAddress() NetworkAddressNestview {
	if o == nil || IsNil(o.NetworkAddress) {
		var ret NetworkAddressNestview
		return ret
	}
	return *o.NetworkAddress
}

// GetNetworkAddressOk returns a tuple with the NetworkAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VIPInstance) GetNetworkAddressOk() (*NetworkAddressNestview, bool) {
	if o == nil || IsNil(o.NetworkAddress) {
		return nil, false
	}
	return o.NetworkAddress, true
}

// HasNetworkAddress returns a boolean if a field has been set.
func (o *VIPInstance) HasNetworkAddress() bool {
	if o != nil && !IsNil(o.NetworkAddress) {
		return true
	}

	return false
}

// SetNetworkAddress gets a reference to the given NetworkAddressNestview and assigns it to the NetworkAddress field.
func (o *VIPInstance) SetNetworkAddress(v NetworkAddressNestview) {
	o.NetworkAddress = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *VIPInstance) GetPriority() int64 {
	if o == nil || IsNil(o.Priority) {
		var ret int64
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VIPInstance) GetPriorityOk() (*int64, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *VIPInstance) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given int64 and assigns it to the Priority field.
func (o *VIPInstance) SetPriority(v int64) {
	o.Priority = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *VIPInstance) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VIPInstance) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *VIPInstance) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *VIPInstance) SetStatus(v string) {
	o.Status = &v
}

// GetUpdate returns the Update field value if set, zero value otherwise.
func (o *VIPInstance) GetUpdate() time.Time {
	if o == nil || IsNil(o.Update) {
		var ret time.Time
		return ret
	}
	return *o.Update
}

// GetUpdateOk returns a tuple with the Update field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VIPInstance) GetUpdateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Update) {
		return nil, false
	}
	return o.Update, true
}

// HasUpdate returns a boolean if a field has been set.
func (o *VIPInstance) HasUpdate() bool {
	if o != nil && !IsNil(o.Update) {
		return true
	}

	return false
}

// SetUpdate gets a reference to the given time.Time and assigns it to the Update field.
func (o *VIPInstance) SetUpdate(v time.Time) {
	o.Update = &v
}

// GetVip returns the Vip field value if set, zero value otherwise.
func (o *VIPInstance) GetVip() VIPNestview {
	if o == nil || IsNil(o.Vip) {
		var ret VIPNestview
		return ret
	}
	return *o.Vip
}

// GetVipOk returns a tuple with the Vip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VIPInstance) GetVipOk() (*VIPNestview, bool) {
	if o == nil || IsNil(o.Vip) {
		return nil, false
	}
	return o.Vip, true
}

// HasVip returns a boolean if a field has been set.
func (o *VIPInstance) HasVip() bool {
	if o != nil && !IsNil(o.Vip) {
		return true
	}

	return false
}

// SetVip gets a reference to the given VIPNestview and assigns it to the Vip field.
func (o *VIPInstance) SetVip(v VIPNestview) {
	o.Vip = &v
}

func (o VIPInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VIPInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActionStatus) {
		toSerialize["action_status"] = o.ActionStatus
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.NetworkAddress) {
		toSerialize["network_address"] = o.NetworkAddress
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Update) {
		toSerialize["update"] = o.Update
	}
	if !IsNil(o.Vip) {
		toSerialize["vip"] = o.Vip
	}
	return toSerialize, nil
}

type NullableVIPInstance struct {
	value *VIPInstance
	isSet bool
}

func (v NullableVIPInstance) Get() *VIPInstance {
	return v.value
}

func (v *NullableVIPInstance) Set(val *VIPInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableVIPInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableVIPInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVIPInstance(val *VIPInstance) *NullableVIPInstance {
	return &NullableVIPInstance{value: val, isSet: true}
}

func (v NullableVIPInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVIPInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


