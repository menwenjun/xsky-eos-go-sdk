/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the DfsHdfsACL type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsHdfsACL{}

// DfsHdfsACL DfsHdfsACL defines models of dfs hdfs acl
type DfsHdfsACL struct {
	Cluster *ClusterNestview `json:"cluster,omitempty"`
	Create *time.Time `json:"create,omitempty"`
	DfsHdfs *DfsHdfsNestview `json:"dfs_hdfs,omitempty"`
	DomainUser *DomainUser `json:"domain_user,omitempty"`
	DomainUserGroup *DomainUserGroup `json:"domain_user_group,omitempty"`
	FsUser *FSUserNestview `json:"fs_user,omitempty"`
	FsUserGroup *FSUserGroupNestview `json:"fs_user_group,omitempty"`
	FsUserGroupName *string `json:"fs_user_group_name,omitempty"`
	FsUserName *string `json:"fs_user_name,omitempty"`
	Id *int64 `json:"id,omitempty"`
	IsProxyUser *bool `json:"is_proxy_user,omitempty"`
	Permission *string `json:"permission,omitempty"`
	Security *string `json:"security,omitempty"`
	Status *string `json:"status,omitempty"`
	Type *string `json:"type,omitempty"`
	Update *time.Time `json:"update,omitempty"`
}

// NewDfsHdfsACL instantiates a new DfsHdfsACL object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsHdfsACL() *DfsHdfsACL {
	this := DfsHdfsACL{}
	return &this
}

// NewDfsHdfsACLWithDefaults instantiates a new DfsHdfsACL object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsHdfsACLWithDefaults() *DfsHdfsACL {
	this := DfsHdfsACL{}
	return &this
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *DfsHdfsACL) GetCluster() ClusterNestview {
	if o == nil || IsNil(o.Cluster) {
		var ret ClusterNestview
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsHdfsACL) GetClusterOk() (*ClusterNestview, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *DfsHdfsACL) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given ClusterNestview and assigns it to the Cluster field.
func (o *DfsHdfsACL) SetCluster(v ClusterNestview) {
	o.Cluster = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *DfsHdfsACL) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsHdfsACL) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *DfsHdfsACL) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *DfsHdfsACL) SetCreate(v time.Time) {
	o.Create = &v
}

// GetDfsHdfs returns the DfsHdfs field value if set, zero value otherwise.
func (o *DfsHdfsACL) GetDfsHdfs() DfsHdfsNestview {
	if o == nil || IsNil(o.DfsHdfs) {
		var ret DfsHdfsNestview
		return ret
	}
	return *o.DfsHdfs
}

// GetDfsHdfsOk returns a tuple with the DfsHdfs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsHdfsACL) GetDfsHdfsOk() (*DfsHdfsNestview, bool) {
	if o == nil || IsNil(o.DfsHdfs) {
		return nil, false
	}
	return o.DfsHdfs, true
}

// HasDfsHdfs returns a boolean if a field has been set.
func (o *DfsHdfsACL) HasDfsHdfs() bool {
	if o != nil && !IsNil(o.DfsHdfs) {
		return true
	}

	return false
}

// SetDfsHdfs gets a reference to the given DfsHdfsNestview and assigns it to the DfsHdfs field.
func (o *DfsHdfsACL) SetDfsHdfs(v DfsHdfsNestview) {
	o.DfsHdfs = &v
}

// GetDomainUser returns the DomainUser field value if set, zero value otherwise.
func (o *DfsHdfsACL) GetDomainUser() DomainUser {
	if o == nil || IsNil(o.DomainUser) {
		var ret DomainUser
		return ret
	}
	return *o.DomainUser
}

// GetDomainUserOk returns a tuple with the DomainUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsHdfsACL) GetDomainUserOk() (*DomainUser, bool) {
	if o == nil || IsNil(o.DomainUser) {
		return nil, false
	}
	return o.DomainUser, true
}

// HasDomainUser returns a boolean if a field has been set.
func (o *DfsHdfsACL) HasDomainUser() bool {
	if o != nil && !IsNil(o.DomainUser) {
		return true
	}

	return false
}

// SetDomainUser gets a reference to the given DomainUser and assigns it to the DomainUser field.
func (o *DfsHdfsACL) SetDomainUser(v DomainUser) {
	o.DomainUser = &v
}

// GetDomainUserGroup returns the DomainUserGroup field value if set, zero value otherwise.
func (o *DfsHdfsACL) GetDomainUserGroup() DomainUserGroup {
	if o == nil || IsNil(o.DomainUserGroup) {
		var ret DomainUserGroup
		return ret
	}
	return *o.DomainUserGroup
}

// GetDomainUserGroupOk returns a tuple with the DomainUserGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsHdfsACL) GetDomainUserGroupOk() (*DomainUserGroup, bool) {
	if o == nil || IsNil(o.DomainUserGroup) {
		return nil, false
	}
	return o.DomainUserGroup, true
}

// HasDomainUserGroup returns a boolean if a field has been set.
func (o *DfsHdfsACL) HasDomainUserGroup() bool {
	if o != nil && !IsNil(o.DomainUserGroup) {
		return true
	}

	return false
}

// SetDomainUserGroup gets a reference to the given DomainUserGroup and assigns it to the DomainUserGroup field.
func (o *DfsHdfsACL) SetDomainUserGroup(v DomainUserGroup) {
	o.DomainUserGroup = &v
}

// GetFsUser returns the FsUser field value if set, zero value otherwise.
func (o *DfsHdfsACL) GetFsUser() FSUserNestview {
	if o == nil || IsNil(o.FsUser) {
		var ret FSUserNestview
		return ret
	}
	return *o.FsUser
}

// GetFsUserOk returns a tuple with the FsUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsHdfsACL) GetFsUserOk() (*FSUserNestview, bool) {
	if o == nil || IsNil(o.FsUser) {
		return nil, false
	}
	return o.FsUser, true
}

// HasFsUser returns a boolean if a field has been set.
func (o *DfsHdfsACL) HasFsUser() bool {
	if o != nil && !IsNil(o.FsUser) {
		return true
	}

	return false
}

// SetFsUser gets a reference to the given FSUserNestview and assigns it to the FsUser field.
func (o *DfsHdfsACL) SetFsUser(v FSUserNestview) {
	o.FsUser = &v
}

// GetFsUserGroup returns the FsUserGroup field value if set, zero value otherwise.
func (o *DfsHdfsACL) GetFsUserGroup() FSUserGroupNestview {
	if o == nil || IsNil(o.FsUserGroup) {
		var ret FSUserGroupNestview
		return ret
	}
	return *o.FsUserGroup
}

// GetFsUserGroupOk returns a tuple with the FsUserGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsHdfsACL) GetFsUserGroupOk() (*FSUserGroupNestview, bool) {
	if o == nil || IsNil(o.FsUserGroup) {
		return nil, false
	}
	return o.FsUserGroup, true
}

// HasFsUserGroup returns a boolean if a field has been set.
func (o *DfsHdfsACL) HasFsUserGroup() bool {
	if o != nil && !IsNil(o.FsUserGroup) {
		return true
	}

	return false
}

// SetFsUserGroup gets a reference to the given FSUserGroupNestview and assigns it to the FsUserGroup field.
func (o *DfsHdfsACL) SetFsUserGroup(v FSUserGroupNestview) {
	o.FsUserGroup = &v
}

// GetFsUserGroupName returns the FsUserGroupName field value if set, zero value otherwise.
func (o *DfsHdfsACL) GetFsUserGroupName() string {
	if o == nil || IsNil(o.FsUserGroupName) {
		var ret string
		return ret
	}
	return *o.FsUserGroupName
}

// GetFsUserGroupNameOk returns a tuple with the FsUserGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsHdfsACL) GetFsUserGroupNameOk() (*string, bool) {
	if o == nil || IsNil(o.FsUserGroupName) {
		return nil, false
	}
	return o.FsUserGroupName, true
}

// HasFsUserGroupName returns a boolean if a field has been set.
func (o *DfsHdfsACL) HasFsUserGroupName() bool {
	if o != nil && !IsNil(o.FsUserGroupName) {
		return true
	}

	return false
}

// SetFsUserGroupName gets a reference to the given string and assigns it to the FsUserGroupName field.
func (o *DfsHdfsACL) SetFsUserGroupName(v string) {
	o.FsUserGroupName = &v
}

// GetFsUserName returns the FsUserName field value if set, zero value otherwise.
func (o *DfsHdfsACL) GetFsUserName() string {
	if o == nil || IsNil(o.FsUserName) {
		var ret string
		return ret
	}
	return *o.FsUserName
}

// GetFsUserNameOk returns a tuple with the FsUserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsHdfsACL) GetFsUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.FsUserName) {
		return nil, false
	}
	return o.FsUserName, true
}

// HasFsUserName returns a boolean if a field has been set.
func (o *DfsHdfsACL) HasFsUserName() bool {
	if o != nil && !IsNil(o.FsUserName) {
		return true
	}

	return false
}

// SetFsUserName gets a reference to the given string and assigns it to the FsUserName field.
func (o *DfsHdfsACL) SetFsUserName(v string) {
	o.FsUserName = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DfsHdfsACL) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsHdfsACL) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DfsHdfsACL) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *DfsHdfsACL) SetId(v int64) {
	o.Id = &v
}

// GetIsProxyUser returns the IsProxyUser field value if set, zero value otherwise.
func (o *DfsHdfsACL) GetIsProxyUser() bool {
	if o == nil || IsNil(o.IsProxyUser) {
		var ret bool
		return ret
	}
	return *o.IsProxyUser
}

// GetIsProxyUserOk returns a tuple with the IsProxyUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsHdfsACL) GetIsProxyUserOk() (*bool, bool) {
	if o == nil || IsNil(o.IsProxyUser) {
		return nil, false
	}
	return o.IsProxyUser, true
}

// HasIsProxyUser returns a boolean if a field has been set.
func (o *DfsHdfsACL) HasIsProxyUser() bool {
	if o != nil && !IsNil(o.IsProxyUser) {
		return true
	}

	return false
}

// SetIsProxyUser gets a reference to the given bool and assigns it to the IsProxyUser field.
func (o *DfsHdfsACL) SetIsProxyUser(v bool) {
	o.IsProxyUser = &v
}

// GetPermission returns the Permission field value if set, zero value otherwise.
func (o *DfsHdfsACL) GetPermission() string {
	if o == nil || IsNil(o.Permission) {
		var ret string
		return ret
	}
	return *o.Permission
}

// GetPermissionOk returns a tuple with the Permission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsHdfsACL) GetPermissionOk() (*string, bool) {
	if o == nil || IsNil(o.Permission) {
		return nil, false
	}
	return o.Permission, true
}

// HasPermission returns a boolean if a field has been set.
func (o *DfsHdfsACL) HasPermission() bool {
	if o != nil && !IsNil(o.Permission) {
		return true
	}

	return false
}

// SetPermission gets a reference to the given string and assigns it to the Permission field.
func (o *DfsHdfsACL) SetPermission(v string) {
	o.Permission = &v
}

// GetSecurity returns the Security field value if set, zero value otherwise.
func (o *DfsHdfsACL) GetSecurity() string {
	if o == nil || IsNil(o.Security) {
		var ret string
		return ret
	}
	return *o.Security
}

// GetSecurityOk returns a tuple with the Security field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsHdfsACL) GetSecurityOk() (*string, bool) {
	if o == nil || IsNil(o.Security) {
		return nil, false
	}
	return o.Security, true
}

// HasSecurity returns a boolean if a field has been set.
func (o *DfsHdfsACL) HasSecurity() bool {
	if o != nil && !IsNil(o.Security) {
		return true
	}

	return false
}

// SetSecurity gets a reference to the given string and assigns it to the Security field.
func (o *DfsHdfsACL) SetSecurity(v string) {
	o.Security = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DfsHdfsACL) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsHdfsACL) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DfsHdfsACL) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *DfsHdfsACL) SetStatus(v string) {
	o.Status = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DfsHdfsACL) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsHdfsACL) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DfsHdfsACL) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DfsHdfsACL) SetType(v string) {
	o.Type = &v
}

// GetUpdate returns the Update field value if set, zero value otherwise.
func (o *DfsHdfsACL) GetUpdate() time.Time {
	if o == nil || IsNil(o.Update) {
		var ret time.Time
		return ret
	}
	return *o.Update
}

// GetUpdateOk returns a tuple with the Update field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsHdfsACL) GetUpdateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Update) {
		return nil, false
	}
	return o.Update, true
}

// HasUpdate returns a boolean if a field has been set.
func (o *DfsHdfsACL) HasUpdate() bool {
	if o != nil && !IsNil(o.Update) {
		return true
	}

	return false
}

// SetUpdate gets a reference to the given time.Time and assigns it to the Update field.
func (o *DfsHdfsACL) SetUpdate(v time.Time) {
	o.Update = &v
}

func (o DfsHdfsACL) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsHdfsACL) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.DfsHdfs) {
		toSerialize["dfs_hdfs"] = o.DfsHdfs
	}
	if !IsNil(o.DomainUser) {
		toSerialize["domain_user"] = o.DomainUser
	}
	if !IsNil(o.DomainUserGroup) {
		toSerialize["domain_user_group"] = o.DomainUserGroup
	}
	if !IsNil(o.FsUser) {
		toSerialize["fs_user"] = o.FsUser
	}
	if !IsNil(o.FsUserGroup) {
		toSerialize["fs_user_group"] = o.FsUserGroup
	}
	if !IsNil(o.FsUserGroupName) {
		toSerialize["fs_user_group_name"] = o.FsUserGroupName
	}
	if !IsNil(o.FsUserName) {
		toSerialize["fs_user_name"] = o.FsUserName
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IsProxyUser) {
		toSerialize["is_proxy_user"] = o.IsProxyUser
	}
	if !IsNil(o.Permission) {
		toSerialize["permission"] = o.Permission
	}
	if !IsNil(o.Security) {
		toSerialize["security"] = o.Security
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Update) {
		toSerialize["update"] = o.Update
	}
	return toSerialize, nil
}

type NullableDfsHdfsACL struct {
	value *DfsHdfsACL
	isSet bool
}

func (v NullableDfsHdfsACL) Get() *DfsHdfsACL {
	return v.value
}

func (v *NullableDfsHdfsACL) Set(val *DfsHdfsACL) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsHdfsACL) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsHdfsACL) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsHdfsACL(val *DfsHdfsACL) *NullableDfsHdfsACL {
	return &NullableDfsHdfsACL{value: val, isSet: true}
}

func (v NullableDfsHdfsACL) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsHdfsACL) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


