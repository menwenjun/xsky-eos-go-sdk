/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DfsStoragePolicyCreateReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsStoragePolicyCreateReq{}

// DfsStoragePolicyCreateReq struct for DfsStoragePolicyCreateReq
type DfsStoragePolicyCreateReq struct {
	DfsStoragePolicy DfsStoragePolicyCreateReqDfsStoragePolicy `json:"dfs_storage_policy"`
}

type _DfsStoragePolicyCreateReq DfsStoragePolicyCreateReq

// NewDfsStoragePolicyCreateReq instantiates a new DfsStoragePolicyCreateReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsStoragePolicyCreateReq(dfsStoragePolicy DfsStoragePolicyCreateReqDfsStoragePolicy) *DfsStoragePolicyCreateReq {
	this := DfsStoragePolicyCreateReq{}
	this.DfsStoragePolicy = dfsStoragePolicy
	return &this
}

// NewDfsStoragePolicyCreateReqWithDefaults instantiates a new DfsStoragePolicyCreateReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsStoragePolicyCreateReqWithDefaults() *DfsStoragePolicyCreateReq {
	this := DfsStoragePolicyCreateReq{}
	return &this
}

// GetDfsStoragePolicy returns the DfsStoragePolicy field value
func (o *DfsStoragePolicyCreateReq) GetDfsStoragePolicy() DfsStoragePolicyCreateReqDfsStoragePolicy {
	if o == nil {
		var ret DfsStoragePolicyCreateReqDfsStoragePolicy
		return ret
	}

	return o.DfsStoragePolicy
}

// GetDfsStoragePolicyOk returns a tuple with the DfsStoragePolicy field value
// and a boolean to check if the value has been set.
func (o *DfsStoragePolicyCreateReq) GetDfsStoragePolicyOk() (*DfsStoragePolicyCreateReqDfsStoragePolicy, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DfsStoragePolicy, true
}

// SetDfsStoragePolicy sets field value
func (o *DfsStoragePolicyCreateReq) SetDfsStoragePolicy(v DfsStoragePolicyCreateReqDfsStoragePolicy) {
	o.DfsStoragePolicy = v
}

func (o DfsStoragePolicyCreateReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsStoragePolicyCreateReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dfs_storage_policy"] = o.DfsStoragePolicy
	return toSerialize, nil
}

func (o *DfsStoragePolicyCreateReq) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dfs_storage_policy",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDfsStoragePolicyCreateReq := _DfsStoragePolicyCreateReq{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDfsStoragePolicyCreateReq)

	if err != nil {
		return err
	}

	*o = DfsStoragePolicyCreateReq(varDfsStoragePolicyCreateReq)

	return err
}

type NullableDfsStoragePolicyCreateReq struct {
	value *DfsStoragePolicyCreateReq
	isSet bool
}

func (v NullableDfsStoragePolicyCreateReq) Get() *DfsStoragePolicyCreateReq {
	return v.value
}

func (v *NullableDfsStoragePolicyCreateReq) Set(val *DfsStoragePolicyCreateReq) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsStoragePolicyCreateReq) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsStoragePolicyCreateReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsStoragePolicyCreateReq(val *DfsStoragePolicyCreateReq) *NullableDfsStoragePolicyCreateReq {
	return &NullableDfsStoragePolicyCreateReq{value: val, isSet: true}
}

func (v NullableDfsStoragePolicyCreateReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsStoragePolicyCreateReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


