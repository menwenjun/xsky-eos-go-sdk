/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// OsZonesAPIService OsZonesAPI service
type OsZonesAPIService service

type ApiCreateObjectStorageZoneRequest struct {
	ctx context.Context
	ApiService *OsZonesAPIService
	body *ObjectStorageZoneCreateReq
	clusterId *string
}

// zone info
func (r ApiCreateObjectStorageZoneRequest) Body(body ObjectStorageZoneCreateReq) ApiCreateObjectStorageZoneRequest {
	r.body = &body
	return r
}

// cluster id
func (r ApiCreateObjectStorageZoneRequest) ClusterId(clusterId string) ApiCreateObjectStorageZoneRequest {
	r.clusterId = &clusterId
	return r
}

func (r ApiCreateObjectStorageZoneRequest) Execute() (*ObjectStorageZoneResp, *http.Response, error) {
	return r.ApiService.CreateObjectStorageZoneExecute(r)
}

/*
CreateObjectStorageZone Method for CreateObjectStorageZone

Create a object storage zone

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateObjectStorageZoneRequest
*/
func (a *OsZonesAPIService) CreateObjectStorageZone(ctx context.Context) ApiCreateObjectStorageZoneRequest {
	return ApiCreateObjectStorageZoneRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ObjectStorageZoneResp
func (a *OsZonesAPIService) CreateObjectStorageZoneExecute(r ApiCreateObjectStorageZoneRequest) (*ObjectStorageZoneResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ObjectStorageZoneResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OsZonesAPIService.CreateObjectStorageZone")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/os-zones/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.clusterId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_id", r.clusterId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteObjectStorageZoneRequest struct {
	ctx context.Context
	ApiService *OsZonesAPIService
	zoneUuid string
	force *bool
}

// delete os zone forcefully or not
func (r ApiDeleteObjectStorageZoneRequest) Force(force bool) ApiDeleteObjectStorageZoneRequest {
	r.force = &force
	return r
}

func (r ApiDeleteObjectStorageZoneRequest) Execute() (*ObjectStorageZoneResp, *http.Response, error) {
	return r.ApiService.DeleteObjectStorageZoneExecute(r)
}

/*
DeleteObjectStorageZone Method for DeleteObjectStorageZone

Delete a object storage zone

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param zoneUuid os zone uuid
 @return ApiDeleteObjectStorageZoneRequest
*/
func (a *OsZonesAPIService) DeleteObjectStorageZone(ctx context.Context, zoneUuid string) ApiDeleteObjectStorageZoneRequest {
	return ApiDeleteObjectStorageZoneRequest{
		ApiService: a,
		ctx: ctx,
		zoneUuid: zoneUuid,
	}
}

// Execute executes the request
//  @return ObjectStorageZoneResp
func (a *OsZonesAPIService) DeleteObjectStorageZoneExecute(r ApiDeleteObjectStorageZoneRequest) (*ObjectStorageZoneResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ObjectStorageZoneResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OsZonesAPIService.DeleteObjectStorageZone")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/os-zones/{zone_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"zone_uuid"+"}", url.PathEscape(parameterValueToString(r.zoneUuid, "zoneUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.force != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "force", r.force, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetObjectStorageZoneRequest struct {
	ctx context.Context
	ApiService *OsZonesAPIService
	zoneUuid string
}

func (r ApiGetObjectStorageZoneRequest) Execute() (*ObjectStorageZoneRecordResp, *http.Response, error) {
	return r.ApiService.GetObjectStorageZoneExecute(r)
}

/*
GetObjectStorageZone Method for GetObjectStorageZone

Get object storage zone

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param zoneUuid object storage zone uuid
 @return ApiGetObjectStorageZoneRequest
*/
func (a *OsZonesAPIService) GetObjectStorageZone(ctx context.Context, zoneUuid string) ApiGetObjectStorageZoneRequest {
	return ApiGetObjectStorageZoneRequest{
		ApiService: a,
		ctx: ctx,
		zoneUuid: zoneUuid,
	}
}

// Execute executes the request
//  @return ObjectStorageZoneRecordResp
func (a *OsZonesAPIService) GetObjectStorageZoneExecute(r ApiGetObjectStorageZoneRequest) (*ObjectStorageZoneRecordResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ObjectStorageZoneRecordResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OsZonesAPIService.GetObjectStorageZone")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/os-zones/{zone_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"zone_uuid"+"}", url.PathEscape(parameterValueToString(r.zoneUuid, "zoneUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetObjectStorageZoneSamplesRequest struct {
	ctx context.Context
	ApiService *OsZonesAPIService
	zoneUuid string
	durationBegin *string
	durationEnd *string
	period *string
}

// duration begin timestamp
func (r ApiGetObjectStorageZoneSamplesRequest) DurationBegin(durationBegin string) ApiGetObjectStorageZoneSamplesRequest {
	r.durationBegin = &durationBegin
	return r
}

// duration end timestamp
func (r ApiGetObjectStorageZoneSamplesRequest) DurationEnd(durationEnd string) ApiGetObjectStorageZoneSamplesRequest {
	r.durationEnd = &durationEnd
	return r
}

// samples period
func (r ApiGetObjectStorageZoneSamplesRequest) Period(period string) ApiGetObjectStorageZoneSamplesRequest {
	r.period = &period
	return r
}

func (r ApiGetObjectStorageZoneSamplesRequest) Execute() (*ObjectStorageZoneSamplesResp, *http.Response, error) {
	return r.ApiService.GetObjectStorageZoneSamplesExecute(r)
}

/*
GetObjectStorageZoneSamples Method for GetObjectStorageZoneSamples

get an object storage zone's Samples

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param zoneUuid object storage zone uuid
 @return ApiGetObjectStorageZoneSamplesRequest
*/
func (a *OsZonesAPIService) GetObjectStorageZoneSamples(ctx context.Context, zoneUuid string) ApiGetObjectStorageZoneSamplesRequest {
	return ApiGetObjectStorageZoneSamplesRequest{
		ApiService: a,
		ctx: ctx,
		zoneUuid: zoneUuid,
	}
}

// Execute executes the request
//  @return ObjectStorageZoneSamplesResp
func (a *OsZonesAPIService) GetObjectStorageZoneSamplesExecute(r ApiGetObjectStorageZoneSamplesRequest) (*ObjectStorageZoneSamplesResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ObjectStorageZoneSamplesResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OsZonesAPIService.GetObjectStorageZoneSamples")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/os-zones/{zone_uuid}/samples"
	localVarPath = strings.Replace(localVarPath, "{"+"zone_uuid"+"}", url.PathEscape(parameterValueToString(r.zoneUuid, "zoneUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.durationBegin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration_begin", r.durationBegin, "form", "")
	}
	if r.durationEnd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration_end", r.durationEnd, "form", "")
	}
	if r.period != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "period", r.period, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListObjectStorageZonesRequest struct {
	ctx context.Context
	ApiService *OsZonesAPIService
	limit *int64
	offset *int64
	q *string
	sort *string
	local *bool
	master *bool
	name *string
	clusterId *string
}

// paging param
func (r ApiListObjectStorageZonesRequest) Limit(limit int64) ApiListObjectStorageZonesRequest {
	r.limit = &limit
	return r
}

// paging param
func (r ApiListObjectStorageZonesRequest) Offset(offset int64) ApiListObjectStorageZonesRequest {
	r.offset = &offset
	return r
}

// query param of search
func (r ApiListObjectStorageZonesRequest) Q(q string) ApiListObjectStorageZonesRequest {
	r.q = &q
	return r
}

// sort param of search
func (r ApiListObjectStorageZonesRequest) Sort(sort string) ApiListObjectStorageZonesRequest {
	r.sort = &sort
	return r
}

// local or non-local zones
func (r ApiListObjectStorageZonesRequest) Local(local bool) ApiListObjectStorageZonesRequest {
	r.local = &local
	return r
}

// master or non-master zones
func (r ApiListObjectStorageZonesRequest) Master(master bool) ApiListObjectStorageZonesRequest {
	r.master = &master
	return r
}

// name of zone
func (r ApiListObjectStorageZonesRequest) Name(name string) ApiListObjectStorageZonesRequest {
	r.name = &name
	return r
}

// cluster id
func (r ApiListObjectStorageZonesRequest) ClusterId(clusterId string) ApiListObjectStorageZonesRequest {
	r.clusterId = &clusterId
	return r
}

func (r ApiListObjectStorageZonesRequest) Execute() (*ObjectStorageZonesRecordResp, *http.Response, error) {
	return r.ApiService.ListObjectStorageZonesExecute(r)
}

/*
ListObjectStorageZones Method for ListObjectStorageZones

List object storage zones

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListObjectStorageZonesRequest
*/
func (a *OsZonesAPIService) ListObjectStorageZones(ctx context.Context) ApiListObjectStorageZonesRequest {
	return ApiListObjectStorageZonesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ObjectStorageZonesRecordResp
func (a *OsZonesAPIService) ListObjectStorageZonesExecute(r ApiListObjectStorageZonesRequest) (*ObjectStorageZonesRecordResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ObjectStorageZonesRecordResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OsZonesAPIService.ListObjectStorageZones")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/os-zones/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.local != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "local", r.local, "form", "")
	}
	if r.master != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "master", r.master, "form", "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.clusterId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_id", r.clusterId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateOSZonesClockDiffRequest struct {
	ctx context.Context
	ApiService *OsZonesAPIService
	zoneUuid string
	body *OSZonePairsUpdateReq
}

// zone pairs info
func (r ApiUpdateOSZonesClockDiffRequest) Body(body OSZonePairsUpdateReq) ApiUpdateOSZonesClockDiffRequest {
	r.body = &body
	return r
}

func (r ApiUpdateOSZonesClockDiffRequest) Execute() (*ObjectStorageZoneResp, *http.Response, error) {
	return r.ApiService.UpdateOSZonesClockDiffExecute(r)
}

/*
UpdateOSZonesClockDiff Method for UpdateOSZonesClockDiff

update os zone pairs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param zoneUuid os zone uuid
 @return ApiUpdateOSZonesClockDiffRequest
*/
func (a *OsZonesAPIService) UpdateOSZonesClockDiff(ctx context.Context, zoneUuid string) ApiUpdateOSZonesClockDiffRequest {
	return ApiUpdateOSZonesClockDiffRequest{
		ApiService: a,
		ctx: ctx,
		zoneUuid: zoneUuid,
	}
}

// Execute executes the request
//  @return ObjectStorageZoneResp
func (a *OsZonesAPIService) UpdateOSZonesClockDiffExecute(r ApiUpdateOSZonesClockDiffRequest) (*ObjectStorageZoneResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ObjectStorageZoneResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OsZonesAPIService.UpdateOSZonesClockDiff")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/os-zones/{zone_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"zone_uuid"+"}", url.PathEscape(parameterValueToString(r.zoneUuid, "zoneUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
