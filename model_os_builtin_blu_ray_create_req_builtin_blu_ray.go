/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OSBuiltinBluRayCreateReqBuiltinBluRay type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OSBuiltinBluRayCreateReqBuiltinBluRay{}

// OSBuiltinBluRayCreateReqBuiltinBluRay struct for OSBuiltinBluRayCreateReqBuiltinBluRay
type OSBuiltinBluRayCreateReqBuiltinBluRay struct {
	AdminEndpoint string `json:"admin_endpoint"`
	Name string `json:"name"`
	Password string `json:"password"`
	UserName string `json:"user_name"`
}

type _OSBuiltinBluRayCreateReqBuiltinBluRay OSBuiltinBluRayCreateReqBuiltinBluRay

// NewOSBuiltinBluRayCreateReqBuiltinBluRay instantiates a new OSBuiltinBluRayCreateReqBuiltinBluRay object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOSBuiltinBluRayCreateReqBuiltinBluRay(adminEndpoint string, name string, password string, userName string) *OSBuiltinBluRayCreateReqBuiltinBluRay {
	this := OSBuiltinBluRayCreateReqBuiltinBluRay{}
	this.AdminEndpoint = adminEndpoint
	this.Name = name
	this.Password = password
	this.UserName = userName
	return &this
}

// NewOSBuiltinBluRayCreateReqBuiltinBluRayWithDefaults instantiates a new OSBuiltinBluRayCreateReqBuiltinBluRay object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOSBuiltinBluRayCreateReqBuiltinBluRayWithDefaults() *OSBuiltinBluRayCreateReqBuiltinBluRay {
	this := OSBuiltinBluRayCreateReqBuiltinBluRay{}
	return &this
}

// GetAdminEndpoint returns the AdminEndpoint field value
func (o *OSBuiltinBluRayCreateReqBuiltinBluRay) GetAdminEndpoint() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AdminEndpoint
}

// GetAdminEndpointOk returns a tuple with the AdminEndpoint field value
// and a boolean to check if the value has been set.
func (o *OSBuiltinBluRayCreateReqBuiltinBluRay) GetAdminEndpointOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AdminEndpoint, true
}

// SetAdminEndpoint sets field value
func (o *OSBuiltinBluRayCreateReqBuiltinBluRay) SetAdminEndpoint(v string) {
	o.AdminEndpoint = v
}

// GetName returns the Name field value
func (o *OSBuiltinBluRayCreateReqBuiltinBluRay) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *OSBuiltinBluRayCreateReqBuiltinBluRay) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *OSBuiltinBluRayCreateReqBuiltinBluRay) SetName(v string) {
	o.Name = v
}

// GetPassword returns the Password field value
func (o *OSBuiltinBluRayCreateReqBuiltinBluRay) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *OSBuiltinBluRayCreateReqBuiltinBluRay) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *OSBuiltinBluRayCreateReqBuiltinBluRay) SetPassword(v string) {
	o.Password = v
}

// GetUserName returns the UserName field value
func (o *OSBuiltinBluRayCreateReqBuiltinBluRay) GetUserName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value
// and a boolean to check if the value has been set.
func (o *OSBuiltinBluRayCreateReqBuiltinBluRay) GetUserNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserName, true
}

// SetUserName sets field value
func (o *OSBuiltinBluRayCreateReqBuiltinBluRay) SetUserName(v string) {
	o.UserName = v
}

func (o OSBuiltinBluRayCreateReqBuiltinBluRay) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OSBuiltinBluRayCreateReqBuiltinBluRay) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["admin_endpoint"] = o.AdminEndpoint
	toSerialize["name"] = o.Name
	toSerialize["password"] = o.Password
	toSerialize["user_name"] = o.UserName
	return toSerialize, nil
}

func (o *OSBuiltinBluRayCreateReqBuiltinBluRay) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"admin_endpoint",
		"name",
		"password",
		"user_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOSBuiltinBluRayCreateReqBuiltinBluRay := _OSBuiltinBluRayCreateReqBuiltinBluRay{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOSBuiltinBluRayCreateReqBuiltinBluRay)

	if err != nil {
		return err
	}

	*o = OSBuiltinBluRayCreateReqBuiltinBluRay(varOSBuiltinBluRayCreateReqBuiltinBluRay)

	return err
}

type NullableOSBuiltinBluRayCreateReqBuiltinBluRay struct {
	value *OSBuiltinBluRayCreateReqBuiltinBluRay
	isSet bool
}

func (v NullableOSBuiltinBluRayCreateReqBuiltinBluRay) Get() *OSBuiltinBluRayCreateReqBuiltinBluRay {
	return v.value
}

func (v *NullableOSBuiltinBluRayCreateReqBuiltinBluRay) Set(val *OSBuiltinBluRayCreateReqBuiltinBluRay) {
	v.value = val
	v.isSet = true
}

func (v NullableOSBuiltinBluRayCreateReqBuiltinBluRay) IsSet() bool {
	return v.isSet
}

func (v *NullableOSBuiltinBluRayCreateReqBuiltinBluRay) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOSBuiltinBluRayCreateReqBuiltinBluRay(val *OSBuiltinBluRayCreateReqBuiltinBluRay) *NullableOSBuiltinBluRayCreateReqBuiltinBluRay {
	return &NullableOSBuiltinBluRayCreateReqBuiltinBluRay{value: val, isSet: true}
}

func (v NullableOSBuiltinBluRayCreateReqBuiltinBluRay) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOSBuiltinBluRayCreateReqBuiltinBluRay) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


