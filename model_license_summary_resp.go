/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LicenseSummaryResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LicenseSummaryResp{}

// LicenseSummaryResp struct for LicenseSummaryResp
type LicenseSummaryResp struct {
	Summary LicenseSummary `json:"summary"`
}

type _LicenseSummaryResp LicenseSummaryResp

// NewLicenseSummaryResp instantiates a new LicenseSummaryResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicenseSummaryResp(summary LicenseSummary) *LicenseSummaryResp {
	this := LicenseSummaryResp{}
	this.Summary = summary
	return &this
}

// NewLicenseSummaryRespWithDefaults instantiates a new LicenseSummaryResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicenseSummaryRespWithDefaults() *LicenseSummaryResp {
	this := LicenseSummaryResp{}
	return &this
}

// GetSummary returns the Summary field value
func (o *LicenseSummaryResp) GetSummary() LicenseSummary {
	if o == nil {
		var ret LicenseSummary
		return ret
	}

	return o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value
// and a boolean to check if the value has been set.
func (o *LicenseSummaryResp) GetSummaryOk() (*LicenseSummary, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Summary, true
}

// SetSummary sets field value
func (o *LicenseSummaryResp) SetSummary(v LicenseSummary) {
	o.Summary = v
}

func (o LicenseSummaryResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LicenseSummaryResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["summary"] = o.Summary
	return toSerialize, nil
}

func (o *LicenseSummaryResp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"summary",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLicenseSummaryResp := _LicenseSummaryResp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLicenseSummaryResp)

	if err != nil {
		return err
	}

	*o = LicenseSummaryResp(varLicenseSummaryResp)

	return err
}

type NullableLicenseSummaryResp struct {
	value *LicenseSummaryResp
	isSet bool
}

func (v NullableLicenseSummaryResp) Get() *LicenseSummaryResp {
	return v.value
}

func (v *NullableLicenseSummaryResp) Set(val *LicenseSummaryResp) {
	v.value = val
	v.isSet = true
}

func (v NullableLicenseSummaryResp) IsSet() bool {
	return v.isSet
}

func (v *NullableLicenseSummaryResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicenseSummaryResp(val *LicenseSummaryResp) *NullableLicenseSummaryResp {
	return &NullableLicenseSummaryResp{value: val, isSet: true}
}

func (v NullableLicenseSummaryResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicenseSummaryResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


