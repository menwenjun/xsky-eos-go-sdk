/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RemoteClusterCreateReqRemoteCluster type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RemoteClusterCreateReqRemoteCluster{}

// RemoteClusterCreateReqRemoteCluster struct for RemoteClusterCreateReqRemoteCluster
type RemoteClusterCreateReqRemoteCluster struct {
	// access token of remote cluster
	AccessToken string `json:"access_token"`
	// id of remote cluster
	RemoteClusterId *int64 `json:"remote_cluster_id,omitempty"`
	// URL of remote cluster
	Url string `json:"url"`
}

type _RemoteClusterCreateReqRemoteCluster RemoteClusterCreateReqRemoteCluster

// NewRemoteClusterCreateReqRemoteCluster instantiates a new RemoteClusterCreateReqRemoteCluster object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoteClusterCreateReqRemoteCluster(accessToken string, url string) *RemoteClusterCreateReqRemoteCluster {
	this := RemoteClusterCreateReqRemoteCluster{}
	this.AccessToken = accessToken
	this.Url = url
	return &this
}

// NewRemoteClusterCreateReqRemoteClusterWithDefaults instantiates a new RemoteClusterCreateReqRemoteCluster object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoteClusterCreateReqRemoteClusterWithDefaults() *RemoteClusterCreateReqRemoteCluster {
	this := RemoteClusterCreateReqRemoteCluster{}
	return &this
}

// GetAccessToken returns the AccessToken field value
func (o *RemoteClusterCreateReqRemoteCluster) GetAccessToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccessToken
}

// GetAccessTokenOk returns a tuple with the AccessToken field value
// and a boolean to check if the value has been set.
func (o *RemoteClusterCreateReqRemoteCluster) GetAccessTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessToken, true
}

// SetAccessToken sets field value
func (o *RemoteClusterCreateReqRemoteCluster) SetAccessToken(v string) {
	o.AccessToken = v
}

// GetRemoteClusterId returns the RemoteClusterId field value if set, zero value otherwise.
func (o *RemoteClusterCreateReqRemoteCluster) GetRemoteClusterId() int64 {
	if o == nil || IsNil(o.RemoteClusterId) {
		var ret int64
		return ret
	}
	return *o.RemoteClusterId
}

// GetRemoteClusterIdOk returns a tuple with the RemoteClusterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteClusterCreateReqRemoteCluster) GetRemoteClusterIdOk() (*int64, bool) {
	if o == nil || IsNil(o.RemoteClusterId) {
		return nil, false
	}
	return o.RemoteClusterId, true
}

// HasRemoteClusterId returns a boolean if a field has been set.
func (o *RemoteClusterCreateReqRemoteCluster) HasRemoteClusterId() bool {
	if o != nil && !IsNil(o.RemoteClusterId) {
		return true
	}

	return false
}

// SetRemoteClusterId gets a reference to the given int64 and assigns it to the RemoteClusterId field.
func (o *RemoteClusterCreateReqRemoteCluster) SetRemoteClusterId(v int64) {
	o.RemoteClusterId = &v
}

// GetUrl returns the Url field value
func (o *RemoteClusterCreateReqRemoteCluster) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *RemoteClusterCreateReqRemoteCluster) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *RemoteClusterCreateReqRemoteCluster) SetUrl(v string) {
	o.Url = v
}

func (o RemoteClusterCreateReqRemoteCluster) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RemoteClusterCreateReqRemoteCluster) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["access_token"] = o.AccessToken
	if !IsNil(o.RemoteClusterId) {
		toSerialize["remote_cluster_id"] = o.RemoteClusterId
	}
	toSerialize["url"] = o.Url
	return toSerialize, nil
}

func (o *RemoteClusterCreateReqRemoteCluster) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"access_token",
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRemoteClusterCreateReqRemoteCluster := _RemoteClusterCreateReqRemoteCluster{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRemoteClusterCreateReqRemoteCluster)

	if err != nil {
		return err
	}

	*o = RemoteClusterCreateReqRemoteCluster(varRemoteClusterCreateReqRemoteCluster)

	return err
}

type NullableRemoteClusterCreateReqRemoteCluster struct {
	value *RemoteClusterCreateReqRemoteCluster
	isSet bool
}

func (v NullableRemoteClusterCreateReqRemoteCluster) Get() *RemoteClusterCreateReqRemoteCluster {
	return v.value
}

func (v *NullableRemoteClusterCreateReqRemoteCluster) Set(val *RemoteClusterCreateReqRemoteCluster) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoteClusterCreateReqRemoteCluster) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoteClusterCreateReqRemoteCluster) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoteClusterCreateReqRemoteCluster(val *RemoteClusterCreateReqRemoteCluster) *NullableRemoteClusterCreateReqRemoteCluster {
	return &NullableRemoteClusterCreateReqRemoteCluster{value: val, isSet: true}
}

func (v NullableRemoteClusterCreateReqRemoteCluster) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoteClusterCreateReqRemoteCluster) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


