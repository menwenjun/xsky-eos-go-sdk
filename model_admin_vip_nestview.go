/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AdminVIPNestview type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdminVIPNestview{}

// AdminVIPNestview struct for AdminVIPNestview
type AdminVIPNestview struct {
	Enable *bool `json:"enable,omitempty"`
	Id *int64 `json:"id,omitempty"`
	Ip *string `json:"ip,omitempty"`
	Mask *int64 `json:"mask,omitempty"`
	SslEnable *bool `json:"ssl_enable,omitempty"`
}

// NewAdminVIPNestview instantiates a new AdminVIPNestview object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdminVIPNestview() *AdminVIPNestview {
	this := AdminVIPNestview{}
	return &this
}

// NewAdminVIPNestviewWithDefaults instantiates a new AdminVIPNestview object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdminVIPNestviewWithDefaults() *AdminVIPNestview {
	this := AdminVIPNestview{}
	return &this
}

// GetEnable returns the Enable field value if set, zero value otherwise.
func (o *AdminVIPNestview) GetEnable() bool {
	if o == nil || IsNil(o.Enable) {
		var ret bool
		return ret
	}
	return *o.Enable
}

// GetEnableOk returns a tuple with the Enable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminVIPNestview) GetEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.Enable) {
		return nil, false
	}
	return o.Enable, true
}

// HasEnable returns a boolean if a field has been set.
func (o *AdminVIPNestview) HasEnable() bool {
	if o != nil && !IsNil(o.Enable) {
		return true
	}

	return false
}

// SetEnable gets a reference to the given bool and assigns it to the Enable field.
func (o *AdminVIPNestview) SetEnable(v bool) {
	o.Enable = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AdminVIPNestview) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminVIPNestview) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AdminVIPNestview) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *AdminVIPNestview) SetId(v int64) {
	o.Id = &v
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *AdminVIPNestview) GetIp() string {
	if o == nil || IsNil(o.Ip) {
		var ret string
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminVIPNestview) GetIpOk() (*string, bool) {
	if o == nil || IsNil(o.Ip) {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *AdminVIPNestview) HasIp() bool {
	if o != nil && !IsNil(o.Ip) {
		return true
	}

	return false
}

// SetIp gets a reference to the given string and assigns it to the Ip field.
func (o *AdminVIPNestview) SetIp(v string) {
	o.Ip = &v
}

// GetMask returns the Mask field value if set, zero value otherwise.
func (o *AdminVIPNestview) GetMask() int64 {
	if o == nil || IsNil(o.Mask) {
		var ret int64
		return ret
	}
	return *o.Mask
}

// GetMaskOk returns a tuple with the Mask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminVIPNestview) GetMaskOk() (*int64, bool) {
	if o == nil || IsNil(o.Mask) {
		return nil, false
	}
	return o.Mask, true
}

// HasMask returns a boolean if a field has been set.
func (o *AdminVIPNestview) HasMask() bool {
	if o != nil && !IsNil(o.Mask) {
		return true
	}

	return false
}

// SetMask gets a reference to the given int64 and assigns it to the Mask field.
func (o *AdminVIPNestview) SetMask(v int64) {
	o.Mask = &v
}

// GetSslEnable returns the SslEnable field value if set, zero value otherwise.
func (o *AdminVIPNestview) GetSslEnable() bool {
	if o == nil || IsNil(o.SslEnable) {
		var ret bool
		return ret
	}
	return *o.SslEnable
}

// GetSslEnableOk returns a tuple with the SslEnable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminVIPNestview) GetSslEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.SslEnable) {
		return nil, false
	}
	return o.SslEnable, true
}

// HasSslEnable returns a boolean if a field has been set.
func (o *AdminVIPNestview) HasSslEnable() bool {
	if o != nil && !IsNil(o.SslEnable) {
		return true
	}

	return false
}

// SetSslEnable gets a reference to the given bool and assigns it to the SslEnable field.
func (o *AdminVIPNestview) SetSslEnable(v bool) {
	o.SslEnable = &v
}

func (o AdminVIPNestview) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdminVIPNestview) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enable) {
		toSerialize["enable"] = o.Enable
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Ip) {
		toSerialize["ip"] = o.Ip
	}
	if !IsNil(o.Mask) {
		toSerialize["mask"] = o.Mask
	}
	if !IsNil(o.SslEnable) {
		toSerialize["ssl_enable"] = o.SslEnable
	}
	return toSerialize, nil
}

type NullableAdminVIPNestview struct {
	value *AdminVIPNestview
	isSet bool
}

func (v NullableAdminVIPNestview) Get() *AdminVIPNestview {
	return v.value
}

func (v *NullableAdminVIPNestview) Set(val *AdminVIPNestview) {
	v.value = val
	v.isSet = true
}

func (v NullableAdminVIPNestview) IsSet() bool {
	return v.isSet
}

func (v *NullableAdminVIPNestview) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdminVIPNestview(val *AdminVIPNestview) *NullableAdminVIPNestview {
	return &NullableAdminVIPNestview{value: val, isSet: true}
}

func (v NullableAdminVIPNestview) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdminVIPNestview) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


