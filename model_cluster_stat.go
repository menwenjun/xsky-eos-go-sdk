/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the ClusterStat type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterStat{}

// ClusterStat ClusterStat defines the statistics metric of a ceph cluster
type ClusterStat struct {
	ActualKbyte *int64 `json:"actual_kbyte,omitempty"`
	AllocatedSize *int64 `json:"allocated_size,omitempty"`
	Create *time.Time `json:"create,omitempty"`
	DataKbyte *int64 `json:"data_kbyte,omitempty"`
	DegradedPercent *float64 `json:"degraded_percent,omitempty"`
	ErrorKbyte *int64 `json:"error_kbyte,omitempty"`
	HealthyPercent *float64 `json:"healthy_percent,omitempty"`
	MaxAvailableKbyte *int64 `json:"max_available_kbyte,omitempty"`
	MinAvailableKbyte *int64 `json:"min_available_kbyte,omitempty"`
	OsDownBandwidthKbyte *float64 `json:"os_down_bandwidth_kbyte,omitempty"`
	OsDownIops *float64 `json:"os_down_iops,omitempty"`
	OsMergeSpeed *int64 `json:"os_merge_speed,omitempty"`
	OsUpBandwidthKbyte *float64 `json:"os_up_bandwidth_kbyte,omitempty"`
	OsUpIops *float64 `json:"os_up_iops,omitempty"`
	ReadBandwidthKbyte *float64 `json:"read_bandwidth_kbyte,omitempty"`
	ReadIops *float64 `json:"read_iops,omitempty"`
	ReadLatencyUs *float64 `json:"read_latency_us,omitempty"`
	RecoveryBandwidthKbyte *float64 `json:"recovery_bandwidth_kbyte,omitempty"`
	RecoveryIops *float64 `json:"recovery_iops,omitempty"`
	RecoveryPercent *float64 `json:"recovery_percent,omitempty"`
	TotalKbyte *int64 `json:"total_kbyte,omitempty"`
	UnavailablePercent *float64 `json:"unavailable_percent,omitempty"`
	UsedKbyte *int64 `json:"used_kbyte,omitempty"`
	WriteBandwidthKbyte *float64 `json:"write_bandwidth_kbyte,omitempty"`
	WriteIops *float64 `json:"write_iops,omitempty"`
	WriteLatencyUs *float64 `json:"write_latency_us,omitempty"`
}

// NewClusterStat instantiates a new ClusterStat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterStat() *ClusterStat {
	this := ClusterStat{}
	return &this
}

// NewClusterStatWithDefaults instantiates a new ClusterStat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterStatWithDefaults() *ClusterStat {
	this := ClusterStat{}
	return &this
}

// GetActualKbyte returns the ActualKbyte field value if set, zero value otherwise.
func (o *ClusterStat) GetActualKbyte() int64 {
	if o == nil || IsNil(o.ActualKbyte) {
		var ret int64
		return ret
	}
	return *o.ActualKbyte
}

// GetActualKbyteOk returns a tuple with the ActualKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterStat) GetActualKbyteOk() (*int64, bool) {
	if o == nil || IsNil(o.ActualKbyte) {
		return nil, false
	}
	return o.ActualKbyte, true
}

// HasActualKbyte returns a boolean if a field has been set.
func (o *ClusterStat) HasActualKbyte() bool {
	if o != nil && !IsNil(o.ActualKbyte) {
		return true
	}

	return false
}

// SetActualKbyte gets a reference to the given int64 and assigns it to the ActualKbyte field.
func (o *ClusterStat) SetActualKbyte(v int64) {
	o.ActualKbyte = &v
}

// GetAllocatedSize returns the AllocatedSize field value if set, zero value otherwise.
func (o *ClusterStat) GetAllocatedSize() int64 {
	if o == nil || IsNil(o.AllocatedSize) {
		var ret int64
		return ret
	}
	return *o.AllocatedSize
}

// GetAllocatedSizeOk returns a tuple with the AllocatedSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterStat) GetAllocatedSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.AllocatedSize) {
		return nil, false
	}
	return o.AllocatedSize, true
}

// HasAllocatedSize returns a boolean if a field has been set.
func (o *ClusterStat) HasAllocatedSize() bool {
	if o != nil && !IsNil(o.AllocatedSize) {
		return true
	}

	return false
}

// SetAllocatedSize gets a reference to the given int64 and assigns it to the AllocatedSize field.
func (o *ClusterStat) SetAllocatedSize(v int64) {
	o.AllocatedSize = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *ClusterStat) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterStat) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *ClusterStat) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *ClusterStat) SetCreate(v time.Time) {
	o.Create = &v
}

// GetDataKbyte returns the DataKbyte field value if set, zero value otherwise.
func (o *ClusterStat) GetDataKbyte() int64 {
	if o == nil || IsNil(o.DataKbyte) {
		var ret int64
		return ret
	}
	return *o.DataKbyte
}

// GetDataKbyteOk returns a tuple with the DataKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterStat) GetDataKbyteOk() (*int64, bool) {
	if o == nil || IsNil(o.DataKbyte) {
		return nil, false
	}
	return o.DataKbyte, true
}

// HasDataKbyte returns a boolean if a field has been set.
func (o *ClusterStat) HasDataKbyte() bool {
	if o != nil && !IsNil(o.DataKbyte) {
		return true
	}

	return false
}

// SetDataKbyte gets a reference to the given int64 and assigns it to the DataKbyte field.
func (o *ClusterStat) SetDataKbyte(v int64) {
	o.DataKbyte = &v
}

// GetDegradedPercent returns the DegradedPercent field value if set, zero value otherwise.
func (o *ClusterStat) GetDegradedPercent() float64 {
	if o == nil || IsNil(o.DegradedPercent) {
		var ret float64
		return ret
	}
	return *o.DegradedPercent
}

// GetDegradedPercentOk returns a tuple with the DegradedPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterStat) GetDegradedPercentOk() (*float64, bool) {
	if o == nil || IsNil(o.DegradedPercent) {
		return nil, false
	}
	return o.DegradedPercent, true
}

// HasDegradedPercent returns a boolean if a field has been set.
func (o *ClusterStat) HasDegradedPercent() bool {
	if o != nil && !IsNil(o.DegradedPercent) {
		return true
	}

	return false
}

// SetDegradedPercent gets a reference to the given float64 and assigns it to the DegradedPercent field.
func (o *ClusterStat) SetDegradedPercent(v float64) {
	o.DegradedPercent = &v
}

// GetErrorKbyte returns the ErrorKbyte field value if set, zero value otherwise.
func (o *ClusterStat) GetErrorKbyte() int64 {
	if o == nil || IsNil(o.ErrorKbyte) {
		var ret int64
		return ret
	}
	return *o.ErrorKbyte
}

// GetErrorKbyteOk returns a tuple with the ErrorKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterStat) GetErrorKbyteOk() (*int64, bool) {
	if o == nil || IsNil(o.ErrorKbyte) {
		return nil, false
	}
	return o.ErrorKbyte, true
}

// HasErrorKbyte returns a boolean if a field has been set.
func (o *ClusterStat) HasErrorKbyte() bool {
	if o != nil && !IsNil(o.ErrorKbyte) {
		return true
	}

	return false
}

// SetErrorKbyte gets a reference to the given int64 and assigns it to the ErrorKbyte field.
func (o *ClusterStat) SetErrorKbyte(v int64) {
	o.ErrorKbyte = &v
}

// GetHealthyPercent returns the HealthyPercent field value if set, zero value otherwise.
func (o *ClusterStat) GetHealthyPercent() float64 {
	if o == nil || IsNil(o.HealthyPercent) {
		var ret float64
		return ret
	}
	return *o.HealthyPercent
}

// GetHealthyPercentOk returns a tuple with the HealthyPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterStat) GetHealthyPercentOk() (*float64, bool) {
	if o == nil || IsNil(o.HealthyPercent) {
		return nil, false
	}
	return o.HealthyPercent, true
}

// HasHealthyPercent returns a boolean if a field has been set.
func (o *ClusterStat) HasHealthyPercent() bool {
	if o != nil && !IsNil(o.HealthyPercent) {
		return true
	}

	return false
}

// SetHealthyPercent gets a reference to the given float64 and assigns it to the HealthyPercent field.
func (o *ClusterStat) SetHealthyPercent(v float64) {
	o.HealthyPercent = &v
}

// GetMaxAvailableKbyte returns the MaxAvailableKbyte field value if set, zero value otherwise.
func (o *ClusterStat) GetMaxAvailableKbyte() int64 {
	if o == nil || IsNil(o.MaxAvailableKbyte) {
		var ret int64
		return ret
	}
	return *o.MaxAvailableKbyte
}

// GetMaxAvailableKbyteOk returns a tuple with the MaxAvailableKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterStat) GetMaxAvailableKbyteOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxAvailableKbyte) {
		return nil, false
	}
	return o.MaxAvailableKbyte, true
}

// HasMaxAvailableKbyte returns a boolean if a field has been set.
func (o *ClusterStat) HasMaxAvailableKbyte() bool {
	if o != nil && !IsNil(o.MaxAvailableKbyte) {
		return true
	}

	return false
}

// SetMaxAvailableKbyte gets a reference to the given int64 and assigns it to the MaxAvailableKbyte field.
func (o *ClusterStat) SetMaxAvailableKbyte(v int64) {
	o.MaxAvailableKbyte = &v
}

// GetMinAvailableKbyte returns the MinAvailableKbyte field value if set, zero value otherwise.
func (o *ClusterStat) GetMinAvailableKbyte() int64 {
	if o == nil || IsNil(o.MinAvailableKbyte) {
		var ret int64
		return ret
	}
	return *o.MinAvailableKbyte
}

// GetMinAvailableKbyteOk returns a tuple with the MinAvailableKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterStat) GetMinAvailableKbyteOk() (*int64, bool) {
	if o == nil || IsNil(o.MinAvailableKbyte) {
		return nil, false
	}
	return o.MinAvailableKbyte, true
}

// HasMinAvailableKbyte returns a boolean if a field has been set.
func (o *ClusterStat) HasMinAvailableKbyte() bool {
	if o != nil && !IsNil(o.MinAvailableKbyte) {
		return true
	}

	return false
}

// SetMinAvailableKbyte gets a reference to the given int64 and assigns it to the MinAvailableKbyte field.
func (o *ClusterStat) SetMinAvailableKbyte(v int64) {
	o.MinAvailableKbyte = &v
}

// GetOsDownBandwidthKbyte returns the OsDownBandwidthKbyte field value if set, zero value otherwise.
func (o *ClusterStat) GetOsDownBandwidthKbyte() float64 {
	if o == nil || IsNil(o.OsDownBandwidthKbyte) {
		var ret float64
		return ret
	}
	return *o.OsDownBandwidthKbyte
}

// GetOsDownBandwidthKbyteOk returns a tuple with the OsDownBandwidthKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterStat) GetOsDownBandwidthKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.OsDownBandwidthKbyte) {
		return nil, false
	}
	return o.OsDownBandwidthKbyte, true
}

// HasOsDownBandwidthKbyte returns a boolean if a field has been set.
func (o *ClusterStat) HasOsDownBandwidthKbyte() bool {
	if o != nil && !IsNil(o.OsDownBandwidthKbyte) {
		return true
	}

	return false
}

// SetOsDownBandwidthKbyte gets a reference to the given float64 and assigns it to the OsDownBandwidthKbyte field.
func (o *ClusterStat) SetOsDownBandwidthKbyte(v float64) {
	o.OsDownBandwidthKbyte = &v
}

// GetOsDownIops returns the OsDownIops field value if set, zero value otherwise.
func (o *ClusterStat) GetOsDownIops() float64 {
	if o == nil || IsNil(o.OsDownIops) {
		var ret float64
		return ret
	}
	return *o.OsDownIops
}

// GetOsDownIopsOk returns a tuple with the OsDownIops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterStat) GetOsDownIopsOk() (*float64, bool) {
	if o == nil || IsNil(o.OsDownIops) {
		return nil, false
	}
	return o.OsDownIops, true
}

// HasOsDownIops returns a boolean if a field has been set.
func (o *ClusterStat) HasOsDownIops() bool {
	if o != nil && !IsNil(o.OsDownIops) {
		return true
	}

	return false
}

// SetOsDownIops gets a reference to the given float64 and assigns it to the OsDownIops field.
func (o *ClusterStat) SetOsDownIops(v float64) {
	o.OsDownIops = &v
}

// GetOsMergeSpeed returns the OsMergeSpeed field value if set, zero value otherwise.
func (o *ClusterStat) GetOsMergeSpeed() int64 {
	if o == nil || IsNil(o.OsMergeSpeed) {
		var ret int64
		return ret
	}
	return *o.OsMergeSpeed
}

// GetOsMergeSpeedOk returns a tuple with the OsMergeSpeed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterStat) GetOsMergeSpeedOk() (*int64, bool) {
	if o == nil || IsNil(o.OsMergeSpeed) {
		return nil, false
	}
	return o.OsMergeSpeed, true
}

// HasOsMergeSpeed returns a boolean if a field has been set.
func (o *ClusterStat) HasOsMergeSpeed() bool {
	if o != nil && !IsNil(o.OsMergeSpeed) {
		return true
	}

	return false
}

// SetOsMergeSpeed gets a reference to the given int64 and assigns it to the OsMergeSpeed field.
func (o *ClusterStat) SetOsMergeSpeed(v int64) {
	o.OsMergeSpeed = &v
}

// GetOsUpBandwidthKbyte returns the OsUpBandwidthKbyte field value if set, zero value otherwise.
func (o *ClusterStat) GetOsUpBandwidthKbyte() float64 {
	if o == nil || IsNil(o.OsUpBandwidthKbyte) {
		var ret float64
		return ret
	}
	return *o.OsUpBandwidthKbyte
}

// GetOsUpBandwidthKbyteOk returns a tuple with the OsUpBandwidthKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterStat) GetOsUpBandwidthKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.OsUpBandwidthKbyte) {
		return nil, false
	}
	return o.OsUpBandwidthKbyte, true
}

// HasOsUpBandwidthKbyte returns a boolean if a field has been set.
func (o *ClusterStat) HasOsUpBandwidthKbyte() bool {
	if o != nil && !IsNil(o.OsUpBandwidthKbyte) {
		return true
	}

	return false
}

// SetOsUpBandwidthKbyte gets a reference to the given float64 and assigns it to the OsUpBandwidthKbyte field.
func (o *ClusterStat) SetOsUpBandwidthKbyte(v float64) {
	o.OsUpBandwidthKbyte = &v
}

// GetOsUpIops returns the OsUpIops field value if set, zero value otherwise.
func (o *ClusterStat) GetOsUpIops() float64 {
	if o == nil || IsNil(o.OsUpIops) {
		var ret float64
		return ret
	}
	return *o.OsUpIops
}

// GetOsUpIopsOk returns a tuple with the OsUpIops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterStat) GetOsUpIopsOk() (*float64, bool) {
	if o == nil || IsNil(o.OsUpIops) {
		return nil, false
	}
	return o.OsUpIops, true
}

// HasOsUpIops returns a boolean if a field has been set.
func (o *ClusterStat) HasOsUpIops() bool {
	if o != nil && !IsNil(o.OsUpIops) {
		return true
	}

	return false
}

// SetOsUpIops gets a reference to the given float64 and assigns it to the OsUpIops field.
func (o *ClusterStat) SetOsUpIops(v float64) {
	o.OsUpIops = &v
}

// GetReadBandwidthKbyte returns the ReadBandwidthKbyte field value if set, zero value otherwise.
func (o *ClusterStat) GetReadBandwidthKbyte() float64 {
	if o == nil || IsNil(o.ReadBandwidthKbyte) {
		var ret float64
		return ret
	}
	return *o.ReadBandwidthKbyte
}

// GetReadBandwidthKbyteOk returns a tuple with the ReadBandwidthKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterStat) GetReadBandwidthKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.ReadBandwidthKbyte) {
		return nil, false
	}
	return o.ReadBandwidthKbyte, true
}

// HasReadBandwidthKbyte returns a boolean if a field has been set.
func (o *ClusterStat) HasReadBandwidthKbyte() bool {
	if o != nil && !IsNil(o.ReadBandwidthKbyte) {
		return true
	}

	return false
}

// SetReadBandwidthKbyte gets a reference to the given float64 and assigns it to the ReadBandwidthKbyte field.
func (o *ClusterStat) SetReadBandwidthKbyte(v float64) {
	o.ReadBandwidthKbyte = &v
}

// GetReadIops returns the ReadIops field value if set, zero value otherwise.
func (o *ClusterStat) GetReadIops() float64 {
	if o == nil || IsNil(o.ReadIops) {
		var ret float64
		return ret
	}
	return *o.ReadIops
}

// GetReadIopsOk returns a tuple with the ReadIops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterStat) GetReadIopsOk() (*float64, bool) {
	if o == nil || IsNil(o.ReadIops) {
		return nil, false
	}
	return o.ReadIops, true
}

// HasReadIops returns a boolean if a field has been set.
func (o *ClusterStat) HasReadIops() bool {
	if o != nil && !IsNil(o.ReadIops) {
		return true
	}

	return false
}

// SetReadIops gets a reference to the given float64 and assigns it to the ReadIops field.
func (o *ClusterStat) SetReadIops(v float64) {
	o.ReadIops = &v
}

// GetReadLatencyUs returns the ReadLatencyUs field value if set, zero value otherwise.
func (o *ClusterStat) GetReadLatencyUs() float64 {
	if o == nil || IsNil(o.ReadLatencyUs) {
		var ret float64
		return ret
	}
	return *o.ReadLatencyUs
}

// GetReadLatencyUsOk returns a tuple with the ReadLatencyUs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterStat) GetReadLatencyUsOk() (*float64, bool) {
	if o == nil || IsNil(o.ReadLatencyUs) {
		return nil, false
	}
	return o.ReadLatencyUs, true
}

// HasReadLatencyUs returns a boolean if a field has been set.
func (o *ClusterStat) HasReadLatencyUs() bool {
	if o != nil && !IsNil(o.ReadLatencyUs) {
		return true
	}

	return false
}

// SetReadLatencyUs gets a reference to the given float64 and assigns it to the ReadLatencyUs field.
func (o *ClusterStat) SetReadLatencyUs(v float64) {
	o.ReadLatencyUs = &v
}

// GetRecoveryBandwidthKbyte returns the RecoveryBandwidthKbyte field value if set, zero value otherwise.
func (o *ClusterStat) GetRecoveryBandwidthKbyte() float64 {
	if o == nil || IsNil(o.RecoveryBandwidthKbyte) {
		var ret float64
		return ret
	}
	return *o.RecoveryBandwidthKbyte
}

// GetRecoveryBandwidthKbyteOk returns a tuple with the RecoveryBandwidthKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterStat) GetRecoveryBandwidthKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.RecoveryBandwidthKbyte) {
		return nil, false
	}
	return o.RecoveryBandwidthKbyte, true
}

// HasRecoveryBandwidthKbyte returns a boolean if a field has been set.
func (o *ClusterStat) HasRecoveryBandwidthKbyte() bool {
	if o != nil && !IsNil(o.RecoveryBandwidthKbyte) {
		return true
	}

	return false
}

// SetRecoveryBandwidthKbyte gets a reference to the given float64 and assigns it to the RecoveryBandwidthKbyte field.
func (o *ClusterStat) SetRecoveryBandwidthKbyte(v float64) {
	o.RecoveryBandwidthKbyte = &v
}

// GetRecoveryIops returns the RecoveryIops field value if set, zero value otherwise.
func (o *ClusterStat) GetRecoveryIops() float64 {
	if o == nil || IsNil(o.RecoveryIops) {
		var ret float64
		return ret
	}
	return *o.RecoveryIops
}

// GetRecoveryIopsOk returns a tuple with the RecoveryIops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterStat) GetRecoveryIopsOk() (*float64, bool) {
	if o == nil || IsNil(o.RecoveryIops) {
		return nil, false
	}
	return o.RecoveryIops, true
}

// HasRecoveryIops returns a boolean if a field has been set.
func (o *ClusterStat) HasRecoveryIops() bool {
	if o != nil && !IsNil(o.RecoveryIops) {
		return true
	}

	return false
}

// SetRecoveryIops gets a reference to the given float64 and assigns it to the RecoveryIops field.
func (o *ClusterStat) SetRecoveryIops(v float64) {
	o.RecoveryIops = &v
}

// GetRecoveryPercent returns the RecoveryPercent field value if set, zero value otherwise.
func (o *ClusterStat) GetRecoveryPercent() float64 {
	if o == nil || IsNil(o.RecoveryPercent) {
		var ret float64
		return ret
	}
	return *o.RecoveryPercent
}

// GetRecoveryPercentOk returns a tuple with the RecoveryPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterStat) GetRecoveryPercentOk() (*float64, bool) {
	if o == nil || IsNil(o.RecoveryPercent) {
		return nil, false
	}
	return o.RecoveryPercent, true
}

// HasRecoveryPercent returns a boolean if a field has been set.
func (o *ClusterStat) HasRecoveryPercent() bool {
	if o != nil && !IsNil(o.RecoveryPercent) {
		return true
	}

	return false
}

// SetRecoveryPercent gets a reference to the given float64 and assigns it to the RecoveryPercent field.
func (o *ClusterStat) SetRecoveryPercent(v float64) {
	o.RecoveryPercent = &v
}

// GetTotalKbyte returns the TotalKbyte field value if set, zero value otherwise.
func (o *ClusterStat) GetTotalKbyte() int64 {
	if o == nil || IsNil(o.TotalKbyte) {
		var ret int64
		return ret
	}
	return *o.TotalKbyte
}

// GetTotalKbyteOk returns a tuple with the TotalKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterStat) GetTotalKbyteOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalKbyte) {
		return nil, false
	}
	return o.TotalKbyte, true
}

// HasTotalKbyte returns a boolean if a field has been set.
func (o *ClusterStat) HasTotalKbyte() bool {
	if o != nil && !IsNil(o.TotalKbyte) {
		return true
	}

	return false
}

// SetTotalKbyte gets a reference to the given int64 and assigns it to the TotalKbyte field.
func (o *ClusterStat) SetTotalKbyte(v int64) {
	o.TotalKbyte = &v
}

// GetUnavailablePercent returns the UnavailablePercent field value if set, zero value otherwise.
func (o *ClusterStat) GetUnavailablePercent() float64 {
	if o == nil || IsNil(o.UnavailablePercent) {
		var ret float64
		return ret
	}
	return *o.UnavailablePercent
}

// GetUnavailablePercentOk returns a tuple with the UnavailablePercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterStat) GetUnavailablePercentOk() (*float64, bool) {
	if o == nil || IsNil(o.UnavailablePercent) {
		return nil, false
	}
	return o.UnavailablePercent, true
}

// HasUnavailablePercent returns a boolean if a field has been set.
func (o *ClusterStat) HasUnavailablePercent() bool {
	if o != nil && !IsNil(o.UnavailablePercent) {
		return true
	}

	return false
}

// SetUnavailablePercent gets a reference to the given float64 and assigns it to the UnavailablePercent field.
func (o *ClusterStat) SetUnavailablePercent(v float64) {
	o.UnavailablePercent = &v
}

// GetUsedKbyte returns the UsedKbyte field value if set, zero value otherwise.
func (o *ClusterStat) GetUsedKbyte() int64 {
	if o == nil || IsNil(o.UsedKbyte) {
		var ret int64
		return ret
	}
	return *o.UsedKbyte
}

// GetUsedKbyteOk returns a tuple with the UsedKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterStat) GetUsedKbyteOk() (*int64, bool) {
	if o == nil || IsNil(o.UsedKbyte) {
		return nil, false
	}
	return o.UsedKbyte, true
}

// HasUsedKbyte returns a boolean if a field has been set.
func (o *ClusterStat) HasUsedKbyte() bool {
	if o != nil && !IsNil(o.UsedKbyte) {
		return true
	}

	return false
}

// SetUsedKbyte gets a reference to the given int64 and assigns it to the UsedKbyte field.
func (o *ClusterStat) SetUsedKbyte(v int64) {
	o.UsedKbyte = &v
}

// GetWriteBandwidthKbyte returns the WriteBandwidthKbyte field value if set, zero value otherwise.
func (o *ClusterStat) GetWriteBandwidthKbyte() float64 {
	if o == nil || IsNil(o.WriteBandwidthKbyte) {
		var ret float64
		return ret
	}
	return *o.WriteBandwidthKbyte
}

// GetWriteBandwidthKbyteOk returns a tuple with the WriteBandwidthKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterStat) GetWriteBandwidthKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.WriteBandwidthKbyte) {
		return nil, false
	}
	return o.WriteBandwidthKbyte, true
}

// HasWriteBandwidthKbyte returns a boolean if a field has been set.
func (o *ClusterStat) HasWriteBandwidthKbyte() bool {
	if o != nil && !IsNil(o.WriteBandwidthKbyte) {
		return true
	}

	return false
}

// SetWriteBandwidthKbyte gets a reference to the given float64 and assigns it to the WriteBandwidthKbyte field.
func (o *ClusterStat) SetWriteBandwidthKbyte(v float64) {
	o.WriteBandwidthKbyte = &v
}

// GetWriteIops returns the WriteIops field value if set, zero value otherwise.
func (o *ClusterStat) GetWriteIops() float64 {
	if o == nil || IsNil(o.WriteIops) {
		var ret float64
		return ret
	}
	return *o.WriteIops
}

// GetWriteIopsOk returns a tuple with the WriteIops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterStat) GetWriteIopsOk() (*float64, bool) {
	if o == nil || IsNil(o.WriteIops) {
		return nil, false
	}
	return o.WriteIops, true
}

// HasWriteIops returns a boolean if a field has been set.
func (o *ClusterStat) HasWriteIops() bool {
	if o != nil && !IsNil(o.WriteIops) {
		return true
	}

	return false
}

// SetWriteIops gets a reference to the given float64 and assigns it to the WriteIops field.
func (o *ClusterStat) SetWriteIops(v float64) {
	o.WriteIops = &v
}

// GetWriteLatencyUs returns the WriteLatencyUs field value if set, zero value otherwise.
func (o *ClusterStat) GetWriteLatencyUs() float64 {
	if o == nil || IsNil(o.WriteLatencyUs) {
		var ret float64
		return ret
	}
	return *o.WriteLatencyUs
}

// GetWriteLatencyUsOk returns a tuple with the WriteLatencyUs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterStat) GetWriteLatencyUsOk() (*float64, bool) {
	if o == nil || IsNil(o.WriteLatencyUs) {
		return nil, false
	}
	return o.WriteLatencyUs, true
}

// HasWriteLatencyUs returns a boolean if a field has been set.
func (o *ClusterStat) HasWriteLatencyUs() bool {
	if o != nil && !IsNil(o.WriteLatencyUs) {
		return true
	}

	return false
}

// SetWriteLatencyUs gets a reference to the given float64 and assigns it to the WriteLatencyUs field.
func (o *ClusterStat) SetWriteLatencyUs(v float64) {
	o.WriteLatencyUs = &v
}

func (o ClusterStat) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterStat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActualKbyte) {
		toSerialize["actual_kbyte"] = o.ActualKbyte
	}
	if !IsNil(o.AllocatedSize) {
		toSerialize["allocated_size"] = o.AllocatedSize
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.DataKbyte) {
		toSerialize["data_kbyte"] = o.DataKbyte
	}
	if !IsNil(o.DegradedPercent) {
		toSerialize["degraded_percent"] = o.DegradedPercent
	}
	if !IsNil(o.ErrorKbyte) {
		toSerialize["error_kbyte"] = o.ErrorKbyte
	}
	if !IsNil(o.HealthyPercent) {
		toSerialize["healthy_percent"] = o.HealthyPercent
	}
	if !IsNil(o.MaxAvailableKbyte) {
		toSerialize["max_available_kbyte"] = o.MaxAvailableKbyte
	}
	if !IsNil(o.MinAvailableKbyte) {
		toSerialize["min_available_kbyte"] = o.MinAvailableKbyte
	}
	if !IsNil(o.OsDownBandwidthKbyte) {
		toSerialize["os_down_bandwidth_kbyte"] = o.OsDownBandwidthKbyte
	}
	if !IsNil(o.OsDownIops) {
		toSerialize["os_down_iops"] = o.OsDownIops
	}
	if !IsNil(o.OsMergeSpeed) {
		toSerialize["os_merge_speed"] = o.OsMergeSpeed
	}
	if !IsNil(o.OsUpBandwidthKbyte) {
		toSerialize["os_up_bandwidth_kbyte"] = o.OsUpBandwidthKbyte
	}
	if !IsNil(o.OsUpIops) {
		toSerialize["os_up_iops"] = o.OsUpIops
	}
	if !IsNil(o.ReadBandwidthKbyte) {
		toSerialize["read_bandwidth_kbyte"] = o.ReadBandwidthKbyte
	}
	if !IsNil(o.ReadIops) {
		toSerialize["read_iops"] = o.ReadIops
	}
	if !IsNil(o.ReadLatencyUs) {
		toSerialize["read_latency_us"] = o.ReadLatencyUs
	}
	if !IsNil(o.RecoveryBandwidthKbyte) {
		toSerialize["recovery_bandwidth_kbyte"] = o.RecoveryBandwidthKbyte
	}
	if !IsNil(o.RecoveryIops) {
		toSerialize["recovery_iops"] = o.RecoveryIops
	}
	if !IsNil(o.RecoveryPercent) {
		toSerialize["recovery_percent"] = o.RecoveryPercent
	}
	if !IsNil(o.TotalKbyte) {
		toSerialize["total_kbyte"] = o.TotalKbyte
	}
	if !IsNil(o.UnavailablePercent) {
		toSerialize["unavailable_percent"] = o.UnavailablePercent
	}
	if !IsNil(o.UsedKbyte) {
		toSerialize["used_kbyte"] = o.UsedKbyte
	}
	if !IsNil(o.WriteBandwidthKbyte) {
		toSerialize["write_bandwidth_kbyte"] = o.WriteBandwidthKbyte
	}
	if !IsNil(o.WriteIops) {
		toSerialize["write_iops"] = o.WriteIops
	}
	if !IsNil(o.WriteLatencyUs) {
		toSerialize["write_latency_us"] = o.WriteLatencyUs
	}
	return toSerialize, nil
}

type NullableClusterStat struct {
	value *ClusterStat
	isSet bool
}

func (v NullableClusterStat) Get() *ClusterStat {
	return v.value
}

func (v *NullableClusterStat) Set(val *ClusterStat) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterStat) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterStat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterStat(val *ClusterStat) *NullableClusterStat {
	return &NullableClusterStat{value: val, isSet: true}
}

func (v NullableClusterStat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterStat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


