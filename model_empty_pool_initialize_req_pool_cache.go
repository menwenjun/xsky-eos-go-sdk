/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EmptyPoolInitializeReqPoolCache type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmptyPoolInitializeReqPoolCache{}

// EmptyPoolInitializeReqPoolCache struct for EmptyPoolInitializeReqPoolCache
type EmptyPoolInitializeReqPoolCache struct {
	OsdIds []int64 `json:"osd_ids,omitempty"`
	PrimaryPlacementNodeId *int64 `json:"primary_placement_node_id,omitempty"`
	Ruleset []PoolRuleReq `json:"ruleset,omitempty"`
}

// NewEmptyPoolInitializeReqPoolCache instantiates a new EmptyPoolInitializeReqPoolCache object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmptyPoolInitializeReqPoolCache() *EmptyPoolInitializeReqPoolCache {
	this := EmptyPoolInitializeReqPoolCache{}
	return &this
}

// NewEmptyPoolInitializeReqPoolCacheWithDefaults instantiates a new EmptyPoolInitializeReqPoolCache object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmptyPoolInitializeReqPoolCacheWithDefaults() *EmptyPoolInitializeReqPoolCache {
	this := EmptyPoolInitializeReqPoolCache{}
	return &this
}

// GetOsdIds returns the OsdIds field value if set, zero value otherwise.
func (o *EmptyPoolInitializeReqPoolCache) GetOsdIds() []int64 {
	if o == nil || IsNil(o.OsdIds) {
		var ret []int64
		return ret
	}
	return o.OsdIds
}

// GetOsdIdsOk returns a tuple with the OsdIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmptyPoolInitializeReqPoolCache) GetOsdIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.OsdIds) {
		return nil, false
	}
	return o.OsdIds, true
}

// HasOsdIds returns a boolean if a field has been set.
func (o *EmptyPoolInitializeReqPoolCache) HasOsdIds() bool {
	if o != nil && !IsNil(o.OsdIds) {
		return true
	}

	return false
}

// SetOsdIds gets a reference to the given []int64 and assigns it to the OsdIds field.
func (o *EmptyPoolInitializeReqPoolCache) SetOsdIds(v []int64) {
	o.OsdIds = v
}

// GetPrimaryPlacementNodeId returns the PrimaryPlacementNodeId field value if set, zero value otherwise.
func (o *EmptyPoolInitializeReqPoolCache) GetPrimaryPlacementNodeId() int64 {
	if o == nil || IsNil(o.PrimaryPlacementNodeId) {
		var ret int64
		return ret
	}
	return *o.PrimaryPlacementNodeId
}

// GetPrimaryPlacementNodeIdOk returns a tuple with the PrimaryPlacementNodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmptyPoolInitializeReqPoolCache) GetPrimaryPlacementNodeIdOk() (*int64, bool) {
	if o == nil || IsNil(o.PrimaryPlacementNodeId) {
		return nil, false
	}
	return o.PrimaryPlacementNodeId, true
}

// HasPrimaryPlacementNodeId returns a boolean if a field has been set.
func (o *EmptyPoolInitializeReqPoolCache) HasPrimaryPlacementNodeId() bool {
	if o != nil && !IsNil(o.PrimaryPlacementNodeId) {
		return true
	}

	return false
}

// SetPrimaryPlacementNodeId gets a reference to the given int64 and assigns it to the PrimaryPlacementNodeId field.
func (o *EmptyPoolInitializeReqPoolCache) SetPrimaryPlacementNodeId(v int64) {
	o.PrimaryPlacementNodeId = &v
}

// GetRuleset returns the Ruleset field value if set, zero value otherwise.
func (o *EmptyPoolInitializeReqPoolCache) GetRuleset() []PoolRuleReq {
	if o == nil || IsNil(o.Ruleset) {
		var ret []PoolRuleReq
		return ret
	}
	return o.Ruleset
}

// GetRulesetOk returns a tuple with the Ruleset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmptyPoolInitializeReqPoolCache) GetRulesetOk() ([]PoolRuleReq, bool) {
	if o == nil || IsNil(o.Ruleset) {
		return nil, false
	}
	return o.Ruleset, true
}

// HasRuleset returns a boolean if a field has been set.
func (o *EmptyPoolInitializeReqPoolCache) HasRuleset() bool {
	if o != nil && !IsNil(o.Ruleset) {
		return true
	}

	return false
}

// SetRuleset gets a reference to the given []PoolRuleReq and assigns it to the Ruleset field.
func (o *EmptyPoolInitializeReqPoolCache) SetRuleset(v []PoolRuleReq) {
	o.Ruleset = v
}

func (o EmptyPoolInitializeReqPoolCache) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmptyPoolInitializeReqPoolCache) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OsdIds) {
		toSerialize["osd_ids"] = o.OsdIds
	}
	if !IsNil(o.PrimaryPlacementNodeId) {
		toSerialize["primary_placement_node_id"] = o.PrimaryPlacementNodeId
	}
	if !IsNil(o.Ruleset) {
		toSerialize["ruleset"] = o.Ruleset
	}
	return toSerialize, nil
}

type NullableEmptyPoolInitializeReqPoolCache struct {
	value *EmptyPoolInitializeReqPoolCache
	isSet bool
}

func (v NullableEmptyPoolInitializeReqPoolCache) Get() *EmptyPoolInitializeReqPoolCache {
	return v.value
}

func (v *NullableEmptyPoolInitializeReqPoolCache) Set(val *EmptyPoolInitializeReqPoolCache) {
	v.value = val
	v.isSet = true
}

func (v NullableEmptyPoolInitializeReqPoolCache) IsSet() bool {
	return v.isSet
}

func (v *NullableEmptyPoolInitializeReqPoolCache) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmptyPoolInitializeReqPoolCache(val *EmptyPoolInitializeReqPoolCache) *NullableEmptyPoolInitializeReqPoolCache {
	return &NullableEmptyPoolInitializeReqPoolCache{value: val, isSet: true}
}

func (v NullableEmptyPoolInitializeReqPoolCache) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmptyPoolInitializeReqPoolCache) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


