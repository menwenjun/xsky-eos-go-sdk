/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DirResourceExisted type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DirResourceExisted{}

// DirResourceExisted struct for DirResourceExisted
type DirResourceExisted struct {
	CurExisted *bool `json:"cur_existed,omitempty"`
	ParentExisted *bool `json:"parent_existed,omitempty"`
	Resource *string `json:"resource,omitempty"`
	SubExisted *bool `json:"sub_existed,omitempty"`
}

// NewDirResourceExisted instantiates a new DirResourceExisted object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDirResourceExisted() *DirResourceExisted {
	this := DirResourceExisted{}
	return &this
}

// NewDirResourceExistedWithDefaults instantiates a new DirResourceExisted object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDirResourceExistedWithDefaults() *DirResourceExisted {
	this := DirResourceExisted{}
	return &this
}

// GetCurExisted returns the CurExisted field value if set, zero value otherwise.
func (o *DirResourceExisted) GetCurExisted() bool {
	if o == nil || IsNil(o.CurExisted) {
		var ret bool
		return ret
	}
	return *o.CurExisted
}

// GetCurExistedOk returns a tuple with the CurExisted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirResourceExisted) GetCurExistedOk() (*bool, bool) {
	if o == nil || IsNil(o.CurExisted) {
		return nil, false
	}
	return o.CurExisted, true
}

// HasCurExisted returns a boolean if a field has been set.
func (o *DirResourceExisted) HasCurExisted() bool {
	if o != nil && !IsNil(o.CurExisted) {
		return true
	}

	return false
}

// SetCurExisted gets a reference to the given bool and assigns it to the CurExisted field.
func (o *DirResourceExisted) SetCurExisted(v bool) {
	o.CurExisted = &v
}

// GetParentExisted returns the ParentExisted field value if set, zero value otherwise.
func (o *DirResourceExisted) GetParentExisted() bool {
	if o == nil || IsNil(o.ParentExisted) {
		var ret bool
		return ret
	}
	return *o.ParentExisted
}

// GetParentExistedOk returns a tuple with the ParentExisted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirResourceExisted) GetParentExistedOk() (*bool, bool) {
	if o == nil || IsNil(o.ParentExisted) {
		return nil, false
	}
	return o.ParentExisted, true
}

// HasParentExisted returns a boolean if a field has been set.
func (o *DirResourceExisted) HasParentExisted() bool {
	if o != nil && !IsNil(o.ParentExisted) {
		return true
	}

	return false
}

// SetParentExisted gets a reference to the given bool and assigns it to the ParentExisted field.
func (o *DirResourceExisted) SetParentExisted(v bool) {
	o.ParentExisted = &v
}

// GetResource returns the Resource field value if set, zero value otherwise.
func (o *DirResourceExisted) GetResource() string {
	if o == nil || IsNil(o.Resource) {
		var ret string
		return ret
	}
	return *o.Resource
}

// GetResourceOk returns a tuple with the Resource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirResourceExisted) GetResourceOk() (*string, bool) {
	if o == nil || IsNil(o.Resource) {
		return nil, false
	}
	return o.Resource, true
}

// HasResource returns a boolean if a field has been set.
func (o *DirResourceExisted) HasResource() bool {
	if o != nil && !IsNil(o.Resource) {
		return true
	}

	return false
}

// SetResource gets a reference to the given string and assigns it to the Resource field.
func (o *DirResourceExisted) SetResource(v string) {
	o.Resource = &v
}

// GetSubExisted returns the SubExisted field value if set, zero value otherwise.
func (o *DirResourceExisted) GetSubExisted() bool {
	if o == nil || IsNil(o.SubExisted) {
		var ret bool
		return ret
	}
	return *o.SubExisted
}

// GetSubExistedOk returns a tuple with the SubExisted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirResourceExisted) GetSubExistedOk() (*bool, bool) {
	if o == nil || IsNil(o.SubExisted) {
		return nil, false
	}
	return o.SubExisted, true
}

// HasSubExisted returns a boolean if a field has been set.
func (o *DirResourceExisted) HasSubExisted() bool {
	if o != nil && !IsNil(o.SubExisted) {
		return true
	}

	return false
}

// SetSubExisted gets a reference to the given bool and assigns it to the SubExisted field.
func (o *DirResourceExisted) SetSubExisted(v bool) {
	o.SubExisted = &v
}

func (o DirResourceExisted) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DirResourceExisted) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CurExisted) {
		toSerialize["cur_existed"] = o.CurExisted
	}
	if !IsNil(o.ParentExisted) {
		toSerialize["parent_existed"] = o.ParentExisted
	}
	if !IsNil(o.Resource) {
		toSerialize["resource"] = o.Resource
	}
	if !IsNil(o.SubExisted) {
		toSerialize["sub_existed"] = o.SubExisted
	}
	return toSerialize, nil
}

type NullableDirResourceExisted struct {
	value *DirResourceExisted
	isSet bool
}

func (v NullableDirResourceExisted) Get() *DirResourceExisted {
	return v.value
}

func (v *NullableDirResourceExisted) Set(val *DirResourceExisted) {
	v.value = val
	v.isSet = true
}

func (v NullableDirResourceExisted) IsSet() bool {
	return v.isSet
}

func (v *NullableDirResourceExisted) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDirResourceExisted(val *DirResourceExisted) *NullableDirResourceExisted {
	return &NullableDirResourceExisted{value: val, isSet: true}
}

func (v NullableDirResourceExisted) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDirResourceExisted) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


