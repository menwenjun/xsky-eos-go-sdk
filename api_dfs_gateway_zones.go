/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DfsGatewayZonesAPIService DfsGatewayZonesAPI service
type DfsGatewayZonesAPIService service

type ApiCreateDfsGatewayZoneRequest struct {
	ctx context.Context
	ApiService *DfsGatewayZonesAPIService
	body *DfsGatewayZoneCreateReq
	clusterId *string
}

// gateway zone info
func (r ApiCreateDfsGatewayZoneRequest) Body(body DfsGatewayZoneCreateReq) ApiCreateDfsGatewayZoneRequest {
	r.body = &body
	return r
}

// cluster id
func (r ApiCreateDfsGatewayZoneRequest) ClusterId(clusterId string) ApiCreateDfsGatewayZoneRequest {
	r.clusterId = &clusterId
	return r
}

func (r ApiCreateDfsGatewayZoneRequest) Execute() (*DfsGatewayZoneResp, *http.Response, error) {
	return r.ApiService.CreateDfsGatewayZoneExecute(r)
}

/*
CreateDfsGatewayZone Method for CreateDfsGatewayZone

Create dfs gateway zone

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateDfsGatewayZoneRequest
*/
func (a *DfsGatewayZonesAPIService) CreateDfsGatewayZone(ctx context.Context) ApiCreateDfsGatewayZoneRequest {
	return ApiCreateDfsGatewayZoneRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DfsGatewayZoneResp
func (a *DfsGatewayZonesAPIService) CreateDfsGatewayZoneExecute(r ApiCreateDfsGatewayZoneRequest) (*DfsGatewayZoneResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsGatewayZoneResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsGatewayZonesAPIService.CreateDfsGatewayZone")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-gateway-zones/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.clusterId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_id", r.clusterId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteDfsGatewayZoneRequest struct {
	ctx context.Context
	ApiService *DfsGatewayZonesAPIService
	dfsGatewayZoneId int64
	force *bool
}

// force delete or not
func (r ApiDeleteDfsGatewayZoneRequest) Force(force bool) ApiDeleteDfsGatewayZoneRequest {
	r.force = &force
	return r
}

func (r ApiDeleteDfsGatewayZoneRequest) Execute() (*DfsGatewayZoneResp, *http.Response, error) {
	return r.ApiService.DeleteDfsGatewayZoneExecute(r)
}

/*
DeleteDfsGatewayZone Method for DeleteDfsGatewayZone

delete dfs gateway zone

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dfsGatewayZoneId gateway zone id
 @return ApiDeleteDfsGatewayZoneRequest
*/
func (a *DfsGatewayZonesAPIService) DeleteDfsGatewayZone(ctx context.Context, dfsGatewayZoneId int64) ApiDeleteDfsGatewayZoneRequest {
	return ApiDeleteDfsGatewayZoneRequest{
		ApiService: a,
		ctx: ctx,
		dfsGatewayZoneId: dfsGatewayZoneId,
	}
}

// Execute executes the request
//  @return DfsGatewayZoneResp
func (a *DfsGatewayZonesAPIService) DeleteDfsGatewayZoneExecute(r ApiDeleteDfsGatewayZoneRequest) (*DfsGatewayZoneResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsGatewayZoneResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsGatewayZonesAPIService.DeleteDfsGatewayZone")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-gateway-zones/{dfs_gateway_zone_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"dfs_gateway_zone_id"+"}", url.PathEscape(parameterValueToString(r.dfsGatewayZoneId, "dfsGatewayZoneId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.force != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "force", r.force, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDfsGatewayZoneRequest struct {
	ctx context.Context
	ApiService *DfsGatewayZonesAPIService
	dfsGatewayZoneId int64
}

func (r ApiGetDfsGatewayZoneRequest) Execute() (*DfsGatewayZoneResp, *http.Response, error) {
	return r.ApiService.GetDfsGatewayZoneExecute(r)
}

/*
GetDfsGatewayZone Method for GetDfsGatewayZone

Get dfs gateway zone

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dfsGatewayZoneId gateway zone id
 @return ApiGetDfsGatewayZoneRequest
*/
func (a *DfsGatewayZonesAPIService) GetDfsGatewayZone(ctx context.Context, dfsGatewayZoneId int64) ApiGetDfsGatewayZoneRequest {
	return ApiGetDfsGatewayZoneRequest{
		ApiService: a,
		ctx: ctx,
		dfsGatewayZoneId: dfsGatewayZoneId,
	}
}

// Execute executes the request
//  @return DfsGatewayZoneResp
func (a *DfsGatewayZonesAPIService) GetDfsGatewayZoneExecute(r ApiGetDfsGatewayZoneRequest) (*DfsGatewayZoneResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsGatewayZoneResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsGatewayZonesAPIService.GetDfsGatewayZone")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-gateway-zones/{dfs_gateway_zone_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"dfs_gateway_zone_id"+"}", url.PathEscape(parameterValueToString(r.dfsGatewayZoneId, "dfsGatewayZoneId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDfsGatewayZoneSamplesRequest struct {
	ctx context.Context
	ApiService *DfsGatewayZonesAPIService
	dfsGatewayZoneId int64
	durationBegin *string
	durationEnd *string
	period *string
}

// duration begin timestamp
func (r ApiGetDfsGatewayZoneSamplesRequest) DurationBegin(durationBegin string) ApiGetDfsGatewayZoneSamplesRequest {
	r.durationBegin = &durationBegin
	return r
}

// duration end timestamp
func (r ApiGetDfsGatewayZoneSamplesRequest) DurationEnd(durationEnd string) ApiGetDfsGatewayZoneSamplesRequest {
	r.durationEnd = &durationEnd
	return r
}

// samples period
func (r ApiGetDfsGatewayZoneSamplesRequest) Period(period string) ApiGetDfsGatewayZoneSamplesRequest {
	r.period = &period
	return r
}

func (r ApiGetDfsGatewayZoneSamplesRequest) Execute() (*DfsGatewayZoneSamplesResp, *http.Response, error) {
	return r.ApiService.GetDfsGatewayZoneSamplesExecute(r)
}

/*
GetDfsGatewayZoneSamples Method for GetDfsGatewayZoneSamples

get a dfs gateway zone's samples

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dfsGatewayZoneId dfs gateway zone id
 @return ApiGetDfsGatewayZoneSamplesRequest
*/
func (a *DfsGatewayZonesAPIService) GetDfsGatewayZoneSamples(ctx context.Context, dfsGatewayZoneId int64) ApiGetDfsGatewayZoneSamplesRequest {
	return ApiGetDfsGatewayZoneSamplesRequest{
		ApiService: a,
		ctx: ctx,
		dfsGatewayZoneId: dfsGatewayZoneId,
	}
}

// Execute executes the request
//  @return DfsGatewayZoneSamplesResp
func (a *DfsGatewayZonesAPIService) GetDfsGatewayZoneSamplesExecute(r ApiGetDfsGatewayZoneSamplesRequest) (*DfsGatewayZoneSamplesResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsGatewayZoneSamplesResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsGatewayZonesAPIService.GetDfsGatewayZoneSamples")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-gateway-zones/{dfs_gateway_zone_id}/samples"
	localVarPath = strings.Replace(localVarPath, "{"+"dfs_gateway_zone_id"+"}", url.PathEscape(parameterValueToString(r.dfsGatewayZoneId, "dfsGatewayZoneId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.durationBegin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration_begin", r.durationBegin, "form", "")
	}
	if r.durationEnd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration_end", r.durationEnd, "form", "")
	}
	if r.period != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "period", r.period, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListDfsGatewayZonesRequest struct {
	ctx context.Context
	ApiService *DfsGatewayZonesAPIService
	limit *int64
	offset *int64
	q *string
	sort *string
	clusterId *string
}

// paging param
func (r ApiListDfsGatewayZonesRequest) Limit(limit int64) ApiListDfsGatewayZonesRequest {
	r.limit = &limit
	return r
}

// paging param
func (r ApiListDfsGatewayZonesRequest) Offset(offset int64) ApiListDfsGatewayZonesRequest {
	r.offset = &offset
	return r
}

// query param of search
func (r ApiListDfsGatewayZonesRequest) Q(q string) ApiListDfsGatewayZonesRequest {
	r.q = &q
	return r
}

// sort param of search
func (r ApiListDfsGatewayZonesRequest) Sort(sort string) ApiListDfsGatewayZonesRequest {
	r.sort = &sort
	return r
}

// cluster id
func (r ApiListDfsGatewayZonesRequest) ClusterId(clusterId string) ApiListDfsGatewayZonesRequest {
	r.clusterId = &clusterId
	return r
}

func (r ApiListDfsGatewayZonesRequest) Execute() (*DfsGatewayZonesResp, *http.Response, error) {
	return r.ApiService.ListDfsGatewayZonesExecute(r)
}

/*
ListDfsGatewayZones Method for ListDfsGatewayZones

List dfs gateway zones

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListDfsGatewayZonesRequest
*/
func (a *DfsGatewayZonesAPIService) ListDfsGatewayZones(ctx context.Context) ApiListDfsGatewayZonesRequest {
	return ApiListDfsGatewayZonesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DfsGatewayZonesResp
func (a *DfsGatewayZonesAPIService) ListDfsGatewayZonesExecute(r ApiListDfsGatewayZonesRequest) (*DfsGatewayZonesResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsGatewayZonesResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsGatewayZonesAPIService.ListDfsGatewayZones")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-gateway-zones/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.clusterId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_id", r.clusterId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateDfsGatewayZoneRequest struct {
	ctx context.Context
	ApiService *DfsGatewayZonesAPIService
	dfsGatewayZoneId int64
	body *DfsGatewayZoneUpdateReq
}

// gateway zone info
func (r ApiUpdateDfsGatewayZoneRequest) Body(body DfsGatewayZoneUpdateReq) ApiUpdateDfsGatewayZoneRequest {
	r.body = &body
	return r
}

func (r ApiUpdateDfsGatewayZoneRequest) Execute() (*DfsGatewayZoneResp, *http.Response, error) {
	return r.ApiService.UpdateDfsGatewayZoneExecute(r)
}

/*
UpdateDfsGatewayZone Method for UpdateDfsGatewayZone

Update dfs gateway zone

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dfsGatewayZoneId gateway zone id
 @return ApiUpdateDfsGatewayZoneRequest
*/
func (a *DfsGatewayZonesAPIService) UpdateDfsGatewayZone(ctx context.Context, dfsGatewayZoneId int64) ApiUpdateDfsGatewayZoneRequest {
	return ApiUpdateDfsGatewayZoneRequest{
		ApiService: a,
		ctx: ctx,
		dfsGatewayZoneId: dfsGatewayZoneId,
	}
}

// Execute executes the request
//  @return DfsGatewayZoneResp
func (a *DfsGatewayZonesAPIService) UpdateDfsGatewayZoneExecute(r ApiUpdateDfsGatewayZoneRequest) (*DfsGatewayZoneResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsGatewayZoneResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsGatewayZonesAPIService.UpdateDfsGatewayZone")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-gateway-zones/{dfs_gateway_zone_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"dfs_gateway_zone_id"+"}", url.PathEscape(parameterValueToString(r.dfsGatewayZoneId, "dfsGatewayZoneId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
