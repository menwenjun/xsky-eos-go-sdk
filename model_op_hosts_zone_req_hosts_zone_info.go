/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OpHostsZoneReqHostsZoneInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OpHostsZoneReqHostsZoneInfo{}

// OpHostsZoneReqHostsZoneInfo struct for OpHostsZoneReqHostsZoneInfo
type OpHostsZoneReqHostsZoneInfo struct {
	Hosts []int64 `json:"hosts,omitempty"`
	Zone *int64 `json:"zone,omitempty"`
}

// NewOpHostsZoneReqHostsZoneInfo instantiates a new OpHostsZoneReqHostsZoneInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpHostsZoneReqHostsZoneInfo() *OpHostsZoneReqHostsZoneInfo {
	this := OpHostsZoneReqHostsZoneInfo{}
	return &this
}

// NewOpHostsZoneReqHostsZoneInfoWithDefaults instantiates a new OpHostsZoneReqHostsZoneInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpHostsZoneReqHostsZoneInfoWithDefaults() *OpHostsZoneReqHostsZoneInfo {
	this := OpHostsZoneReqHostsZoneInfo{}
	return &this
}

// GetHosts returns the Hosts field value if set, zero value otherwise.
func (o *OpHostsZoneReqHostsZoneInfo) GetHosts() []int64 {
	if o == nil || IsNil(o.Hosts) {
		var ret []int64
		return ret
	}
	return o.Hosts
}

// GetHostsOk returns a tuple with the Hosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpHostsZoneReqHostsZoneInfo) GetHostsOk() ([]int64, bool) {
	if o == nil || IsNil(o.Hosts) {
		return nil, false
	}
	return o.Hosts, true
}

// HasHosts returns a boolean if a field has been set.
func (o *OpHostsZoneReqHostsZoneInfo) HasHosts() bool {
	if o != nil && !IsNil(o.Hosts) {
		return true
	}

	return false
}

// SetHosts gets a reference to the given []int64 and assigns it to the Hosts field.
func (o *OpHostsZoneReqHostsZoneInfo) SetHosts(v []int64) {
	o.Hosts = v
}

// GetZone returns the Zone field value if set, zero value otherwise.
func (o *OpHostsZoneReqHostsZoneInfo) GetZone() int64 {
	if o == nil || IsNil(o.Zone) {
		var ret int64
		return ret
	}
	return *o.Zone
}

// GetZoneOk returns a tuple with the Zone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpHostsZoneReqHostsZoneInfo) GetZoneOk() (*int64, bool) {
	if o == nil || IsNil(o.Zone) {
		return nil, false
	}
	return o.Zone, true
}

// HasZone returns a boolean if a field has been set.
func (o *OpHostsZoneReqHostsZoneInfo) HasZone() bool {
	if o != nil && !IsNil(o.Zone) {
		return true
	}

	return false
}

// SetZone gets a reference to the given int64 and assigns it to the Zone field.
func (o *OpHostsZoneReqHostsZoneInfo) SetZone(v int64) {
	o.Zone = &v
}

func (o OpHostsZoneReqHostsZoneInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OpHostsZoneReqHostsZoneInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Hosts) {
		toSerialize["hosts"] = o.Hosts
	}
	if !IsNil(o.Zone) {
		toSerialize["zone"] = o.Zone
	}
	return toSerialize, nil
}

type NullableOpHostsZoneReqHostsZoneInfo struct {
	value *OpHostsZoneReqHostsZoneInfo
	isSet bool
}

func (v NullableOpHostsZoneReqHostsZoneInfo) Get() *OpHostsZoneReqHostsZoneInfo {
	return v.value
}

func (v *NullableOpHostsZoneReqHostsZoneInfo) Set(val *OpHostsZoneReqHostsZoneInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableOpHostsZoneReqHostsZoneInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableOpHostsZoneReqHostsZoneInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpHostsZoneReqHostsZoneInfo(val *OpHostsZoneReqHostsZoneInfo) *NullableOpHostsZoneReqHostsZoneInfo {
	return &NullableOpHostsZoneReqHostsZoneInfo{value: val, isSet: true}
}

func (v NullableOpHostsZoneReqHostsZoneInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpHostsZoneReqHostsZoneInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


