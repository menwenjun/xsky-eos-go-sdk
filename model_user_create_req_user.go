/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UserCreateReqUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserCreateReqUser{}

// UserCreateReqUser struct for UserCreateReqUser
type UserCreateReqUser struct {
	// email of user
	Email string `json:"email"`
	// enable or disable the user
	Enabled bool `json:"enabled"`
	// encrypted password for auth
	EncryptedPassword *string `json:"encrypted_password,omitempty"`
	// force to change password on first login
	ForcePasswordChange *bool `json:"force_password_change,omitempty"`
	// name of user
	Name string `json:"name"`
	// password of user
	Password string `json:"password"`
	// roles of user
	Roles []string `json:"roles,omitempty"`
	// rsa key id
	RsaKeyId *string `json:"rsa_key_id,omitempty"`
}

type _UserCreateReqUser UserCreateReqUser

// NewUserCreateReqUser instantiates a new UserCreateReqUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserCreateReqUser(email string, enabled bool, name string, password string) *UserCreateReqUser {
	this := UserCreateReqUser{}
	this.Email = email
	this.Enabled = enabled
	this.Name = name
	this.Password = password
	return &this
}

// NewUserCreateReqUserWithDefaults instantiates a new UserCreateReqUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserCreateReqUserWithDefaults() *UserCreateReqUser {
	this := UserCreateReqUser{}
	return &this
}

// GetEmail returns the Email field value
func (o *UserCreateReqUser) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *UserCreateReqUser) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *UserCreateReqUser) SetEmail(v string) {
	o.Email = v
}

// GetEnabled returns the Enabled field value
func (o *UserCreateReqUser) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *UserCreateReqUser) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *UserCreateReqUser) SetEnabled(v bool) {
	o.Enabled = v
}

// GetEncryptedPassword returns the EncryptedPassword field value if set, zero value otherwise.
func (o *UserCreateReqUser) GetEncryptedPassword() string {
	if o == nil || IsNil(o.EncryptedPassword) {
		var ret string
		return ret
	}
	return *o.EncryptedPassword
}

// GetEncryptedPasswordOk returns a tuple with the EncryptedPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCreateReqUser) GetEncryptedPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.EncryptedPassword) {
		return nil, false
	}
	return o.EncryptedPassword, true
}

// HasEncryptedPassword returns a boolean if a field has been set.
func (o *UserCreateReqUser) HasEncryptedPassword() bool {
	if o != nil && !IsNil(o.EncryptedPassword) {
		return true
	}

	return false
}

// SetEncryptedPassword gets a reference to the given string and assigns it to the EncryptedPassword field.
func (o *UserCreateReqUser) SetEncryptedPassword(v string) {
	o.EncryptedPassword = &v
}

// GetForcePasswordChange returns the ForcePasswordChange field value if set, zero value otherwise.
func (o *UserCreateReqUser) GetForcePasswordChange() bool {
	if o == nil || IsNil(o.ForcePasswordChange) {
		var ret bool
		return ret
	}
	return *o.ForcePasswordChange
}

// GetForcePasswordChangeOk returns a tuple with the ForcePasswordChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCreateReqUser) GetForcePasswordChangeOk() (*bool, bool) {
	if o == nil || IsNil(o.ForcePasswordChange) {
		return nil, false
	}
	return o.ForcePasswordChange, true
}

// HasForcePasswordChange returns a boolean if a field has been set.
func (o *UserCreateReqUser) HasForcePasswordChange() bool {
	if o != nil && !IsNil(o.ForcePasswordChange) {
		return true
	}

	return false
}

// SetForcePasswordChange gets a reference to the given bool and assigns it to the ForcePasswordChange field.
func (o *UserCreateReqUser) SetForcePasswordChange(v bool) {
	o.ForcePasswordChange = &v
}

// GetName returns the Name field value
func (o *UserCreateReqUser) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UserCreateReqUser) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UserCreateReqUser) SetName(v string) {
	o.Name = v
}

// GetPassword returns the Password field value
func (o *UserCreateReqUser) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *UserCreateReqUser) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *UserCreateReqUser) SetPassword(v string) {
	o.Password = v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *UserCreateReqUser) GetRoles() []string {
	if o == nil || IsNil(o.Roles) {
		var ret []string
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCreateReqUser) GetRolesOk() ([]string, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *UserCreateReqUser) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []string and assigns it to the Roles field.
func (o *UserCreateReqUser) SetRoles(v []string) {
	o.Roles = v
}

// GetRsaKeyId returns the RsaKeyId field value if set, zero value otherwise.
func (o *UserCreateReqUser) GetRsaKeyId() string {
	if o == nil || IsNil(o.RsaKeyId) {
		var ret string
		return ret
	}
	return *o.RsaKeyId
}

// GetRsaKeyIdOk returns a tuple with the RsaKeyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCreateReqUser) GetRsaKeyIdOk() (*string, bool) {
	if o == nil || IsNil(o.RsaKeyId) {
		return nil, false
	}
	return o.RsaKeyId, true
}

// HasRsaKeyId returns a boolean if a field has been set.
func (o *UserCreateReqUser) HasRsaKeyId() bool {
	if o != nil && !IsNil(o.RsaKeyId) {
		return true
	}

	return false
}

// SetRsaKeyId gets a reference to the given string and assigns it to the RsaKeyId field.
func (o *UserCreateReqUser) SetRsaKeyId(v string) {
	o.RsaKeyId = &v
}

func (o UserCreateReqUser) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserCreateReqUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["email"] = o.Email
	toSerialize["enabled"] = o.Enabled
	if !IsNil(o.EncryptedPassword) {
		toSerialize["encrypted_password"] = o.EncryptedPassword
	}
	if !IsNil(o.ForcePasswordChange) {
		toSerialize["force_password_change"] = o.ForcePasswordChange
	}
	toSerialize["name"] = o.Name
	toSerialize["password"] = o.Password
	if !IsNil(o.Roles) {
		toSerialize["roles"] = o.Roles
	}
	if !IsNil(o.RsaKeyId) {
		toSerialize["rsa_key_id"] = o.RsaKeyId
	}
	return toSerialize, nil
}

func (o *UserCreateReqUser) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"email",
		"enabled",
		"name",
		"password",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserCreateReqUser := _UserCreateReqUser{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserCreateReqUser)

	if err != nil {
		return err
	}

	*o = UserCreateReqUser(varUserCreateReqUser)

	return err
}

type NullableUserCreateReqUser struct {
	value *UserCreateReqUser
	isSet bool
}

func (v NullableUserCreateReqUser) Get() *UserCreateReqUser {
	return v.value
}

func (v *NullableUserCreateReqUser) Set(val *UserCreateReqUser) {
	v.value = val
	v.isSet = true
}

func (v NullableUserCreateReqUser) IsSet() bool {
	return v.isSet
}

func (v *NullableUserCreateReqUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserCreateReqUser(val *UserCreateReqUser) *NullableUserCreateReqUser {
	return &NullableUserCreateReqUser{value: val, isSet: true}
}

func (v NullableUserCreateReqUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserCreateReqUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


