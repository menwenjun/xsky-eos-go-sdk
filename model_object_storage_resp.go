/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ObjectStorageResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectStorageResp{}

// ObjectStorageResp struct for ObjectStorageResp
type ObjectStorageResp struct {
	ObjectStorage *ObjectStorageRecord `json:"object_storage,omitempty"`
}

// NewObjectStorageResp instantiates a new ObjectStorageResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectStorageResp() *ObjectStorageResp {
	this := ObjectStorageResp{}
	return &this
}

// NewObjectStorageRespWithDefaults instantiates a new ObjectStorageResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectStorageRespWithDefaults() *ObjectStorageResp {
	this := ObjectStorageResp{}
	return &this
}

// GetObjectStorage returns the ObjectStorage field value if set, zero value otherwise.
func (o *ObjectStorageResp) GetObjectStorage() ObjectStorageRecord {
	if o == nil || IsNil(o.ObjectStorage) {
		var ret ObjectStorageRecord
		return ret
	}
	return *o.ObjectStorage
}

// GetObjectStorageOk returns a tuple with the ObjectStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageResp) GetObjectStorageOk() (*ObjectStorageRecord, bool) {
	if o == nil || IsNil(o.ObjectStorage) {
		return nil, false
	}
	return o.ObjectStorage, true
}

// HasObjectStorage returns a boolean if a field has been set.
func (o *ObjectStorageResp) HasObjectStorage() bool {
	if o != nil && !IsNil(o.ObjectStorage) {
		return true
	}

	return false
}

// SetObjectStorage gets a reference to the given ObjectStorageRecord and assigns it to the ObjectStorage field.
func (o *ObjectStorageResp) SetObjectStorage(v ObjectStorageRecord) {
	o.ObjectStorage = &v
}

func (o ObjectStorageResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectStorageResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ObjectStorage) {
		toSerialize["object_storage"] = o.ObjectStorage
	}
	return toSerialize, nil
}

type NullableObjectStorageResp struct {
	value *ObjectStorageResp
	isSet bool
}

func (v NullableObjectStorageResp) Get() *ObjectStorageResp {
	return v.value
}

func (v *NullableObjectStorageResp) Set(val *ObjectStorageResp) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectStorageResp) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectStorageResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectStorageResp(val *ObjectStorageResp) *NullableObjectStorageResp {
	return &NullableObjectStorageResp{value: val, isSet: true}
}

func (v NullableObjectStorageResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectStorageResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


