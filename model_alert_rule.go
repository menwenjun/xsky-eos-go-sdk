/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the AlertRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlertRule{}

// AlertRule AlertRule defines the alert rule
type AlertRule struct {
	AlarmId *string `json:"alarm_id,omitempty"`
	BasicType *string `json:"basic_type,omitempty"`
	Create *time.Time `json:"create,omitempty"`
	Description *string `json:"description,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	Group *string `json:"group,omitempty"`
	HasResourceBlacklist *bool `json:"has_resource_blacklist,omitempty"`
	Id *int64 `json:"id,omitempty"`
	Level *string `json:"level,omitempty"`
	ResourceType *string `json:"resource_type,omitempty"`
	ResourceTypeDesc *string `json:"resource_type_desc,omitempty"`
	TriggerMode *string `json:"trigger_mode,omitempty"`
	TriggerPeriod *int64 `json:"trigger_period,omitempty"`
	TriggerValue *string `json:"trigger_value,omitempty"`
	TriggerValueDesc *string `json:"trigger_value_desc,omitempty"`
	Type *string `json:"type,omitempty"`
	Update *time.Time `json:"update,omitempty"`
	Weight *int32 `json:"weight,omitempty"`
}

// NewAlertRule instantiates a new AlertRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertRule() *AlertRule {
	this := AlertRule{}
	return &this
}

// NewAlertRuleWithDefaults instantiates a new AlertRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertRuleWithDefaults() *AlertRule {
	this := AlertRule{}
	return &this
}

// GetAlarmId returns the AlarmId field value if set, zero value otherwise.
func (o *AlertRule) GetAlarmId() string {
	if o == nil || IsNil(o.AlarmId) {
		var ret string
		return ret
	}
	return *o.AlarmId
}

// GetAlarmIdOk returns a tuple with the AlarmId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRule) GetAlarmIdOk() (*string, bool) {
	if o == nil || IsNil(o.AlarmId) {
		return nil, false
	}
	return o.AlarmId, true
}

// HasAlarmId returns a boolean if a field has been set.
func (o *AlertRule) HasAlarmId() bool {
	if o != nil && !IsNil(o.AlarmId) {
		return true
	}

	return false
}

// SetAlarmId gets a reference to the given string and assigns it to the AlarmId field.
func (o *AlertRule) SetAlarmId(v string) {
	o.AlarmId = &v
}

// GetBasicType returns the BasicType field value if set, zero value otherwise.
func (o *AlertRule) GetBasicType() string {
	if o == nil || IsNil(o.BasicType) {
		var ret string
		return ret
	}
	return *o.BasicType
}

// GetBasicTypeOk returns a tuple with the BasicType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRule) GetBasicTypeOk() (*string, bool) {
	if o == nil || IsNil(o.BasicType) {
		return nil, false
	}
	return o.BasicType, true
}

// HasBasicType returns a boolean if a field has been set.
func (o *AlertRule) HasBasicType() bool {
	if o != nil && !IsNil(o.BasicType) {
		return true
	}

	return false
}

// SetBasicType gets a reference to the given string and assigns it to the BasicType field.
func (o *AlertRule) SetBasicType(v string) {
	o.BasicType = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *AlertRule) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRule) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *AlertRule) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *AlertRule) SetCreate(v time.Time) {
	o.Create = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AlertRule) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRule) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AlertRule) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AlertRule) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *AlertRule) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRule) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *AlertRule) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *AlertRule) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *AlertRule) GetGroup() string {
	if o == nil || IsNil(o.Group) {
		var ret string
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRule) GetGroupOk() (*string, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *AlertRule) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given string and assigns it to the Group field.
func (o *AlertRule) SetGroup(v string) {
	o.Group = &v
}

// GetHasResourceBlacklist returns the HasResourceBlacklist field value if set, zero value otherwise.
func (o *AlertRule) GetHasResourceBlacklist() bool {
	if o == nil || IsNil(o.HasResourceBlacklist) {
		var ret bool
		return ret
	}
	return *o.HasResourceBlacklist
}

// GetHasResourceBlacklistOk returns a tuple with the HasResourceBlacklist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRule) GetHasResourceBlacklistOk() (*bool, bool) {
	if o == nil || IsNil(o.HasResourceBlacklist) {
		return nil, false
	}
	return o.HasResourceBlacklist, true
}

// HasHasResourceBlacklist returns a boolean if a field has been set.
func (o *AlertRule) HasHasResourceBlacklist() bool {
	if o != nil && !IsNil(o.HasResourceBlacklist) {
		return true
	}

	return false
}

// SetHasResourceBlacklist gets a reference to the given bool and assigns it to the HasResourceBlacklist field.
func (o *AlertRule) SetHasResourceBlacklist(v bool) {
	o.HasResourceBlacklist = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AlertRule) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRule) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AlertRule) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *AlertRule) SetId(v int64) {
	o.Id = &v
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *AlertRule) GetLevel() string {
	if o == nil || IsNil(o.Level) {
		var ret string
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRule) GetLevelOk() (*string, bool) {
	if o == nil || IsNil(o.Level) {
		return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *AlertRule) HasLevel() bool {
	if o != nil && !IsNil(o.Level) {
		return true
	}

	return false
}

// SetLevel gets a reference to the given string and assigns it to the Level field.
func (o *AlertRule) SetLevel(v string) {
	o.Level = &v
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *AlertRule) GetResourceType() string {
	if o == nil || IsNil(o.ResourceType) {
		var ret string
		return ret
	}
	return *o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRule) GetResourceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceType) {
		return nil, false
	}
	return o.ResourceType, true
}

// HasResourceType returns a boolean if a field has been set.
func (o *AlertRule) HasResourceType() bool {
	if o != nil && !IsNil(o.ResourceType) {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given string and assigns it to the ResourceType field.
func (o *AlertRule) SetResourceType(v string) {
	o.ResourceType = &v
}

// GetResourceTypeDesc returns the ResourceTypeDesc field value if set, zero value otherwise.
func (o *AlertRule) GetResourceTypeDesc() string {
	if o == nil || IsNil(o.ResourceTypeDesc) {
		var ret string
		return ret
	}
	return *o.ResourceTypeDesc
}

// GetResourceTypeDescOk returns a tuple with the ResourceTypeDesc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRule) GetResourceTypeDescOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceTypeDesc) {
		return nil, false
	}
	return o.ResourceTypeDesc, true
}

// HasResourceTypeDesc returns a boolean if a field has been set.
func (o *AlertRule) HasResourceTypeDesc() bool {
	if o != nil && !IsNil(o.ResourceTypeDesc) {
		return true
	}

	return false
}

// SetResourceTypeDesc gets a reference to the given string and assigns it to the ResourceTypeDesc field.
func (o *AlertRule) SetResourceTypeDesc(v string) {
	o.ResourceTypeDesc = &v
}

// GetTriggerMode returns the TriggerMode field value if set, zero value otherwise.
func (o *AlertRule) GetTriggerMode() string {
	if o == nil || IsNil(o.TriggerMode) {
		var ret string
		return ret
	}
	return *o.TriggerMode
}

// GetTriggerModeOk returns a tuple with the TriggerMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRule) GetTriggerModeOk() (*string, bool) {
	if o == nil || IsNil(o.TriggerMode) {
		return nil, false
	}
	return o.TriggerMode, true
}

// HasTriggerMode returns a boolean if a field has been set.
func (o *AlertRule) HasTriggerMode() bool {
	if o != nil && !IsNil(o.TriggerMode) {
		return true
	}

	return false
}

// SetTriggerMode gets a reference to the given string and assigns it to the TriggerMode field.
func (o *AlertRule) SetTriggerMode(v string) {
	o.TriggerMode = &v
}

// GetTriggerPeriod returns the TriggerPeriod field value if set, zero value otherwise.
func (o *AlertRule) GetTriggerPeriod() int64 {
	if o == nil || IsNil(o.TriggerPeriod) {
		var ret int64
		return ret
	}
	return *o.TriggerPeriod
}

// GetTriggerPeriodOk returns a tuple with the TriggerPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRule) GetTriggerPeriodOk() (*int64, bool) {
	if o == nil || IsNil(o.TriggerPeriod) {
		return nil, false
	}
	return o.TriggerPeriod, true
}

// HasTriggerPeriod returns a boolean if a field has been set.
func (o *AlertRule) HasTriggerPeriod() bool {
	if o != nil && !IsNil(o.TriggerPeriod) {
		return true
	}

	return false
}

// SetTriggerPeriod gets a reference to the given int64 and assigns it to the TriggerPeriod field.
func (o *AlertRule) SetTriggerPeriod(v int64) {
	o.TriggerPeriod = &v
}

// GetTriggerValue returns the TriggerValue field value if set, zero value otherwise.
func (o *AlertRule) GetTriggerValue() string {
	if o == nil || IsNil(o.TriggerValue) {
		var ret string
		return ret
	}
	return *o.TriggerValue
}

// GetTriggerValueOk returns a tuple with the TriggerValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRule) GetTriggerValueOk() (*string, bool) {
	if o == nil || IsNil(o.TriggerValue) {
		return nil, false
	}
	return o.TriggerValue, true
}

// HasTriggerValue returns a boolean if a field has been set.
func (o *AlertRule) HasTriggerValue() bool {
	if o != nil && !IsNil(o.TriggerValue) {
		return true
	}

	return false
}

// SetTriggerValue gets a reference to the given string and assigns it to the TriggerValue field.
func (o *AlertRule) SetTriggerValue(v string) {
	o.TriggerValue = &v
}

// GetTriggerValueDesc returns the TriggerValueDesc field value if set, zero value otherwise.
func (o *AlertRule) GetTriggerValueDesc() string {
	if o == nil || IsNil(o.TriggerValueDesc) {
		var ret string
		return ret
	}
	return *o.TriggerValueDesc
}

// GetTriggerValueDescOk returns a tuple with the TriggerValueDesc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRule) GetTriggerValueDescOk() (*string, bool) {
	if o == nil || IsNil(o.TriggerValueDesc) {
		return nil, false
	}
	return o.TriggerValueDesc, true
}

// HasTriggerValueDesc returns a boolean if a field has been set.
func (o *AlertRule) HasTriggerValueDesc() bool {
	if o != nil && !IsNil(o.TriggerValueDesc) {
		return true
	}

	return false
}

// SetTriggerValueDesc gets a reference to the given string and assigns it to the TriggerValueDesc field.
func (o *AlertRule) SetTriggerValueDesc(v string) {
	o.TriggerValueDesc = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AlertRule) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRule) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AlertRule) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AlertRule) SetType(v string) {
	o.Type = &v
}

// GetUpdate returns the Update field value if set, zero value otherwise.
func (o *AlertRule) GetUpdate() time.Time {
	if o == nil || IsNil(o.Update) {
		var ret time.Time
		return ret
	}
	return *o.Update
}

// GetUpdateOk returns a tuple with the Update field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRule) GetUpdateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Update) {
		return nil, false
	}
	return o.Update, true
}

// HasUpdate returns a boolean if a field has been set.
func (o *AlertRule) HasUpdate() bool {
	if o != nil && !IsNil(o.Update) {
		return true
	}

	return false
}

// SetUpdate gets a reference to the given time.Time and assigns it to the Update field.
func (o *AlertRule) SetUpdate(v time.Time) {
	o.Update = &v
}

// GetWeight returns the Weight field value if set, zero value otherwise.
func (o *AlertRule) GetWeight() int32 {
	if o == nil || IsNil(o.Weight) {
		var ret int32
		return ret
	}
	return *o.Weight
}

// GetWeightOk returns a tuple with the Weight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRule) GetWeightOk() (*int32, bool) {
	if o == nil || IsNil(o.Weight) {
		return nil, false
	}
	return o.Weight, true
}

// HasWeight returns a boolean if a field has been set.
func (o *AlertRule) HasWeight() bool {
	if o != nil && !IsNil(o.Weight) {
		return true
	}

	return false
}

// SetWeight gets a reference to the given int32 and assigns it to the Weight field.
func (o *AlertRule) SetWeight(v int32) {
	o.Weight = &v
}

func (o AlertRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlertRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AlarmId) {
		toSerialize["alarm_id"] = o.AlarmId
	}
	if !IsNil(o.BasicType) {
		toSerialize["basic_type"] = o.BasicType
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	if !IsNil(o.HasResourceBlacklist) {
		toSerialize["has_resource_blacklist"] = o.HasResourceBlacklist
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Level) {
		toSerialize["level"] = o.Level
	}
	if !IsNil(o.ResourceType) {
		toSerialize["resource_type"] = o.ResourceType
	}
	if !IsNil(o.ResourceTypeDesc) {
		toSerialize["resource_type_desc"] = o.ResourceTypeDesc
	}
	if !IsNil(o.TriggerMode) {
		toSerialize["trigger_mode"] = o.TriggerMode
	}
	if !IsNil(o.TriggerPeriod) {
		toSerialize["trigger_period"] = o.TriggerPeriod
	}
	if !IsNil(o.TriggerValue) {
		toSerialize["trigger_value"] = o.TriggerValue
	}
	if !IsNil(o.TriggerValueDesc) {
		toSerialize["trigger_value_desc"] = o.TriggerValueDesc
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Update) {
		toSerialize["update"] = o.Update
	}
	if !IsNil(o.Weight) {
		toSerialize["weight"] = o.Weight
	}
	return toSerialize, nil
}

type NullableAlertRule struct {
	value *AlertRule
	isSet bool
}

func (v NullableAlertRule) Get() *AlertRule {
	return v.value
}

func (v *NullableAlertRule) Set(val *AlertRule) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertRule) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertRule(val *AlertRule) *NullableAlertRule {
	return &NullableAlertRule{value: val, isSet: true}
}

func (v NullableAlertRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


