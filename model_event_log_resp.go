/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EventLogResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventLogResp{}

// EventLogResp struct for EventLogResp
type EventLogResp struct {
	EventLog EventLog `json:"event_log"`
}

type _EventLogResp EventLogResp

// NewEventLogResp instantiates a new EventLogResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventLogResp(eventLog EventLog) *EventLogResp {
	this := EventLogResp{}
	this.EventLog = eventLog
	return &this
}

// NewEventLogRespWithDefaults instantiates a new EventLogResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventLogRespWithDefaults() *EventLogResp {
	this := EventLogResp{}
	return &this
}

// GetEventLog returns the EventLog field value
func (o *EventLogResp) GetEventLog() EventLog {
	if o == nil {
		var ret EventLog
		return ret
	}

	return o.EventLog
}

// GetEventLogOk returns a tuple with the EventLog field value
// and a boolean to check if the value has been set.
func (o *EventLogResp) GetEventLogOk() (*EventLog, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventLog, true
}

// SetEventLog sets field value
func (o *EventLogResp) SetEventLog(v EventLog) {
	o.EventLog = v
}

func (o EventLogResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventLogResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["event_log"] = o.EventLog
	return toSerialize, nil
}

func (o *EventLogResp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"event_log",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventLogResp := _EventLogResp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEventLogResp)

	if err != nil {
		return err
	}

	*o = EventLogResp(varEventLogResp)

	return err
}

type NullableEventLogResp struct {
	value *EventLogResp
	isSet bool
}

func (v NullableEventLogResp) Get() *EventLogResp {
	return v.value
}

func (v *NullableEventLogResp) Set(val *EventLogResp) {
	v.value = val
	v.isSet = true
}

func (v NullableEventLogResp) IsSet() bool {
	return v.isSet
}

func (v *NullableEventLogResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventLogResp(val *EventLogResp) *NullableEventLogResp {
	return &NullableEventLogResp{value: val, isSet: true}
}

func (v NullableEventLogResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventLogResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


