/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DpDfsSnapshotsResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DpDfsSnapshotsResp{}

// DpDfsSnapshotsResp struct for DpDfsSnapshotsResp
type DpDfsSnapshotsResp struct {
	DpDfsSnapshots []DpDfsSnapshot `json:"dp_dfs_snapshots"`
}

type _DpDfsSnapshotsResp DpDfsSnapshotsResp

// NewDpDfsSnapshotsResp instantiates a new DpDfsSnapshotsResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDpDfsSnapshotsResp(dpDfsSnapshots []DpDfsSnapshot) *DpDfsSnapshotsResp {
	this := DpDfsSnapshotsResp{}
	this.DpDfsSnapshots = dpDfsSnapshots
	return &this
}

// NewDpDfsSnapshotsRespWithDefaults instantiates a new DpDfsSnapshotsResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDpDfsSnapshotsRespWithDefaults() *DpDfsSnapshotsResp {
	this := DpDfsSnapshotsResp{}
	return &this
}

// GetDpDfsSnapshots returns the DpDfsSnapshots field value
func (o *DpDfsSnapshotsResp) GetDpDfsSnapshots() []DpDfsSnapshot {
	if o == nil {
		var ret []DpDfsSnapshot
		return ret
	}

	return o.DpDfsSnapshots
}

// GetDpDfsSnapshotsOk returns a tuple with the DpDfsSnapshots field value
// and a boolean to check if the value has been set.
func (o *DpDfsSnapshotsResp) GetDpDfsSnapshotsOk() ([]DpDfsSnapshot, bool) {
	if o == nil {
		return nil, false
	}
	return o.DpDfsSnapshots, true
}

// SetDpDfsSnapshots sets field value
func (o *DpDfsSnapshotsResp) SetDpDfsSnapshots(v []DpDfsSnapshot) {
	o.DpDfsSnapshots = v
}

func (o DpDfsSnapshotsResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DpDfsSnapshotsResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dp_dfs_snapshots"] = o.DpDfsSnapshots
	return toSerialize, nil
}

func (o *DpDfsSnapshotsResp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dp_dfs_snapshots",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDpDfsSnapshotsResp := _DpDfsSnapshotsResp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDpDfsSnapshotsResp)

	if err != nil {
		return err
	}

	*o = DpDfsSnapshotsResp(varDpDfsSnapshotsResp)

	return err
}

type NullableDpDfsSnapshotsResp struct {
	value *DpDfsSnapshotsResp
	isSet bool
}

func (v NullableDpDfsSnapshotsResp) Get() *DpDfsSnapshotsResp {
	return v.value
}

func (v *NullableDpDfsSnapshotsResp) Set(val *DpDfsSnapshotsResp) {
	v.value = val
	v.isSet = true
}

func (v NullableDpDfsSnapshotsResp) IsSet() bool {
	return v.isSet
}

func (v *NullableDpDfsSnapshotsResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDpDfsSnapshotsResp(val *DpDfsSnapshotsResp) *NullableDpDfsSnapshotsResp {
	return &NullableDpDfsSnapshotsResp{value: val, isSet: true}
}

func (v NullableDpDfsSnapshotsResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDpDfsSnapshotsResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


