/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AlertGroupCreateReqAlertGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlertGroupCreateReqAlertGroup{}

// AlertGroupCreateReqAlertGroup struct for AlertGroupCreateReqAlertGroup
type AlertGroupCreateReqAlertGroup struct {
	AlertRuleIds []int64 `json:"alert_rule_ids"`
	EmailGroupIds []int64 `json:"email_group_ids"`
	Name string `json:"name"`
}

type _AlertGroupCreateReqAlertGroup AlertGroupCreateReqAlertGroup

// NewAlertGroupCreateReqAlertGroup instantiates a new AlertGroupCreateReqAlertGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertGroupCreateReqAlertGroup(alertRuleIds []int64, emailGroupIds []int64, name string) *AlertGroupCreateReqAlertGroup {
	this := AlertGroupCreateReqAlertGroup{}
	this.AlertRuleIds = alertRuleIds
	this.EmailGroupIds = emailGroupIds
	this.Name = name
	return &this
}

// NewAlertGroupCreateReqAlertGroupWithDefaults instantiates a new AlertGroupCreateReqAlertGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertGroupCreateReqAlertGroupWithDefaults() *AlertGroupCreateReqAlertGroup {
	this := AlertGroupCreateReqAlertGroup{}
	return &this
}

// GetAlertRuleIds returns the AlertRuleIds field value
func (o *AlertGroupCreateReqAlertGroup) GetAlertRuleIds() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}

	return o.AlertRuleIds
}

// GetAlertRuleIdsOk returns a tuple with the AlertRuleIds field value
// and a boolean to check if the value has been set.
func (o *AlertGroupCreateReqAlertGroup) GetAlertRuleIdsOk() ([]int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.AlertRuleIds, true
}

// SetAlertRuleIds sets field value
func (o *AlertGroupCreateReqAlertGroup) SetAlertRuleIds(v []int64) {
	o.AlertRuleIds = v
}

// GetEmailGroupIds returns the EmailGroupIds field value
func (o *AlertGroupCreateReqAlertGroup) GetEmailGroupIds() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}

	return o.EmailGroupIds
}

// GetEmailGroupIdsOk returns a tuple with the EmailGroupIds field value
// and a boolean to check if the value has been set.
func (o *AlertGroupCreateReqAlertGroup) GetEmailGroupIdsOk() ([]int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.EmailGroupIds, true
}

// SetEmailGroupIds sets field value
func (o *AlertGroupCreateReqAlertGroup) SetEmailGroupIds(v []int64) {
	o.EmailGroupIds = v
}

// GetName returns the Name field value
func (o *AlertGroupCreateReqAlertGroup) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AlertGroupCreateReqAlertGroup) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AlertGroupCreateReqAlertGroup) SetName(v string) {
	o.Name = v
}

func (o AlertGroupCreateReqAlertGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlertGroupCreateReqAlertGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["alert_rule_ids"] = o.AlertRuleIds
	toSerialize["email_group_ids"] = o.EmailGroupIds
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

func (o *AlertGroupCreateReqAlertGroup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"alert_rule_ids",
		"email_group_ids",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAlertGroupCreateReqAlertGroup := _AlertGroupCreateReqAlertGroup{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAlertGroupCreateReqAlertGroup)

	if err != nil {
		return err
	}

	*o = AlertGroupCreateReqAlertGroup(varAlertGroupCreateReqAlertGroup)

	return err
}

type NullableAlertGroupCreateReqAlertGroup struct {
	value *AlertGroupCreateReqAlertGroup
	isSet bool
}

func (v NullableAlertGroupCreateReqAlertGroup) Get() *AlertGroupCreateReqAlertGroup {
	return v.value
}

func (v *NullableAlertGroupCreateReqAlertGroup) Set(val *AlertGroupCreateReqAlertGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertGroupCreateReqAlertGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertGroupCreateReqAlertGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertGroupCreateReqAlertGroup(val *AlertGroupCreateReqAlertGroup) *NullableAlertGroupCreateReqAlertGroup {
	return &NullableAlertGroupCreateReqAlertGroup{value: val, isSet: true}
}

func (v NullableAlertGroupCreateReqAlertGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertGroupCreateReqAlertGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


