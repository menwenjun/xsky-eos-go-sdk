/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RuleMatchingInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RuleMatchingInfo{}

// RuleMatchingInfo RuleMatchingInfo defines rule matching info
type RuleMatchingInfo struct {
	MatchingRules []MatchingRule `json:"matching_rules,omitempty"`
	MismatchingAction *string `json:"mismatching_action,omitempty"`
}

// NewRuleMatchingInfo instantiates a new RuleMatchingInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRuleMatchingInfo() *RuleMatchingInfo {
	this := RuleMatchingInfo{}
	return &this
}

// NewRuleMatchingInfoWithDefaults instantiates a new RuleMatchingInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuleMatchingInfoWithDefaults() *RuleMatchingInfo {
	this := RuleMatchingInfo{}
	return &this
}

// GetMatchingRules returns the MatchingRules field value if set, zero value otherwise.
func (o *RuleMatchingInfo) GetMatchingRules() []MatchingRule {
	if o == nil || IsNil(o.MatchingRules) {
		var ret []MatchingRule
		return ret
	}
	return o.MatchingRules
}

// GetMatchingRulesOk returns a tuple with the MatchingRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleMatchingInfo) GetMatchingRulesOk() ([]MatchingRule, bool) {
	if o == nil || IsNil(o.MatchingRules) {
		return nil, false
	}
	return o.MatchingRules, true
}

// HasMatchingRules returns a boolean if a field has been set.
func (o *RuleMatchingInfo) HasMatchingRules() bool {
	if o != nil && !IsNil(o.MatchingRules) {
		return true
	}

	return false
}

// SetMatchingRules gets a reference to the given []MatchingRule and assigns it to the MatchingRules field.
func (o *RuleMatchingInfo) SetMatchingRules(v []MatchingRule) {
	o.MatchingRules = v
}

// GetMismatchingAction returns the MismatchingAction field value if set, zero value otherwise.
func (o *RuleMatchingInfo) GetMismatchingAction() string {
	if o == nil || IsNil(o.MismatchingAction) {
		var ret string
		return ret
	}
	return *o.MismatchingAction
}

// GetMismatchingActionOk returns a tuple with the MismatchingAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleMatchingInfo) GetMismatchingActionOk() (*string, bool) {
	if o == nil || IsNil(o.MismatchingAction) {
		return nil, false
	}
	return o.MismatchingAction, true
}

// HasMismatchingAction returns a boolean if a field has been set.
func (o *RuleMatchingInfo) HasMismatchingAction() bool {
	if o != nil && !IsNil(o.MismatchingAction) {
		return true
	}

	return false
}

// SetMismatchingAction gets a reference to the given string and assigns it to the MismatchingAction field.
func (o *RuleMatchingInfo) SetMismatchingAction(v string) {
	o.MismatchingAction = &v
}

func (o RuleMatchingInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RuleMatchingInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MatchingRules) {
		toSerialize["matching_rules"] = o.MatchingRules
	}
	if !IsNil(o.MismatchingAction) {
		toSerialize["mismatching_action"] = o.MismatchingAction
	}
	return toSerialize, nil
}

type NullableRuleMatchingInfo struct {
	value *RuleMatchingInfo
	isSet bool
}

func (v NullableRuleMatchingInfo) Get() *RuleMatchingInfo {
	return v.value
}

func (v *NullableRuleMatchingInfo) Set(val *RuleMatchingInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleMatchingInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleMatchingInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleMatchingInfo(val *RuleMatchingInfo) *NullableRuleMatchingInfo {
	return &NullableRuleMatchingInfo{value: val, isSet: true}
}

func (v NullableRuleMatchingInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleMatchingInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


