/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// BlockVolumeMigrationJobsAPIService BlockVolumeMigrationJobsAPI service
type BlockVolumeMigrationJobsAPIService service

type ApiCancelBlockVolumeMigrationJobRequest struct {
	ctx context.Context
	ApiService *BlockVolumeMigrationJobsAPIService
	blockVolumeMigrationJobId int64
}

func (r ApiCancelBlockVolumeMigrationJobRequest) Execute() (*BlockVolumeMigrationJobResp, *http.Response, error) {
	return r.ApiService.CancelBlockVolumeMigrationJobExecute(r)
}

/*
CancelBlockVolumeMigrationJob Method for CancelBlockVolumeMigrationJob

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param blockVolumeMigrationJobId block volume migration job id
 @return ApiCancelBlockVolumeMigrationJobRequest
*/
func (a *BlockVolumeMigrationJobsAPIService) CancelBlockVolumeMigrationJob(ctx context.Context, blockVolumeMigrationJobId int64) ApiCancelBlockVolumeMigrationJobRequest {
	return ApiCancelBlockVolumeMigrationJobRequest{
		ApiService: a,
		ctx: ctx,
		blockVolumeMigrationJobId: blockVolumeMigrationJobId,
	}
}

// Execute executes the request
//  @return BlockVolumeMigrationJobResp
func (a *BlockVolumeMigrationJobsAPIService) CancelBlockVolumeMigrationJobExecute(r ApiCancelBlockVolumeMigrationJobRequest) (*BlockVolumeMigrationJobResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BlockVolumeMigrationJobResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockVolumeMigrationJobsAPIService.CancelBlockVolumeMigrationJob")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/block-volume-migration-jobs/{block_volume_migration_job_id}:cancel"
	localVarPath = strings.Replace(localVarPath, "{"+"block_volume_migration_job_id"+"}", url.PathEscape(parameterValueToString(r.blockVolumeMigrationJobId, "blockVolumeMigrationJobId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetBlockVolumeMigrationJobRequest struct {
	ctx context.Context
	ApiService *BlockVolumeMigrationJobsAPIService
	blockVolumeMigrationJobId int64
}

func (r ApiGetBlockVolumeMigrationJobRequest) Execute() (*BlockVolumeMigrationJobResp, *http.Response, error) {
	return r.ApiService.GetBlockVolumeMigrationJobExecute(r)
}

/*
GetBlockVolumeMigrationJob Method for GetBlockVolumeMigrationJob

get a volume migration job

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param blockVolumeMigrationJobId volume migration job id
 @return ApiGetBlockVolumeMigrationJobRequest
*/
func (a *BlockVolumeMigrationJobsAPIService) GetBlockVolumeMigrationJob(ctx context.Context, blockVolumeMigrationJobId int64) ApiGetBlockVolumeMigrationJobRequest {
	return ApiGetBlockVolumeMigrationJobRequest{
		ApiService: a,
		ctx: ctx,
		blockVolumeMigrationJobId: blockVolumeMigrationJobId,
	}
}

// Execute executes the request
//  @return BlockVolumeMigrationJobResp
func (a *BlockVolumeMigrationJobsAPIService) GetBlockVolumeMigrationJobExecute(r ApiGetBlockVolumeMigrationJobRequest) (*BlockVolumeMigrationJobResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BlockVolumeMigrationJobResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockVolumeMigrationJobsAPIService.GetBlockVolumeMigrationJob")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/block-volume-migration-jobs/{block_volume_migration_job_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"block_volume_migration_job_id"+"}", url.PathEscape(parameterValueToString(r.blockVolumeMigrationJobId, "blockVolumeMigrationJobId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListBlockVolumeMigrationJobsRequest struct {
	ctx context.Context
	ApiService *BlockVolumeMigrationJobsAPIService
	limit *int64
	offset *int64
	status *string
	q *string
	sort *string
}

// paging param
func (r ApiListBlockVolumeMigrationJobsRequest) Limit(limit int64) ApiListBlockVolumeMigrationJobsRequest {
	r.limit = &limit
	return r
}

// paging param
func (r ApiListBlockVolumeMigrationJobsRequest) Offset(offset int64) ApiListBlockVolumeMigrationJobsRequest {
	r.offset = &offset
	return r
}

// the status of volume migration job
func (r ApiListBlockVolumeMigrationJobsRequest) Status(status string) ApiListBlockVolumeMigrationJobsRequest {
	r.status = &status
	return r
}

// query param of search
func (r ApiListBlockVolumeMigrationJobsRequest) Q(q string) ApiListBlockVolumeMigrationJobsRequest {
	r.q = &q
	return r
}

// sort param of search
func (r ApiListBlockVolumeMigrationJobsRequest) Sort(sort string) ApiListBlockVolumeMigrationJobsRequest {
	r.sort = &sort
	return r
}

func (r ApiListBlockVolumeMigrationJobsRequest) Execute() (*BlockVolumeMigrationJobsResp, *http.Response, error) {
	return r.ApiService.ListBlockVolumeMigrationJobsExecute(r)
}

/*
ListBlockVolumeMigrationJobs Method for ListBlockVolumeMigrationJobs

List volume migration jobs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListBlockVolumeMigrationJobsRequest
*/
func (a *BlockVolumeMigrationJobsAPIService) ListBlockVolumeMigrationJobs(ctx context.Context) ApiListBlockVolumeMigrationJobsRequest {
	return ApiListBlockVolumeMigrationJobsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BlockVolumeMigrationJobsResp
func (a *BlockVolumeMigrationJobsAPIService) ListBlockVolumeMigrationJobsExecute(r ApiListBlockVolumeMigrationJobsRequest) (*BlockVolumeMigrationJobsResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BlockVolumeMigrationJobsResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockVolumeMigrationJobsAPIService.ListBlockVolumeMigrationJobs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/block-volume-migration-jobs/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.status != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status", r.status, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateMigrationRequest struct {
	ctx context.Context
	ApiService *BlockVolumeMigrationJobsAPIService
	blockVolumeMigrationJobId int64
	body *BlockVolumeUpdateMigrationReq
}

// volume migration udpate info
func (r ApiUpdateMigrationRequest) Body(body BlockVolumeUpdateMigrationReq) ApiUpdateMigrationRequest {
	r.body = &body
	return r
}

func (r ApiUpdateMigrationRequest) Execute() (*BlockVolumeMigrationJobResp, *http.Response, error) {
	return r.ApiService.UpdateMigrationExecute(r)
}

/*
UpdateMigration Method for UpdateMigration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param blockVolumeMigrationJobId block volume migration job id
 @return ApiUpdateMigrationRequest
*/
func (a *BlockVolumeMigrationJobsAPIService) UpdateMigration(ctx context.Context, blockVolumeMigrationJobId int64) ApiUpdateMigrationRequest {
	return ApiUpdateMigrationRequest{
		ApiService: a,
		ctx: ctx,
		blockVolumeMigrationJobId: blockVolumeMigrationJobId,
	}
}

// Execute executes the request
//  @return BlockVolumeMigrationJobResp
func (a *BlockVolumeMigrationJobsAPIService) UpdateMigrationExecute(r ApiUpdateMigrationRequest) (*BlockVolumeMigrationJobResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BlockVolumeMigrationJobResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockVolumeMigrationJobsAPIService.UpdateMigration")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/block-volume-migration-jobs/{block_volume_migration_job_id}:update"
	localVarPath = strings.Replace(localVarPath, "{"+"block_volume_migration_job_id"+"}", url.PathEscape(parameterValueToString(r.blockVolumeMigrationJobId, "blockVolumeMigrationJobId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
