/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the NgObjectStorage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NgObjectStorage{}

// NgObjectStorage NgObjectStorage is the mode of next generation object storage +X:model:generate;
type NgObjectStorage struct {
	ActionStatus *string `json:"action_status,omitempty"`
	Cluster *ClusterNestview `json:"cluster,omitempty"`
	CnameEnabled *bool `json:"cname_enabled,omitempty"`
	Create *time.Time `json:"create,omitempty"`
	DomainNames []string `json:"domain_names,omitempty"`
	Id *int64 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Status *string `json:"status,omitempty"`
	VirtualBucketDump *bool `json:"virtual_bucket_dump,omitempty"`
}

// NewNgObjectStorage instantiates a new NgObjectStorage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNgObjectStorage() *NgObjectStorage {
	this := NgObjectStorage{}
	return &this
}

// NewNgObjectStorageWithDefaults instantiates a new NgObjectStorage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNgObjectStorageWithDefaults() *NgObjectStorage {
	this := NgObjectStorage{}
	return &this
}

// GetActionStatus returns the ActionStatus field value if set, zero value otherwise.
func (o *NgObjectStorage) GetActionStatus() string {
	if o == nil || IsNil(o.ActionStatus) {
		var ret string
		return ret
	}
	return *o.ActionStatus
}

// GetActionStatusOk returns a tuple with the ActionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NgObjectStorage) GetActionStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ActionStatus) {
		return nil, false
	}
	return o.ActionStatus, true
}

// HasActionStatus returns a boolean if a field has been set.
func (o *NgObjectStorage) HasActionStatus() bool {
	if o != nil && !IsNil(o.ActionStatus) {
		return true
	}

	return false
}

// SetActionStatus gets a reference to the given string and assigns it to the ActionStatus field.
func (o *NgObjectStorage) SetActionStatus(v string) {
	o.ActionStatus = &v
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *NgObjectStorage) GetCluster() ClusterNestview {
	if o == nil || IsNil(o.Cluster) {
		var ret ClusterNestview
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NgObjectStorage) GetClusterOk() (*ClusterNestview, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *NgObjectStorage) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given ClusterNestview and assigns it to the Cluster field.
func (o *NgObjectStorage) SetCluster(v ClusterNestview) {
	o.Cluster = &v
}

// GetCnameEnabled returns the CnameEnabled field value if set, zero value otherwise.
func (o *NgObjectStorage) GetCnameEnabled() bool {
	if o == nil || IsNil(o.CnameEnabled) {
		var ret bool
		return ret
	}
	return *o.CnameEnabled
}

// GetCnameEnabledOk returns a tuple with the CnameEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NgObjectStorage) GetCnameEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.CnameEnabled) {
		return nil, false
	}
	return o.CnameEnabled, true
}

// HasCnameEnabled returns a boolean if a field has been set.
func (o *NgObjectStorage) HasCnameEnabled() bool {
	if o != nil && !IsNil(o.CnameEnabled) {
		return true
	}

	return false
}

// SetCnameEnabled gets a reference to the given bool and assigns it to the CnameEnabled field.
func (o *NgObjectStorage) SetCnameEnabled(v bool) {
	o.CnameEnabled = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *NgObjectStorage) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NgObjectStorage) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *NgObjectStorage) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *NgObjectStorage) SetCreate(v time.Time) {
	o.Create = &v
}

// GetDomainNames returns the DomainNames field value if set, zero value otherwise.
func (o *NgObjectStorage) GetDomainNames() []string {
	if o == nil || IsNil(o.DomainNames) {
		var ret []string
		return ret
	}
	return o.DomainNames
}

// GetDomainNamesOk returns a tuple with the DomainNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NgObjectStorage) GetDomainNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.DomainNames) {
		return nil, false
	}
	return o.DomainNames, true
}

// HasDomainNames returns a boolean if a field has been set.
func (o *NgObjectStorage) HasDomainNames() bool {
	if o != nil && !IsNil(o.DomainNames) {
		return true
	}

	return false
}

// SetDomainNames gets a reference to the given []string and assigns it to the DomainNames field.
func (o *NgObjectStorage) SetDomainNames(v []string) {
	o.DomainNames = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NgObjectStorage) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NgObjectStorage) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *NgObjectStorage) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *NgObjectStorage) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NgObjectStorage) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NgObjectStorage) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *NgObjectStorage) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NgObjectStorage) SetName(v string) {
	o.Name = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *NgObjectStorage) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NgObjectStorage) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *NgObjectStorage) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *NgObjectStorage) SetStatus(v string) {
	o.Status = &v
}

// GetVirtualBucketDump returns the VirtualBucketDump field value if set, zero value otherwise.
func (o *NgObjectStorage) GetVirtualBucketDump() bool {
	if o == nil || IsNil(o.VirtualBucketDump) {
		var ret bool
		return ret
	}
	return *o.VirtualBucketDump
}

// GetVirtualBucketDumpOk returns a tuple with the VirtualBucketDump field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NgObjectStorage) GetVirtualBucketDumpOk() (*bool, bool) {
	if o == nil || IsNil(o.VirtualBucketDump) {
		return nil, false
	}
	return o.VirtualBucketDump, true
}

// HasVirtualBucketDump returns a boolean if a field has been set.
func (o *NgObjectStorage) HasVirtualBucketDump() bool {
	if o != nil && !IsNil(o.VirtualBucketDump) {
		return true
	}

	return false
}

// SetVirtualBucketDump gets a reference to the given bool and assigns it to the VirtualBucketDump field.
func (o *NgObjectStorage) SetVirtualBucketDump(v bool) {
	o.VirtualBucketDump = &v
}

func (o NgObjectStorage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NgObjectStorage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActionStatus) {
		toSerialize["action_status"] = o.ActionStatus
	}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !IsNil(o.CnameEnabled) {
		toSerialize["cname_enabled"] = o.CnameEnabled
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.DomainNames) {
		toSerialize["domain_names"] = o.DomainNames
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.VirtualBucketDump) {
		toSerialize["virtual_bucket_dump"] = o.VirtualBucketDump
	}
	return toSerialize, nil
}

type NullableNgObjectStorage struct {
	value *NgObjectStorage
	isSet bool
}

func (v NullableNgObjectStorage) Get() *NgObjectStorage {
	return v.value
}

func (v *NullableNgObjectStorage) Set(val *NgObjectStorage) {
	v.value = val
	v.isSet = true
}

func (v NullableNgObjectStorage) IsSet() bool {
	return v.isSet
}

func (v *NullableNgObjectStorage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNgObjectStorage(val *NgObjectStorage) *NullableNgObjectStorage {
	return &NullableNgObjectStorage{value: val, isSet: true}
}

func (v NullableNgObjectStorage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNgObjectStorage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


