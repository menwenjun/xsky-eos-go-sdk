/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RemoteClusterUpdateReqRemoteCluster type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RemoteClusterUpdateReqRemoteCluster{}

// RemoteClusterUpdateReqRemoteCluster struct for RemoteClusterUpdateReqRemoteCluster
type RemoteClusterUpdateReqRemoteCluster struct {
	// access token of remote cluster
	AccessToken string `json:"access_token"`
	// URL of remote cluster
	Url string `json:"url"`
}

type _RemoteClusterUpdateReqRemoteCluster RemoteClusterUpdateReqRemoteCluster

// NewRemoteClusterUpdateReqRemoteCluster instantiates a new RemoteClusterUpdateReqRemoteCluster object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoteClusterUpdateReqRemoteCluster(accessToken string, url string) *RemoteClusterUpdateReqRemoteCluster {
	this := RemoteClusterUpdateReqRemoteCluster{}
	this.AccessToken = accessToken
	this.Url = url
	return &this
}

// NewRemoteClusterUpdateReqRemoteClusterWithDefaults instantiates a new RemoteClusterUpdateReqRemoteCluster object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoteClusterUpdateReqRemoteClusterWithDefaults() *RemoteClusterUpdateReqRemoteCluster {
	this := RemoteClusterUpdateReqRemoteCluster{}
	return &this
}

// GetAccessToken returns the AccessToken field value
func (o *RemoteClusterUpdateReqRemoteCluster) GetAccessToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccessToken
}

// GetAccessTokenOk returns a tuple with the AccessToken field value
// and a boolean to check if the value has been set.
func (o *RemoteClusterUpdateReqRemoteCluster) GetAccessTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessToken, true
}

// SetAccessToken sets field value
func (o *RemoteClusterUpdateReqRemoteCluster) SetAccessToken(v string) {
	o.AccessToken = v
}

// GetUrl returns the Url field value
func (o *RemoteClusterUpdateReqRemoteCluster) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *RemoteClusterUpdateReqRemoteCluster) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *RemoteClusterUpdateReqRemoteCluster) SetUrl(v string) {
	o.Url = v
}

func (o RemoteClusterUpdateReqRemoteCluster) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RemoteClusterUpdateReqRemoteCluster) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["access_token"] = o.AccessToken
	toSerialize["url"] = o.Url
	return toSerialize, nil
}

func (o *RemoteClusterUpdateReqRemoteCluster) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"access_token",
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRemoteClusterUpdateReqRemoteCluster := _RemoteClusterUpdateReqRemoteCluster{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRemoteClusterUpdateReqRemoteCluster)

	if err != nil {
		return err
	}

	*o = RemoteClusterUpdateReqRemoteCluster(varRemoteClusterUpdateReqRemoteCluster)

	return err
}

type NullableRemoteClusterUpdateReqRemoteCluster struct {
	value *RemoteClusterUpdateReqRemoteCluster
	isSet bool
}

func (v NullableRemoteClusterUpdateReqRemoteCluster) Get() *RemoteClusterUpdateReqRemoteCluster {
	return v.value
}

func (v *NullableRemoteClusterUpdateReqRemoteCluster) Set(val *RemoteClusterUpdateReqRemoteCluster) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoteClusterUpdateReqRemoteCluster) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoteClusterUpdateReqRemoteCluster) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoteClusterUpdateReqRemoteCluster(val *RemoteClusterUpdateReqRemoteCluster) *NullableRemoteClusterUpdateReqRemoteCluster {
	return &NullableRemoteClusterUpdateReqRemoteCluster{value: val, isSet: true}
}

func (v NullableRemoteClusterUpdateReqRemoteCluster) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoteClusterUpdateReqRemoteCluster) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


