/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the DfsTierRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsTierRecord{}

// DfsTierRecord DfsTierRecord combine DfsTier and DfsTiersRecord as API response
type DfsTierRecord struct {
	ActionStatus *string `json:"action_status,omitempty"`
	ActivePoolIds []int64 `json:"active_pool_ids,omitempty"`
	Cluster *ClusterNestview `json:"cluster,omitempty"`
	Create *time.Time `json:"create,omitempty"`
	Description *string `json:"description,omitempty"`
	DfsRootfs *DfsRootfsNestview `json:"dfs_rootfs,omitempty"`
	DfsStoragePolicies []DfsStoragePolicy `json:"dfs_storage_policies,omitempty"`
	Id *int64 `json:"id,omitempty"`
	IsDefault *bool `json:"is_default,omitempty"`
	Name *string `json:"name,omitempty"`
	PolicyNum *int64 `json:"policy_num,omitempty"`
	PoolIds []int64 `json:"pool_ids,omitempty"`
	PoolNames []string `json:"pool_names,omitempty"`
	PoolNum *int64 `json:"pool_num,omitempty"`
	PoolPolicies []DfsTierPoolPolicy `json:"pool_policies,omitempty"`
	Pools []PoolNestview `json:"pools,omitempty"`
	ScId *int64 `json:"sc_id,omitempty"`
	Status *string `json:"status,omitempty"`
	StoragePolicyIds []int64 `json:"storage_policy_ids,omitempty"`
	// indicate that all pools under this class is stretched pool
	Stretched *bool `json:"stretched,omitempty"`
	Update *time.Time `json:"update,omitempty"`
	WritePolicy *string `json:"write_policy,omitempty"`
	Samples []DfsTierStat `json:"samples,omitempty"`
}

// NewDfsTierRecord instantiates a new DfsTierRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsTierRecord() *DfsTierRecord {
	this := DfsTierRecord{}
	return &this
}

// NewDfsTierRecordWithDefaults instantiates a new DfsTierRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsTierRecordWithDefaults() *DfsTierRecord {
	this := DfsTierRecord{}
	return &this
}

// GetActionStatus returns the ActionStatus field value if set, zero value otherwise.
func (o *DfsTierRecord) GetActionStatus() string {
	if o == nil || IsNil(o.ActionStatus) {
		var ret string
		return ret
	}
	return *o.ActionStatus
}

// GetActionStatusOk returns a tuple with the ActionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTierRecord) GetActionStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ActionStatus) {
		return nil, false
	}
	return o.ActionStatus, true
}

// HasActionStatus returns a boolean if a field has been set.
func (o *DfsTierRecord) HasActionStatus() bool {
	if o != nil && !IsNil(o.ActionStatus) {
		return true
	}

	return false
}

// SetActionStatus gets a reference to the given string and assigns it to the ActionStatus field.
func (o *DfsTierRecord) SetActionStatus(v string) {
	o.ActionStatus = &v
}

// GetActivePoolIds returns the ActivePoolIds field value if set, zero value otherwise.
func (o *DfsTierRecord) GetActivePoolIds() []int64 {
	if o == nil || IsNil(o.ActivePoolIds) {
		var ret []int64
		return ret
	}
	return o.ActivePoolIds
}

// GetActivePoolIdsOk returns a tuple with the ActivePoolIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTierRecord) GetActivePoolIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.ActivePoolIds) {
		return nil, false
	}
	return o.ActivePoolIds, true
}

// HasActivePoolIds returns a boolean if a field has been set.
func (o *DfsTierRecord) HasActivePoolIds() bool {
	if o != nil && !IsNil(o.ActivePoolIds) {
		return true
	}

	return false
}

// SetActivePoolIds gets a reference to the given []int64 and assigns it to the ActivePoolIds field.
func (o *DfsTierRecord) SetActivePoolIds(v []int64) {
	o.ActivePoolIds = v
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *DfsTierRecord) GetCluster() ClusterNestview {
	if o == nil || IsNil(o.Cluster) {
		var ret ClusterNestview
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTierRecord) GetClusterOk() (*ClusterNestview, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *DfsTierRecord) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given ClusterNestview and assigns it to the Cluster field.
func (o *DfsTierRecord) SetCluster(v ClusterNestview) {
	o.Cluster = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *DfsTierRecord) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTierRecord) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *DfsTierRecord) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *DfsTierRecord) SetCreate(v time.Time) {
	o.Create = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DfsTierRecord) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTierRecord) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DfsTierRecord) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DfsTierRecord) SetDescription(v string) {
	o.Description = &v
}

// GetDfsRootfs returns the DfsRootfs field value if set, zero value otherwise.
func (o *DfsTierRecord) GetDfsRootfs() DfsRootfsNestview {
	if o == nil || IsNil(o.DfsRootfs) {
		var ret DfsRootfsNestview
		return ret
	}
	return *o.DfsRootfs
}

// GetDfsRootfsOk returns a tuple with the DfsRootfs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTierRecord) GetDfsRootfsOk() (*DfsRootfsNestview, bool) {
	if o == nil || IsNil(o.DfsRootfs) {
		return nil, false
	}
	return o.DfsRootfs, true
}

// HasDfsRootfs returns a boolean if a field has been set.
func (o *DfsTierRecord) HasDfsRootfs() bool {
	if o != nil && !IsNil(o.DfsRootfs) {
		return true
	}

	return false
}

// SetDfsRootfs gets a reference to the given DfsRootfsNestview and assigns it to the DfsRootfs field.
func (o *DfsTierRecord) SetDfsRootfs(v DfsRootfsNestview) {
	o.DfsRootfs = &v
}

// GetDfsStoragePolicies returns the DfsStoragePolicies field value if set, zero value otherwise.
func (o *DfsTierRecord) GetDfsStoragePolicies() []DfsStoragePolicy {
	if o == nil || IsNil(o.DfsStoragePolicies) {
		var ret []DfsStoragePolicy
		return ret
	}
	return o.DfsStoragePolicies
}

// GetDfsStoragePoliciesOk returns a tuple with the DfsStoragePolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTierRecord) GetDfsStoragePoliciesOk() ([]DfsStoragePolicy, bool) {
	if o == nil || IsNil(o.DfsStoragePolicies) {
		return nil, false
	}
	return o.DfsStoragePolicies, true
}

// HasDfsStoragePolicies returns a boolean if a field has been set.
func (o *DfsTierRecord) HasDfsStoragePolicies() bool {
	if o != nil && !IsNil(o.DfsStoragePolicies) {
		return true
	}

	return false
}

// SetDfsStoragePolicies gets a reference to the given []DfsStoragePolicy and assigns it to the DfsStoragePolicies field.
func (o *DfsTierRecord) SetDfsStoragePolicies(v []DfsStoragePolicy) {
	o.DfsStoragePolicies = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DfsTierRecord) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTierRecord) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DfsTierRecord) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *DfsTierRecord) SetId(v int64) {
	o.Id = &v
}

// GetIsDefault returns the IsDefault field value if set, zero value otherwise.
func (o *DfsTierRecord) GetIsDefault() bool {
	if o == nil || IsNil(o.IsDefault) {
		var ret bool
		return ret
	}
	return *o.IsDefault
}

// GetIsDefaultOk returns a tuple with the IsDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTierRecord) GetIsDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDefault) {
		return nil, false
	}
	return o.IsDefault, true
}

// HasIsDefault returns a boolean if a field has been set.
func (o *DfsTierRecord) HasIsDefault() bool {
	if o != nil && !IsNil(o.IsDefault) {
		return true
	}

	return false
}

// SetIsDefault gets a reference to the given bool and assigns it to the IsDefault field.
func (o *DfsTierRecord) SetIsDefault(v bool) {
	o.IsDefault = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DfsTierRecord) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTierRecord) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DfsTierRecord) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DfsTierRecord) SetName(v string) {
	o.Name = &v
}

// GetPolicyNum returns the PolicyNum field value if set, zero value otherwise.
func (o *DfsTierRecord) GetPolicyNum() int64 {
	if o == nil || IsNil(o.PolicyNum) {
		var ret int64
		return ret
	}
	return *o.PolicyNum
}

// GetPolicyNumOk returns a tuple with the PolicyNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTierRecord) GetPolicyNumOk() (*int64, bool) {
	if o == nil || IsNil(o.PolicyNum) {
		return nil, false
	}
	return o.PolicyNum, true
}

// HasPolicyNum returns a boolean if a field has been set.
func (o *DfsTierRecord) HasPolicyNum() bool {
	if o != nil && !IsNil(o.PolicyNum) {
		return true
	}

	return false
}

// SetPolicyNum gets a reference to the given int64 and assigns it to the PolicyNum field.
func (o *DfsTierRecord) SetPolicyNum(v int64) {
	o.PolicyNum = &v
}

// GetPoolIds returns the PoolIds field value if set, zero value otherwise.
func (o *DfsTierRecord) GetPoolIds() []int64 {
	if o == nil || IsNil(o.PoolIds) {
		var ret []int64
		return ret
	}
	return o.PoolIds
}

// GetPoolIdsOk returns a tuple with the PoolIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTierRecord) GetPoolIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.PoolIds) {
		return nil, false
	}
	return o.PoolIds, true
}

// HasPoolIds returns a boolean if a field has been set.
func (o *DfsTierRecord) HasPoolIds() bool {
	if o != nil && !IsNil(o.PoolIds) {
		return true
	}

	return false
}

// SetPoolIds gets a reference to the given []int64 and assigns it to the PoolIds field.
func (o *DfsTierRecord) SetPoolIds(v []int64) {
	o.PoolIds = v
}

// GetPoolNames returns the PoolNames field value if set, zero value otherwise.
func (o *DfsTierRecord) GetPoolNames() []string {
	if o == nil || IsNil(o.PoolNames) {
		var ret []string
		return ret
	}
	return o.PoolNames
}

// GetPoolNamesOk returns a tuple with the PoolNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTierRecord) GetPoolNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.PoolNames) {
		return nil, false
	}
	return o.PoolNames, true
}

// HasPoolNames returns a boolean if a field has been set.
func (o *DfsTierRecord) HasPoolNames() bool {
	if o != nil && !IsNil(o.PoolNames) {
		return true
	}

	return false
}

// SetPoolNames gets a reference to the given []string and assigns it to the PoolNames field.
func (o *DfsTierRecord) SetPoolNames(v []string) {
	o.PoolNames = v
}

// GetPoolNum returns the PoolNum field value if set, zero value otherwise.
func (o *DfsTierRecord) GetPoolNum() int64 {
	if o == nil || IsNil(o.PoolNum) {
		var ret int64
		return ret
	}
	return *o.PoolNum
}

// GetPoolNumOk returns a tuple with the PoolNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTierRecord) GetPoolNumOk() (*int64, bool) {
	if o == nil || IsNil(o.PoolNum) {
		return nil, false
	}
	return o.PoolNum, true
}

// HasPoolNum returns a boolean if a field has been set.
func (o *DfsTierRecord) HasPoolNum() bool {
	if o != nil && !IsNil(o.PoolNum) {
		return true
	}

	return false
}

// SetPoolNum gets a reference to the given int64 and assigns it to the PoolNum field.
func (o *DfsTierRecord) SetPoolNum(v int64) {
	o.PoolNum = &v
}

// GetPoolPolicies returns the PoolPolicies field value if set, zero value otherwise.
func (o *DfsTierRecord) GetPoolPolicies() []DfsTierPoolPolicy {
	if o == nil || IsNil(o.PoolPolicies) {
		var ret []DfsTierPoolPolicy
		return ret
	}
	return o.PoolPolicies
}

// GetPoolPoliciesOk returns a tuple with the PoolPolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTierRecord) GetPoolPoliciesOk() ([]DfsTierPoolPolicy, bool) {
	if o == nil || IsNil(o.PoolPolicies) {
		return nil, false
	}
	return o.PoolPolicies, true
}

// HasPoolPolicies returns a boolean if a field has been set.
func (o *DfsTierRecord) HasPoolPolicies() bool {
	if o != nil && !IsNil(o.PoolPolicies) {
		return true
	}

	return false
}

// SetPoolPolicies gets a reference to the given []DfsTierPoolPolicy and assigns it to the PoolPolicies field.
func (o *DfsTierRecord) SetPoolPolicies(v []DfsTierPoolPolicy) {
	o.PoolPolicies = v
}

// GetPools returns the Pools field value if set, zero value otherwise.
func (o *DfsTierRecord) GetPools() []PoolNestview {
	if o == nil || IsNil(o.Pools) {
		var ret []PoolNestview
		return ret
	}
	return o.Pools
}

// GetPoolsOk returns a tuple with the Pools field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTierRecord) GetPoolsOk() ([]PoolNestview, bool) {
	if o == nil || IsNil(o.Pools) {
		return nil, false
	}
	return o.Pools, true
}

// HasPools returns a boolean if a field has been set.
func (o *DfsTierRecord) HasPools() bool {
	if o != nil && !IsNil(o.Pools) {
		return true
	}

	return false
}

// SetPools gets a reference to the given []PoolNestview and assigns it to the Pools field.
func (o *DfsTierRecord) SetPools(v []PoolNestview) {
	o.Pools = v
}

// GetScId returns the ScId field value if set, zero value otherwise.
func (o *DfsTierRecord) GetScId() int64 {
	if o == nil || IsNil(o.ScId) {
		var ret int64
		return ret
	}
	return *o.ScId
}

// GetScIdOk returns a tuple with the ScId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTierRecord) GetScIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ScId) {
		return nil, false
	}
	return o.ScId, true
}

// HasScId returns a boolean if a field has been set.
func (o *DfsTierRecord) HasScId() bool {
	if o != nil && !IsNil(o.ScId) {
		return true
	}

	return false
}

// SetScId gets a reference to the given int64 and assigns it to the ScId field.
func (o *DfsTierRecord) SetScId(v int64) {
	o.ScId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DfsTierRecord) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTierRecord) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DfsTierRecord) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *DfsTierRecord) SetStatus(v string) {
	o.Status = &v
}

// GetStoragePolicyIds returns the StoragePolicyIds field value if set, zero value otherwise.
func (o *DfsTierRecord) GetStoragePolicyIds() []int64 {
	if o == nil || IsNil(o.StoragePolicyIds) {
		var ret []int64
		return ret
	}
	return o.StoragePolicyIds
}

// GetStoragePolicyIdsOk returns a tuple with the StoragePolicyIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTierRecord) GetStoragePolicyIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.StoragePolicyIds) {
		return nil, false
	}
	return o.StoragePolicyIds, true
}

// HasStoragePolicyIds returns a boolean if a field has been set.
func (o *DfsTierRecord) HasStoragePolicyIds() bool {
	if o != nil && !IsNil(o.StoragePolicyIds) {
		return true
	}

	return false
}

// SetStoragePolicyIds gets a reference to the given []int64 and assigns it to the StoragePolicyIds field.
func (o *DfsTierRecord) SetStoragePolicyIds(v []int64) {
	o.StoragePolicyIds = v
}

// GetStretched returns the Stretched field value if set, zero value otherwise.
func (o *DfsTierRecord) GetStretched() bool {
	if o == nil || IsNil(o.Stretched) {
		var ret bool
		return ret
	}
	return *o.Stretched
}

// GetStretchedOk returns a tuple with the Stretched field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTierRecord) GetStretchedOk() (*bool, bool) {
	if o == nil || IsNil(o.Stretched) {
		return nil, false
	}
	return o.Stretched, true
}

// HasStretched returns a boolean if a field has been set.
func (o *DfsTierRecord) HasStretched() bool {
	if o != nil && !IsNil(o.Stretched) {
		return true
	}

	return false
}

// SetStretched gets a reference to the given bool and assigns it to the Stretched field.
func (o *DfsTierRecord) SetStretched(v bool) {
	o.Stretched = &v
}

// GetUpdate returns the Update field value if set, zero value otherwise.
func (o *DfsTierRecord) GetUpdate() time.Time {
	if o == nil || IsNil(o.Update) {
		var ret time.Time
		return ret
	}
	return *o.Update
}

// GetUpdateOk returns a tuple with the Update field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTierRecord) GetUpdateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Update) {
		return nil, false
	}
	return o.Update, true
}

// HasUpdate returns a boolean if a field has been set.
func (o *DfsTierRecord) HasUpdate() bool {
	if o != nil && !IsNil(o.Update) {
		return true
	}

	return false
}

// SetUpdate gets a reference to the given time.Time and assigns it to the Update field.
func (o *DfsTierRecord) SetUpdate(v time.Time) {
	o.Update = &v
}

// GetWritePolicy returns the WritePolicy field value if set, zero value otherwise.
func (o *DfsTierRecord) GetWritePolicy() string {
	if o == nil || IsNil(o.WritePolicy) {
		var ret string
		return ret
	}
	return *o.WritePolicy
}

// GetWritePolicyOk returns a tuple with the WritePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTierRecord) GetWritePolicyOk() (*string, bool) {
	if o == nil || IsNil(o.WritePolicy) {
		return nil, false
	}
	return o.WritePolicy, true
}

// HasWritePolicy returns a boolean if a field has been set.
func (o *DfsTierRecord) HasWritePolicy() bool {
	if o != nil && !IsNil(o.WritePolicy) {
		return true
	}

	return false
}

// SetWritePolicy gets a reference to the given string and assigns it to the WritePolicy field.
func (o *DfsTierRecord) SetWritePolicy(v string) {
	o.WritePolicy = &v
}

// GetSamples returns the Samples field value if set, zero value otherwise.
func (o *DfsTierRecord) GetSamples() []DfsTierStat {
	if o == nil || IsNil(o.Samples) {
		var ret []DfsTierStat
		return ret
	}
	return o.Samples
}

// GetSamplesOk returns a tuple with the Samples field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTierRecord) GetSamplesOk() ([]DfsTierStat, bool) {
	if o == nil || IsNil(o.Samples) {
		return nil, false
	}
	return o.Samples, true
}

// HasSamples returns a boolean if a field has been set.
func (o *DfsTierRecord) HasSamples() bool {
	if o != nil && !IsNil(o.Samples) {
		return true
	}

	return false
}

// SetSamples gets a reference to the given []DfsTierStat and assigns it to the Samples field.
func (o *DfsTierRecord) SetSamples(v []DfsTierStat) {
	o.Samples = v
}

func (o DfsTierRecord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsTierRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActionStatus) {
		toSerialize["action_status"] = o.ActionStatus
	}
	if !IsNil(o.ActivePoolIds) {
		toSerialize["active_pool_ids"] = o.ActivePoolIds
	}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DfsRootfs) {
		toSerialize["dfs_rootfs"] = o.DfsRootfs
	}
	if !IsNil(o.DfsStoragePolicies) {
		toSerialize["dfs_storage_policies"] = o.DfsStoragePolicies
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IsDefault) {
		toSerialize["is_default"] = o.IsDefault
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.PolicyNum) {
		toSerialize["policy_num"] = o.PolicyNum
	}
	if !IsNil(o.PoolIds) {
		toSerialize["pool_ids"] = o.PoolIds
	}
	if !IsNil(o.PoolNames) {
		toSerialize["pool_names"] = o.PoolNames
	}
	if !IsNil(o.PoolNum) {
		toSerialize["pool_num"] = o.PoolNum
	}
	if !IsNil(o.PoolPolicies) {
		toSerialize["pool_policies"] = o.PoolPolicies
	}
	if !IsNil(o.Pools) {
		toSerialize["pools"] = o.Pools
	}
	if !IsNil(o.ScId) {
		toSerialize["sc_id"] = o.ScId
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.StoragePolicyIds) {
		toSerialize["storage_policy_ids"] = o.StoragePolicyIds
	}
	if !IsNil(o.Stretched) {
		toSerialize["stretched"] = o.Stretched
	}
	if !IsNil(o.Update) {
		toSerialize["update"] = o.Update
	}
	if !IsNil(o.WritePolicy) {
		toSerialize["write_policy"] = o.WritePolicy
	}
	if !IsNil(o.Samples) {
		toSerialize["samples"] = o.Samples
	}
	return toSerialize, nil
}

type NullableDfsTierRecord struct {
	value *DfsTierRecord
	isSet bool
}

func (v NullableDfsTierRecord) Get() *DfsTierRecord {
	return v.value
}

func (v *NullableDfsTierRecord) Set(val *DfsTierRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsTierRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsTierRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsTierRecord(val *DfsTierRecord) *NullableDfsTierRecord {
	return &NullableDfsTierRecord{value: val, isSet: true}
}

func (v NullableDfsTierRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsTierRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


