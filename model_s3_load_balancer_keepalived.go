/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the S3LoadBalancerKeepalived type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &S3LoadBalancerKeepalived{}

// S3LoadBalancerKeepalived S3LoadBalancerKeepalived is a load balancer keepalived +X:model:generate;
type S3LoadBalancerKeepalived struct {
	Cluster *ClusterNestview `json:"cluster,omitempty"`
	Create *time.Time `json:"create,omitempty"`
	Host *HostNestview `json:"host,omitempty"`
	Id *int64 `json:"id,omitempty"`
	InterfaceName *string `json:"interface_name,omitempty"`
	Ip *string `json:"ip,omitempty"`
	Rid *S3LoadBalancerKeepalivedRID `json:"rid,omitempty"`
	Role *string `json:"role,omitempty"`
	S3LoadBalancer *S3LoadBalancerNestview `json:"s3_load_balancer,omitempty"`
	Status *string `json:"status,omitempty"`
	Update *time.Time `json:"update,omitempty"`
	Vip *string `json:"vip,omitempty"`
	VipMask *int64 `json:"vip_mask,omitempty"`
}

// NewS3LoadBalancerKeepalived instantiates a new S3LoadBalancerKeepalived object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewS3LoadBalancerKeepalived() *S3LoadBalancerKeepalived {
	this := S3LoadBalancerKeepalived{}
	return &this
}

// NewS3LoadBalancerKeepalivedWithDefaults instantiates a new S3LoadBalancerKeepalived object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewS3LoadBalancerKeepalivedWithDefaults() *S3LoadBalancerKeepalived {
	this := S3LoadBalancerKeepalived{}
	return &this
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *S3LoadBalancerKeepalived) GetCluster() ClusterNestview {
	if o == nil || IsNil(o.Cluster) {
		var ret ClusterNestview
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3LoadBalancerKeepalived) GetClusterOk() (*ClusterNestview, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *S3LoadBalancerKeepalived) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given ClusterNestview and assigns it to the Cluster field.
func (o *S3LoadBalancerKeepalived) SetCluster(v ClusterNestview) {
	o.Cluster = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *S3LoadBalancerKeepalived) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3LoadBalancerKeepalived) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *S3LoadBalancerKeepalived) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *S3LoadBalancerKeepalived) SetCreate(v time.Time) {
	o.Create = &v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *S3LoadBalancerKeepalived) GetHost() HostNestview {
	if o == nil || IsNil(o.Host) {
		var ret HostNestview
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3LoadBalancerKeepalived) GetHostOk() (*HostNestview, bool) {
	if o == nil || IsNil(o.Host) {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *S3LoadBalancerKeepalived) HasHost() bool {
	if o != nil && !IsNil(o.Host) {
		return true
	}

	return false
}

// SetHost gets a reference to the given HostNestview and assigns it to the Host field.
func (o *S3LoadBalancerKeepalived) SetHost(v HostNestview) {
	o.Host = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *S3LoadBalancerKeepalived) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3LoadBalancerKeepalived) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *S3LoadBalancerKeepalived) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *S3LoadBalancerKeepalived) SetId(v int64) {
	o.Id = &v
}

// GetInterfaceName returns the InterfaceName field value if set, zero value otherwise.
func (o *S3LoadBalancerKeepalived) GetInterfaceName() string {
	if o == nil || IsNil(o.InterfaceName) {
		var ret string
		return ret
	}
	return *o.InterfaceName
}

// GetInterfaceNameOk returns a tuple with the InterfaceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3LoadBalancerKeepalived) GetInterfaceNameOk() (*string, bool) {
	if o == nil || IsNil(o.InterfaceName) {
		return nil, false
	}
	return o.InterfaceName, true
}

// HasInterfaceName returns a boolean if a field has been set.
func (o *S3LoadBalancerKeepalived) HasInterfaceName() bool {
	if o != nil && !IsNil(o.InterfaceName) {
		return true
	}

	return false
}

// SetInterfaceName gets a reference to the given string and assigns it to the InterfaceName field.
func (o *S3LoadBalancerKeepalived) SetInterfaceName(v string) {
	o.InterfaceName = &v
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *S3LoadBalancerKeepalived) GetIp() string {
	if o == nil || IsNil(o.Ip) {
		var ret string
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3LoadBalancerKeepalived) GetIpOk() (*string, bool) {
	if o == nil || IsNil(o.Ip) {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *S3LoadBalancerKeepalived) HasIp() bool {
	if o != nil && !IsNil(o.Ip) {
		return true
	}

	return false
}

// SetIp gets a reference to the given string and assigns it to the Ip field.
func (o *S3LoadBalancerKeepalived) SetIp(v string) {
	o.Ip = &v
}

// GetRid returns the Rid field value if set, zero value otherwise.
func (o *S3LoadBalancerKeepalived) GetRid() S3LoadBalancerKeepalivedRID {
	if o == nil || IsNil(o.Rid) {
		var ret S3LoadBalancerKeepalivedRID
		return ret
	}
	return *o.Rid
}

// GetRidOk returns a tuple with the Rid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3LoadBalancerKeepalived) GetRidOk() (*S3LoadBalancerKeepalivedRID, bool) {
	if o == nil || IsNil(o.Rid) {
		return nil, false
	}
	return o.Rid, true
}

// HasRid returns a boolean if a field has been set.
func (o *S3LoadBalancerKeepalived) HasRid() bool {
	if o != nil && !IsNil(o.Rid) {
		return true
	}

	return false
}

// SetRid gets a reference to the given S3LoadBalancerKeepalivedRID and assigns it to the Rid field.
func (o *S3LoadBalancerKeepalived) SetRid(v S3LoadBalancerKeepalivedRID) {
	o.Rid = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *S3LoadBalancerKeepalived) GetRole() string {
	if o == nil || IsNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3LoadBalancerKeepalived) GetRoleOk() (*string, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *S3LoadBalancerKeepalived) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *S3LoadBalancerKeepalived) SetRole(v string) {
	o.Role = &v
}

// GetS3LoadBalancer returns the S3LoadBalancer field value if set, zero value otherwise.
func (o *S3LoadBalancerKeepalived) GetS3LoadBalancer() S3LoadBalancerNestview {
	if o == nil || IsNil(o.S3LoadBalancer) {
		var ret S3LoadBalancerNestview
		return ret
	}
	return *o.S3LoadBalancer
}

// GetS3LoadBalancerOk returns a tuple with the S3LoadBalancer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3LoadBalancerKeepalived) GetS3LoadBalancerOk() (*S3LoadBalancerNestview, bool) {
	if o == nil || IsNil(o.S3LoadBalancer) {
		return nil, false
	}
	return o.S3LoadBalancer, true
}

// HasS3LoadBalancer returns a boolean if a field has been set.
func (o *S3LoadBalancerKeepalived) HasS3LoadBalancer() bool {
	if o != nil && !IsNil(o.S3LoadBalancer) {
		return true
	}

	return false
}

// SetS3LoadBalancer gets a reference to the given S3LoadBalancerNestview and assigns it to the S3LoadBalancer field.
func (o *S3LoadBalancerKeepalived) SetS3LoadBalancer(v S3LoadBalancerNestview) {
	o.S3LoadBalancer = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *S3LoadBalancerKeepalived) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3LoadBalancerKeepalived) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *S3LoadBalancerKeepalived) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *S3LoadBalancerKeepalived) SetStatus(v string) {
	o.Status = &v
}

// GetUpdate returns the Update field value if set, zero value otherwise.
func (o *S3LoadBalancerKeepalived) GetUpdate() time.Time {
	if o == nil || IsNil(o.Update) {
		var ret time.Time
		return ret
	}
	return *o.Update
}

// GetUpdateOk returns a tuple with the Update field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3LoadBalancerKeepalived) GetUpdateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Update) {
		return nil, false
	}
	return o.Update, true
}

// HasUpdate returns a boolean if a field has been set.
func (o *S3LoadBalancerKeepalived) HasUpdate() bool {
	if o != nil && !IsNil(o.Update) {
		return true
	}

	return false
}

// SetUpdate gets a reference to the given time.Time and assigns it to the Update field.
func (o *S3LoadBalancerKeepalived) SetUpdate(v time.Time) {
	o.Update = &v
}

// GetVip returns the Vip field value if set, zero value otherwise.
func (o *S3LoadBalancerKeepalived) GetVip() string {
	if o == nil || IsNil(o.Vip) {
		var ret string
		return ret
	}
	return *o.Vip
}

// GetVipOk returns a tuple with the Vip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3LoadBalancerKeepalived) GetVipOk() (*string, bool) {
	if o == nil || IsNil(o.Vip) {
		return nil, false
	}
	return o.Vip, true
}

// HasVip returns a boolean if a field has been set.
func (o *S3LoadBalancerKeepalived) HasVip() bool {
	if o != nil && !IsNil(o.Vip) {
		return true
	}

	return false
}

// SetVip gets a reference to the given string and assigns it to the Vip field.
func (o *S3LoadBalancerKeepalived) SetVip(v string) {
	o.Vip = &v
}

// GetVipMask returns the VipMask field value if set, zero value otherwise.
func (o *S3LoadBalancerKeepalived) GetVipMask() int64 {
	if o == nil || IsNil(o.VipMask) {
		var ret int64
		return ret
	}
	return *o.VipMask
}

// GetVipMaskOk returns a tuple with the VipMask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3LoadBalancerKeepalived) GetVipMaskOk() (*int64, bool) {
	if o == nil || IsNil(o.VipMask) {
		return nil, false
	}
	return o.VipMask, true
}

// HasVipMask returns a boolean if a field has been set.
func (o *S3LoadBalancerKeepalived) HasVipMask() bool {
	if o != nil && !IsNil(o.VipMask) {
		return true
	}

	return false
}

// SetVipMask gets a reference to the given int64 and assigns it to the VipMask field.
func (o *S3LoadBalancerKeepalived) SetVipMask(v int64) {
	o.VipMask = &v
}

func (o S3LoadBalancerKeepalived) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o S3LoadBalancerKeepalived) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.Host) {
		toSerialize["host"] = o.Host
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.InterfaceName) {
		toSerialize["interface_name"] = o.InterfaceName
	}
	if !IsNil(o.Ip) {
		toSerialize["ip"] = o.Ip
	}
	if !IsNil(o.Rid) {
		toSerialize["rid"] = o.Rid
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !IsNil(o.S3LoadBalancer) {
		toSerialize["s3_load_balancer"] = o.S3LoadBalancer
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Update) {
		toSerialize["update"] = o.Update
	}
	if !IsNil(o.Vip) {
		toSerialize["vip"] = o.Vip
	}
	if !IsNil(o.VipMask) {
		toSerialize["vip_mask"] = o.VipMask
	}
	return toSerialize, nil
}

type NullableS3LoadBalancerKeepalived struct {
	value *S3LoadBalancerKeepalived
	isSet bool
}

func (v NullableS3LoadBalancerKeepalived) Get() *S3LoadBalancerKeepalived {
	return v.value
}

func (v *NullableS3LoadBalancerKeepalived) Set(val *S3LoadBalancerKeepalived) {
	v.value = val
	v.isSet = true
}

func (v NullableS3LoadBalancerKeepalived) IsSet() bool {
	return v.isSet
}

func (v *NullableS3LoadBalancerKeepalived) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableS3LoadBalancerKeepalived(val *S3LoadBalancerKeepalived) *NullableS3LoadBalancerKeepalived {
	return &NullableS3LoadBalancerKeepalived{value: val, isSet: true}
}

func (v NullableS3LoadBalancerKeepalived) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableS3LoadBalancerKeepalived) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


