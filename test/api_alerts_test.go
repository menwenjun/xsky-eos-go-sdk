/*
XMS API

Testing AlertsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	openapiclient "github.com/menwenjun/xsky-eos-go-sdk"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_AlertsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AlertsAPIService CountAlerts", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AlertsAPI.CountAlerts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AlertsAPIService DeleteAlert", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var alertId int64

		httpRes, err := apiClient.AlertsAPI.DeleteAlert(context.Background(), alertId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AlertsAPIService DeleteAlerts", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.AlertsAPI.DeleteAlerts(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AlertsAPIService DoAlert", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var alertId int64

		resp, httpRes, err := apiClient.AlertsAPI.DoAlert(context.Background(), alertId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AlertsAPIService DoAlerts", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.AlertsAPI.DoAlerts(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AlertsAPIService GetAlert", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var alertId int64

		resp, httpRes, err := apiClient.AlertsAPI.GetAlert(context.Background(), alertId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AlertsAPIService ListAlerts", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AlertsAPI.ListAlerts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AlertsAPIService ResolveAlert", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var alertId int64

		resp, httpRes, err := apiClient.AlertsAPI.ResolveAlert(context.Background(), alertId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AlertsAPIService ResolveAlerts", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.AlertsAPI.ResolveAlerts(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
