/*
XMS API

Testing DnsDomainNamesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_DnsDomainNamesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DnsDomainNamesAPIService CreateDNSDomainName", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DnsDomainNamesAPI.CreateDNSDomainName(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DnsDomainNamesAPIService DeleteDNSDomainName", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameId int64

		httpRes, err := apiClient.DnsDomainNamesAPI.DeleteDNSDomainName(context.Background(), nameId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DnsDomainNamesAPIService GetDNSDomainName", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameId int64

		resp, httpRes, err := apiClient.DnsDomainNamesAPI.GetDNSDomainName(context.Background(), nameId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DnsDomainNamesAPIService ListDNSDomainNames", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DnsDomainNamesAPI.ListDNSDomainNames(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DnsDomainNamesAPIService UpdateDNSDomainName", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameId int64

		resp, httpRes, err := apiClient.DnsDomainNamesAPI.UpdateDNSDomainName(context.Background(), nameId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
