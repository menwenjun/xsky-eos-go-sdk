/*
XMS API

Testing TargetsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_TargetsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test TargetsAPIService AddTargetGatewayIPs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var targetId int64

		resp, httpRes, err := apiClient.TargetsAPI.AddTargetGatewayIPs(context.Background(), targetId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TargetsAPIService CreateTarget", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TargetsAPI.CreateTarget(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TargetsAPIService DeleteTarget", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var targetId int64

		resp, httpRes, err := apiClient.TargetsAPI.DeleteTarget(context.Background(), targetId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TargetsAPIService ListTargets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TargetsAPI.ListTargets(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
