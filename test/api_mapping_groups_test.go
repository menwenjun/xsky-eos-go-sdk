/*
XMS API

Testing MappingGroupsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	openapiclient "github.com/menwenjun/xsky-eos-go-sdk"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_MappingGroupsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test MappingGroupsAPIService AddVolumes", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var mappingGroupId int64

		resp, httpRes, err := apiClient.MappingGroupsAPI.AddVolumes(context.Background(), mappingGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MappingGroupsAPIService CreateMappingGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.MappingGroupsAPI.CreateMappingGroup(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MappingGroupsAPIService DeleteMappingGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var mappingGroupId int64

		resp, httpRes, err := apiClient.MappingGroupsAPI.DeleteMappingGroup(context.Background(), mappingGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MappingGroupsAPIService GetMappingGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var mappingGroupId int64

		resp, httpRes, err := apiClient.MappingGroupsAPI.GetMappingGroup(context.Background(), mappingGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MappingGroupsAPIService ListMappingGroups", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.MappingGroupsAPI.ListMappingGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MappingGroupsAPIService RemoveVolumes", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var mappingGroupId int64

		resp, httpRes, err := apiClient.MappingGroupsAPI.RemoveVolumes(context.Background(), mappingGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MappingGroupsAPIService UpdateMappingGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var mappingGroupId int64

		resp, httpRes, err := apiClient.MappingGroupsAPI.UpdateMappingGroup(context.Background(), mappingGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MappingGroupsAPIService UpdateMappingGroupClientGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var mappingGroupId int64

		resp, httpRes, err := apiClient.MappingGroupsAPI.UpdateMappingGroupClientGroup(context.Background(), mappingGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
