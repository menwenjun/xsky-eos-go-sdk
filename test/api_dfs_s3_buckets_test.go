/*
XMS API

Testing DfsS3BucketsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_DfsS3BucketsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DfsS3BucketsAPIService CreateDfsS3Bucket", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DfsS3BucketsAPI.CreateDfsS3Bucket(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsS3BucketsAPIService DeleteDfsS3Bucket", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bucketId int64

		resp, httpRes, err := apiClient.DfsS3BucketsAPI.DeleteDfsS3Bucket(context.Background(), bucketId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsS3BucketsAPIService DeleteDfsS3BucketPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bucketId int64

		resp, httpRes, err := apiClient.DfsS3BucketsAPI.DeleteDfsS3BucketPolicy(context.Background(), bucketId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsS3BucketsAPIService GetDfsS3Bucket", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bucketId int64

		resp, httpRes, err := apiClient.DfsS3BucketsAPI.GetDfsS3Bucket(context.Background(), bucketId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsS3BucketsAPIService GetDfsS3BucketSamples", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bucketId int64

		resp, httpRes, err := apiClient.DfsS3BucketsAPI.GetDfsS3BucketSamples(context.Background(), bucketId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsS3BucketsAPIService ListDfsS3Buckets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DfsS3BucketsAPI.ListDfsS3Buckets(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsS3BucketsAPIService SetDfsS3BucketPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bucketId int64

		resp, httpRes, err := apiClient.DfsS3BucketsAPI.SetDfsS3BucketPolicy(context.Background(), bucketId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsS3BucketsAPIService UpdateDfsS3Bucket", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bucketId int64

		resp, httpRes, err := apiClient.DfsS3BucketsAPI.UpdateDfsS3Bucket(context.Background(), bucketId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
