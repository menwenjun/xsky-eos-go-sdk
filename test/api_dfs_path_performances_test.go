/*
XMS API

Testing DfsPathPerformancesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_DfsPathPerformancesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DfsPathPerformancesAPIService CreateDfsPathPerformance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DfsPathPerformancesAPI.CreateDfsPathPerformance(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsPathPerformancesAPIService DeleteDfsPathPerformance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var dfsPathPerformanceId int64

		resp, httpRes, err := apiClient.DfsPathPerformancesAPI.DeleteDfsPathPerformance(context.Background(), dfsPathPerformanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsPathPerformancesAPIService GetDfsPathPerformance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var dfsPathPerformanceId int64

		resp, httpRes, err := apiClient.DfsPathPerformancesAPI.GetDfsPathPerformance(context.Background(), dfsPathPerformanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsPathPerformancesAPIService GetDfsPathPerformanceSamples", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var dfsPathPerformanceId int64

		resp, httpRes, err := apiClient.DfsPathPerformancesAPI.GetDfsPathPerformanceSamples(context.Background(), dfsPathPerformanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsPathPerformancesAPIService ListDfsPathPerformances", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DfsPathPerformancesAPI.ListDfsPathPerformances(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
