/*
XMS API

Testing AlertInfoGroupsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_AlertInfoGroupsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AlertInfoGroupsAPIService AckAlertInfoGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var alertInfoGroupId int64

		resp, httpRes, err := apiClient.AlertInfoGroupsAPI.AckAlertInfoGroup(context.Background(), alertInfoGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AlertInfoGroupsAPIService CountAlertInfoGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AlertInfoGroupsAPI.CountAlertInfoGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AlertInfoGroupsAPIService DeleteAlertInfoGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var alertInfoGroupId int64

		resp, httpRes, err := apiClient.AlertInfoGroupsAPI.DeleteAlertInfoGroup(context.Background(), alertInfoGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AlertInfoGroupsAPIService GetAlertInfoGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId int64

		resp, httpRes, err := apiClient.AlertInfoGroupsAPI.GetAlertInfoGroup(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AlertInfoGroupsAPIService GetAlertInfoGroupsReport", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AlertInfoGroupsAPI.GetAlertInfoGroupsReport(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AlertInfoGroupsAPIService ListAlertInfoGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AlertInfoGroupsAPI.ListAlertInfoGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AlertInfoGroupsAPIService ResolveAlertInfoGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var alertInfoGroupId int64

		resp, httpRes, err := apiClient.AlertInfoGroupsAPI.ResolveAlertInfoGroup(context.Background(), alertInfoGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
