/*
XMS API

Testing SslCertificatesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_SslCertificatesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SslCertificatesAPIService CreateSSLCertificate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SslCertificatesAPI.CreateSSLCertificate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SslCertificatesAPIService DeleteSSLCertificate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var certificateId int64

		resp, httpRes, err := apiClient.SslCertificatesAPI.DeleteSSLCertificate(context.Background(), certificateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SslCertificatesAPIService GetSSLCertificate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var certificateId int64

		resp, httpRes, err := apiClient.SslCertificatesAPI.GetSSLCertificate(context.Background(), certificateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SslCertificatesAPIService ListSSLCertificates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SslCertificatesAPI.ListSSLCertificates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SslCertificatesAPIService UpdateSSLCertificate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var certificateId int64

		resp, httpRes, err := apiClient.SslCertificatesAPI.UpdateSSLCertificate(context.Background(), certificateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
