/*
XMS API

Testing DfsFtpSharesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	openapiclient "github.com/menwenjun/xsky-eos-go-sdk"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_DfsFtpSharesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DfsFtpSharesAPIService AddDfsFTPShareACLs", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dfsFtpShareId int64

		resp, httpRes, err := apiClient.DfsFtpSharesAPI.AddDfsFTPShareACLs(context.Background(), dfsFtpShareId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsFtpSharesAPIService CreateDfsFTPShare", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DfsFtpSharesAPI.CreateDfsFTPShare(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsFtpSharesAPIService DeleteDfsFTPShare", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dfsFtpShareId int64

		resp, httpRes, err := apiClient.DfsFtpSharesAPI.DeleteDfsFTPShare(context.Background(), dfsFtpShareId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsFtpSharesAPIService GetDfsFTPShare", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dfsFtpShareId int64

		resp, httpRes, err := apiClient.DfsFtpSharesAPI.GetDfsFTPShare(context.Background(), dfsFtpShareId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsFtpSharesAPIService ListDfsFTPShares", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DfsFtpSharesAPI.ListDfsFTPShares(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsFtpSharesAPIService RemoveDfsFTPShareACLs", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dfsFtpShareId int64

		resp, httpRes, err := apiClient.DfsFtpSharesAPI.RemoveDfsFTPShareACLs(context.Background(), dfsFtpShareId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsFtpSharesAPIService UpdateDfsFTPShare", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dfsFtpShareId int64

		resp, httpRes, err := apiClient.DfsFtpSharesAPI.UpdateDfsFTPShare(context.Background(), dfsFtpShareId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsFtpSharesAPIService UpdateDfsFTPShareACLs", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dfsFtpShareId int64

		resp, httpRes, err := apiClient.DfsFtpSharesAPI.UpdateDfsFTPShareACLs(context.Background(), dfsFtpShareId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
