/*
XMS API

Testing ClustersAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_ClustersAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ClustersAPIService ClusterAddHosts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterId int64

		resp, httpRes, err := apiClient.ClustersAPI.ClusterAddHosts(context.Background(), clusterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClustersAPIService ClusterRemoveHosts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterId int64

		resp, httpRes, err := apiClient.ClustersAPI.ClusterRemoveHosts(context.Background(), clusterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClustersAPIService ClusterSkipAction", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterId int64

		resp, httpRes, err := apiClient.ClustersAPI.ClusterSkipAction(context.Background(), clusterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClustersAPIService CreateCluster", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ClustersAPI.CreateCluster(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClustersAPIService DeleteCluster", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterId int64

		resp, httpRes, err := apiClient.ClustersAPI.DeleteCluster(context.Background(), clusterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClustersAPIService GetOspClusterOverview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterId int64

		resp, httpRes, err := apiClient.ClustersAPI.GetOspClusterOverview(context.Background(), clusterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClustersAPIService ListClusters", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ClustersAPI.ListClusters(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClustersAPIService UpdateClusters", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterId int64

		resp, httpRes, err := apiClient.ClustersAPI.UpdateClusters(context.Background(), clusterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
