/*
XMS API

Testing BlockVolumesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_BlockVolumesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test BlockVolumesAPIService BatchGetBlockVolumeSamples", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockVolumesAPI.BatchGetBlockVolumeSamples(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockVolumesAPIService CreateBlockVolume", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockVolumesAPI.CreateBlockVolume(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockVolumesAPIService DeleteBlockVolume", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockVolumeId int64

		resp, httpRes, err := apiClient.BlockVolumesAPI.DeleteBlockVolume(context.Background(), blockVolumeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockVolumesAPIService GetBlockVolume", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockVolumeId int64

		resp, httpRes, err := apiClient.BlockVolumesAPI.GetBlockVolume(context.Background(), blockVolumeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockVolumesAPIService GetBlockVolumeSamples", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockVolumeId int64

		resp, httpRes, err := apiClient.BlockVolumesAPI.GetBlockVolumeSamples(context.Background(), blockVolumeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockVolumesAPIService ListBlockVolumes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockVolumesAPI.ListBlockVolumes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockVolumesAPIService MigrateBlockVolume", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockVolumeId int64

		resp, httpRes, err := apiClient.BlockVolumesAPI.MigrateBlockVolume(context.Background(), blockVolumeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockVolumesAPIService RebuildBlockVolumeReplication", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockVolumeId int64

		resp, httpRes, err := apiClient.BlockVolumesAPI.RebuildBlockVolumeReplication(context.Background(), blockVolumeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockVolumesAPIService SetAsyncReplicationProtection", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockVolumeId int64

		resp, httpRes, err := apiClient.BlockVolumesAPI.SetAsyncReplicationProtection(context.Background(), blockVolumeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockVolumesAPIService SetBackupProtection", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockVolumeId int64

		resp, httpRes, err := apiClient.BlockVolumesAPI.SetBackupProtection(context.Background(), blockVolumeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockVolumesAPIService SetBlockVolumeCrc", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockVolumeId int64

		resp, httpRes, err := apiClient.BlockVolumesAPI.SetBlockVolumeCrc(context.Background(), blockVolumeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockVolumesAPIService SetBlockVolumeReplication", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockVolumeId int64

		resp, httpRes, err := apiClient.BlockVolumesAPI.SetBlockVolumeReplication(context.Background(), blockVolumeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockVolumesAPIService SetSnapshotProtection", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockVolumeId int64

		resp, httpRes, err := apiClient.BlockVolumesAPI.SetSnapshotProtection(context.Background(), blockVolumeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockVolumesAPIService SuspendBlockVolumeReplication", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockVolumeId int64

		resp, httpRes, err := apiClient.BlockVolumesAPI.SuspendBlockVolumeReplication(context.Background(), blockVolumeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockVolumesAPIService UnsetAsyncReplicationProtection", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockVolumeId int64

		resp, httpRes, err := apiClient.BlockVolumesAPI.UnsetAsyncReplicationProtection(context.Background(), blockVolumeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockVolumesAPIService UnsetBackupProtection", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockVolumeId int64

		resp, httpRes, err := apiClient.BlockVolumesAPI.UnsetBackupProtection(context.Background(), blockVolumeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockVolumesAPIService UnsetBlockVolumeCrc", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockVolumeId int64

		resp, httpRes, err := apiClient.BlockVolumesAPI.UnsetBlockVolumeCrc(context.Background(), blockVolumeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockVolumesAPIService UnsetBlockVolumeReplication", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockVolumeId int64

		resp, httpRes, err := apiClient.BlockVolumesAPI.UnsetBlockVolumeReplication(context.Background(), blockVolumeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockVolumesAPIService UnsetSnapshotProtection", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockVolumeId int64

		resp, httpRes, err := apiClient.BlockVolumesAPI.UnsetSnapshotProtection(context.Background(), blockVolumeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockVolumesAPIService UpdateBlockVolume", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockVolumeId int64

		resp, httpRes, err := apiClient.BlockVolumesAPI.UpdateBlockVolume(context.Background(), blockVolumeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockVolumesAPIService UpdateBlockVolumeVolumeName", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockVolumeId int64

		resp, httpRes, err := apiClient.BlockVolumesAPI.UpdateBlockVolumeVolumeName(context.Background(), blockVolumeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockVolumesAPIService UpdateVolumeStat", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.BlockVolumesAPI.UpdateVolumeStat(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockVolumesAPIService UpdateVolumeStats", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.BlockVolumesAPI.UpdateVolumeStats(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
