/*
XMS API

Testing VipGroupsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	openapiclient "github.com/menwenjun/xsky-eos-go-sdk"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_VipGroupsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test VipGroupsAPIService CreateVIPGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.VipGroupsAPI.CreateVIPGroup(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VipGroupsAPIService DeleteVIPGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vipGroupId int64

		resp, httpRes, err := apiClient.VipGroupsAPI.DeleteVIPGroup(context.Background(), vipGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VipGroupsAPIService GetVIPGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vipGroupId int64

		resp, httpRes, err := apiClient.VipGroupsAPI.GetVIPGroup(context.Background(), vipGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VipGroupsAPIService ListVIPGroups", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.VipGroupsAPI.ListVIPGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VipGroupsAPIService RedeployVIPGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vipGroupId int64

		resp, httpRes, err := apiClient.VipGroupsAPI.RedeployVIPGroup(context.Background(), vipGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VipGroupsAPIService UpdateVIPGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vipGroupId int64

		resp, httpRes, err := apiClient.VipGroupsAPI.UpdateVIPGroup(context.Background(), vipGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
