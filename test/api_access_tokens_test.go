/*
XMS API

Testing AccessTokensAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	openapiclient "github.com/menwenjun/xsky-eos-go-sdk"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_AccessTokensAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AccessTokensAPIService CreateAccessToken", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AccessTokensAPI.CreateAccessToken(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccessTokensAPIService DeleteAccessToken", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var accessTokenId int64

		httpRes, err := apiClient.AccessTokensAPI.DeleteAccessToken(context.Background(), accessTokenId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccessTokensAPIService GetAccessToken", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var accessTokenId int64

		resp, httpRes, err := apiClient.AccessTokensAPI.GetAccessToken(context.Background(), accessTokenId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccessTokensAPIService GetAccessTokenByUUID", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var uuid string

		resp, httpRes, err := apiClient.AccessTokensAPI.GetAccessTokenByUUID(context.Background(), uuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccessTokensAPIService ListAccessTokens", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AccessTokensAPI.ListAccessTokens(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccessTokensAPIService RegenerateAccessToken", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var accessTokenId int64

		resp, httpRes, err := apiClient.AccessTokensAPI.RegenerateAccessToken(context.Background(), accessTokenId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccessTokensAPIService UpdateAccessToken", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var accessTokenId int64

		resp, httpRes, err := apiClient.AccessTokensAPI.UpdateAccessToken(context.Background(), accessTokenId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccessTokensAPIService ValidateAccessToken", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AccessTokensAPI.ValidateAccessToken(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
