/*
XMS API

Testing HostsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_HostsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test HostsAPIService CreateHost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HostsAPI.CreateHost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HostsAPIService DeleteHost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hostId int64

		resp, httpRes, err := apiClient.HostsAPI.DeleteHost(context.Background(), hostId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HostsAPIService DeleteHostsGatewayLbGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.HostsAPI.DeleteHostsGatewayLbGroup(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HostsAPIService GetHost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hostId int64

		resp, httpRes, err := apiClient.HostsAPI.GetHost(context.Background(), hostId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HostsAPIService GetHostSamples", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hostId int64

		resp, httpRes, err := apiClient.HostsAPI.GetHostSamples(context.Background(), hostId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HostsAPIService HostDeletable", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hostId int64

		resp, httpRes, err := apiClient.HostsAPI.HostDeletable(context.Background(), hostId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HostsAPIService ListHosts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HostsAPI.ListHosts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HostsAPIService MaintainHost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hostId int64

		resp, httpRes, err := apiClient.HostsAPI.MaintainHost(context.Background(), hostId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HostsAPIService RemoveHostsFormOspZone", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.HostsAPI.RemoveHostsFormOspZone(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HostsAPIService SetHostsToOspZone", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.HostsAPI.SetHostsToOspZone(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HostsAPIService UnmaintainHost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hostId int64

		resp, httpRes, err := apiClient.HostsAPI.UnmaintainHost(context.Background(), hostId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HostsAPIService UpdateHost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hostId int64

		resp, httpRes, err := apiClient.HostsAPI.UpdateHost(context.Background(), hostId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
