/*
XMS API

Testing OsdsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	openapiclient "github.com/menwenjun/xsky-eos-go-sdk"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_OsdsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test OsdsAPIService ActivateOsd", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var osdId int64

		resp, httpRes, err := apiClient.OsdsAPI.ActivateOsd(context.Background(), osdId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OsdsAPIService CreateOsd", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.OsdsAPI.CreateOsd(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OsdsAPIService DeleteOsd", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var osdId int64

		resp, httpRes, err := apiClient.OsdsAPI.DeleteOsd(context.Background(), osdId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OsdsAPIService GetOsd", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var osdId int64

		resp, httpRes, err := apiClient.OsdsAPI.GetOsd(context.Background(), osdId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OsdsAPIService GetOsdPredictions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var osdId int64

		resp, httpRes, err := apiClient.OsdsAPI.GetOsdPredictions(context.Background(), osdId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OsdsAPIService GetOsdSamples", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var osdId int64

		resp, httpRes, err := apiClient.OsdsAPI.GetOsdSamples(context.Background(), osdId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OsdsAPIService GetOsdsOverview", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.OsdsAPI.GetOsdsOverview(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OsdsAPIService ListOsds", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.OsdsAPI.ListOsds(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OsdsAPIService MaintainOsd", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var osdId int64

		resp, httpRes, err := apiClient.OsdsAPI.MaintainOsd(context.Background(), osdId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OsdsAPIService RebuildOsd", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var osdId int64

		resp, httpRes, err := apiClient.OsdsAPI.RebuildOsd(context.Background(), osdId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OsdsAPIService SwitchOsdRole", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var osdId int64

		resp, httpRes, err := apiClient.OsdsAPI.SwitchOsdRole(context.Background(), osdId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OsdsAPIService UnmaintainOsd", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var osdId int64

		resp, httpRes, err := apiClient.OsdsAPI.UnmaintainOsd(context.Background(), osdId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OsdsAPIService UnsetOsdIsolation", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var osdId int64

		resp, httpRes, err := apiClient.OsdsAPI.UnsetOsdIsolation(context.Background(), osdId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OsdsAPIService UpdateOsdNumaNode", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var osdId int64

		resp, httpRes, err := apiClient.OsdsAPI.UpdateOsdNumaNode(context.Background(), osdId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
