/*
XMS API

Testing S3LoadBalancerGroupsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_S3LoadBalancerGroupsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test S3LoadBalancerGroupsAPIService AddS3LoadBalancersToGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId int64

		resp, httpRes, err := apiClient.S3LoadBalancerGroupsAPI.AddS3LoadBalancersToGroup(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test S3LoadBalancerGroupsAPIService CreateS3LoadBalancerGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.S3LoadBalancerGroupsAPI.CreateS3LoadBalancerGroup(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test S3LoadBalancerGroupsAPIService DeleteS3LoadBalancerGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId int64

		resp, httpRes, err := apiClient.S3LoadBalancerGroupsAPI.DeleteS3LoadBalancerGroup(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test S3LoadBalancerGroupsAPIService GetS3LoadBalancerGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId int64

		resp, httpRes, err := apiClient.S3LoadBalancerGroupsAPI.GetS3LoadBalancerGroup(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test S3LoadBalancerGroupsAPIService ListS3LoadBalancerGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.S3LoadBalancerGroupsAPI.ListS3LoadBalancerGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test S3LoadBalancerGroupsAPIService RedeployS3LoadBalancerGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId int64

		resp, httpRes, err := apiClient.S3LoadBalancerGroupsAPI.RedeployS3LoadBalancerGroup(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test S3LoadBalancerGroupsAPIService RegisterS3LoadBalancerService", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.S3LoadBalancerGroupsAPI.RegisterS3LoadBalancerService(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test S3LoadBalancerGroupsAPIService RemoveS3LoadBalancerService", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.S3LoadBalancerGroupsAPI.RemoveS3LoadBalancerService(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test S3LoadBalancerGroupsAPIService RemoveS3LoadBalancersFromGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId int64

		resp, httpRes, err := apiClient.S3LoadBalancerGroupsAPI.RemoveS3LoadBalancersFromGroup(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test S3LoadBalancerGroupsAPIService UpdateS3LoadBalancerGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId int64

		resp, httpRes, err := apiClient.S3LoadBalancerGroupsAPI.UpdateS3LoadBalancerGroup(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
