/*
XMS API

Testing PoolsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	openapiclient "github.com/menwenjun/xsky-eos-go-sdk"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_PoolsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PoolsAPIService AddOsdsToPool", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var poolId int64

		resp, httpRes, err := apiClient.PoolsAPI.AddOsdsToPool(context.Background(), poolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoolsAPIService AddPoolToOutsideBackend", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PoolsAPI.AddPoolToOutsideBackend(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoolsAPIService AddPoolsToOspDataBackend", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PoolsAPI.AddPoolsToOspDataBackend(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoolsAPIService CalcCapacity", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PoolsAPI.CalcCapacity(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoolsAPIService CheckFull", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PoolsAPI.CheckFull(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoolsAPIService CreatePool", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PoolsAPI.CreatePool(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoolsAPIService DeletePool", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var poolId int64

		resp, httpRes, err := apiClient.PoolsAPI.DeletePool(context.Background(), poolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoolsAPIService DisablePoolDeviceTypeCheck", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var poolId int64

		resp, httpRes, err := apiClient.PoolsAPI.DisablePoolDeviceTypeCheck(context.Background(), poolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoolsAPIService DisablePoolNuma", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var poolId int64

		resp, httpRes, err := apiClient.PoolsAPI.DisablePoolNuma(context.Background(), poolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoolsAPIService EnablePoolDeviceTypeCheck", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var poolId int64

		resp, httpRes, err := apiClient.PoolsAPI.EnablePoolDeviceTypeCheck(context.Background(), poolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoolsAPIService EnablePoolNuma", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var poolId int64

		resp, httpRes, err := apiClient.PoolsAPI.EnablePoolNuma(context.Background(), poolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoolsAPIService GetPool", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var poolId int64

		resp, httpRes, err := apiClient.PoolsAPI.GetPool(context.Background(), poolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoolsAPIService GetPoolPredictions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var poolId int64

		resp, httpRes, err := apiClient.PoolsAPI.GetPoolPredictions(context.Background(), poolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoolsAPIService GetPoolSamples", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var poolId int64

		resp, httpRes, err := apiClient.PoolsAPI.GetPoolSamples(context.Background(), poolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoolsAPIService GetPoolTopology", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var poolId int64

		resp, httpRes, err := apiClient.PoolsAPI.GetPoolTopology(context.Background(), poolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoolsAPIService InitializeEmptyPool", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var poolId int64

		resp, httpRes, err := apiClient.PoolsAPI.InitializeEmptyPool(context.Background(), poolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoolsAPIService ListPools", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PoolsAPI.ListPools(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoolsAPIService RemoveFromOutsideBackend", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PoolsAPI.RemoveFromOutsideBackend(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoolsAPIService RemoveOsdsFromPool", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var poolId int64

		resp, httpRes, err := apiClient.PoolsAPI.RemoveOsdsFromPool(context.Background(), poolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoolsAPIService RemovePoolsFromOspDataBackend", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PoolsAPI.RemovePoolsFromOspDataBackend(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoolsAPIService ReweightPool", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var poolId int64

		resp, httpRes, err := apiClient.PoolsAPI.ReweightPool(context.Background(), poolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoolsAPIService SwitchPoolRole", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var poolId int64

		resp, httpRes, err := apiClient.PoolsAPI.SwitchPoolRole(context.Background(), poolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoolsAPIService UpdateECPoolCrushRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var poolId int64

		resp, httpRes, err := apiClient.PoolsAPI.UpdateECPoolCrushRule(context.Background(), poolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoolsAPIService UpdatePool", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var poolId int64

		resp, httpRes, err := apiClient.PoolsAPI.UpdatePool(context.Background(), poolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoolsAPIService UpdatePoolGCPolicyPlan", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var poolId int64

		httpRes, err := apiClient.PoolsAPI.UpdatePoolGCPolicyPlan(context.Background(), poolId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
