/*
XMS API

Testing DfsTrashesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	openapiclient "github.com/menwenjun/xsky-eos-go-sdk"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_DfsTrashesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DfsTrashesAPIService CloseDfsTrash", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dfsTrashId int64

		resp, httpRes, err := apiClient.DfsTrashesAPI.CloseDfsTrash(context.Background(), dfsTrashId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsTrashesAPIService EmptyDfsTrash", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dfsTrashId int64

		resp, httpRes, err := apiClient.DfsTrashesAPI.EmptyDfsTrash(context.Background(), dfsTrashId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsTrashesAPIService GetDfsTrash", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dfsTrashId int64

		resp, httpRes, err := apiClient.DfsTrashesAPI.GetDfsTrash(context.Background(), dfsTrashId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsTrashesAPIService ListDfsTrashFileJobs", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DfsTrashesAPI.ListDfsTrashFileJobs(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsTrashesAPIService ListDfsTrashFiles", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dfsTrashId int64

		resp, httpRes, err := apiClient.DfsTrashesAPI.ListDfsTrashFiles(context.Background(), dfsTrashId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsTrashesAPIService ListDfsTrashes", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DfsTrashesAPI.ListDfsTrashes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsTrashesAPIService OpenDfsTrash", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DfsTrashesAPI.OpenDfsTrash(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsTrashesAPIService RemoveDfsTrashFile", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dfsTrashId int64

		resp, httpRes, err := apiClient.DfsTrashesAPI.RemoveDfsTrashFile(context.Background(), dfsTrashId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsTrashesAPIService RestoreDfsTrashFile", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dfsTrashId int64

		resp, httpRes, err := apiClient.DfsTrashesAPI.RestoreDfsTrashFile(context.Background(), dfsTrashId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsTrashesAPIService SearchDfsTrashFiles", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dfsTrashId int64

		resp, httpRes, err := apiClient.DfsTrashesAPI.SearchDfsTrashFiles(context.Background(), dfsTrashId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsTrashesAPIService UpdateDfsTrash", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dfsTrashId int64

		resp, httpRes, err := apiClient.DfsTrashesAPI.UpdateDfsTrash(context.Background(), dfsTrashId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
