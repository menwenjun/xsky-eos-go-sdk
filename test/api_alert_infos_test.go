/*
XMS API

Testing AlertInfosAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_AlertInfosAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AlertInfosAPIService AckAlertInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var alertInfoId int64

		httpRes, err := apiClient.AlertInfosAPI.AckAlertInfo(context.Background(), alertInfoId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AlertInfosAPIService CountAlertInfos", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AlertInfosAPI.CountAlertInfos(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AlertInfosAPIService CountBatchDeleteAlertInfos", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AlertInfosAPI.CountBatchDeleteAlertInfos(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AlertInfosAPIService DeleteAlertInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var alertInfoId int64

		resp, httpRes, err := apiClient.AlertInfosAPI.DeleteAlertInfo(context.Background(), alertInfoId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AlertInfosAPIService DeleteAlertInfos", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AlertInfosAPI.DeleteAlertInfos(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AlertInfosAPIService GetAlertInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var alertInfoId int64

		resp, httpRes, err := apiClient.AlertInfosAPI.GetAlertInfo(context.Background(), alertInfoId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AlertInfosAPIService GetAlertInfosReport", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AlertInfosAPI.GetAlertInfosReport(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AlertInfosAPIService ListAlertInfos", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AlertInfosAPI.ListAlertInfos(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AlertInfosAPIService ResolveAlertInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var alertInfoId int64

		httpRes, err := apiClient.AlertInfosAPI.ResolveAlertInfo(context.Background(), alertInfoId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
