/*
XMS API

Testing OsSearchEnginesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_OsSearchEnginesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test OsSearchEnginesAPIService AddOSSearchGateways", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var osSearchEngineId int64

		resp, httpRes, err := apiClient.OsSearchEnginesAPI.AddOSSearchGateways(context.Background(), osSearchEngineId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OsSearchEnginesAPIService ChangeOSSearchEngine", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var osSearchEngineId int64

		resp, httpRes, err := apiClient.OsSearchEnginesAPI.ChangeOSSearchEngine(context.Background(), osSearchEngineId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OsSearchEnginesAPIService CreateOSSearchEngine", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OsSearchEnginesAPI.CreateOSSearchEngine(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OsSearchEnginesAPIService DeleteOSSearchEngine", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var osSearchEngineId int64

		resp, httpRes, err := apiClient.OsSearchEnginesAPI.DeleteOSSearchEngine(context.Background(), osSearchEngineId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OsSearchEnginesAPIService GetOSSearchEngine", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var osSearchEngineId int64

		resp, httpRes, err := apiClient.OsSearchEnginesAPI.GetOSSearchEngine(context.Background(), osSearchEngineId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OsSearchEnginesAPIService GetOSSearchEngineSamples", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var osSearchEngineId int64

		resp, httpRes, err := apiClient.OsSearchEnginesAPI.GetOSSearchEngineSamples(context.Background(), osSearchEngineId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OsSearchEnginesAPIService ListOSSearchEngines", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OsSearchEnginesAPI.ListOSSearchEngines(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OsSearchEnginesAPIService RemoveOSSearchGateways", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var osSearchEngineId int64

		resp, httpRes, err := apiClient.OsSearchEnginesAPI.RemoveOSSearchGateways(context.Background(), osSearchEngineId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OsSearchEnginesAPIService StartOSSearchEngine", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var osSearchEngineId int64

		resp, httpRes, err := apiClient.OsSearchEnginesAPI.StartOSSearchEngine(context.Background(), osSearchEngineId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OsSearchEnginesAPIService StopOSSearchEngine", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var osSearchEngineId int64

		resp, httpRes, err := apiClient.OsSearchEnginesAPI.StopOSSearchEngine(context.Background(), osSearchEngineId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
