/*
XMS API

Testing MetadataClustersAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	openapiclient "github.com/menwenjun/xsky-eos-go-sdk"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_MetadataClustersAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test MetadataClustersAPIService AddMetadataServicesToCluster", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var metadataClusterId int64

		resp, httpRes, err := apiClient.MetadataClustersAPI.AddMetadataServicesToCluster(context.Background(), metadataClusterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MetadataClustersAPIService CreateMetadataCluster", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.MetadataClustersAPI.CreateMetadataCluster(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MetadataClustersAPIService DeleteMetadataCluster", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var metadataClusterId int64

		resp, httpRes, err := apiClient.MetadataClustersAPI.DeleteMetadataCluster(context.Background(), metadataClusterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MetadataClustersAPIService GetMetadataCluster", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var metadataClusterId int64

		resp, httpRes, err := apiClient.MetadataClustersAPI.GetMetadataCluster(context.Background(), metadataClusterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MetadataClustersAPIService GetMetadataClusterPredictions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var metadataClusterId int64

		resp, httpRes, err := apiClient.MetadataClustersAPI.GetMetadataClusterPredictions(context.Background(), metadataClusterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MetadataClustersAPIService GetMetadataClusterSamples", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var metadataClusterId int64

		resp, httpRes, err := apiClient.MetadataClustersAPI.GetMetadataClusterSamples(context.Background(), metadataClusterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MetadataClustersAPIService ListMetadataClusters", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.MetadataClustersAPI.ListMetadataClusters(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MetadataClustersAPIService RemoveMetadataServicesFromCluster", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var metadataClusterId int64

		resp, httpRes, err := apiClient.MetadataClustersAPI.RemoveMetadataServicesFromCluster(context.Background(), metadataClusterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MetadataClustersAPIService SetMetadataClusterToStretched", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var metadataClusterId int64

		resp, httpRes, err := apiClient.MetadataClustersAPI.SetMetadataClusterToStretched(context.Background(), metadataClusterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MetadataClustersAPIService SetMetadataClusterTransLocator", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var metadataClusterId int64

		resp, httpRes, err := apiClient.MetadataClustersAPI.SetMetadataClusterTransLocator(context.Background(), metadataClusterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MetadataClustersAPIService UpdateMetadataCluster", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var metadataClusterId int64

		resp, httpRes, err := apiClient.MetadataClustersAPI.UpdateMetadataCluster(context.Background(), metadataClusterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MetadataClustersAPIService UpdatePrimaryDc", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var metadataClusterId int64

		resp, httpRes, err := apiClient.MetadataClustersAPI.UpdatePrimaryDc(context.Background(), metadataClusterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
