/*
XMS API

Testing DfsRootfsesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	openapiclient "github.com/menwenjun/xsky-eos-go-sdk"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_DfsRootfsesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DfsRootfsesAPIService CreateDfsRootfs", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DfsRootfsesAPI.CreateDfsRootfs(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsRootfsesAPIService DeleteDfsRootfs", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dfsRootfsId int64

		resp, httpRes, err := apiClient.DfsRootfsesAPI.DeleteDfsRootfs(context.Background(), dfsRootfsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsRootfsesAPIService GetDfsRootfs", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dfsRootfsId int64

		resp, httpRes, err := apiClient.DfsRootfsesAPI.GetDfsRootfs(context.Background(), dfsRootfsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsRootfsesAPIService GetDfsRootfsSamples", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dfsRootfsId int64

		resp, httpRes, err := apiClient.DfsRootfsesAPI.GetDfsRootfsSamples(context.Background(), dfsRootfsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsRootfsesAPIService ListDfsRootfses", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DfsRootfsesAPI.ListDfsRootfses(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsRootfsesAPIService SetDfsWormLogPath", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dfsRootfsId int64

		resp, httpRes, err := apiClient.DfsRootfsesAPI.SetDfsWormLogPath(context.Background(), dfsRootfsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsRootfsesAPIService SetGCSpeed", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dfsRootfsId int64

		resp, httpRes, err := apiClient.DfsRootfsesAPI.SetGCSpeed(context.Background(), dfsRootfsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsRootfsesAPIService UpdateDfsRootfsActivePool", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dfsRootfsId int64

		resp, httpRes, err := apiClient.DfsRootfsesAPI.UpdateDfsRootfsActivePool(context.Background(), dfsRootfsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
