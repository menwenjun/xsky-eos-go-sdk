/*
XMS API

Testing DpBlockAsyncReplicationPairsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_DpBlockAsyncReplicationPairsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DpBlockAsyncReplicationPairsAPIService AsyncFailoverDpBlockAsyncReplicationPair", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pairId int64

		resp, httpRes, err := apiClient.DpBlockAsyncReplicationPairsAPI.AsyncFailoverDpBlockAsyncReplicationPair(context.Background(), pairId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DpBlockAsyncReplicationPairsAPIService CreateDpBlockAsyncReplicationPair", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DpBlockAsyncReplicationPairsAPI.CreateDpBlockAsyncReplicationPair(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DpBlockAsyncReplicationPairsAPIService DeleteDpBlockAsyncReplicationPair", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pairId int64

		resp, httpRes, err := apiClient.DpBlockAsyncReplicationPairsAPI.DeleteDpBlockAsyncReplicationPair(context.Background(), pairId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DpBlockAsyncReplicationPairsAPIService FailbackDpBlockAsyncReplicationPair", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pairId int64

		resp, httpRes, err := apiClient.DpBlockAsyncReplicationPairsAPI.FailbackDpBlockAsyncReplicationPair(context.Background(), pairId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DpBlockAsyncReplicationPairsAPIService GetDpBlockAsyncReplicationPair", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pairId int64

		resp, httpRes, err := apiClient.DpBlockAsyncReplicationPairsAPI.GetDpBlockAsyncReplicationPair(context.Background(), pairId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DpBlockAsyncReplicationPairsAPIService ListDpBlockAsyncReplicationPair", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DpBlockAsyncReplicationPairsAPI.ListDpBlockAsyncReplicationPair(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DpBlockAsyncReplicationPairsAPIService PauseDpBlockAsyncReplicationPair", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pairId int64

		resp, httpRes, err := apiClient.DpBlockAsyncReplicationPairsAPI.PauseDpBlockAsyncReplicationPair(context.Background(), pairId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DpBlockAsyncReplicationPairsAPIService ResumeDpBlockAsyncReplicationPair", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pairId int64

		resp, httpRes, err := apiClient.DpBlockAsyncReplicationPairsAPI.ResumeDpBlockAsyncReplicationPair(context.Background(), pairId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DpBlockAsyncReplicationPairsAPIService RollbackDpBlockAsyncReplicationPair", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pairId int64

		resp, httpRes, err := apiClient.DpBlockAsyncReplicationPairsAPI.RollbackDpBlockAsyncReplicationPair(context.Background(), pairId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DpBlockAsyncReplicationPairsAPIService SyncDpBlockAsyncReplicationPair", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pairId int64

		resp, httpRes, err := apiClient.DpBlockAsyncReplicationPairsAPI.SyncDpBlockAsyncReplicationPair(context.Background(), pairId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DpBlockAsyncReplicationPairsAPIService SyncFailoverDpBlockAsyncReplicationPair", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pairId int64

		resp, httpRes, err := apiClient.DpBlockAsyncReplicationPairsAPI.SyncFailoverDpBlockAsyncReplicationPair(context.Background(), pairId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DpBlockAsyncReplicationPairsAPIService UpdateDpBlockAsyncReplicationPair", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pairId int64

		resp, httpRes, err := apiClient.DpBlockAsyncReplicationPairsAPI.UpdateDpBlockAsyncReplicationPair(context.Background(), pairId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
