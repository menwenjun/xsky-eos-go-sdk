/*
XMS API

Testing DfsNfsSharesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_DfsNfsSharesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DfsNfsSharesAPIService AddDfsNFSShareACLs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var dfsNfsShareId int64

		resp, httpRes, err := apiClient.DfsNfsSharesAPI.AddDfsNFSShareACLs(context.Background(), dfsNfsShareId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsNfsSharesAPIService CreateDfsNFSShare", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DfsNfsSharesAPI.CreateDfsNFSShare(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsNfsSharesAPIService DeleteDfsNFSShare", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var dfsNfsShareId int64

		resp, httpRes, err := apiClient.DfsNfsSharesAPI.DeleteDfsNFSShare(context.Background(), dfsNfsShareId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsNfsSharesAPIService GetDfsNFSShare", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var dfsNfsShareId int64

		resp, httpRes, err := apiClient.DfsNfsSharesAPI.GetDfsNFSShare(context.Background(), dfsNfsShareId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsNfsSharesAPIService ListDfsNFSShares", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DfsNfsSharesAPI.ListDfsNFSShares(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsNfsSharesAPIService RemoveDfsNFSShareACLs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var dfsNfsShareId int64

		resp, httpRes, err := apiClient.DfsNfsSharesAPI.RemoveDfsNFSShareACLs(context.Background(), dfsNfsShareId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsNfsSharesAPIService SetDfsNFSShareACLs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var dfsNfsShareId int64

		resp, httpRes, err := apiClient.DfsNfsSharesAPI.SetDfsNFSShareACLs(context.Background(), dfsNfsShareId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsNfsSharesAPIService UpdateDfsNFSShare", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var dfsNfsShareId int64

		resp, httpRes, err := apiClient.DfsNfsSharesAPI.UpdateDfsNFSShare(context.Background(), dfsNfsShareId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsNfsSharesAPIService UpdateDfsNFSShareACLs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var dfsNfsShareId int64

		resp, httpRes, err := apiClient.DfsNfsSharesAPI.UpdateDfsNFSShareACLs(context.Background(), dfsNfsShareId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
