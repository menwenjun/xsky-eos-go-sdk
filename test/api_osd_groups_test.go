/*
XMS API

Testing OsdGroupsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_OsdGroupsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test OsdGroupsAPIService AddOsdsToOsdGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId int64

		resp, httpRes, err := apiClient.OsdGroupsAPI.AddOsdsToOsdGroup(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OsdGroupsAPIService DisableDeviceTypeCheck", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId int64

		resp, httpRes, err := apiClient.OsdGroupsAPI.DisableDeviceTypeCheck(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OsdGroupsAPIService EnableDeviceTypeCheck", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId int64

		resp, httpRes, err := apiClient.OsdGroupsAPI.EnableDeviceTypeCheck(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OsdGroupsAPIService GetOsdGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId int64

		resp, httpRes, err := apiClient.OsdGroupsAPI.GetOsdGroup(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OsdGroupsAPIService GetOsdGroupSamples", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId int64

		resp, httpRes, err := apiClient.OsdGroupsAPI.GetOsdGroupSamples(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OsdGroupsAPIService ListOsdGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OsdGroupsAPI.ListOsdGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OsdGroupsAPIService RemoveOsdsFromOsdGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId int64

		resp, httpRes, err := apiClient.OsdGroupsAPI.RemoveOsdsFromOsdGroup(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OsdGroupsAPIService ReweightOsdGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId int64

		resp, httpRes, err := apiClient.OsdGroupsAPI.ReweightOsdGroup(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OsdGroupsAPIService SetOsdFullRatio", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId int64

		resp, httpRes, err := apiClient.OsdGroupsAPI.SetOsdFullRatio(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OsdGroupsAPIService SetOsdGroupQos", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId int64

		resp, httpRes, err := apiClient.OsdGroupsAPI.SetOsdGroupQos(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
