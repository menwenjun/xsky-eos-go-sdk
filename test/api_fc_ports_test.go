/*
XMS API

Testing FcPortsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	openapiclient "github.com/menwenjun/xsky-eos-go-sdk"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_FcPortsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test FcPortsAPIService ClearFCPortErrCode", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fcPortId int64

		resp, httpRes, err := apiClient.FcPortsAPI.ClearFCPortErrCode(context.Background(), fcPortId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FcPortsAPIService GetFCPort", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fcPortId int64

		resp, httpRes, err := apiClient.FcPortsAPI.GetFCPort(context.Background(), fcPortId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FcPortsAPIService ListFCPorts", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.FcPortsAPI.ListFCPorts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FcPortsAPIService ResetFCPort", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fcPortId int64

		resp, httpRes, err := apiClient.FcPortsAPI.ResetFCPort(context.Background(), fcPortId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FcPortsAPIService SetFCPort", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fcPortId int64

		resp, httpRes, err := apiClient.FcPortsAPI.SetFCPort(context.Background(), fcPortId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
