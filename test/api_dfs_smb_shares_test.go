/*
XMS API

Testing DfsSmbSharesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	openapiclient "github.com/menwenjun/xsky-eos-go-sdk"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_DfsSmbSharesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DfsSmbSharesAPIService AddDfsSMBShareACLs", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dfsSmbShareId int64

		resp, httpRes, err := apiClient.DfsSmbSharesAPI.AddDfsSMBShareACLs(context.Background(), dfsSmbShareId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsSmbSharesAPIService CreateDfsSMBShare", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DfsSmbSharesAPI.CreateDfsSMBShare(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsSmbSharesAPIService DeleteDfsSMBShare", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dfsSmbShareId int64

		resp, httpRes, err := apiClient.DfsSmbSharesAPI.DeleteDfsSMBShare(context.Background(), dfsSmbShareId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsSmbSharesAPIService GetDfsSMBShare", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dfsSmbShareId int64

		resp, httpRes, err := apiClient.DfsSmbSharesAPI.GetDfsSMBShare(context.Background(), dfsSmbShareId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsSmbSharesAPIService ListDfsSMBShares", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DfsSmbSharesAPI.ListDfsSMBShares(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsSmbSharesAPIService RemoveDfsSMBShareACLs", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dfsSmbShareId int64

		resp, httpRes, err := apiClient.DfsSmbSharesAPI.RemoveDfsSMBShareACLs(context.Background(), dfsSmbShareId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsSmbSharesAPIService UpdateDfsSMBShare", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dfsSmbShareId int64

		resp, httpRes, err := apiClient.DfsSmbSharesAPI.UpdateDfsSMBShare(context.Background(), dfsSmbShareId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsSmbSharesAPIService UpdateDfsSMBShareACLs", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dfsSmbShareId int64

		resp, httpRes, err := apiClient.DfsSmbSharesAPI.UpdateDfsSMBShareACLs(context.Background(), dfsSmbShareId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
