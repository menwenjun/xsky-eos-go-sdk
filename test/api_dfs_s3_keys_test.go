/*
XMS API

Testing DfsS3KeysAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_DfsS3KeysAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DfsS3KeysAPIService CreateDfsS3Key", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DfsS3KeysAPI.CreateDfsS3Key(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsS3KeysAPIService DeleteDfsS3Key", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var keyId int64

		resp, httpRes, err := apiClient.DfsS3KeysAPI.DeleteDfsS3Key(context.Background(), keyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsS3KeysAPIService GetDfsS3Key", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var keyId int64

		resp, httpRes, err := apiClient.DfsS3KeysAPI.GetDfsS3Key(context.Background(), keyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsS3KeysAPIService ListDfsS3Keys", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DfsS3KeysAPI.ListDfsS3Keys(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsS3KeysAPIService UpdateDfsS3Key", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var keyId int64

		resp, httpRes, err := apiClient.DfsS3KeysAPI.UpdateDfsS3Key(context.Background(), keyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
