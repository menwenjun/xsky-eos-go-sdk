/*
XMS API

Testing DfsSnapshotsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	openapiclient "github.com/menwenjun/xsky-eos-go-sdk"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_DfsSnapshotsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DfsSnapshotsAPIService CreateDfsSnapshot", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DfsSnapshotsAPI.CreateDfsSnapshot(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsSnapshotsAPIService DeleteDfsSnapshot", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dfsSnapshotId int64

		resp, httpRes, err := apiClient.DfsSnapshotsAPI.DeleteDfsSnapshot(context.Background(), dfsSnapshotId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsSnapshotsAPIService GetDfsSnapshot", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dfsSnapshotId int64

		resp, httpRes, err := apiClient.DfsSnapshotsAPI.GetDfsSnapshot(context.Background(), dfsSnapshotId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsSnapshotsAPIService GetDfsSnapshotsOverViewPage", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DfsSnapshotsAPI.GetDfsSnapshotsOverViewPage(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsSnapshotsAPIService ListDfsSnapshots", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DfsSnapshotsAPI.ListDfsSnapshots(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsSnapshotsAPIService LockDfsSnapshot", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dfsSnapshotId int64

		resp, httpRes, err := apiClient.DfsSnapshotsAPI.LockDfsSnapshot(context.Background(), dfsSnapshotId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsSnapshotsAPIService RollbackDfsSnapshot", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dfsSnapshotId int64

		resp, httpRes, err := apiClient.DfsSnapshotsAPI.RollbackDfsSnapshot(context.Background(), dfsSnapshotId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsSnapshotsAPIService UnlockDfsSnapshot", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dfsSnapshotId int64

		resp, httpRes, err := apiClient.DfsSnapshotsAPI.UnlockDfsSnapshot(context.Background(), dfsSnapshotId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsSnapshotsAPIService UpdateDfsSnapshot", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var dfsSnapshotId int64

		resp, httpRes, err := apiClient.DfsSnapshotsAPI.UpdateDfsSnapshot(context.Background(), dfsSnapshotId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
