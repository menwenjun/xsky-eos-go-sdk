/*
XMS API

Testing DfsGatewayGroupsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_DfsGatewayGroupsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DfsGatewayGroupsAPIService AddDfsGateways", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var dfsGatewayGroupId int64

		resp, httpRes, err := apiClient.DfsGatewayGroupsAPI.AddDfsGateways(context.Background(), dfsGatewayGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsGatewayGroupsAPIService CreateDfsGatewayGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DfsGatewayGroupsAPI.CreateDfsGatewayGroup(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsGatewayGroupsAPIService DeleteDfsGatewayGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var dfsGatewayGroupId int64

		resp, httpRes, err := apiClient.DfsGatewayGroupsAPI.DeleteDfsGatewayGroup(context.Background(), dfsGatewayGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsGatewayGroupsAPIService GetDfsGatewayGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var dfsGatewayGroupId int64

		resp, httpRes, err := apiClient.DfsGatewayGroupsAPI.GetDfsGatewayGroup(context.Background(), dfsGatewayGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsGatewayGroupsAPIService ListDfsGatewayGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DfsGatewayGroupsAPI.ListDfsGatewayGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsGatewayGroupsAPIService RebuildDfsGateways", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var dfsGatewayGroupId int64

		resp, httpRes, err := apiClient.DfsGatewayGroupsAPI.RebuildDfsGateways(context.Background(), dfsGatewayGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsGatewayGroupsAPIService RemoveDfsGateways", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var dfsGatewayGroupId int64

		resp, httpRes, err := apiClient.DfsGatewayGroupsAPI.RemoveDfsGateways(context.Background(), dfsGatewayGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsGatewayGroupsAPIService UpdateDfsGatewayGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var dfsGatewayGroupId int64

		resp, httpRes, err := apiClient.DfsGatewayGroupsAPI.UpdateDfsGatewayGroup(context.Background(), dfsGatewayGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsGatewayGroupsAPIService UpdateDfsGatewayGroupTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var dfsGatewayGroupId int64

		resp, httpRes, err := apiClient.DfsGatewayGroupsAPI.UpdateDfsGatewayGroupTypes(context.Background(), dfsGatewayGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DfsGatewayGroupsAPIService UpdateDfsGatewayGroupVIPs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var dfsGatewayGroupId int64

		resp, httpRes, err := apiClient.DfsGatewayGroupsAPI.UpdateDfsGatewayGroupVIPs(context.Background(), dfsGatewayGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
