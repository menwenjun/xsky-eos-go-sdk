/*
XMS API

Testing OsBuiltinBluRaysAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_OsBuiltinBluRaysAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test OsBuiltinBluRaysAPIService CreateOSBuiltinBluRay", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OsBuiltinBluRaysAPI.CreateOSBuiltinBluRay(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OsBuiltinBluRaysAPIService DeleteOSBuiltinBluRay", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var builtinBluRayId int64

		httpRes, err := apiClient.OsBuiltinBluRaysAPI.DeleteOSBuiltinBluRay(context.Background(), builtinBluRayId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OsBuiltinBluRaysAPIService GetOSBuiltinBluRay", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var builtinBluRayId int64

		resp, httpRes, err := apiClient.OsBuiltinBluRaysAPI.GetOSBuiltinBluRay(context.Background(), builtinBluRayId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OsBuiltinBluRaysAPIService ListOSBuiltinBluRays", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OsBuiltinBluRaysAPI.ListOSBuiltinBluRays(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OsBuiltinBluRaysAPIService UpdateOSBuiltinBluRay", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var builtinBluRayId int64

		resp, httpRes, err := apiClient.OsBuiltinBluRaysAPI.UpdateOSBuiltinBluRay(context.Background(), builtinBluRayId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
