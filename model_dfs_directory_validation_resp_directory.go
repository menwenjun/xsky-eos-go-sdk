/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DfsDirectoryValidationRespDirectory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsDirectoryValidationRespDirectory{}

// DfsDirectoryValidationRespDirectory struct for DfsDirectoryValidationRespDirectory
type DfsDirectoryValidationRespDirectory struct {
	// count of data protection snapshot policy on the directory
	DpDfsSnapshotPolicyNum int64 `json:"dp_dfs_snapshot_policy_num"`
	// directory existed
	Existed bool `json:"existed"`
	// bucket existed on the parent or child directory
	ParentChildBucketExisted bool `json:"parent_child_bucket_existed"`
	// snapshot existed on the parent or child directory
	ParentChildSnapshotExisted bool `json:"parent_child_snapshot_existed"`
	// quota existed on the directory
	QuotaExisted bool `json:"quota_existed"`
	// count of snapshot on the root directory
	RootDirSnapNum int64 `json:"root_dir_snap_num"`
	// share existed on the directory
	ShareExisted bool `json:"share_existed"`
	// snapshot existed on the directory
	SnapshotExisted bool `json:"snapshot_existed"`
}

type _DfsDirectoryValidationRespDirectory DfsDirectoryValidationRespDirectory

// NewDfsDirectoryValidationRespDirectory instantiates a new DfsDirectoryValidationRespDirectory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsDirectoryValidationRespDirectory(dpDfsSnapshotPolicyNum int64, existed bool, parentChildBucketExisted bool, parentChildSnapshotExisted bool, quotaExisted bool, rootDirSnapNum int64, shareExisted bool, snapshotExisted bool) *DfsDirectoryValidationRespDirectory {
	this := DfsDirectoryValidationRespDirectory{}
	this.DpDfsSnapshotPolicyNum = dpDfsSnapshotPolicyNum
	this.Existed = existed
	this.ParentChildBucketExisted = parentChildBucketExisted
	this.ParentChildSnapshotExisted = parentChildSnapshotExisted
	this.QuotaExisted = quotaExisted
	this.RootDirSnapNum = rootDirSnapNum
	this.ShareExisted = shareExisted
	this.SnapshotExisted = snapshotExisted
	return &this
}

// NewDfsDirectoryValidationRespDirectoryWithDefaults instantiates a new DfsDirectoryValidationRespDirectory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsDirectoryValidationRespDirectoryWithDefaults() *DfsDirectoryValidationRespDirectory {
	this := DfsDirectoryValidationRespDirectory{}
	return &this
}

// GetDpDfsSnapshotPolicyNum returns the DpDfsSnapshotPolicyNum field value
func (o *DfsDirectoryValidationRespDirectory) GetDpDfsSnapshotPolicyNum() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DpDfsSnapshotPolicyNum
}

// GetDpDfsSnapshotPolicyNumOk returns a tuple with the DpDfsSnapshotPolicyNum field value
// and a boolean to check if the value has been set.
func (o *DfsDirectoryValidationRespDirectory) GetDpDfsSnapshotPolicyNumOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DpDfsSnapshotPolicyNum, true
}

// SetDpDfsSnapshotPolicyNum sets field value
func (o *DfsDirectoryValidationRespDirectory) SetDpDfsSnapshotPolicyNum(v int64) {
	o.DpDfsSnapshotPolicyNum = v
}

// GetExisted returns the Existed field value
func (o *DfsDirectoryValidationRespDirectory) GetExisted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Existed
}

// GetExistedOk returns a tuple with the Existed field value
// and a boolean to check if the value has been set.
func (o *DfsDirectoryValidationRespDirectory) GetExistedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Existed, true
}

// SetExisted sets field value
func (o *DfsDirectoryValidationRespDirectory) SetExisted(v bool) {
	o.Existed = v
}

// GetParentChildBucketExisted returns the ParentChildBucketExisted field value
func (o *DfsDirectoryValidationRespDirectory) GetParentChildBucketExisted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ParentChildBucketExisted
}

// GetParentChildBucketExistedOk returns a tuple with the ParentChildBucketExisted field value
// and a boolean to check if the value has been set.
func (o *DfsDirectoryValidationRespDirectory) GetParentChildBucketExistedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ParentChildBucketExisted, true
}

// SetParentChildBucketExisted sets field value
func (o *DfsDirectoryValidationRespDirectory) SetParentChildBucketExisted(v bool) {
	o.ParentChildBucketExisted = v
}

// GetParentChildSnapshotExisted returns the ParentChildSnapshotExisted field value
func (o *DfsDirectoryValidationRespDirectory) GetParentChildSnapshotExisted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ParentChildSnapshotExisted
}

// GetParentChildSnapshotExistedOk returns a tuple with the ParentChildSnapshotExisted field value
// and a boolean to check if the value has been set.
func (o *DfsDirectoryValidationRespDirectory) GetParentChildSnapshotExistedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ParentChildSnapshotExisted, true
}

// SetParentChildSnapshotExisted sets field value
func (o *DfsDirectoryValidationRespDirectory) SetParentChildSnapshotExisted(v bool) {
	o.ParentChildSnapshotExisted = v
}

// GetQuotaExisted returns the QuotaExisted field value
func (o *DfsDirectoryValidationRespDirectory) GetQuotaExisted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.QuotaExisted
}

// GetQuotaExistedOk returns a tuple with the QuotaExisted field value
// and a boolean to check if the value has been set.
func (o *DfsDirectoryValidationRespDirectory) GetQuotaExistedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QuotaExisted, true
}

// SetQuotaExisted sets field value
func (o *DfsDirectoryValidationRespDirectory) SetQuotaExisted(v bool) {
	o.QuotaExisted = v
}

// GetRootDirSnapNum returns the RootDirSnapNum field value
func (o *DfsDirectoryValidationRespDirectory) GetRootDirSnapNum() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.RootDirSnapNum
}

// GetRootDirSnapNumOk returns a tuple with the RootDirSnapNum field value
// and a boolean to check if the value has been set.
func (o *DfsDirectoryValidationRespDirectory) GetRootDirSnapNumOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RootDirSnapNum, true
}

// SetRootDirSnapNum sets field value
func (o *DfsDirectoryValidationRespDirectory) SetRootDirSnapNum(v int64) {
	o.RootDirSnapNum = v
}

// GetShareExisted returns the ShareExisted field value
func (o *DfsDirectoryValidationRespDirectory) GetShareExisted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ShareExisted
}

// GetShareExistedOk returns a tuple with the ShareExisted field value
// and a boolean to check if the value has been set.
func (o *DfsDirectoryValidationRespDirectory) GetShareExistedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ShareExisted, true
}

// SetShareExisted sets field value
func (o *DfsDirectoryValidationRespDirectory) SetShareExisted(v bool) {
	o.ShareExisted = v
}

// GetSnapshotExisted returns the SnapshotExisted field value
func (o *DfsDirectoryValidationRespDirectory) GetSnapshotExisted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SnapshotExisted
}

// GetSnapshotExistedOk returns a tuple with the SnapshotExisted field value
// and a boolean to check if the value has been set.
func (o *DfsDirectoryValidationRespDirectory) GetSnapshotExistedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SnapshotExisted, true
}

// SetSnapshotExisted sets field value
func (o *DfsDirectoryValidationRespDirectory) SetSnapshotExisted(v bool) {
	o.SnapshotExisted = v
}

func (o DfsDirectoryValidationRespDirectory) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsDirectoryValidationRespDirectory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dp_dfs_snapshot_policy_num"] = o.DpDfsSnapshotPolicyNum
	toSerialize["existed"] = o.Existed
	toSerialize["parent_child_bucket_existed"] = o.ParentChildBucketExisted
	toSerialize["parent_child_snapshot_existed"] = o.ParentChildSnapshotExisted
	toSerialize["quota_existed"] = o.QuotaExisted
	toSerialize["root_dir_snap_num"] = o.RootDirSnapNum
	toSerialize["share_existed"] = o.ShareExisted
	toSerialize["snapshot_existed"] = o.SnapshotExisted
	return toSerialize, nil
}

func (o *DfsDirectoryValidationRespDirectory) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dp_dfs_snapshot_policy_num",
		"existed",
		"parent_child_bucket_existed",
		"parent_child_snapshot_existed",
		"quota_existed",
		"root_dir_snap_num",
		"share_existed",
		"snapshot_existed",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDfsDirectoryValidationRespDirectory := _DfsDirectoryValidationRespDirectory{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDfsDirectoryValidationRespDirectory)

	if err != nil {
		return err
	}

	*o = DfsDirectoryValidationRespDirectory(varDfsDirectoryValidationRespDirectory)

	return err
}

type NullableDfsDirectoryValidationRespDirectory struct {
	value *DfsDirectoryValidationRespDirectory
	isSet bool
}

func (v NullableDfsDirectoryValidationRespDirectory) Get() *DfsDirectoryValidationRespDirectory {
	return v.value
}

func (v *NullableDfsDirectoryValidationRespDirectory) Set(val *DfsDirectoryValidationRespDirectory) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsDirectoryValidationRespDirectory) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsDirectoryValidationRespDirectory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsDirectoryValidationRespDirectory(val *DfsDirectoryValidationRespDirectory) *NullableDfsDirectoryValidationRespDirectory {
	return &NullableDfsDirectoryValidationRespDirectory{value: val, isSet: true}
}

func (v NullableDfsDirectoryValidationRespDirectory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsDirectoryValidationRespDirectory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


