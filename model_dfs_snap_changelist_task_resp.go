/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DfsSnapChangelistTaskResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsSnapChangelistTaskResp{}

// DfsSnapChangelistTaskResp struct for DfsSnapChangelistTaskResp
type DfsSnapChangelistTaskResp struct {
	DfsSnapChangelistTask DfsSnapChangelistTask `json:"dfs_snap_changelist_task"`
}

type _DfsSnapChangelistTaskResp DfsSnapChangelistTaskResp

// NewDfsSnapChangelistTaskResp instantiates a new DfsSnapChangelistTaskResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsSnapChangelistTaskResp(dfsSnapChangelistTask DfsSnapChangelistTask) *DfsSnapChangelistTaskResp {
	this := DfsSnapChangelistTaskResp{}
	this.DfsSnapChangelistTask = dfsSnapChangelistTask
	return &this
}

// NewDfsSnapChangelistTaskRespWithDefaults instantiates a new DfsSnapChangelistTaskResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsSnapChangelistTaskRespWithDefaults() *DfsSnapChangelistTaskResp {
	this := DfsSnapChangelistTaskResp{}
	return &this
}

// GetDfsSnapChangelistTask returns the DfsSnapChangelistTask field value
func (o *DfsSnapChangelistTaskResp) GetDfsSnapChangelistTask() DfsSnapChangelistTask {
	if o == nil {
		var ret DfsSnapChangelistTask
		return ret
	}

	return o.DfsSnapChangelistTask
}

// GetDfsSnapChangelistTaskOk returns a tuple with the DfsSnapChangelistTask field value
// and a boolean to check if the value has been set.
func (o *DfsSnapChangelistTaskResp) GetDfsSnapChangelistTaskOk() (*DfsSnapChangelistTask, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DfsSnapChangelistTask, true
}

// SetDfsSnapChangelistTask sets field value
func (o *DfsSnapChangelistTaskResp) SetDfsSnapChangelistTask(v DfsSnapChangelistTask) {
	o.DfsSnapChangelistTask = v
}

func (o DfsSnapChangelistTaskResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsSnapChangelistTaskResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dfs_snap_changelist_task"] = o.DfsSnapChangelistTask
	return toSerialize, nil
}

func (o *DfsSnapChangelistTaskResp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dfs_snap_changelist_task",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDfsSnapChangelistTaskResp := _DfsSnapChangelistTaskResp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDfsSnapChangelistTaskResp)

	if err != nil {
		return err
	}

	*o = DfsSnapChangelistTaskResp(varDfsSnapChangelistTaskResp)

	return err
}

type NullableDfsSnapChangelistTaskResp struct {
	value *DfsSnapChangelistTaskResp
	isSet bool
}

func (v NullableDfsSnapChangelistTaskResp) Get() *DfsSnapChangelistTaskResp {
	return v.value
}

func (v *NullableDfsSnapChangelistTaskResp) Set(val *DfsSnapChangelistTaskResp) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsSnapChangelistTaskResp) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsSnapChangelistTaskResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsSnapChangelistTaskResp(val *DfsSnapChangelistTaskResp) *NullableDfsSnapChangelistTaskResp {
	return &NullableDfsSnapChangelistTaskResp{value: val, isSet: true}
}

func (v NullableDfsSnapChangelistTaskResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsSnapChangelistTaskResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


