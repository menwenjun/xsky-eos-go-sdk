/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DfsFTPShareRemoveACLsReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsFTPShareRemoveACLsReq{}

// DfsFTPShareRemoveACLsReq struct for DfsFTPShareRemoveACLsReq
type DfsFTPShareRemoveACLsReq struct {
	DfsFtpShare DfsFTPShareRemoveACLsReqShare `json:"dfs_ftp_share"`
}

type _DfsFTPShareRemoveACLsReq DfsFTPShareRemoveACLsReq

// NewDfsFTPShareRemoveACLsReq instantiates a new DfsFTPShareRemoveACLsReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsFTPShareRemoveACLsReq(dfsFtpShare DfsFTPShareRemoveACLsReqShare) *DfsFTPShareRemoveACLsReq {
	this := DfsFTPShareRemoveACLsReq{}
	this.DfsFtpShare = dfsFtpShare
	return &this
}

// NewDfsFTPShareRemoveACLsReqWithDefaults instantiates a new DfsFTPShareRemoveACLsReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsFTPShareRemoveACLsReqWithDefaults() *DfsFTPShareRemoveACLsReq {
	this := DfsFTPShareRemoveACLsReq{}
	return &this
}

// GetDfsFtpShare returns the DfsFtpShare field value
func (o *DfsFTPShareRemoveACLsReq) GetDfsFtpShare() DfsFTPShareRemoveACLsReqShare {
	if o == nil {
		var ret DfsFTPShareRemoveACLsReqShare
		return ret
	}

	return o.DfsFtpShare
}

// GetDfsFtpShareOk returns a tuple with the DfsFtpShare field value
// and a boolean to check if the value has been set.
func (o *DfsFTPShareRemoveACLsReq) GetDfsFtpShareOk() (*DfsFTPShareRemoveACLsReqShare, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DfsFtpShare, true
}

// SetDfsFtpShare sets field value
func (o *DfsFTPShareRemoveACLsReq) SetDfsFtpShare(v DfsFTPShareRemoveACLsReqShare) {
	o.DfsFtpShare = v
}

func (o DfsFTPShareRemoveACLsReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsFTPShareRemoveACLsReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dfs_ftp_share"] = o.DfsFtpShare
	return toSerialize, nil
}

func (o *DfsFTPShareRemoveACLsReq) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dfs_ftp_share",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDfsFTPShareRemoveACLsReq := _DfsFTPShareRemoveACLsReq{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDfsFTPShareRemoveACLsReq)

	if err != nil {
		return err
	}

	*o = DfsFTPShareRemoveACLsReq(varDfsFTPShareRemoveACLsReq)

	return err
}

type NullableDfsFTPShareRemoveACLsReq struct {
	value *DfsFTPShareRemoveACLsReq
	isSet bool
}

func (v NullableDfsFTPShareRemoveACLsReq) Get() *DfsFTPShareRemoveACLsReq {
	return v.value
}

func (v *NullableDfsFTPShareRemoveACLsReq) Set(val *DfsFTPShareRemoveACLsReq) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsFTPShareRemoveACLsReq) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsFTPShareRemoveACLsReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsFTPShareRemoveACLsReq(val *DfsFTPShareRemoveACLsReq) *NullableDfsFTPShareRemoveACLsReq {
	return &NullableDfsFTPShareRemoveACLsReq{value: val, isSet: true}
}

func (v NullableDfsFTPShareRemoveACLsReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsFTPShareRemoveACLsReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


