/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UserUpdateReqUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserUpdateReqUser{}

// UserUpdateReqUser struct for UserUpdateReqUser
type UserUpdateReqUser struct {
	// email of user
	Email string `json:"email"`
	// enable or disable the user
	Enabled bool `json:"enabled"`
	// name of user
	Name string `json:"name"`
	// roles of user
	Roles []string `json:"roles,omitempty"`
}

type _UserUpdateReqUser UserUpdateReqUser

// NewUserUpdateReqUser instantiates a new UserUpdateReqUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserUpdateReqUser(email string, enabled bool, name string) *UserUpdateReqUser {
	this := UserUpdateReqUser{}
	this.Email = email
	this.Enabled = enabled
	this.Name = name
	return &this
}

// NewUserUpdateReqUserWithDefaults instantiates a new UserUpdateReqUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserUpdateReqUserWithDefaults() *UserUpdateReqUser {
	this := UserUpdateReqUser{}
	return &this
}

// GetEmail returns the Email field value
func (o *UserUpdateReqUser) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *UserUpdateReqUser) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *UserUpdateReqUser) SetEmail(v string) {
	o.Email = v
}

// GetEnabled returns the Enabled field value
func (o *UserUpdateReqUser) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *UserUpdateReqUser) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *UserUpdateReqUser) SetEnabled(v bool) {
	o.Enabled = v
}

// GetName returns the Name field value
func (o *UserUpdateReqUser) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UserUpdateReqUser) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UserUpdateReqUser) SetName(v string) {
	o.Name = v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *UserUpdateReqUser) GetRoles() []string {
	if o == nil || IsNil(o.Roles) {
		var ret []string
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserUpdateReqUser) GetRolesOk() ([]string, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *UserUpdateReqUser) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []string and assigns it to the Roles field.
func (o *UserUpdateReqUser) SetRoles(v []string) {
	o.Roles = v
}

func (o UserUpdateReqUser) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserUpdateReqUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["email"] = o.Email
	toSerialize["enabled"] = o.Enabled
	toSerialize["name"] = o.Name
	if !IsNil(o.Roles) {
		toSerialize["roles"] = o.Roles
	}
	return toSerialize, nil
}

func (o *UserUpdateReqUser) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"email",
		"enabled",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserUpdateReqUser := _UserUpdateReqUser{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserUpdateReqUser)

	if err != nil {
		return err
	}

	*o = UserUpdateReqUser(varUserUpdateReqUser)

	return err
}

type NullableUserUpdateReqUser struct {
	value *UserUpdateReqUser
	isSet bool
}

func (v NullableUserUpdateReqUser) Get() *UserUpdateReqUser {
	return v.value
}

func (v *NullableUserUpdateReqUser) Set(val *UserUpdateReqUser) {
	v.value = val
	v.isSet = true
}

func (v NullableUserUpdateReqUser) IsSet() bool {
	return v.isSet
}

func (v *NullableUserUpdateReqUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserUpdateReqUser(val *UserUpdateReqUser) *NullableUserUpdateReqUser {
	return &NullableUserUpdateReqUser{value: val, isSet: true}
}

func (v NullableUserUpdateReqUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserUpdateReqUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


