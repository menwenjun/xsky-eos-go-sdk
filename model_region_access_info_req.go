/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RegionAccessInfoReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegionAccessInfoReq{}

// RegionAccessInfoReq struct for RegionAccessInfoReq
type RegionAccessInfoReq struct {
	Region *RegionAccessInfoReqRegion `json:"region,omitempty"`
}

// NewRegionAccessInfoReq instantiates a new RegionAccessInfoReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegionAccessInfoReq() *RegionAccessInfoReq {
	this := RegionAccessInfoReq{}
	return &this
}

// NewRegionAccessInfoReqWithDefaults instantiates a new RegionAccessInfoReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegionAccessInfoReqWithDefaults() *RegionAccessInfoReq {
	this := RegionAccessInfoReq{}
	return &this
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *RegionAccessInfoReq) GetRegion() RegionAccessInfoReqRegion {
	if o == nil || IsNil(o.Region) {
		var ret RegionAccessInfoReqRegion
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionAccessInfoReq) GetRegionOk() (*RegionAccessInfoReqRegion, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *RegionAccessInfoReq) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given RegionAccessInfoReqRegion and assigns it to the Region field.
func (o *RegionAccessInfoReq) SetRegion(v RegionAccessInfoReqRegion) {
	o.Region = &v
}

func (o RegionAccessInfoReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegionAccessInfoReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	return toSerialize, nil
}

type NullableRegionAccessInfoReq struct {
	value *RegionAccessInfoReq
	isSet bool
}

func (v NullableRegionAccessInfoReq) Get() *RegionAccessInfoReq {
	return v.value
}

func (v *NullableRegionAccessInfoReq) Set(val *RegionAccessInfoReq) {
	v.value = val
	v.isSet = true
}

func (v NullableRegionAccessInfoReq) IsSet() bool {
	return v.isSet
}

func (v *NullableRegionAccessInfoReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegionAccessInfoReq(val *RegionAccessInfoReq) *NullableRegionAccessInfoReq {
	return &NullableRegionAccessInfoReq{value: val, isSet: true}
}

func (v NullableRegionAccessInfoReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegionAccessInfoReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


