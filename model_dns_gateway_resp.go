/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DNSGatewayResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DNSGatewayResp{}

// DNSGatewayResp struct for DNSGatewayResp
type DNSGatewayResp struct {
	DnsGateway *DNSGateway `json:"dns_gateway,omitempty"`
}

// NewDNSGatewayResp instantiates a new DNSGatewayResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDNSGatewayResp() *DNSGatewayResp {
	this := DNSGatewayResp{}
	return &this
}

// NewDNSGatewayRespWithDefaults instantiates a new DNSGatewayResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDNSGatewayRespWithDefaults() *DNSGatewayResp {
	this := DNSGatewayResp{}
	return &this
}

// GetDnsGateway returns the DnsGateway field value if set, zero value otherwise.
func (o *DNSGatewayResp) GetDnsGateway() DNSGateway {
	if o == nil || IsNil(o.DnsGateway) {
		var ret DNSGateway
		return ret
	}
	return *o.DnsGateway
}

// GetDnsGatewayOk returns a tuple with the DnsGateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSGatewayResp) GetDnsGatewayOk() (*DNSGateway, bool) {
	if o == nil || IsNil(o.DnsGateway) {
		return nil, false
	}
	return o.DnsGateway, true
}

// HasDnsGateway returns a boolean if a field has been set.
func (o *DNSGatewayResp) HasDnsGateway() bool {
	if o != nil && !IsNil(o.DnsGateway) {
		return true
	}

	return false
}

// SetDnsGateway gets a reference to the given DNSGateway and assigns it to the DnsGateway field.
func (o *DNSGatewayResp) SetDnsGateway(v DNSGateway) {
	o.DnsGateway = &v
}

func (o DNSGatewayResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DNSGatewayResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DnsGateway) {
		toSerialize["dns_gateway"] = o.DnsGateway
	}
	return toSerialize, nil
}

type NullableDNSGatewayResp struct {
	value *DNSGatewayResp
	isSet bool
}

func (v NullableDNSGatewayResp) Get() *DNSGatewayResp {
	return v.value
}

func (v *NullableDNSGatewayResp) Set(val *DNSGatewayResp) {
	v.value = val
	v.isSet = true
}

func (v NullableDNSGatewayResp) IsSet() bool {
	return v.isSet
}

func (v *NullableDNSGatewayResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDNSGatewayResp(val *DNSGatewayResp) *NullableDNSGatewayResp {
	return &NullableDNSGatewayResp{value: val, isSet: true}
}

func (v NullableDNSGatewayResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDNSGatewayResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


