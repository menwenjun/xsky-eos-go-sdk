/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DfsDirectoriesCheckResourcesReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsDirectoriesCheckResourcesReq{}

// DfsDirectoriesCheckResourcesReq struct for DfsDirectoriesCheckResourcesReq
type DfsDirectoriesCheckResourcesReq struct {
	DfsDirectories DfsDirectoriesCheckResourcesReqDirectories `json:"dfs_directories"`
}

type _DfsDirectoriesCheckResourcesReq DfsDirectoriesCheckResourcesReq

// NewDfsDirectoriesCheckResourcesReq instantiates a new DfsDirectoriesCheckResourcesReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsDirectoriesCheckResourcesReq(dfsDirectories DfsDirectoriesCheckResourcesReqDirectories) *DfsDirectoriesCheckResourcesReq {
	this := DfsDirectoriesCheckResourcesReq{}
	this.DfsDirectories = dfsDirectories
	return &this
}

// NewDfsDirectoriesCheckResourcesReqWithDefaults instantiates a new DfsDirectoriesCheckResourcesReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsDirectoriesCheckResourcesReqWithDefaults() *DfsDirectoriesCheckResourcesReq {
	this := DfsDirectoriesCheckResourcesReq{}
	return &this
}

// GetDfsDirectories returns the DfsDirectories field value
func (o *DfsDirectoriesCheckResourcesReq) GetDfsDirectories() DfsDirectoriesCheckResourcesReqDirectories {
	if o == nil {
		var ret DfsDirectoriesCheckResourcesReqDirectories
		return ret
	}

	return o.DfsDirectories
}

// GetDfsDirectoriesOk returns a tuple with the DfsDirectories field value
// and a boolean to check if the value has been set.
func (o *DfsDirectoriesCheckResourcesReq) GetDfsDirectoriesOk() (*DfsDirectoriesCheckResourcesReqDirectories, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DfsDirectories, true
}

// SetDfsDirectories sets field value
func (o *DfsDirectoriesCheckResourcesReq) SetDfsDirectories(v DfsDirectoriesCheckResourcesReqDirectories) {
	o.DfsDirectories = v
}

func (o DfsDirectoriesCheckResourcesReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsDirectoriesCheckResourcesReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dfs_directories"] = o.DfsDirectories
	return toSerialize, nil
}

func (o *DfsDirectoriesCheckResourcesReq) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dfs_directories",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDfsDirectoriesCheckResourcesReq := _DfsDirectoriesCheckResourcesReq{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDfsDirectoriesCheckResourcesReq)

	if err != nil {
		return err
	}

	*o = DfsDirectoriesCheckResourcesReq(varDfsDirectoriesCheckResourcesReq)

	return err
}

type NullableDfsDirectoriesCheckResourcesReq struct {
	value *DfsDirectoriesCheckResourcesReq
	isSet bool
}

func (v NullableDfsDirectoriesCheckResourcesReq) Get() *DfsDirectoriesCheckResourcesReq {
	return v.value
}

func (v *NullableDfsDirectoriesCheckResourcesReq) Set(val *DfsDirectoriesCheckResourcesReq) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsDirectoriesCheckResourcesReq) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsDirectoriesCheckResourcesReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsDirectoriesCheckResourcesReq(val *DfsDirectoriesCheckResourcesReq) *NullableDfsDirectoriesCheckResourcesReq {
	return &NullableDfsDirectoriesCheckResourcesReq{value: val, isSet: true}
}

func (v NullableDfsDirectoriesCheckResourcesReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsDirectoriesCheckResourcesReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


