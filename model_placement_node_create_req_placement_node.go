/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PlacementNodeCreateReqPlacementNode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlacementNodeCreateReqPlacementNode{}

// PlacementNodeCreateReqPlacementNode struct for PlacementNodeCreateReqPlacementNode
type PlacementNodeCreateReqPlacementNode struct {
	ClusterId *int64 `json:"cluster_id,omitempty"`
	IsWitness *bool `json:"is_witness,omitempty"`
	Name string `json:"name"`
	ParentId int64 `json:"parent_id"`
	Type string `json:"type"`
}

type _PlacementNodeCreateReqPlacementNode PlacementNodeCreateReqPlacementNode

// NewPlacementNodeCreateReqPlacementNode instantiates a new PlacementNodeCreateReqPlacementNode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlacementNodeCreateReqPlacementNode(name string, parentId int64, type_ string) *PlacementNodeCreateReqPlacementNode {
	this := PlacementNodeCreateReqPlacementNode{}
	this.Name = name
	this.ParentId = parentId
	this.Type = type_
	return &this
}

// NewPlacementNodeCreateReqPlacementNodeWithDefaults instantiates a new PlacementNodeCreateReqPlacementNode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlacementNodeCreateReqPlacementNodeWithDefaults() *PlacementNodeCreateReqPlacementNode {
	this := PlacementNodeCreateReqPlacementNode{}
	return &this
}

// GetClusterId returns the ClusterId field value if set, zero value otherwise.
func (o *PlacementNodeCreateReqPlacementNode) GetClusterId() int64 {
	if o == nil || IsNil(o.ClusterId) {
		var ret int64
		return ret
	}
	return *o.ClusterId
}

// GetClusterIdOk returns a tuple with the ClusterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlacementNodeCreateReqPlacementNode) GetClusterIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ClusterId) {
		return nil, false
	}
	return o.ClusterId, true
}

// HasClusterId returns a boolean if a field has been set.
func (o *PlacementNodeCreateReqPlacementNode) HasClusterId() bool {
	if o != nil && !IsNil(o.ClusterId) {
		return true
	}

	return false
}

// SetClusterId gets a reference to the given int64 and assigns it to the ClusterId field.
func (o *PlacementNodeCreateReqPlacementNode) SetClusterId(v int64) {
	o.ClusterId = &v
}

// GetIsWitness returns the IsWitness field value if set, zero value otherwise.
func (o *PlacementNodeCreateReqPlacementNode) GetIsWitness() bool {
	if o == nil || IsNil(o.IsWitness) {
		var ret bool
		return ret
	}
	return *o.IsWitness
}

// GetIsWitnessOk returns a tuple with the IsWitness field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlacementNodeCreateReqPlacementNode) GetIsWitnessOk() (*bool, bool) {
	if o == nil || IsNil(o.IsWitness) {
		return nil, false
	}
	return o.IsWitness, true
}

// HasIsWitness returns a boolean if a field has been set.
func (o *PlacementNodeCreateReqPlacementNode) HasIsWitness() bool {
	if o != nil && !IsNil(o.IsWitness) {
		return true
	}

	return false
}

// SetIsWitness gets a reference to the given bool and assigns it to the IsWitness field.
func (o *PlacementNodeCreateReqPlacementNode) SetIsWitness(v bool) {
	o.IsWitness = &v
}

// GetName returns the Name field value
func (o *PlacementNodeCreateReqPlacementNode) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PlacementNodeCreateReqPlacementNode) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PlacementNodeCreateReqPlacementNode) SetName(v string) {
	o.Name = v
}

// GetParentId returns the ParentId field value
func (o *PlacementNodeCreateReqPlacementNode) GetParentId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value
// and a boolean to check if the value has been set.
func (o *PlacementNodeCreateReqPlacementNode) GetParentIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ParentId, true
}

// SetParentId sets field value
func (o *PlacementNodeCreateReqPlacementNode) SetParentId(v int64) {
	o.ParentId = v
}

// GetType returns the Type field value
func (o *PlacementNodeCreateReqPlacementNode) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *PlacementNodeCreateReqPlacementNode) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *PlacementNodeCreateReqPlacementNode) SetType(v string) {
	o.Type = v
}

func (o PlacementNodeCreateReqPlacementNode) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlacementNodeCreateReqPlacementNode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ClusterId) {
		toSerialize["cluster_id"] = o.ClusterId
	}
	if !IsNil(o.IsWitness) {
		toSerialize["is_witness"] = o.IsWitness
	}
	toSerialize["name"] = o.Name
	toSerialize["parent_id"] = o.ParentId
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *PlacementNodeCreateReqPlacementNode) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"parent_id",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPlacementNodeCreateReqPlacementNode := _PlacementNodeCreateReqPlacementNode{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPlacementNodeCreateReqPlacementNode)

	if err != nil {
		return err
	}

	*o = PlacementNodeCreateReqPlacementNode(varPlacementNodeCreateReqPlacementNode)

	return err
}

type NullablePlacementNodeCreateReqPlacementNode struct {
	value *PlacementNodeCreateReqPlacementNode
	isSet bool
}

func (v NullablePlacementNodeCreateReqPlacementNode) Get() *PlacementNodeCreateReqPlacementNode {
	return v.value
}

func (v *NullablePlacementNodeCreateReqPlacementNode) Set(val *PlacementNodeCreateReqPlacementNode) {
	v.value = val
	v.isSet = true
}

func (v NullablePlacementNodeCreateReqPlacementNode) IsSet() bool {
	return v.isSet
}

func (v *NullablePlacementNodeCreateReqPlacementNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlacementNodeCreateReqPlacementNode(val *PlacementNodeCreateReqPlacementNode) *NullablePlacementNodeCreateReqPlacementNode {
	return &NullablePlacementNodeCreateReqPlacementNode{value: val, isSet: true}
}

func (v NullablePlacementNodeCreateReqPlacementNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlacementNodeCreateReqPlacementNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


