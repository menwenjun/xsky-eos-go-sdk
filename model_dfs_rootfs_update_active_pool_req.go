/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DfsRootfsUpdateActivePoolReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsRootfsUpdateActivePoolReq{}

// DfsRootfsUpdateActivePoolReq struct for DfsRootfsUpdateActivePoolReq
type DfsRootfsUpdateActivePoolReq struct {
	DfsRootfs DfsRootfsUpdateActivePoolReqRootfs `json:"dfs_rootfs"`
}

type _DfsRootfsUpdateActivePoolReq DfsRootfsUpdateActivePoolReq

// NewDfsRootfsUpdateActivePoolReq instantiates a new DfsRootfsUpdateActivePoolReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsRootfsUpdateActivePoolReq(dfsRootfs DfsRootfsUpdateActivePoolReqRootfs) *DfsRootfsUpdateActivePoolReq {
	this := DfsRootfsUpdateActivePoolReq{}
	this.DfsRootfs = dfsRootfs
	return &this
}

// NewDfsRootfsUpdateActivePoolReqWithDefaults instantiates a new DfsRootfsUpdateActivePoolReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsRootfsUpdateActivePoolReqWithDefaults() *DfsRootfsUpdateActivePoolReq {
	this := DfsRootfsUpdateActivePoolReq{}
	return &this
}

// GetDfsRootfs returns the DfsRootfs field value
func (o *DfsRootfsUpdateActivePoolReq) GetDfsRootfs() DfsRootfsUpdateActivePoolReqRootfs {
	if o == nil {
		var ret DfsRootfsUpdateActivePoolReqRootfs
		return ret
	}

	return o.DfsRootfs
}

// GetDfsRootfsOk returns a tuple with the DfsRootfs field value
// and a boolean to check if the value has been set.
func (o *DfsRootfsUpdateActivePoolReq) GetDfsRootfsOk() (*DfsRootfsUpdateActivePoolReqRootfs, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DfsRootfs, true
}

// SetDfsRootfs sets field value
func (o *DfsRootfsUpdateActivePoolReq) SetDfsRootfs(v DfsRootfsUpdateActivePoolReqRootfs) {
	o.DfsRootfs = v
}

func (o DfsRootfsUpdateActivePoolReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsRootfsUpdateActivePoolReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dfs_rootfs"] = o.DfsRootfs
	return toSerialize, nil
}

func (o *DfsRootfsUpdateActivePoolReq) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dfs_rootfs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDfsRootfsUpdateActivePoolReq := _DfsRootfsUpdateActivePoolReq{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDfsRootfsUpdateActivePoolReq)

	if err != nil {
		return err
	}

	*o = DfsRootfsUpdateActivePoolReq(varDfsRootfsUpdateActivePoolReq)

	return err
}

type NullableDfsRootfsUpdateActivePoolReq struct {
	value *DfsRootfsUpdateActivePoolReq
	isSet bool
}

func (v NullableDfsRootfsUpdateActivePoolReq) Get() *DfsRootfsUpdateActivePoolReq {
	return v.value
}

func (v *NullableDfsRootfsUpdateActivePoolReq) Set(val *DfsRootfsUpdateActivePoolReq) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsRootfsUpdateActivePoolReq) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsRootfsUpdateActivePoolReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsRootfsUpdateActivePoolReq(val *DfsRootfsUpdateActivePoolReq) *NullableDfsRootfsUpdateActivePoolReq {
	return &NullableDfsRootfsUpdateActivePoolReq{value: val, isSet: true}
}

func (v NullableDfsRootfsUpdateActivePoolReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsRootfsUpdateActivePoolReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


