/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DfsSMBWindowsACE type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsSMBWindowsACE{}

// DfsSMBWindowsACE DfsSMBWindowsACE windows ace
type DfsSMBWindowsACE struct {
	AceType *string `json:"ace_type,omitempty"`
	Action *string `json:"action,omitempty"`
	FsActiveDirectory *FSActiveDirectory `json:"fs_active_directory,omitempty"`
	FsUserGroup *FSUserGroup `json:"fs_user_group,omitempty"`
	Inheritance *WindowsACLInheritance `json:"inheritance,omitempty"`
	// original permission is convenient in the xms-cli output
	OriginalPermission *string `json:"original_permission,omitempty"`
	Permissions []WindowsACLPermission `json:"permissions,omitempty"`
	Principal *string `json:"principal,omitempty"`
	PrincipalType *string `json:"principal_type,omitempty"`
	SecurityType *string `json:"security_type,omitempty"`
	User *FSUser `json:"user,omitempty"`
	UserGroupName *string `json:"user_group_name,omitempty"`
	UserName *string `json:"user_name,omitempty"`
}

// NewDfsSMBWindowsACE instantiates a new DfsSMBWindowsACE object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsSMBWindowsACE() *DfsSMBWindowsACE {
	this := DfsSMBWindowsACE{}
	return &this
}

// NewDfsSMBWindowsACEWithDefaults instantiates a new DfsSMBWindowsACE object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsSMBWindowsACEWithDefaults() *DfsSMBWindowsACE {
	this := DfsSMBWindowsACE{}
	return &this
}

// GetAceType returns the AceType field value if set, zero value otherwise.
func (o *DfsSMBWindowsACE) GetAceType() string {
	if o == nil || IsNil(o.AceType) {
		var ret string
		return ret
	}
	return *o.AceType
}

// GetAceTypeOk returns a tuple with the AceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBWindowsACE) GetAceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AceType) {
		return nil, false
	}
	return o.AceType, true
}

// HasAceType returns a boolean if a field has been set.
func (o *DfsSMBWindowsACE) HasAceType() bool {
	if o != nil && !IsNil(o.AceType) {
		return true
	}

	return false
}

// SetAceType gets a reference to the given string and assigns it to the AceType field.
func (o *DfsSMBWindowsACE) SetAceType(v string) {
	o.AceType = &v
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *DfsSMBWindowsACE) GetAction() string {
	if o == nil || IsNil(o.Action) {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBWindowsACE) GetActionOk() (*string, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *DfsSMBWindowsACE) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *DfsSMBWindowsACE) SetAction(v string) {
	o.Action = &v
}

// GetFsActiveDirectory returns the FsActiveDirectory field value if set, zero value otherwise.
func (o *DfsSMBWindowsACE) GetFsActiveDirectory() FSActiveDirectory {
	if o == nil || IsNil(o.FsActiveDirectory) {
		var ret FSActiveDirectory
		return ret
	}
	return *o.FsActiveDirectory
}

// GetFsActiveDirectoryOk returns a tuple with the FsActiveDirectory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBWindowsACE) GetFsActiveDirectoryOk() (*FSActiveDirectory, bool) {
	if o == nil || IsNil(o.FsActiveDirectory) {
		return nil, false
	}
	return o.FsActiveDirectory, true
}

// HasFsActiveDirectory returns a boolean if a field has been set.
func (o *DfsSMBWindowsACE) HasFsActiveDirectory() bool {
	if o != nil && !IsNil(o.FsActiveDirectory) {
		return true
	}

	return false
}

// SetFsActiveDirectory gets a reference to the given FSActiveDirectory and assigns it to the FsActiveDirectory field.
func (o *DfsSMBWindowsACE) SetFsActiveDirectory(v FSActiveDirectory) {
	o.FsActiveDirectory = &v
}

// GetFsUserGroup returns the FsUserGroup field value if set, zero value otherwise.
func (o *DfsSMBWindowsACE) GetFsUserGroup() FSUserGroup {
	if o == nil || IsNil(o.FsUserGroup) {
		var ret FSUserGroup
		return ret
	}
	return *o.FsUserGroup
}

// GetFsUserGroupOk returns a tuple with the FsUserGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBWindowsACE) GetFsUserGroupOk() (*FSUserGroup, bool) {
	if o == nil || IsNil(o.FsUserGroup) {
		return nil, false
	}
	return o.FsUserGroup, true
}

// HasFsUserGroup returns a boolean if a field has been set.
func (o *DfsSMBWindowsACE) HasFsUserGroup() bool {
	if o != nil && !IsNil(o.FsUserGroup) {
		return true
	}

	return false
}

// SetFsUserGroup gets a reference to the given FSUserGroup and assigns it to the FsUserGroup field.
func (o *DfsSMBWindowsACE) SetFsUserGroup(v FSUserGroup) {
	o.FsUserGroup = &v
}

// GetInheritance returns the Inheritance field value if set, zero value otherwise.
func (o *DfsSMBWindowsACE) GetInheritance() WindowsACLInheritance {
	if o == nil || IsNil(o.Inheritance) {
		var ret WindowsACLInheritance
		return ret
	}
	return *o.Inheritance
}

// GetInheritanceOk returns a tuple with the Inheritance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBWindowsACE) GetInheritanceOk() (*WindowsACLInheritance, bool) {
	if o == nil || IsNil(o.Inheritance) {
		return nil, false
	}
	return o.Inheritance, true
}

// HasInheritance returns a boolean if a field has been set.
func (o *DfsSMBWindowsACE) HasInheritance() bool {
	if o != nil && !IsNil(o.Inheritance) {
		return true
	}

	return false
}

// SetInheritance gets a reference to the given WindowsACLInheritance and assigns it to the Inheritance field.
func (o *DfsSMBWindowsACE) SetInheritance(v WindowsACLInheritance) {
	o.Inheritance = &v
}

// GetOriginalPermission returns the OriginalPermission field value if set, zero value otherwise.
func (o *DfsSMBWindowsACE) GetOriginalPermission() string {
	if o == nil || IsNil(o.OriginalPermission) {
		var ret string
		return ret
	}
	return *o.OriginalPermission
}

// GetOriginalPermissionOk returns a tuple with the OriginalPermission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBWindowsACE) GetOriginalPermissionOk() (*string, bool) {
	if o == nil || IsNil(o.OriginalPermission) {
		return nil, false
	}
	return o.OriginalPermission, true
}

// HasOriginalPermission returns a boolean if a field has been set.
func (o *DfsSMBWindowsACE) HasOriginalPermission() bool {
	if o != nil && !IsNil(o.OriginalPermission) {
		return true
	}

	return false
}

// SetOriginalPermission gets a reference to the given string and assigns it to the OriginalPermission field.
func (o *DfsSMBWindowsACE) SetOriginalPermission(v string) {
	o.OriginalPermission = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *DfsSMBWindowsACE) GetPermissions() []WindowsACLPermission {
	if o == nil || IsNil(o.Permissions) {
		var ret []WindowsACLPermission
		return ret
	}
	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBWindowsACE) GetPermissionsOk() ([]WindowsACLPermission, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *DfsSMBWindowsACE) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given []WindowsACLPermission and assigns it to the Permissions field.
func (o *DfsSMBWindowsACE) SetPermissions(v []WindowsACLPermission) {
	o.Permissions = v
}

// GetPrincipal returns the Principal field value if set, zero value otherwise.
func (o *DfsSMBWindowsACE) GetPrincipal() string {
	if o == nil || IsNil(o.Principal) {
		var ret string
		return ret
	}
	return *o.Principal
}

// GetPrincipalOk returns a tuple with the Principal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBWindowsACE) GetPrincipalOk() (*string, bool) {
	if o == nil || IsNil(o.Principal) {
		return nil, false
	}
	return o.Principal, true
}

// HasPrincipal returns a boolean if a field has been set.
func (o *DfsSMBWindowsACE) HasPrincipal() bool {
	if o != nil && !IsNil(o.Principal) {
		return true
	}

	return false
}

// SetPrincipal gets a reference to the given string and assigns it to the Principal field.
func (o *DfsSMBWindowsACE) SetPrincipal(v string) {
	o.Principal = &v
}

// GetPrincipalType returns the PrincipalType field value if set, zero value otherwise.
func (o *DfsSMBWindowsACE) GetPrincipalType() string {
	if o == nil || IsNil(o.PrincipalType) {
		var ret string
		return ret
	}
	return *o.PrincipalType
}

// GetPrincipalTypeOk returns a tuple with the PrincipalType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBWindowsACE) GetPrincipalTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PrincipalType) {
		return nil, false
	}
	return o.PrincipalType, true
}

// HasPrincipalType returns a boolean if a field has been set.
func (o *DfsSMBWindowsACE) HasPrincipalType() bool {
	if o != nil && !IsNil(o.PrincipalType) {
		return true
	}

	return false
}

// SetPrincipalType gets a reference to the given string and assigns it to the PrincipalType field.
func (o *DfsSMBWindowsACE) SetPrincipalType(v string) {
	o.PrincipalType = &v
}

// GetSecurityType returns the SecurityType field value if set, zero value otherwise.
func (o *DfsSMBWindowsACE) GetSecurityType() string {
	if o == nil || IsNil(o.SecurityType) {
		var ret string
		return ret
	}
	return *o.SecurityType
}

// GetSecurityTypeOk returns a tuple with the SecurityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBWindowsACE) GetSecurityTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SecurityType) {
		return nil, false
	}
	return o.SecurityType, true
}

// HasSecurityType returns a boolean if a field has been set.
func (o *DfsSMBWindowsACE) HasSecurityType() bool {
	if o != nil && !IsNil(o.SecurityType) {
		return true
	}

	return false
}

// SetSecurityType gets a reference to the given string and assigns it to the SecurityType field.
func (o *DfsSMBWindowsACE) SetSecurityType(v string) {
	o.SecurityType = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *DfsSMBWindowsACE) GetUser() FSUser {
	if o == nil || IsNil(o.User) {
		var ret FSUser
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBWindowsACE) GetUserOk() (*FSUser, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *DfsSMBWindowsACE) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given FSUser and assigns it to the User field.
func (o *DfsSMBWindowsACE) SetUser(v FSUser) {
	o.User = &v
}

// GetUserGroupName returns the UserGroupName field value if set, zero value otherwise.
func (o *DfsSMBWindowsACE) GetUserGroupName() string {
	if o == nil || IsNil(o.UserGroupName) {
		var ret string
		return ret
	}
	return *o.UserGroupName
}

// GetUserGroupNameOk returns a tuple with the UserGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBWindowsACE) GetUserGroupNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserGroupName) {
		return nil, false
	}
	return o.UserGroupName, true
}

// HasUserGroupName returns a boolean if a field has been set.
func (o *DfsSMBWindowsACE) HasUserGroupName() bool {
	if o != nil && !IsNil(o.UserGroupName) {
		return true
	}

	return false
}

// SetUserGroupName gets a reference to the given string and assigns it to the UserGroupName field.
func (o *DfsSMBWindowsACE) SetUserGroupName(v string) {
	o.UserGroupName = &v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *DfsSMBWindowsACE) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBWindowsACE) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *DfsSMBWindowsACE) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *DfsSMBWindowsACE) SetUserName(v string) {
	o.UserName = &v
}

func (o DfsSMBWindowsACE) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsSMBWindowsACE) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AceType) {
		toSerialize["ace_type"] = o.AceType
	}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	if !IsNil(o.FsActiveDirectory) {
		toSerialize["fs_active_directory"] = o.FsActiveDirectory
	}
	if !IsNil(o.FsUserGroup) {
		toSerialize["fs_user_group"] = o.FsUserGroup
	}
	if !IsNil(o.Inheritance) {
		toSerialize["inheritance"] = o.Inheritance
	}
	if !IsNil(o.OriginalPermission) {
		toSerialize["original_permission"] = o.OriginalPermission
	}
	if !IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	if !IsNil(o.Principal) {
		toSerialize["principal"] = o.Principal
	}
	if !IsNil(o.PrincipalType) {
		toSerialize["principal_type"] = o.PrincipalType
	}
	if !IsNil(o.SecurityType) {
		toSerialize["security_type"] = o.SecurityType
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.UserGroupName) {
		toSerialize["user_group_name"] = o.UserGroupName
	}
	if !IsNil(o.UserName) {
		toSerialize["user_name"] = o.UserName
	}
	return toSerialize, nil
}

type NullableDfsSMBWindowsACE struct {
	value *DfsSMBWindowsACE
	isSet bool
}

func (v NullableDfsSMBWindowsACE) Get() *DfsSMBWindowsACE {
	return v.value
}

func (v *NullableDfsSMBWindowsACE) Set(val *DfsSMBWindowsACE) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsSMBWindowsACE) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsSMBWindowsACE) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsSMBWindowsACE(val *DfsSMBWindowsACE) *NullableDfsSMBWindowsACE {
	return &NullableDfsSMBWindowsACE{value: val, isSet: true}
}

func (v NullableDfsSMBWindowsACE) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsSMBWindowsACE) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


