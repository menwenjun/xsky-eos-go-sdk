/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PlacementNodeResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlacementNodeResp{}

// PlacementNodeResp struct for PlacementNodeResp
type PlacementNodeResp struct {
	PlacementNode PlacementNodeRecord `json:"placement_node"`
}

type _PlacementNodeResp PlacementNodeResp

// NewPlacementNodeResp instantiates a new PlacementNodeResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlacementNodeResp(placementNode PlacementNodeRecord) *PlacementNodeResp {
	this := PlacementNodeResp{}
	this.PlacementNode = placementNode
	return &this
}

// NewPlacementNodeRespWithDefaults instantiates a new PlacementNodeResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlacementNodeRespWithDefaults() *PlacementNodeResp {
	this := PlacementNodeResp{}
	return &this
}

// GetPlacementNode returns the PlacementNode field value
func (o *PlacementNodeResp) GetPlacementNode() PlacementNodeRecord {
	if o == nil {
		var ret PlacementNodeRecord
		return ret
	}

	return o.PlacementNode
}

// GetPlacementNodeOk returns a tuple with the PlacementNode field value
// and a boolean to check if the value has been set.
func (o *PlacementNodeResp) GetPlacementNodeOk() (*PlacementNodeRecord, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlacementNode, true
}

// SetPlacementNode sets field value
func (o *PlacementNodeResp) SetPlacementNode(v PlacementNodeRecord) {
	o.PlacementNode = v
}

func (o PlacementNodeResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlacementNodeResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["placement_node"] = o.PlacementNode
	return toSerialize, nil
}

func (o *PlacementNodeResp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"placement_node",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPlacementNodeResp := _PlacementNodeResp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPlacementNodeResp)

	if err != nil {
		return err
	}

	*o = PlacementNodeResp(varPlacementNodeResp)

	return err
}

type NullablePlacementNodeResp struct {
	value *PlacementNodeResp
	isSet bool
}

func (v NullablePlacementNodeResp) Get() *PlacementNodeResp {
	return v.value
}

func (v *NullablePlacementNodeResp) Set(val *PlacementNodeResp) {
	v.value = val
	v.isSet = true
}

func (v NullablePlacementNodeResp) IsSet() bool {
	return v.isSet
}

func (v *NullablePlacementNodeResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlacementNodeResp(val *PlacementNodeResp) *NullablePlacementNodeResp {
	return &NullablePlacementNodeResp{value: val, isSet: true}
}

func (v NullablePlacementNodeResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlacementNodeResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


