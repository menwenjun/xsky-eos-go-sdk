/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the ObjectStorageStat type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectStorageStat{}

// ObjectStorageStat ObjectStorageStat defines stat of object storage
type ObjectStorageStat struct {
	AllocatedObjects *int64 `json:"allocated_objects,omitempty"`
	AllocatedSize *int64 `json:"allocated_size,omitempty"`
	Create *time.Time `json:"create,omitempty"`
	ExternalAllocatedObjects *int64 `json:"external_allocated_objects,omitempty"`
	ExternalAllocatedSize *int64 `json:"external_allocated_size,omitempty"`
	LocalAllocatedObjects *int64 `json:"local_allocated_objects,omitempty"`
	LocalAllocatedSize *int64 `json:"local_allocated_size,omitempty"`
}

// NewObjectStorageStat instantiates a new ObjectStorageStat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectStorageStat() *ObjectStorageStat {
	this := ObjectStorageStat{}
	return &this
}

// NewObjectStorageStatWithDefaults instantiates a new ObjectStorageStat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectStorageStatWithDefaults() *ObjectStorageStat {
	this := ObjectStorageStat{}
	return &this
}

// GetAllocatedObjects returns the AllocatedObjects field value if set, zero value otherwise.
func (o *ObjectStorageStat) GetAllocatedObjects() int64 {
	if o == nil || IsNil(o.AllocatedObjects) {
		var ret int64
		return ret
	}
	return *o.AllocatedObjects
}

// GetAllocatedObjectsOk returns a tuple with the AllocatedObjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageStat) GetAllocatedObjectsOk() (*int64, bool) {
	if o == nil || IsNil(o.AllocatedObjects) {
		return nil, false
	}
	return o.AllocatedObjects, true
}

// HasAllocatedObjects returns a boolean if a field has been set.
func (o *ObjectStorageStat) HasAllocatedObjects() bool {
	if o != nil && !IsNil(o.AllocatedObjects) {
		return true
	}

	return false
}

// SetAllocatedObjects gets a reference to the given int64 and assigns it to the AllocatedObjects field.
func (o *ObjectStorageStat) SetAllocatedObjects(v int64) {
	o.AllocatedObjects = &v
}

// GetAllocatedSize returns the AllocatedSize field value if set, zero value otherwise.
func (o *ObjectStorageStat) GetAllocatedSize() int64 {
	if o == nil || IsNil(o.AllocatedSize) {
		var ret int64
		return ret
	}
	return *o.AllocatedSize
}

// GetAllocatedSizeOk returns a tuple with the AllocatedSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageStat) GetAllocatedSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.AllocatedSize) {
		return nil, false
	}
	return o.AllocatedSize, true
}

// HasAllocatedSize returns a boolean if a field has been set.
func (o *ObjectStorageStat) HasAllocatedSize() bool {
	if o != nil && !IsNil(o.AllocatedSize) {
		return true
	}

	return false
}

// SetAllocatedSize gets a reference to the given int64 and assigns it to the AllocatedSize field.
func (o *ObjectStorageStat) SetAllocatedSize(v int64) {
	o.AllocatedSize = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *ObjectStorageStat) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageStat) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *ObjectStorageStat) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *ObjectStorageStat) SetCreate(v time.Time) {
	o.Create = &v
}

// GetExternalAllocatedObjects returns the ExternalAllocatedObjects field value if set, zero value otherwise.
func (o *ObjectStorageStat) GetExternalAllocatedObjects() int64 {
	if o == nil || IsNil(o.ExternalAllocatedObjects) {
		var ret int64
		return ret
	}
	return *o.ExternalAllocatedObjects
}

// GetExternalAllocatedObjectsOk returns a tuple with the ExternalAllocatedObjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageStat) GetExternalAllocatedObjectsOk() (*int64, bool) {
	if o == nil || IsNil(o.ExternalAllocatedObjects) {
		return nil, false
	}
	return o.ExternalAllocatedObjects, true
}

// HasExternalAllocatedObjects returns a boolean if a field has been set.
func (o *ObjectStorageStat) HasExternalAllocatedObjects() bool {
	if o != nil && !IsNil(o.ExternalAllocatedObjects) {
		return true
	}

	return false
}

// SetExternalAllocatedObjects gets a reference to the given int64 and assigns it to the ExternalAllocatedObjects field.
func (o *ObjectStorageStat) SetExternalAllocatedObjects(v int64) {
	o.ExternalAllocatedObjects = &v
}

// GetExternalAllocatedSize returns the ExternalAllocatedSize field value if set, zero value otherwise.
func (o *ObjectStorageStat) GetExternalAllocatedSize() int64 {
	if o == nil || IsNil(o.ExternalAllocatedSize) {
		var ret int64
		return ret
	}
	return *o.ExternalAllocatedSize
}

// GetExternalAllocatedSizeOk returns a tuple with the ExternalAllocatedSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageStat) GetExternalAllocatedSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.ExternalAllocatedSize) {
		return nil, false
	}
	return o.ExternalAllocatedSize, true
}

// HasExternalAllocatedSize returns a boolean if a field has been set.
func (o *ObjectStorageStat) HasExternalAllocatedSize() bool {
	if o != nil && !IsNil(o.ExternalAllocatedSize) {
		return true
	}

	return false
}

// SetExternalAllocatedSize gets a reference to the given int64 and assigns it to the ExternalAllocatedSize field.
func (o *ObjectStorageStat) SetExternalAllocatedSize(v int64) {
	o.ExternalAllocatedSize = &v
}

// GetLocalAllocatedObjects returns the LocalAllocatedObjects field value if set, zero value otherwise.
func (o *ObjectStorageStat) GetLocalAllocatedObjects() int64 {
	if o == nil || IsNil(o.LocalAllocatedObjects) {
		var ret int64
		return ret
	}
	return *o.LocalAllocatedObjects
}

// GetLocalAllocatedObjectsOk returns a tuple with the LocalAllocatedObjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageStat) GetLocalAllocatedObjectsOk() (*int64, bool) {
	if o == nil || IsNil(o.LocalAllocatedObjects) {
		return nil, false
	}
	return o.LocalAllocatedObjects, true
}

// HasLocalAllocatedObjects returns a boolean if a field has been set.
func (o *ObjectStorageStat) HasLocalAllocatedObjects() bool {
	if o != nil && !IsNil(o.LocalAllocatedObjects) {
		return true
	}

	return false
}

// SetLocalAllocatedObjects gets a reference to the given int64 and assigns it to the LocalAllocatedObjects field.
func (o *ObjectStorageStat) SetLocalAllocatedObjects(v int64) {
	o.LocalAllocatedObjects = &v
}

// GetLocalAllocatedSize returns the LocalAllocatedSize field value if set, zero value otherwise.
func (o *ObjectStorageStat) GetLocalAllocatedSize() int64 {
	if o == nil || IsNil(o.LocalAllocatedSize) {
		var ret int64
		return ret
	}
	return *o.LocalAllocatedSize
}

// GetLocalAllocatedSizeOk returns a tuple with the LocalAllocatedSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageStat) GetLocalAllocatedSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.LocalAllocatedSize) {
		return nil, false
	}
	return o.LocalAllocatedSize, true
}

// HasLocalAllocatedSize returns a boolean if a field has been set.
func (o *ObjectStorageStat) HasLocalAllocatedSize() bool {
	if o != nil && !IsNil(o.LocalAllocatedSize) {
		return true
	}

	return false
}

// SetLocalAllocatedSize gets a reference to the given int64 and assigns it to the LocalAllocatedSize field.
func (o *ObjectStorageStat) SetLocalAllocatedSize(v int64) {
	o.LocalAllocatedSize = &v
}

func (o ObjectStorageStat) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectStorageStat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllocatedObjects) {
		toSerialize["allocated_objects"] = o.AllocatedObjects
	}
	if !IsNil(o.AllocatedSize) {
		toSerialize["allocated_size"] = o.AllocatedSize
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.ExternalAllocatedObjects) {
		toSerialize["external_allocated_objects"] = o.ExternalAllocatedObjects
	}
	if !IsNil(o.ExternalAllocatedSize) {
		toSerialize["external_allocated_size"] = o.ExternalAllocatedSize
	}
	if !IsNil(o.LocalAllocatedObjects) {
		toSerialize["local_allocated_objects"] = o.LocalAllocatedObjects
	}
	if !IsNil(o.LocalAllocatedSize) {
		toSerialize["local_allocated_size"] = o.LocalAllocatedSize
	}
	return toSerialize, nil
}

type NullableObjectStorageStat struct {
	value *ObjectStorageStat
	isSet bool
}

func (v NullableObjectStorageStat) Get() *ObjectStorageStat {
	return v.value
}

func (v *NullableObjectStorageStat) Set(val *ObjectStorageStat) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectStorageStat) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectStorageStat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectStorageStat(val *ObjectStorageStat) *NullableObjectStorageStat {
	return &NullableObjectStorageStat{value: val, isSet: true}
}

func (v NullableObjectStorageStat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectStorageStat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


