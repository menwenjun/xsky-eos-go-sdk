/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DNSDomainNameCreateReqDomainName type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DNSDomainNameCreateReqDomainName{}

// DNSDomainNameCreateReqDomainName struct for DNSDomainNameCreateReqDomainName
type DNSDomainNameCreateReqDomainName struct {
	// dns domain name policy id
	DnsLoadBalancePolicyId int64 `json:"dns_load_balance_policy_id"`
	// dns zone id
	DnsZoneId int64 `json:"dns_zone_id"`
	// dns domain name
	Name string `json:"name"`
	// related resource id
	ResourceId int64 `json:"resource_id"`
	// related resource type
	ResourceType string `json:"resource_type"`
}

type _DNSDomainNameCreateReqDomainName DNSDomainNameCreateReqDomainName

// NewDNSDomainNameCreateReqDomainName instantiates a new DNSDomainNameCreateReqDomainName object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDNSDomainNameCreateReqDomainName(dnsLoadBalancePolicyId int64, dnsZoneId int64, name string, resourceId int64, resourceType string) *DNSDomainNameCreateReqDomainName {
	this := DNSDomainNameCreateReqDomainName{}
	this.DnsLoadBalancePolicyId = dnsLoadBalancePolicyId
	this.DnsZoneId = dnsZoneId
	this.Name = name
	this.ResourceId = resourceId
	this.ResourceType = resourceType
	return &this
}

// NewDNSDomainNameCreateReqDomainNameWithDefaults instantiates a new DNSDomainNameCreateReqDomainName object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDNSDomainNameCreateReqDomainNameWithDefaults() *DNSDomainNameCreateReqDomainName {
	this := DNSDomainNameCreateReqDomainName{}
	return &this
}

// GetDnsLoadBalancePolicyId returns the DnsLoadBalancePolicyId field value
func (o *DNSDomainNameCreateReqDomainName) GetDnsLoadBalancePolicyId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DnsLoadBalancePolicyId
}

// GetDnsLoadBalancePolicyIdOk returns a tuple with the DnsLoadBalancePolicyId field value
// and a boolean to check if the value has been set.
func (o *DNSDomainNameCreateReqDomainName) GetDnsLoadBalancePolicyIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DnsLoadBalancePolicyId, true
}

// SetDnsLoadBalancePolicyId sets field value
func (o *DNSDomainNameCreateReqDomainName) SetDnsLoadBalancePolicyId(v int64) {
	o.DnsLoadBalancePolicyId = v
}

// GetDnsZoneId returns the DnsZoneId field value
func (o *DNSDomainNameCreateReqDomainName) GetDnsZoneId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DnsZoneId
}

// GetDnsZoneIdOk returns a tuple with the DnsZoneId field value
// and a boolean to check if the value has been set.
func (o *DNSDomainNameCreateReqDomainName) GetDnsZoneIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DnsZoneId, true
}

// SetDnsZoneId sets field value
func (o *DNSDomainNameCreateReqDomainName) SetDnsZoneId(v int64) {
	o.DnsZoneId = v
}

// GetName returns the Name field value
func (o *DNSDomainNameCreateReqDomainName) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DNSDomainNameCreateReqDomainName) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DNSDomainNameCreateReqDomainName) SetName(v string) {
	o.Name = v
}

// GetResourceId returns the ResourceId field value
func (o *DNSDomainNameCreateReqDomainName) GetResourceId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value
// and a boolean to check if the value has been set.
func (o *DNSDomainNameCreateReqDomainName) GetResourceIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceId, true
}

// SetResourceId sets field value
func (o *DNSDomainNameCreateReqDomainName) SetResourceId(v int64) {
	o.ResourceId = v
}

// GetResourceType returns the ResourceType field value
func (o *DNSDomainNameCreateReqDomainName) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *DNSDomainNameCreateReqDomainName) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *DNSDomainNameCreateReqDomainName) SetResourceType(v string) {
	o.ResourceType = v
}

func (o DNSDomainNameCreateReqDomainName) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DNSDomainNameCreateReqDomainName) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dns_load_balance_policy_id"] = o.DnsLoadBalancePolicyId
	toSerialize["dns_zone_id"] = o.DnsZoneId
	toSerialize["name"] = o.Name
	toSerialize["resource_id"] = o.ResourceId
	toSerialize["resource_type"] = o.ResourceType
	return toSerialize, nil
}

func (o *DNSDomainNameCreateReqDomainName) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dns_load_balance_policy_id",
		"dns_zone_id",
		"name",
		"resource_id",
		"resource_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDNSDomainNameCreateReqDomainName := _DNSDomainNameCreateReqDomainName{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDNSDomainNameCreateReqDomainName)

	if err != nil {
		return err
	}

	*o = DNSDomainNameCreateReqDomainName(varDNSDomainNameCreateReqDomainName)

	return err
}

type NullableDNSDomainNameCreateReqDomainName struct {
	value *DNSDomainNameCreateReqDomainName
	isSet bool
}

func (v NullableDNSDomainNameCreateReqDomainName) Get() *DNSDomainNameCreateReqDomainName {
	return v.value
}

func (v *NullableDNSDomainNameCreateReqDomainName) Set(val *DNSDomainNameCreateReqDomainName) {
	v.value = val
	v.isSet = true
}

func (v NullableDNSDomainNameCreateReqDomainName) IsSet() bool {
	return v.isSet
}

func (v *NullableDNSDomainNameCreateReqDomainName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDNSDomainNameCreateReqDomainName(val *DNSDomainNameCreateReqDomainName) *NullableDNSDomainNameCreateReqDomainName {
	return &NullableDNSDomainNameCreateReqDomainName{value: val, isSet: true}
}

func (v NullableDNSDomainNameCreateReqDomainName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDNSDomainNameCreateReqDomainName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


