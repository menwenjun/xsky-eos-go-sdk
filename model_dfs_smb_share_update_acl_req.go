/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DfsSMBShareUpdateACLReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsSMBShareUpdateACLReq{}

// DfsSMBShareUpdateACLReq struct for DfsSMBShareUpdateACLReq
type DfsSMBShareUpdateACLReq struct {
	// description of user or user group
	Description *string `json:"description,omitempty"`
	// id of user group
	Id *int64 `json:"id,omitempty"`
	// readonly or readwrite access
	Permission *string `json:"permission,omitempty"`
}

// NewDfsSMBShareUpdateACLReq instantiates a new DfsSMBShareUpdateACLReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsSMBShareUpdateACLReq() *DfsSMBShareUpdateACLReq {
	this := DfsSMBShareUpdateACLReq{}
	return &this
}

// NewDfsSMBShareUpdateACLReqWithDefaults instantiates a new DfsSMBShareUpdateACLReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsSMBShareUpdateACLReqWithDefaults() *DfsSMBShareUpdateACLReq {
	this := DfsSMBShareUpdateACLReq{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DfsSMBShareUpdateACLReq) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBShareUpdateACLReq) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DfsSMBShareUpdateACLReq) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DfsSMBShareUpdateACLReq) SetDescription(v string) {
	o.Description = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DfsSMBShareUpdateACLReq) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBShareUpdateACLReq) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DfsSMBShareUpdateACLReq) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *DfsSMBShareUpdateACLReq) SetId(v int64) {
	o.Id = &v
}

// GetPermission returns the Permission field value if set, zero value otherwise.
func (o *DfsSMBShareUpdateACLReq) GetPermission() string {
	if o == nil || IsNil(o.Permission) {
		var ret string
		return ret
	}
	return *o.Permission
}

// GetPermissionOk returns a tuple with the Permission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBShareUpdateACLReq) GetPermissionOk() (*string, bool) {
	if o == nil || IsNil(o.Permission) {
		return nil, false
	}
	return o.Permission, true
}

// HasPermission returns a boolean if a field has been set.
func (o *DfsSMBShareUpdateACLReq) HasPermission() bool {
	if o != nil && !IsNil(o.Permission) {
		return true
	}

	return false
}

// SetPermission gets a reference to the given string and assigns it to the Permission field.
func (o *DfsSMBShareUpdateACLReq) SetPermission(v string) {
	o.Permission = &v
}

func (o DfsSMBShareUpdateACLReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsSMBShareUpdateACLReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Permission) {
		toSerialize["permission"] = o.Permission
	}
	return toSerialize, nil
}

type NullableDfsSMBShareUpdateACLReq struct {
	value *DfsSMBShareUpdateACLReq
	isSet bool
}

func (v NullableDfsSMBShareUpdateACLReq) Get() *DfsSMBShareUpdateACLReq {
	return v.value
}

func (v *NullableDfsSMBShareUpdateACLReq) Set(val *DfsSMBShareUpdateACLReq) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsSMBShareUpdateACLReq) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsSMBShareUpdateACLReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsSMBShareUpdateACLReq(val *DfsSMBShareUpdateACLReq) *NullableDfsSMBShareUpdateACLReq {
	return &NullableDfsSMBShareUpdateACLReq{value: val, isSet: true}
}

func (v NullableDfsSMBShareUpdateACLReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsSMBShareUpdateACLReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


