/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EmptyPoolInitializeReqPool type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmptyPoolInitializeReqPool{}

// EmptyPoolInitializeReqPool struct for EmptyPoolInitializeReqPool
type EmptyPoolInitializeReqPool struct {
	Cache *EmptyPoolInitializeReqPoolCache `json:"cache,omitempty"`
	OsdIds []int64 `json:"osd_ids,omitempty"`
	PrimaryPlacementNodeId *int64 `json:"primary_placement_node_id,omitempty"`
	Ruleset []PoolRuleReq `json:"ruleset,omitempty"`
	SubFailureDomainType *string `json:"sub_failure_domain_type,omitempty"`
}

// NewEmptyPoolInitializeReqPool instantiates a new EmptyPoolInitializeReqPool object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmptyPoolInitializeReqPool() *EmptyPoolInitializeReqPool {
	this := EmptyPoolInitializeReqPool{}
	return &this
}

// NewEmptyPoolInitializeReqPoolWithDefaults instantiates a new EmptyPoolInitializeReqPool object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmptyPoolInitializeReqPoolWithDefaults() *EmptyPoolInitializeReqPool {
	this := EmptyPoolInitializeReqPool{}
	return &this
}

// GetCache returns the Cache field value if set, zero value otherwise.
func (o *EmptyPoolInitializeReqPool) GetCache() EmptyPoolInitializeReqPoolCache {
	if o == nil || IsNil(o.Cache) {
		var ret EmptyPoolInitializeReqPoolCache
		return ret
	}
	return *o.Cache
}

// GetCacheOk returns a tuple with the Cache field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmptyPoolInitializeReqPool) GetCacheOk() (*EmptyPoolInitializeReqPoolCache, bool) {
	if o == nil || IsNil(o.Cache) {
		return nil, false
	}
	return o.Cache, true
}

// HasCache returns a boolean if a field has been set.
func (o *EmptyPoolInitializeReqPool) HasCache() bool {
	if o != nil && !IsNil(o.Cache) {
		return true
	}

	return false
}

// SetCache gets a reference to the given EmptyPoolInitializeReqPoolCache and assigns it to the Cache field.
func (o *EmptyPoolInitializeReqPool) SetCache(v EmptyPoolInitializeReqPoolCache) {
	o.Cache = &v
}

// GetOsdIds returns the OsdIds field value if set, zero value otherwise.
func (o *EmptyPoolInitializeReqPool) GetOsdIds() []int64 {
	if o == nil || IsNil(o.OsdIds) {
		var ret []int64
		return ret
	}
	return o.OsdIds
}

// GetOsdIdsOk returns a tuple with the OsdIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmptyPoolInitializeReqPool) GetOsdIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.OsdIds) {
		return nil, false
	}
	return o.OsdIds, true
}

// HasOsdIds returns a boolean if a field has been set.
func (o *EmptyPoolInitializeReqPool) HasOsdIds() bool {
	if o != nil && !IsNil(o.OsdIds) {
		return true
	}

	return false
}

// SetOsdIds gets a reference to the given []int64 and assigns it to the OsdIds field.
func (o *EmptyPoolInitializeReqPool) SetOsdIds(v []int64) {
	o.OsdIds = v
}

// GetPrimaryPlacementNodeId returns the PrimaryPlacementNodeId field value if set, zero value otherwise.
func (o *EmptyPoolInitializeReqPool) GetPrimaryPlacementNodeId() int64 {
	if o == nil || IsNil(o.PrimaryPlacementNodeId) {
		var ret int64
		return ret
	}
	return *o.PrimaryPlacementNodeId
}

// GetPrimaryPlacementNodeIdOk returns a tuple with the PrimaryPlacementNodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmptyPoolInitializeReqPool) GetPrimaryPlacementNodeIdOk() (*int64, bool) {
	if o == nil || IsNil(o.PrimaryPlacementNodeId) {
		return nil, false
	}
	return o.PrimaryPlacementNodeId, true
}

// HasPrimaryPlacementNodeId returns a boolean if a field has been set.
func (o *EmptyPoolInitializeReqPool) HasPrimaryPlacementNodeId() bool {
	if o != nil && !IsNil(o.PrimaryPlacementNodeId) {
		return true
	}

	return false
}

// SetPrimaryPlacementNodeId gets a reference to the given int64 and assigns it to the PrimaryPlacementNodeId field.
func (o *EmptyPoolInitializeReqPool) SetPrimaryPlacementNodeId(v int64) {
	o.PrimaryPlacementNodeId = &v
}

// GetRuleset returns the Ruleset field value if set, zero value otherwise.
func (o *EmptyPoolInitializeReqPool) GetRuleset() []PoolRuleReq {
	if o == nil || IsNil(o.Ruleset) {
		var ret []PoolRuleReq
		return ret
	}
	return o.Ruleset
}

// GetRulesetOk returns a tuple with the Ruleset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmptyPoolInitializeReqPool) GetRulesetOk() ([]PoolRuleReq, bool) {
	if o == nil || IsNil(o.Ruleset) {
		return nil, false
	}
	return o.Ruleset, true
}

// HasRuleset returns a boolean if a field has been set.
func (o *EmptyPoolInitializeReqPool) HasRuleset() bool {
	if o != nil && !IsNil(o.Ruleset) {
		return true
	}

	return false
}

// SetRuleset gets a reference to the given []PoolRuleReq and assigns it to the Ruleset field.
func (o *EmptyPoolInitializeReqPool) SetRuleset(v []PoolRuleReq) {
	o.Ruleset = v
}

// GetSubFailureDomainType returns the SubFailureDomainType field value if set, zero value otherwise.
func (o *EmptyPoolInitializeReqPool) GetSubFailureDomainType() string {
	if o == nil || IsNil(o.SubFailureDomainType) {
		var ret string
		return ret
	}
	return *o.SubFailureDomainType
}

// GetSubFailureDomainTypeOk returns a tuple with the SubFailureDomainType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmptyPoolInitializeReqPool) GetSubFailureDomainTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SubFailureDomainType) {
		return nil, false
	}
	return o.SubFailureDomainType, true
}

// HasSubFailureDomainType returns a boolean if a field has been set.
func (o *EmptyPoolInitializeReqPool) HasSubFailureDomainType() bool {
	if o != nil && !IsNil(o.SubFailureDomainType) {
		return true
	}

	return false
}

// SetSubFailureDomainType gets a reference to the given string and assigns it to the SubFailureDomainType field.
func (o *EmptyPoolInitializeReqPool) SetSubFailureDomainType(v string) {
	o.SubFailureDomainType = &v
}

func (o EmptyPoolInitializeReqPool) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmptyPoolInitializeReqPool) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cache) {
		toSerialize["cache"] = o.Cache
	}
	if !IsNil(o.OsdIds) {
		toSerialize["osd_ids"] = o.OsdIds
	}
	if !IsNil(o.PrimaryPlacementNodeId) {
		toSerialize["primary_placement_node_id"] = o.PrimaryPlacementNodeId
	}
	if !IsNil(o.Ruleset) {
		toSerialize["ruleset"] = o.Ruleset
	}
	if !IsNil(o.SubFailureDomainType) {
		toSerialize["sub_failure_domain_type"] = o.SubFailureDomainType
	}
	return toSerialize, nil
}

type NullableEmptyPoolInitializeReqPool struct {
	value *EmptyPoolInitializeReqPool
	isSet bool
}

func (v NullableEmptyPoolInitializeReqPool) Get() *EmptyPoolInitializeReqPool {
	return v.value
}

func (v *NullableEmptyPoolInitializeReqPool) Set(val *EmptyPoolInitializeReqPool) {
	v.value = val
	v.isSet = true
}

func (v NullableEmptyPoolInitializeReqPool) IsSet() bool {
	return v.isSet
}

func (v *NullableEmptyPoolInitializeReqPool) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmptyPoolInitializeReqPool(val *EmptyPoolInitializeReqPool) *NullableEmptyPoolInitializeReqPool {
	return &NullableEmptyPoolInitializeReqPool{value: val, isSet: true}
}

func (v NullableEmptyPoolInitializeReqPool) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmptyPoolInitializeReqPool) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


