/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DirResource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DirResource{}

// DirResource struct for DirResource
type DirResource struct {
	Dir *string `json:"dir,omitempty"`
	Resources []DirResourceExisted `json:"resources,omitempty"`
}

// NewDirResource instantiates a new DirResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDirResource() *DirResource {
	this := DirResource{}
	return &this
}

// NewDirResourceWithDefaults instantiates a new DirResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDirResourceWithDefaults() *DirResource {
	this := DirResource{}
	return &this
}

// GetDir returns the Dir field value if set, zero value otherwise.
func (o *DirResource) GetDir() string {
	if o == nil || IsNil(o.Dir) {
		var ret string
		return ret
	}
	return *o.Dir
}

// GetDirOk returns a tuple with the Dir field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirResource) GetDirOk() (*string, bool) {
	if o == nil || IsNil(o.Dir) {
		return nil, false
	}
	return o.Dir, true
}

// HasDir returns a boolean if a field has been set.
func (o *DirResource) HasDir() bool {
	if o != nil && !IsNil(o.Dir) {
		return true
	}

	return false
}

// SetDir gets a reference to the given string and assigns it to the Dir field.
func (o *DirResource) SetDir(v string) {
	o.Dir = &v
}

// GetResources returns the Resources field value if set, zero value otherwise.
func (o *DirResource) GetResources() []DirResourceExisted {
	if o == nil || IsNil(o.Resources) {
		var ret []DirResourceExisted
		return ret
	}
	return o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirResource) GetResourcesOk() ([]DirResourceExisted, bool) {
	if o == nil || IsNil(o.Resources) {
		return nil, false
	}
	return o.Resources, true
}

// HasResources returns a boolean if a field has been set.
func (o *DirResource) HasResources() bool {
	if o != nil && !IsNil(o.Resources) {
		return true
	}

	return false
}

// SetResources gets a reference to the given []DirResourceExisted and assigns it to the Resources field.
func (o *DirResource) SetResources(v []DirResourceExisted) {
	o.Resources = v
}

func (o DirResource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DirResource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Dir) {
		toSerialize["dir"] = o.Dir
	}
	if !IsNil(o.Resources) {
		toSerialize["resources"] = o.Resources
	}
	return toSerialize, nil
}

type NullableDirResource struct {
	value *DirResource
	isSet bool
}

func (v NullableDirResource) Get() *DirResource {
	return v.value
}

func (v *NullableDirResource) Set(val *DirResource) {
	v.value = val
	v.isSet = true
}

func (v NullableDirResource) IsSet() bool {
	return v.isSet
}

func (v *NullableDirResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDirResource(val *DirResource) *NullableDirResource {
	return &NullableDirResource{value: val, isSet: true}
}

func (v NullableDirResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDirResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


