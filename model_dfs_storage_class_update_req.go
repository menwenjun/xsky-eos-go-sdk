/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DfsStorageClassUpdateReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsStorageClassUpdateReq{}

// DfsStorageClassUpdateReq struct for DfsStorageClassUpdateReq
type DfsStorageClassUpdateReq struct {
	DfsStorageClass DfsStorageClassUpdateReqDfsStorageClass `json:"dfs_storage_class"`
}

type _DfsStorageClassUpdateReq DfsStorageClassUpdateReq

// NewDfsStorageClassUpdateReq instantiates a new DfsStorageClassUpdateReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsStorageClassUpdateReq(dfsStorageClass DfsStorageClassUpdateReqDfsStorageClass) *DfsStorageClassUpdateReq {
	this := DfsStorageClassUpdateReq{}
	this.DfsStorageClass = dfsStorageClass
	return &this
}

// NewDfsStorageClassUpdateReqWithDefaults instantiates a new DfsStorageClassUpdateReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsStorageClassUpdateReqWithDefaults() *DfsStorageClassUpdateReq {
	this := DfsStorageClassUpdateReq{}
	return &this
}

// GetDfsStorageClass returns the DfsStorageClass field value
func (o *DfsStorageClassUpdateReq) GetDfsStorageClass() DfsStorageClassUpdateReqDfsStorageClass {
	if o == nil {
		var ret DfsStorageClassUpdateReqDfsStorageClass
		return ret
	}

	return o.DfsStorageClass
}

// GetDfsStorageClassOk returns a tuple with the DfsStorageClass field value
// and a boolean to check if the value has been set.
func (o *DfsStorageClassUpdateReq) GetDfsStorageClassOk() (*DfsStorageClassUpdateReqDfsStorageClass, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DfsStorageClass, true
}

// SetDfsStorageClass sets field value
func (o *DfsStorageClassUpdateReq) SetDfsStorageClass(v DfsStorageClassUpdateReqDfsStorageClass) {
	o.DfsStorageClass = v
}

func (o DfsStorageClassUpdateReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsStorageClassUpdateReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dfs_storage_class"] = o.DfsStorageClass
	return toSerialize, nil
}

func (o *DfsStorageClassUpdateReq) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dfs_storage_class",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDfsStorageClassUpdateReq := _DfsStorageClassUpdateReq{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDfsStorageClassUpdateReq)

	if err != nil {
		return err
	}

	*o = DfsStorageClassUpdateReq(varDfsStorageClassUpdateReq)

	return err
}

type NullableDfsStorageClassUpdateReq struct {
	value *DfsStorageClassUpdateReq
	isSet bool
}

func (v NullableDfsStorageClassUpdateReq) Get() *DfsStorageClassUpdateReq {
	return v.value
}

func (v *NullableDfsStorageClassUpdateReq) Set(val *DfsStorageClassUpdateReq) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsStorageClassUpdateReq) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsStorageClassUpdateReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsStorageClassUpdateReq(val *DfsStorageClassUpdateReq) *NullableDfsStorageClassUpdateReq {
	return &NullableDfsStorageClassUpdateReq{value: val, isSet: true}
}

func (v NullableDfsStorageClassUpdateReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsStorageClassUpdateReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


