/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FSActiveDirectoryCreateReqInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FSActiveDirectoryCreateReqInfo{}

// FSActiveDirectoryCreateReqInfo struct for FSActiveDirectoryCreateReqInfo
type FSActiveDirectoryCreateReqInfo struct {
	// ip of dns server
	Ip *string `json:"ip,omitempty"`
	// name of active directory
	Name string `json:"name"`
	// password of active directory
	Password string `json:"password"`
	// realm of active directory
	Realm string `json:"realm"`
	// username of active directory
	Username string `json:"username"`
	// workgroup of active directory
	Workgroup string `json:"workgroup"`
}

type _FSActiveDirectoryCreateReqInfo FSActiveDirectoryCreateReqInfo

// NewFSActiveDirectoryCreateReqInfo instantiates a new FSActiveDirectoryCreateReqInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFSActiveDirectoryCreateReqInfo(name string, password string, realm string, username string, workgroup string) *FSActiveDirectoryCreateReqInfo {
	this := FSActiveDirectoryCreateReqInfo{}
	this.Name = name
	this.Password = password
	this.Realm = realm
	this.Username = username
	this.Workgroup = workgroup
	return &this
}

// NewFSActiveDirectoryCreateReqInfoWithDefaults instantiates a new FSActiveDirectoryCreateReqInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFSActiveDirectoryCreateReqInfoWithDefaults() *FSActiveDirectoryCreateReqInfo {
	this := FSActiveDirectoryCreateReqInfo{}
	return &this
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *FSActiveDirectoryCreateReqInfo) GetIp() string {
	if o == nil || IsNil(o.Ip) {
		var ret string
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSActiveDirectoryCreateReqInfo) GetIpOk() (*string, bool) {
	if o == nil || IsNil(o.Ip) {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *FSActiveDirectoryCreateReqInfo) HasIp() bool {
	if o != nil && !IsNil(o.Ip) {
		return true
	}

	return false
}

// SetIp gets a reference to the given string and assigns it to the Ip field.
func (o *FSActiveDirectoryCreateReqInfo) SetIp(v string) {
	o.Ip = &v
}

// GetName returns the Name field value
func (o *FSActiveDirectoryCreateReqInfo) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FSActiveDirectoryCreateReqInfo) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FSActiveDirectoryCreateReqInfo) SetName(v string) {
	o.Name = v
}

// GetPassword returns the Password field value
func (o *FSActiveDirectoryCreateReqInfo) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *FSActiveDirectoryCreateReqInfo) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *FSActiveDirectoryCreateReqInfo) SetPassword(v string) {
	o.Password = v
}

// GetRealm returns the Realm field value
func (o *FSActiveDirectoryCreateReqInfo) GetRealm() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Realm
}

// GetRealmOk returns a tuple with the Realm field value
// and a boolean to check if the value has been set.
func (o *FSActiveDirectoryCreateReqInfo) GetRealmOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Realm, true
}

// SetRealm sets field value
func (o *FSActiveDirectoryCreateReqInfo) SetRealm(v string) {
	o.Realm = v
}

// GetUsername returns the Username field value
func (o *FSActiveDirectoryCreateReqInfo) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *FSActiveDirectoryCreateReqInfo) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *FSActiveDirectoryCreateReqInfo) SetUsername(v string) {
	o.Username = v
}

// GetWorkgroup returns the Workgroup field value
func (o *FSActiveDirectoryCreateReqInfo) GetWorkgroup() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Workgroup
}

// GetWorkgroupOk returns a tuple with the Workgroup field value
// and a boolean to check if the value has been set.
func (o *FSActiveDirectoryCreateReqInfo) GetWorkgroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Workgroup, true
}

// SetWorkgroup sets field value
func (o *FSActiveDirectoryCreateReqInfo) SetWorkgroup(v string) {
	o.Workgroup = v
}

func (o FSActiveDirectoryCreateReqInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FSActiveDirectoryCreateReqInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ip) {
		toSerialize["ip"] = o.Ip
	}
	toSerialize["name"] = o.Name
	toSerialize["password"] = o.Password
	toSerialize["realm"] = o.Realm
	toSerialize["username"] = o.Username
	toSerialize["workgroup"] = o.Workgroup
	return toSerialize, nil
}

func (o *FSActiveDirectoryCreateReqInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"password",
		"realm",
		"username",
		"workgroup",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFSActiveDirectoryCreateReqInfo := _FSActiveDirectoryCreateReqInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFSActiveDirectoryCreateReqInfo)

	if err != nil {
		return err
	}

	*o = FSActiveDirectoryCreateReqInfo(varFSActiveDirectoryCreateReqInfo)

	return err
}

type NullableFSActiveDirectoryCreateReqInfo struct {
	value *FSActiveDirectoryCreateReqInfo
	isSet bool
}

func (v NullableFSActiveDirectoryCreateReqInfo) Get() *FSActiveDirectoryCreateReqInfo {
	return v.value
}

func (v *NullableFSActiveDirectoryCreateReqInfo) Set(val *FSActiveDirectoryCreateReqInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableFSActiveDirectoryCreateReqInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableFSActiveDirectoryCreateReqInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFSActiveDirectoryCreateReqInfo(val *FSActiveDirectoryCreateReqInfo) *NullableFSActiveDirectoryCreateReqInfo {
	return &NullableFSActiveDirectoryCreateReqInfo{value: val, isSet: true}
}

func (v NullableFSActiveDirectoryCreateReqInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFSActiveDirectoryCreateReqInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


