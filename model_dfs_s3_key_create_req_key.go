/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DfsS3KeyCreateReqKey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsS3KeyCreateReqKey{}

// DfsS3KeyCreateReqKey struct for DfsS3KeyCreateReqKey
type DfsS3KeyCreateReqKey struct {
	// access key
	AccessKey string `json:"access_key"`
	// secret key
	SecretKey *string `json:"secret_key,omitempty"`
	// user id
	UserId int64 `json:"user_id"`
}

type _DfsS3KeyCreateReqKey DfsS3KeyCreateReqKey

// NewDfsS3KeyCreateReqKey instantiates a new DfsS3KeyCreateReqKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsS3KeyCreateReqKey(accessKey string, userId int64) *DfsS3KeyCreateReqKey {
	this := DfsS3KeyCreateReqKey{}
	this.AccessKey = accessKey
	this.UserId = userId
	return &this
}

// NewDfsS3KeyCreateReqKeyWithDefaults instantiates a new DfsS3KeyCreateReqKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsS3KeyCreateReqKeyWithDefaults() *DfsS3KeyCreateReqKey {
	this := DfsS3KeyCreateReqKey{}
	return &this
}

// GetAccessKey returns the AccessKey field value
func (o *DfsS3KeyCreateReqKey) GetAccessKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccessKey
}

// GetAccessKeyOk returns a tuple with the AccessKey field value
// and a boolean to check if the value has been set.
func (o *DfsS3KeyCreateReqKey) GetAccessKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessKey, true
}

// SetAccessKey sets field value
func (o *DfsS3KeyCreateReqKey) SetAccessKey(v string) {
	o.AccessKey = v
}

// GetSecretKey returns the SecretKey field value if set, zero value otherwise.
func (o *DfsS3KeyCreateReqKey) GetSecretKey() string {
	if o == nil || IsNil(o.SecretKey) {
		var ret string
		return ret
	}
	return *o.SecretKey
}

// GetSecretKeyOk returns a tuple with the SecretKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsS3KeyCreateReqKey) GetSecretKeyOk() (*string, bool) {
	if o == nil || IsNil(o.SecretKey) {
		return nil, false
	}
	return o.SecretKey, true
}

// HasSecretKey returns a boolean if a field has been set.
func (o *DfsS3KeyCreateReqKey) HasSecretKey() bool {
	if o != nil && !IsNil(o.SecretKey) {
		return true
	}

	return false
}

// SetSecretKey gets a reference to the given string and assigns it to the SecretKey field.
func (o *DfsS3KeyCreateReqKey) SetSecretKey(v string) {
	o.SecretKey = &v
}

// GetUserId returns the UserId field value
func (o *DfsS3KeyCreateReqKey) GetUserId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *DfsS3KeyCreateReqKey) GetUserIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *DfsS3KeyCreateReqKey) SetUserId(v int64) {
	o.UserId = v
}

func (o DfsS3KeyCreateReqKey) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsS3KeyCreateReqKey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["access_key"] = o.AccessKey
	if !IsNil(o.SecretKey) {
		toSerialize["secret_key"] = o.SecretKey
	}
	toSerialize["user_id"] = o.UserId
	return toSerialize, nil
}

func (o *DfsS3KeyCreateReqKey) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"access_key",
		"user_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDfsS3KeyCreateReqKey := _DfsS3KeyCreateReqKey{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDfsS3KeyCreateReqKey)

	if err != nil {
		return err
	}

	*o = DfsS3KeyCreateReqKey(varDfsS3KeyCreateReqKey)

	return err
}

type NullableDfsS3KeyCreateReqKey struct {
	value *DfsS3KeyCreateReqKey
	isSet bool
}

func (v NullableDfsS3KeyCreateReqKey) Get() *DfsS3KeyCreateReqKey {
	return v.value
}

func (v *NullableDfsS3KeyCreateReqKey) Set(val *DfsS3KeyCreateReqKey) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsS3KeyCreateReqKey) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsS3KeyCreateReqKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsS3KeyCreateReqKey(val *DfsS3KeyCreateReqKey) *NullableDfsS3KeyCreateReqKey {
	return &NullableDfsS3KeyCreateReqKey{value: val, isSet: true}
}

func (v NullableDfsS3KeyCreateReqKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsS3KeyCreateReqKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


