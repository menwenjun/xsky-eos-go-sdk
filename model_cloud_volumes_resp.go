/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CloudVolumesResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CloudVolumesResp{}

// CloudVolumesResp struct for CloudVolumesResp
type CloudVolumesResp struct {
	// cloud volumes
	CloudVolumes []CloudVolume `json:"cloud_volumes,omitempty"`
}

// NewCloudVolumesResp instantiates a new CloudVolumesResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCloudVolumesResp() *CloudVolumesResp {
	this := CloudVolumesResp{}
	return &this
}

// NewCloudVolumesRespWithDefaults instantiates a new CloudVolumesResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCloudVolumesRespWithDefaults() *CloudVolumesResp {
	this := CloudVolumesResp{}
	return &this
}

// GetCloudVolumes returns the CloudVolumes field value if set, zero value otherwise.
func (o *CloudVolumesResp) GetCloudVolumes() []CloudVolume {
	if o == nil || IsNil(o.CloudVolumes) {
		var ret []CloudVolume
		return ret
	}
	return o.CloudVolumes
}

// GetCloudVolumesOk returns a tuple with the CloudVolumes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudVolumesResp) GetCloudVolumesOk() ([]CloudVolume, bool) {
	if o == nil || IsNil(o.CloudVolumes) {
		return nil, false
	}
	return o.CloudVolumes, true
}

// HasCloudVolumes returns a boolean if a field has been set.
func (o *CloudVolumesResp) HasCloudVolumes() bool {
	if o != nil && !IsNil(o.CloudVolumes) {
		return true
	}

	return false
}

// SetCloudVolumes gets a reference to the given []CloudVolume and assigns it to the CloudVolumes field.
func (o *CloudVolumesResp) SetCloudVolumes(v []CloudVolume) {
	o.CloudVolumes = v
}

func (o CloudVolumesResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CloudVolumesResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CloudVolumes) {
		toSerialize["cloud_volumes"] = o.CloudVolumes
	}
	return toSerialize, nil
}

type NullableCloudVolumesResp struct {
	value *CloudVolumesResp
	isSet bool
}

func (v NullableCloudVolumesResp) Get() *CloudVolumesResp {
	return v.value
}

func (v *NullableCloudVolumesResp) Set(val *CloudVolumesResp) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudVolumesResp) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudVolumesResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudVolumesResp(val *CloudVolumesResp) *NullableCloudVolumesResp {
	return &NullableCloudVolumesResp{value: val, isSet: true}
}

func (v NullableCloudVolumesResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudVolumesResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


