/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DfsDirectoryResultResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsDirectoryResultResp{}

// DfsDirectoryResultResp struct for DfsDirectoryResultResp
type DfsDirectoryResultResp struct {
	Directory DfsFile `json:"directory"`
	// operation result
	Result string `json:"result"`
}

type _DfsDirectoryResultResp DfsDirectoryResultResp

// NewDfsDirectoryResultResp instantiates a new DfsDirectoryResultResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsDirectoryResultResp(directory DfsFile, result string) *DfsDirectoryResultResp {
	this := DfsDirectoryResultResp{}
	this.Directory = directory
	this.Result = result
	return &this
}

// NewDfsDirectoryResultRespWithDefaults instantiates a new DfsDirectoryResultResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsDirectoryResultRespWithDefaults() *DfsDirectoryResultResp {
	this := DfsDirectoryResultResp{}
	return &this
}

// GetDirectory returns the Directory field value
func (o *DfsDirectoryResultResp) GetDirectory() DfsFile {
	if o == nil {
		var ret DfsFile
		return ret
	}

	return o.Directory
}

// GetDirectoryOk returns a tuple with the Directory field value
// and a boolean to check if the value has been set.
func (o *DfsDirectoryResultResp) GetDirectoryOk() (*DfsFile, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Directory, true
}

// SetDirectory sets field value
func (o *DfsDirectoryResultResp) SetDirectory(v DfsFile) {
	o.Directory = v
}

// GetResult returns the Result field value
func (o *DfsDirectoryResultResp) GetResult() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Result
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
func (o *DfsDirectoryResultResp) GetResultOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Result, true
}

// SetResult sets field value
func (o *DfsDirectoryResultResp) SetResult(v string) {
	o.Result = v
}

func (o DfsDirectoryResultResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsDirectoryResultResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["directory"] = o.Directory
	toSerialize["result"] = o.Result
	return toSerialize, nil
}

func (o *DfsDirectoryResultResp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"directory",
		"result",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDfsDirectoryResultResp := _DfsDirectoryResultResp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDfsDirectoryResultResp)

	if err != nil {
		return err
	}

	*o = DfsDirectoryResultResp(varDfsDirectoryResultResp)

	return err
}

type NullableDfsDirectoryResultResp struct {
	value *DfsDirectoryResultResp
	isSet bool
}

func (v NullableDfsDirectoryResultResp) Get() *DfsDirectoryResultResp {
	return v.value
}

func (v *NullableDfsDirectoryResultResp) Set(val *DfsDirectoryResultResp) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsDirectoryResultResp) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsDirectoryResultResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsDirectoryResultResp(val *DfsDirectoryResultResp) *NullableDfsDirectoryResultResp {
	return &NullableDfsDirectoryResultResp{value: val, isSet: true}
}

func (v NullableDfsDirectoryResultResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsDirectoryResultResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


