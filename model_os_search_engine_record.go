/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the OSSearchEngineRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OSSearchEngineRecord{}

// OSSearchEngineRecord OSSearchEngineRecord is used to combine OSSearchEngine and OSSearchEngineStat
type OSSearchEngineRecord struct {
	ActionStatus *string `json:"action_status,omitempty"`
	AllocatedSize *int64 `json:"allocated_size,omitempty"`
	Cluster *ClusterNestview `json:"cluster,omitempty"`
	Create *time.Time `json:"create,omitempty"`
	GatewayDataSize *int64 `json:"gateway_data_size,omitempty"`
	GatewayFlavor *VMFlavorNestview `json:"gateway_flavor,omitempty"`
	GatewayHttpPort *int64 `json:"gateway_http_port,omitempty"`
	GatewayTransportPort *int64 `json:"gateway_transport_port,omitempty"`
	Id *int64 `json:"id,omitempty"`
	SearchS3LoadBalancerGroup *S3LoadBalancerGroupNestview `json:"search_s3_load_balancer_group,omitempty"`
	Size *int64 `json:"size,omitempty"`
	Status *string `json:"status,omitempty"`
	SyncS3LoadBalancerGroup *S3LoadBalancerGroupNestview `json:"sync_s3_load_balancer_group,omitempty"`
	Update *time.Time `json:"update,omitempty"`
	Samples []OSSearchEngineStat `json:"samples,omitempty"`
}

// NewOSSearchEngineRecord instantiates a new OSSearchEngineRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOSSearchEngineRecord() *OSSearchEngineRecord {
	this := OSSearchEngineRecord{}
	return &this
}

// NewOSSearchEngineRecordWithDefaults instantiates a new OSSearchEngineRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOSSearchEngineRecordWithDefaults() *OSSearchEngineRecord {
	this := OSSearchEngineRecord{}
	return &this
}

// GetActionStatus returns the ActionStatus field value if set, zero value otherwise.
func (o *OSSearchEngineRecord) GetActionStatus() string {
	if o == nil || IsNil(o.ActionStatus) {
		var ret string
		return ret
	}
	return *o.ActionStatus
}

// GetActionStatusOk returns a tuple with the ActionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSSearchEngineRecord) GetActionStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ActionStatus) {
		return nil, false
	}
	return o.ActionStatus, true
}

// HasActionStatus returns a boolean if a field has been set.
func (o *OSSearchEngineRecord) HasActionStatus() bool {
	if o != nil && !IsNil(o.ActionStatus) {
		return true
	}

	return false
}

// SetActionStatus gets a reference to the given string and assigns it to the ActionStatus field.
func (o *OSSearchEngineRecord) SetActionStatus(v string) {
	o.ActionStatus = &v
}

// GetAllocatedSize returns the AllocatedSize field value if set, zero value otherwise.
func (o *OSSearchEngineRecord) GetAllocatedSize() int64 {
	if o == nil || IsNil(o.AllocatedSize) {
		var ret int64
		return ret
	}
	return *o.AllocatedSize
}

// GetAllocatedSizeOk returns a tuple with the AllocatedSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSSearchEngineRecord) GetAllocatedSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.AllocatedSize) {
		return nil, false
	}
	return o.AllocatedSize, true
}

// HasAllocatedSize returns a boolean if a field has been set.
func (o *OSSearchEngineRecord) HasAllocatedSize() bool {
	if o != nil && !IsNil(o.AllocatedSize) {
		return true
	}

	return false
}

// SetAllocatedSize gets a reference to the given int64 and assigns it to the AllocatedSize field.
func (o *OSSearchEngineRecord) SetAllocatedSize(v int64) {
	o.AllocatedSize = &v
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *OSSearchEngineRecord) GetCluster() ClusterNestview {
	if o == nil || IsNil(o.Cluster) {
		var ret ClusterNestview
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSSearchEngineRecord) GetClusterOk() (*ClusterNestview, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *OSSearchEngineRecord) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given ClusterNestview and assigns it to the Cluster field.
func (o *OSSearchEngineRecord) SetCluster(v ClusterNestview) {
	o.Cluster = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *OSSearchEngineRecord) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSSearchEngineRecord) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *OSSearchEngineRecord) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *OSSearchEngineRecord) SetCreate(v time.Time) {
	o.Create = &v
}

// GetGatewayDataSize returns the GatewayDataSize field value if set, zero value otherwise.
func (o *OSSearchEngineRecord) GetGatewayDataSize() int64 {
	if o == nil || IsNil(o.GatewayDataSize) {
		var ret int64
		return ret
	}
	return *o.GatewayDataSize
}

// GetGatewayDataSizeOk returns a tuple with the GatewayDataSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSSearchEngineRecord) GetGatewayDataSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.GatewayDataSize) {
		return nil, false
	}
	return o.GatewayDataSize, true
}

// HasGatewayDataSize returns a boolean if a field has been set.
func (o *OSSearchEngineRecord) HasGatewayDataSize() bool {
	if o != nil && !IsNil(o.GatewayDataSize) {
		return true
	}

	return false
}

// SetGatewayDataSize gets a reference to the given int64 and assigns it to the GatewayDataSize field.
func (o *OSSearchEngineRecord) SetGatewayDataSize(v int64) {
	o.GatewayDataSize = &v
}

// GetGatewayFlavor returns the GatewayFlavor field value if set, zero value otherwise.
func (o *OSSearchEngineRecord) GetGatewayFlavor() VMFlavorNestview {
	if o == nil || IsNil(o.GatewayFlavor) {
		var ret VMFlavorNestview
		return ret
	}
	return *o.GatewayFlavor
}

// GetGatewayFlavorOk returns a tuple with the GatewayFlavor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSSearchEngineRecord) GetGatewayFlavorOk() (*VMFlavorNestview, bool) {
	if o == nil || IsNil(o.GatewayFlavor) {
		return nil, false
	}
	return o.GatewayFlavor, true
}

// HasGatewayFlavor returns a boolean if a field has been set.
func (o *OSSearchEngineRecord) HasGatewayFlavor() bool {
	if o != nil && !IsNil(o.GatewayFlavor) {
		return true
	}

	return false
}

// SetGatewayFlavor gets a reference to the given VMFlavorNestview and assigns it to the GatewayFlavor field.
func (o *OSSearchEngineRecord) SetGatewayFlavor(v VMFlavorNestview) {
	o.GatewayFlavor = &v
}

// GetGatewayHttpPort returns the GatewayHttpPort field value if set, zero value otherwise.
func (o *OSSearchEngineRecord) GetGatewayHttpPort() int64 {
	if o == nil || IsNil(o.GatewayHttpPort) {
		var ret int64
		return ret
	}
	return *o.GatewayHttpPort
}

// GetGatewayHttpPortOk returns a tuple with the GatewayHttpPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSSearchEngineRecord) GetGatewayHttpPortOk() (*int64, bool) {
	if o == nil || IsNil(o.GatewayHttpPort) {
		return nil, false
	}
	return o.GatewayHttpPort, true
}

// HasGatewayHttpPort returns a boolean if a field has been set.
func (o *OSSearchEngineRecord) HasGatewayHttpPort() bool {
	if o != nil && !IsNil(o.GatewayHttpPort) {
		return true
	}

	return false
}

// SetGatewayHttpPort gets a reference to the given int64 and assigns it to the GatewayHttpPort field.
func (o *OSSearchEngineRecord) SetGatewayHttpPort(v int64) {
	o.GatewayHttpPort = &v
}

// GetGatewayTransportPort returns the GatewayTransportPort field value if set, zero value otherwise.
func (o *OSSearchEngineRecord) GetGatewayTransportPort() int64 {
	if o == nil || IsNil(o.GatewayTransportPort) {
		var ret int64
		return ret
	}
	return *o.GatewayTransportPort
}

// GetGatewayTransportPortOk returns a tuple with the GatewayTransportPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSSearchEngineRecord) GetGatewayTransportPortOk() (*int64, bool) {
	if o == nil || IsNil(o.GatewayTransportPort) {
		return nil, false
	}
	return o.GatewayTransportPort, true
}

// HasGatewayTransportPort returns a boolean if a field has been set.
func (o *OSSearchEngineRecord) HasGatewayTransportPort() bool {
	if o != nil && !IsNil(o.GatewayTransportPort) {
		return true
	}

	return false
}

// SetGatewayTransportPort gets a reference to the given int64 and assigns it to the GatewayTransportPort field.
func (o *OSSearchEngineRecord) SetGatewayTransportPort(v int64) {
	o.GatewayTransportPort = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OSSearchEngineRecord) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSSearchEngineRecord) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OSSearchEngineRecord) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *OSSearchEngineRecord) SetId(v int64) {
	o.Id = &v
}

// GetSearchS3LoadBalancerGroup returns the SearchS3LoadBalancerGroup field value if set, zero value otherwise.
func (o *OSSearchEngineRecord) GetSearchS3LoadBalancerGroup() S3LoadBalancerGroupNestview {
	if o == nil || IsNil(o.SearchS3LoadBalancerGroup) {
		var ret S3LoadBalancerGroupNestview
		return ret
	}
	return *o.SearchS3LoadBalancerGroup
}

// GetSearchS3LoadBalancerGroupOk returns a tuple with the SearchS3LoadBalancerGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSSearchEngineRecord) GetSearchS3LoadBalancerGroupOk() (*S3LoadBalancerGroupNestview, bool) {
	if o == nil || IsNil(o.SearchS3LoadBalancerGroup) {
		return nil, false
	}
	return o.SearchS3LoadBalancerGroup, true
}

// HasSearchS3LoadBalancerGroup returns a boolean if a field has been set.
func (o *OSSearchEngineRecord) HasSearchS3LoadBalancerGroup() bool {
	if o != nil && !IsNil(o.SearchS3LoadBalancerGroup) {
		return true
	}

	return false
}

// SetSearchS3LoadBalancerGroup gets a reference to the given S3LoadBalancerGroupNestview and assigns it to the SearchS3LoadBalancerGroup field.
func (o *OSSearchEngineRecord) SetSearchS3LoadBalancerGroup(v S3LoadBalancerGroupNestview) {
	o.SearchS3LoadBalancerGroup = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *OSSearchEngineRecord) GetSize() int64 {
	if o == nil || IsNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSSearchEngineRecord) GetSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *OSSearchEngineRecord) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *OSSearchEngineRecord) SetSize(v int64) {
	o.Size = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *OSSearchEngineRecord) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSSearchEngineRecord) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *OSSearchEngineRecord) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *OSSearchEngineRecord) SetStatus(v string) {
	o.Status = &v
}

// GetSyncS3LoadBalancerGroup returns the SyncS3LoadBalancerGroup field value if set, zero value otherwise.
func (o *OSSearchEngineRecord) GetSyncS3LoadBalancerGroup() S3LoadBalancerGroupNestview {
	if o == nil || IsNil(o.SyncS3LoadBalancerGroup) {
		var ret S3LoadBalancerGroupNestview
		return ret
	}
	return *o.SyncS3LoadBalancerGroup
}

// GetSyncS3LoadBalancerGroupOk returns a tuple with the SyncS3LoadBalancerGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSSearchEngineRecord) GetSyncS3LoadBalancerGroupOk() (*S3LoadBalancerGroupNestview, bool) {
	if o == nil || IsNil(o.SyncS3LoadBalancerGroup) {
		return nil, false
	}
	return o.SyncS3LoadBalancerGroup, true
}

// HasSyncS3LoadBalancerGroup returns a boolean if a field has been set.
func (o *OSSearchEngineRecord) HasSyncS3LoadBalancerGroup() bool {
	if o != nil && !IsNil(o.SyncS3LoadBalancerGroup) {
		return true
	}

	return false
}

// SetSyncS3LoadBalancerGroup gets a reference to the given S3LoadBalancerGroupNestview and assigns it to the SyncS3LoadBalancerGroup field.
func (o *OSSearchEngineRecord) SetSyncS3LoadBalancerGroup(v S3LoadBalancerGroupNestview) {
	o.SyncS3LoadBalancerGroup = &v
}

// GetUpdate returns the Update field value if set, zero value otherwise.
func (o *OSSearchEngineRecord) GetUpdate() time.Time {
	if o == nil || IsNil(o.Update) {
		var ret time.Time
		return ret
	}
	return *o.Update
}

// GetUpdateOk returns a tuple with the Update field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSSearchEngineRecord) GetUpdateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Update) {
		return nil, false
	}
	return o.Update, true
}

// HasUpdate returns a boolean if a field has been set.
func (o *OSSearchEngineRecord) HasUpdate() bool {
	if o != nil && !IsNil(o.Update) {
		return true
	}

	return false
}

// SetUpdate gets a reference to the given time.Time and assigns it to the Update field.
func (o *OSSearchEngineRecord) SetUpdate(v time.Time) {
	o.Update = &v
}

// GetSamples returns the Samples field value if set, zero value otherwise.
func (o *OSSearchEngineRecord) GetSamples() []OSSearchEngineStat {
	if o == nil || IsNil(o.Samples) {
		var ret []OSSearchEngineStat
		return ret
	}
	return o.Samples
}

// GetSamplesOk returns a tuple with the Samples field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSSearchEngineRecord) GetSamplesOk() ([]OSSearchEngineStat, bool) {
	if o == nil || IsNil(o.Samples) {
		return nil, false
	}
	return o.Samples, true
}

// HasSamples returns a boolean if a field has been set.
func (o *OSSearchEngineRecord) HasSamples() bool {
	if o != nil && !IsNil(o.Samples) {
		return true
	}

	return false
}

// SetSamples gets a reference to the given []OSSearchEngineStat and assigns it to the Samples field.
func (o *OSSearchEngineRecord) SetSamples(v []OSSearchEngineStat) {
	o.Samples = v
}

func (o OSSearchEngineRecord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OSSearchEngineRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActionStatus) {
		toSerialize["action_status"] = o.ActionStatus
	}
	if !IsNil(o.AllocatedSize) {
		toSerialize["allocated_size"] = o.AllocatedSize
	}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.GatewayDataSize) {
		toSerialize["gateway_data_size"] = o.GatewayDataSize
	}
	if !IsNil(o.GatewayFlavor) {
		toSerialize["gateway_flavor"] = o.GatewayFlavor
	}
	if !IsNil(o.GatewayHttpPort) {
		toSerialize["gateway_http_port"] = o.GatewayHttpPort
	}
	if !IsNil(o.GatewayTransportPort) {
		toSerialize["gateway_transport_port"] = o.GatewayTransportPort
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.SearchS3LoadBalancerGroup) {
		toSerialize["search_s3_load_balancer_group"] = o.SearchS3LoadBalancerGroup
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.SyncS3LoadBalancerGroup) {
		toSerialize["sync_s3_load_balancer_group"] = o.SyncS3LoadBalancerGroup
	}
	if !IsNil(o.Update) {
		toSerialize["update"] = o.Update
	}
	if !IsNil(o.Samples) {
		toSerialize["samples"] = o.Samples
	}
	return toSerialize, nil
}

type NullableOSSearchEngineRecord struct {
	value *OSSearchEngineRecord
	isSet bool
}

func (v NullableOSSearchEngineRecord) Get() *OSSearchEngineRecord {
	return v.value
}

func (v *NullableOSSearchEngineRecord) Set(val *OSSearchEngineRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableOSSearchEngineRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableOSSearchEngineRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOSSearchEngineRecord(val *OSSearchEngineRecord) *NullableOSSearchEngineRecord {
	return &NullableOSSearchEngineRecord{value: val, isSet: true}
}

func (v NullableOSSearchEngineRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOSSearchEngineRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


