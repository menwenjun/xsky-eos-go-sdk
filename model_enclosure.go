/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Enclosure type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Enclosure{}

// Enclosure Enclosure defines enclosure specification
type Enclosure struct {
	Ids []int64 `json:"ids,omitempty"`
	Order *string `json:"order,omitempty"`
	Position *string `json:"position,omitempty"`
	SlotNum *int64 `json:"slot_num,omitempty"`
	StartSlot *int64 `json:"start_slot,omitempty"`
}

// NewEnclosure instantiates a new Enclosure object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnclosure() *Enclosure {
	this := Enclosure{}
	return &this
}

// NewEnclosureWithDefaults instantiates a new Enclosure object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnclosureWithDefaults() *Enclosure {
	this := Enclosure{}
	return &this
}

// GetIds returns the Ids field value if set, zero value otherwise.
func (o *Enclosure) GetIds() []int64 {
	if o == nil || IsNil(o.Ids) {
		var ret []int64
		return ret
	}
	return o.Ids
}

// GetIdsOk returns a tuple with the Ids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Enclosure) GetIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.Ids) {
		return nil, false
	}
	return o.Ids, true
}

// HasIds returns a boolean if a field has been set.
func (o *Enclosure) HasIds() bool {
	if o != nil && !IsNil(o.Ids) {
		return true
	}

	return false
}

// SetIds gets a reference to the given []int64 and assigns it to the Ids field.
func (o *Enclosure) SetIds(v []int64) {
	o.Ids = v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *Enclosure) GetOrder() string {
	if o == nil || IsNil(o.Order) {
		var ret string
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Enclosure) GetOrderOk() (*string, bool) {
	if o == nil || IsNil(o.Order) {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *Enclosure) HasOrder() bool {
	if o != nil && !IsNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given string and assigns it to the Order field.
func (o *Enclosure) SetOrder(v string) {
	o.Order = &v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *Enclosure) GetPosition() string {
	if o == nil || IsNil(o.Position) {
		var ret string
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Enclosure) GetPositionOk() (*string, bool) {
	if o == nil || IsNil(o.Position) {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *Enclosure) HasPosition() bool {
	if o != nil && !IsNil(o.Position) {
		return true
	}

	return false
}

// SetPosition gets a reference to the given string and assigns it to the Position field.
func (o *Enclosure) SetPosition(v string) {
	o.Position = &v
}

// GetSlotNum returns the SlotNum field value if set, zero value otherwise.
func (o *Enclosure) GetSlotNum() int64 {
	if o == nil || IsNil(o.SlotNum) {
		var ret int64
		return ret
	}
	return *o.SlotNum
}

// GetSlotNumOk returns a tuple with the SlotNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Enclosure) GetSlotNumOk() (*int64, bool) {
	if o == nil || IsNil(o.SlotNum) {
		return nil, false
	}
	return o.SlotNum, true
}

// HasSlotNum returns a boolean if a field has been set.
func (o *Enclosure) HasSlotNum() bool {
	if o != nil && !IsNil(o.SlotNum) {
		return true
	}

	return false
}

// SetSlotNum gets a reference to the given int64 and assigns it to the SlotNum field.
func (o *Enclosure) SetSlotNum(v int64) {
	o.SlotNum = &v
}

// GetStartSlot returns the StartSlot field value if set, zero value otherwise.
func (o *Enclosure) GetStartSlot() int64 {
	if o == nil || IsNil(o.StartSlot) {
		var ret int64
		return ret
	}
	return *o.StartSlot
}

// GetStartSlotOk returns a tuple with the StartSlot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Enclosure) GetStartSlotOk() (*int64, bool) {
	if o == nil || IsNil(o.StartSlot) {
		return nil, false
	}
	return o.StartSlot, true
}

// HasStartSlot returns a boolean if a field has been set.
func (o *Enclosure) HasStartSlot() bool {
	if o != nil && !IsNil(o.StartSlot) {
		return true
	}

	return false
}

// SetStartSlot gets a reference to the given int64 and assigns it to the StartSlot field.
func (o *Enclosure) SetStartSlot(v int64) {
	o.StartSlot = &v
}

func (o Enclosure) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Enclosure) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ids) {
		toSerialize["ids"] = o.Ids
	}
	if !IsNil(o.Order) {
		toSerialize["order"] = o.Order
	}
	if !IsNil(o.Position) {
		toSerialize["position"] = o.Position
	}
	if !IsNil(o.SlotNum) {
		toSerialize["slot_num"] = o.SlotNum
	}
	if !IsNil(o.StartSlot) {
		toSerialize["start_slot"] = o.StartSlot
	}
	return toSerialize, nil
}

type NullableEnclosure struct {
	value *Enclosure
	isSet bool
}

func (v NullableEnclosure) Get() *Enclosure {
	return v.value
}

func (v *NullableEnclosure) Set(val *Enclosure) {
	v.value = val
	v.isSet = true
}

func (v NullableEnclosure) IsSet() bool {
	return v.isSet
}

func (v *NullableEnclosure) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnclosure(val *Enclosure) *NullableEnclosure {
	return &NullableEnclosure{value: val, isSet: true}
}

func (v NullableEnclosure) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnclosure) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


