/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DfsSMBWindowsACLSet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsSMBWindowsACLSet{}

// DfsSMBWindowsACLSet struct for DfsSMBWindowsACLSet
type DfsSMBWindowsACLSet struct {
	// type of acl like allowed, denied
	AceType string `json:"ace_type"`
	// api action type like add, modify, delete
	ActionType string `json:"action_type"`
	// inherited information
	ApplyTo string `json:"apply_to"`
	// fs active directory id
	FsActiveDirectoryId *int64 `json:"fs_active_directory_id,omitempty"`
	// principal access permissions
	Permissions []string `json:"permissions"`
	// the entity of performing access control
	Principal *string `json:"principal,omitempty"`
	// principal type like Everyone, user, user_group
	PrincipalType string `json:"principal_type"`
	// security type like local, ad
	SecurityType *string `json:"security_type,omitempty"`
	// local fs user group id
	UserGroupId *int64 `json:"user_group_id,omitempty"`
	// domain user group name
	UserGroupName *string `json:"user_group_name,omitempty"`
	// local fs user id
	UserId *int64 `json:"user_id,omitempty"`
	// domain username
	Username *string `json:"username,omitempty"`
}

type _DfsSMBWindowsACLSet DfsSMBWindowsACLSet

// NewDfsSMBWindowsACLSet instantiates a new DfsSMBWindowsACLSet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsSMBWindowsACLSet(aceType string, actionType string, applyTo string, permissions []string, principalType string) *DfsSMBWindowsACLSet {
	this := DfsSMBWindowsACLSet{}
	this.AceType = aceType
	this.ActionType = actionType
	this.ApplyTo = applyTo
	this.Permissions = permissions
	this.PrincipalType = principalType
	return &this
}

// NewDfsSMBWindowsACLSetWithDefaults instantiates a new DfsSMBWindowsACLSet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsSMBWindowsACLSetWithDefaults() *DfsSMBWindowsACLSet {
	this := DfsSMBWindowsACLSet{}
	return &this
}

// GetAceType returns the AceType field value
func (o *DfsSMBWindowsACLSet) GetAceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AceType
}

// GetAceTypeOk returns a tuple with the AceType field value
// and a boolean to check if the value has been set.
func (o *DfsSMBWindowsACLSet) GetAceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AceType, true
}

// SetAceType sets field value
func (o *DfsSMBWindowsACLSet) SetAceType(v string) {
	o.AceType = v
}

// GetActionType returns the ActionType field value
func (o *DfsSMBWindowsACLSet) GetActionType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ActionType
}

// GetActionTypeOk returns a tuple with the ActionType field value
// and a boolean to check if the value has been set.
func (o *DfsSMBWindowsACLSet) GetActionTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActionType, true
}

// SetActionType sets field value
func (o *DfsSMBWindowsACLSet) SetActionType(v string) {
	o.ActionType = v
}

// GetApplyTo returns the ApplyTo field value
func (o *DfsSMBWindowsACLSet) GetApplyTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApplyTo
}

// GetApplyToOk returns a tuple with the ApplyTo field value
// and a boolean to check if the value has been set.
func (o *DfsSMBWindowsACLSet) GetApplyToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApplyTo, true
}

// SetApplyTo sets field value
func (o *DfsSMBWindowsACLSet) SetApplyTo(v string) {
	o.ApplyTo = v
}

// GetFsActiveDirectoryId returns the FsActiveDirectoryId field value if set, zero value otherwise.
func (o *DfsSMBWindowsACLSet) GetFsActiveDirectoryId() int64 {
	if o == nil || IsNil(o.FsActiveDirectoryId) {
		var ret int64
		return ret
	}
	return *o.FsActiveDirectoryId
}

// GetFsActiveDirectoryIdOk returns a tuple with the FsActiveDirectoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBWindowsACLSet) GetFsActiveDirectoryIdOk() (*int64, bool) {
	if o == nil || IsNil(o.FsActiveDirectoryId) {
		return nil, false
	}
	return o.FsActiveDirectoryId, true
}

// HasFsActiveDirectoryId returns a boolean if a field has been set.
func (o *DfsSMBWindowsACLSet) HasFsActiveDirectoryId() bool {
	if o != nil && !IsNil(o.FsActiveDirectoryId) {
		return true
	}

	return false
}

// SetFsActiveDirectoryId gets a reference to the given int64 and assigns it to the FsActiveDirectoryId field.
func (o *DfsSMBWindowsACLSet) SetFsActiveDirectoryId(v int64) {
	o.FsActiveDirectoryId = &v
}

// GetPermissions returns the Permissions field value
func (o *DfsSMBWindowsACLSet) GetPermissions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value
// and a boolean to check if the value has been set.
func (o *DfsSMBWindowsACLSet) GetPermissionsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Permissions, true
}

// SetPermissions sets field value
func (o *DfsSMBWindowsACLSet) SetPermissions(v []string) {
	o.Permissions = v
}

// GetPrincipal returns the Principal field value if set, zero value otherwise.
func (o *DfsSMBWindowsACLSet) GetPrincipal() string {
	if o == nil || IsNil(o.Principal) {
		var ret string
		return ret
	}
	return *o.Principal
}

// GetPrincipalOk returns a tuple with the Principal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBWindowsACLSet) GetPrincipalOk() (*string, bool) {
	if o == nil || IsNil(o.Principal) {
		return nil, false
	}
	return o.Principal, true
}

// HasPrincipal returns a boolean if a field has been set.
func (o *DfsSMBWindowsACLSet) HasPrincipal() bool {
	if o != nil && !IsNil(o.Principal) {
		return true
	}

	return false
}

// SetPrincipal gets a reference to the given string and assigns it to the Principal field.
func (o *DfsSMBWindowsACLSet) SetPrincipal(v string) {
	o.Principal = &v
}

// GetPrincipalType returns the PrincipalType field value
func (o *DfsSMBWindowsACLSet) GetPrincipalType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PrincipalType
}

// GetPrincipalTypeOk returns a tuple with the PrincipalType field value
// and a boolean to check if the value has been set.
func (o *DfsSMBWindowsACLSet) GetPrincipalTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrincipalType, true
}

// SetPrincipalType sets field value
func (o *DfsSMBWindowsACLSet) SetPrincipalType(v string) {
	o.PrincipalType = v
}

// GetSecurityType returns the SecurityType field value if set, zero value otherwise.
func (o *DfsSMBWindowsACLSet) GetSecurityType() string {
	if o == nil || IsNil(o.SecurityType) {
		var ret string
		return ret
	}
	return *o.SecurityType
}

// GetSecurityTypeOk returns a tuple with the SecurityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBWindowsACLSet) GetSecurityTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SecurityType) {
		return nil, false
	}
	return o.SecurityType, true
}

// HasSecurityType returns a boolean if a field has been set.
func (o *DfsSMBWindowsACLSet) HasSecurityType() bool {
	if o != nil && !IsNil(o.SecurityType) {
		return true
	}

	return false
}

// SetSecurityType gets a reference to the given string and assigns it to the SecurityType field.
func (o *DfsSMBWindowsACLSet) SetSecurityType(v string) {
	o.SecurityType = &v
}

// GetUserGroupId returns the UserGroupId field value if set, zero value otherwise.
func (o *DfsSMBWindowsACLSet) GetUserGroupId() int64 {
	if o == nil || IsNil(o.UserGroupId) {
		var ret int64
		return ret
	}
	return *o.UserGroupId
}

// GetUserGroupIdOk returns a tuple with the UserGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBWindowsACLSet) GetUserGroupIdOk() (*int64, bool) {
	if o == nil || IsNil(o.UserGroupId) {
		return nil, false
	}
	return o.UserGroupId, true
}

// HasUserGroupId returns a boolean if a field has been set.
func (o *DfsSMBWindowsACLSet) HasUserGroupId() bool {
	if o != nil && !IsNil(o.UserGroupId) {
		return true
	}

	return false
}

// SetUserGroupId gets a reference to the given int64 and assigns it to the UserGroupId field.
func (o *DfsSMBWindowsACLSet) SetUserGroupId(v int64) {
	o.UserGroupId = &v
}

// GetUserGroupName returns the UserGroupName field value if set, zero value otherwise.
func (o *DfsSMBWindowsACLSet) GetUserGroupName() string {
	if o == nil || IsNil(o.UserGroupName) {
		var ret string
		return ret
	}
	return *o.UserGroupName
}

// GetUserGroupNameOk returns a tuple with the UserGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBWindowsACLSet) GetUserGroupNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserGroupName) {
		return nil, false
	}
	return o.UserGroupName, true
}

// HasUserGroupName returns a boolean if a field has been set.
func (o *DfsSMBWindowsACLSet) HasUserGroupName() bool {
	if o != nil && !IsNil(o.UserGroupName) {
		return true
	}

	return false
}

// SetUserGroupName gets a reference to the given string and assigns it to the UserGroupName field.
func (o *DfsSMBWindowsACLSet) SetUserGroupName(v string) {
	o.UserGroupName = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *DfsSMBWindowsACLSet) GetUserId() int64 {
	if o == nil || IsNil(o.UserId) {
		var ret int64
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBWindowsACLSet) GetUserIdOk() (*int64, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *DfsSMBWindowsACLSet) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given int64 and assigns it to the UserId field.
func (o *DfsSMBWindowsACLSet) SetUserId(v int64) {
	o.UserId = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *DfsSMBWindowsACLSet) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsSMBWindowsACLSet) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *DfsSMBWindowsACLSet) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *DfsSMBWindowsACLSet) SetUsername(v string) {
	o.Username = &v
}

func (o DfsSMBWindowsACLSet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsSMBWindowsACLSet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ace_type"] = o.AceType
	toSerialize["action_type"] = o.ActionType
	toSerialize["apply_to"] = o.ApplyTo
	if !IsNil(o.FsActiveDirectoryId) {
		toSerialize["fs_active_directory_id"] = o.FsActiveDirectoryId
	}
	toSerialize["permissions"] = o.Permissions
	if !IsNil(o.Principal) {
		toSerialize["principal"] = o.Principal
	}
	toSerialize["principal_type"] = o.PrincipalType
	if !IsNil(o.SecurityType) {
		toSerialize["security_type"] = o.SecurityType
	}
	if !IsNil(o.UserGroupId) {
		toSerialize["user_group_id"] = o.UserGroupId
	}
	if !IsNil(o.UserGroupName) {
		toSerialize["user_group_name"] = o.UserGroupName
	}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	return toSerialize, nil
}

func (o *DfsSMBWindowsACLSet) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ace_type",
		"action_type",
		"apply_to",
		"permissions",
		"principal_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDfsSMBWindowsACLSet := _DfsSMBWindowsACLSet{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDfsSMBWindowsACLSet)

	if err != nil {
		return err
	}

	*o = DfsSMBWindowsACLSet(varDfsSMBWindowsACLSet)

	return err
}

type NullableDfsSMBWindowsACLSet struct {
	value *DfsSMBWindowsACLSet
	isSet bool
}

func (v NullableDfsSMBWindowsACLSet) Get() *DfsSMBWindowsACLSet {
	return v.value
}

func (v *NullableDfsSMBWindowsACLSet) Set(val *DfsSMBWindowsACLSet) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsSMBWindowsACLSet) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsSMBWindowsACLSet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsSMBWindowsACLSet(val *DfsSMBWindowsACLSet) *NullableDfsSMBWindowsACLSet {
	return &NullableDfsSMBWindowsACLSet{value: val, isSet: true}
}

func (v NullableDfsSMBWindowsACLSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsSMBWindowsACLSet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


