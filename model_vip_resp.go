/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the VIPResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VIPResp{}

// VIPResp struct for VIPResp
type VIPResp struct {
	Vip *VIPRecord `json:"vip,omitempty"`
}

// NewVIPResp instantiates a new VIPResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVIPResp() *VIPResp {
	this := VIPResp{}
	return &this
}

// NewVIPRespWithDefaults instantiates a new VIPResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVIPRespWithDefaults() *VIPResp {
	this := VIPResp{}
	return &this
}

// GetVip returns the Vip field value if set, zero value otherwise.
func (o *VIPResp) GetVip() VIPRecord {
	if o == nil || IsNil(o.Vip) {
		var ret VIPRecord
		return ret
	}
	return *o.Vip
}

// GetVipOk returns a tuple with the Vip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VIPResp) GetVipOk() (*VIPRecord, bool) {
	if o == nil || IsNil(o.Vip) {
		return nil, false
	}
	return o.Vip, true
}

// HasVip returns a boolean if a field has been set.
func (o *VIPResp) HasVip() bool {
	if o != nil && !IsNil(o.Vip) {
		return true
	}

	return false
}

// SetVip gets a reference to the given VIPRecord and assigns it to the Vip field.
func (o *VIPResp) SetVip(v VIPRecord) {
	o.Vip = &v
}

func (o VIPResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VIPResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Vip) {
		toSerialize["vip"] = o.Vip
	}
	return toSerialize, nil
}

type NullableVIPResp struct {
	value *VIPResp
	isSet bool
}

func (v NullableVIPResp) Get() *VIPResp {
	return v.value
}

func (v *NullableVIPResp) Set(val *VIPResp) {
	v.value = val
	v.isSet = true
}

func (v NullableVIPResp) IsSet() bool {
	return v.isSet
}

func (v *NullableVIPResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVIPResp(val *VIPResp) *NullableVIPResp {
	return &NullableVIPResp{value: val, isSet: true}
}

func (v NullableVIPResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVIPResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


