/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DNSDomainNameCreateReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DNSDomainNameCreateReq{}

// DNSDomainNameCreateReq struct for DNSDomainNameCreateReq
type DNSDomainNameCreateReq struct {
	DnsDomainName DNSDomainNameCreateReqDomainName `json:"dns_domain_name"`
}

type _DNSDomainNameCreateReq DNSDomainNameCreateReq

// NewDNSDomainNameCreateReq instantiates a new DNSDomainNameCreateReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDNSDomainNameCreateReq(dnsDomainName DNSDomainNameCreateReqDomainName) *DNSDomainNameCreateReq {
	this := DNSDomainNameCreateReq{}
	this.DnsDomainName = dnsDomainName
	return &this
}

// NewDNSDomainNameCreateReqWithDefaults instantiates a new DNSDomainNameCreateReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDNSDomainNameCreateReqWithDefaults() *DNSDomainNameCreateReq {
	this := DNSDomainNameCreateReq{}
	return &this
}

// GetDnsDomainName returns the DnsDomainName field value
func (o *DNSDomainNameCreateReq) GetDnsDomainName() DNSDomainNameCreateReqDomainName {
	if o == nil {
		var ret DNSDomainNameCreateReqDomainName
		return ret
	}

	return o.DnsDomainName
}

// GetDnsDomainNameOk returns a tuple with the DnsDomainName field value
// and a boolean to check if the value has been set.
func (o *DNSDomainNameCreateReq) GetDnsDomainNameOk() (*DNSDomainNameCreateReqDomainName, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DnsDomainName, true
}

// SetDnsDomainName sets field value
func (o *DNSDomainNameCreateReq) SetDnsDomainName(v DNSDomainNameCreateReqDomainName) {
	o.DnsDomainName = v
}

func (o DNSDomainNameCreateReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DNSDomainNameCreateReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dns_domain_name"] = o.DnsDomainName
	return toSerialize, nil
}

func (o *DNSDomainNameCreateReq) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dns_domain_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDNSDomainNameCreateReq := _DNSDomainNameCreateReq{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDNSDomainNameCreateReq)

	if err != nil {
		return err
	}

	*o = DNSDomainNameCreateReq(varDNSDomainNameCreateReq)

	return err
}

type NullableDNSDomainNameCreateReq struct {
	value *DNSDomainNameCreateReq
	isSet bool
}

func (v NullableDNSDomainNameCreateReq) Get() *DNSDomainNameCreateReq {
	return v.value
}

func (v *NullableDNSDomainNameCreateReq) Set(val *DNSDomainNameCreateReq) {
	v.value = val
	v.isSet = true
}

func (v NullableDNSDomainNameCreateReq) IsSet() bool {
	return v.isSet
}

func (v *NullableDNSDomainNameCreateReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDNSDomainNameCreateReq(val *DNSDomainNameCreateReq) *NullableDNSDomainNameCreateReq {
	return &NullableDNSDomainNameCreateReq{value: val, isSet: true}
}

func (v NullableDNSDomainNameCreateReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDNSDomainNameCreateReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


