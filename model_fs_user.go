/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the FSUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FSUser{}

// FSUser FSUser defines model of file storage user
type FSUser struct {
	BucketLimit *int64 `json:"bucket_limit,omitempty"`
	BucketNum *int64 `json:"bucket_num,omitempty"`
	BucketParentPath *DfsPathNestview `json:"bucket_parent_path,omitempty"`
	BucketPermission *string `json:"bucket_permission,omitempty"`
	Cluster *ClusterNestview `json:"cluster,omitempty"`
	Create *time.Time `json:"create,omitempty"`
	Description *string `json:"description,omitempty"`
	Email *string `json:"email,omitempty"`
	FsUserGroupNum *int64 `json:"fs_user_group_num,omitempty"`
	FsUserGroups []FSUserGroupNestview `json:"fs_user_groups,omitempty"`
	GatewayGroup *DfsGatewayGroup `json:"gateway_group,omitempty"`
	HdfsNum *int64 `json:"hdfs_num,omitempty"`
	Id *int64 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	PolicyFilterNum *int64 `json:"policy_filter_num,omitempty"`
	PrimaryGroup *FSUserGroupNestview `json:"primary_group,omitempty"`
	QuotaNum *int64 `json:"quota_num,omitempty"`
	// dfs s3 support
	S3Enabled *bool `json:"s3_enabled,omitempty"`
	// indicate that s3 service is ok or not
	S3Status *string `json:"s3_status,omitempty"`
	ShareNums *map[string]int64 `json:"share_nums,omitempty"`
	Update *time.Time `json:"update,omitempty"`
	UserId *int64 `json:"user_id,omitempty"`
	Version *int64 `json:"version,omitempty"`
}

// NewFSUser instantiates a new FSUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFSUser() *FSUser {
	this := FSUser{}
	return &this
}

// NewFSUserWithDefaults instantiates a new FSUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFSUserWithDefaults() *FSUser {
	this := FSUser{}
	return &this
}

// GetBucketLimit returns the BucketLimit field value if set, zero value otherwise.
func (o *FSUser) GetBucketLimit() int64 {
	if o == nil || IsNil(o.BucketLimit) {
		var ret int64
		return ret
	}
	return *o.BucketLimit
}

// GetBucketLimitOk returns a tuple with the BucketLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSUser) GetBucketLimitOk() (*int64, bool) {
	if o == nil || IsNil(o.BucketLimit) {
		return nil, false
	}
	return o.BucketLimit, true
}

// HasBucketLimit returns a boolean if a field has been set.
func (o *FSUser) HasBucketLimit() bool {
	if o != nil && !IsNil(o.BucketLimit) {
		return true
	}

	return false
}

// SetBucketLimit gets a reference to the given int64 and assigns it to the BucketLimit field.
func (o *FSUser) SetBucketLimit(v int64) {
	o.BucketLimit = &v
}

// GetBucketNum returns the BucketNum field value if set, zero value otherwise.
func (o *FSUser) GetBucketNum() int64 {
	if o == nil || IsNil(o.BucketNum) {
		var ret int64
		return ret
	}
	return *o.BucketNum
}

// GetBucketNumOk returns a tuple with the BucketNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSUser) GetBucketNumOk() (*int64, bool) {
	if o == nil || IsNil(o.BucketNum) {
		return nil, false
	}
	return o.BucketNum, true
}

// HasBucketNum returns a boolean if a field has been set.
func (o *FSUser) HasBucketNum() bool {
	if o != nil && !IsNil(o.BucketNum) {
		return true
	}

	return false
}

// SetBucketNum gets a reference to the given int64 and assigns it to the BucketNum field.
func (o *FSUser) SetBucketNum(v int64) {
	o.BucketNum = &v
}

// GetBucketParentPath returns the BucketParentPath field value if set, zero value otherwise.
func (o *FSUser) GetBucketParentPath() DfsPathNestview {
	if o == nil || IsNil(o.BucketParentPath) {
		var ret DfsPathNestview
		return ret
	}
	return *o.BucketParentPath
}

// GetBucketParentPathOk returns a tuple with the BucketParentPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSUser) GetBucketParentPathOk() (*DfsPathNestview, bool) {
	if o == nil || IsNil(o.BucketParentPath) {
		return nil, false
	}
	return o.BucketParentPath, true
}

// HasBucketParentPath returns a boolean if a field has been set.
func (o *FSUser) HasBucketParentPath() bool {
	if o != nil && !IsNil(o.BucketParentPath) {
		return true
	}

	return false
}

// SetBucketParentPath gets a reference to the given DfsPathNestview and assigns it to the BucketParentPath field.
func (o *FSUser) SetBucketParentPath(v DfsPathNestview) {
	o.BucketParentPath = &v
}

// GetBucketPermission returns the BucketPermission field value if set, zero value otherwise.
func (o *FSUser) GetBucketPermission() string {
	if o == nil || IsNil(o.BucketPermission) {
		var ret string
		return ret
	}
	return *o.BucketPermission
}

// GetBucketPermissionOk returns a tuple with the BucketPermission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSUser) GetBucketPermissionOk() (*string, bool) {
	if o == nil || IsNil(o.BucketPermission) {
		return nil, false
	}
	return o.BucketPermission, true
}

// HasBucketPermission returns a boolean if a field has been set.
func (o *FSUser) HasBucketPermission() bool {
	if o != nil && !IsNil(o.BucketPermission) {
		return true
	}

	return false
}

// SetBucketPermission gets a reference to the given string and assigns it to the BucketPermission field.
func (o *FSUser) SetBucketPermission(v string) {
	o.BucketPermission = &v
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *FSUser) GetCluster() ClusterNestview {
	if o == nil || IsNil(o.Cluster) {
		var ret ClusterNestview
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSUser) GetClusterOk() (*ClusterNestview, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *FSUser) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given ClusterNestview and assigns it to the Cluster field.
func (o *FSUser) SetCluster(v ClusterNestview) {
	o.Cluster = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *FSUser) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSUser) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *FSUser) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *FSUser) SetCreate(v time.Time) {
	o.Create = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *FSUser) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSUser) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *FSUser) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *FSUser) SetDescription(v string) {
	o.Description = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *FSUser) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSUser) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *FSUser) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *FSUser) SetEmail(v string) {
	o.Email = &v
}

// GetFsUserGroupNum returns the FsUserGroupNum field value if set, zero value otherwise.
func (o *FSUser) GetFsUserGroupNum() int64 {
	if o == nil || IsNil(o.FsUserGroupNum) {
		var ret int64
		return ret
	}
	return *o.FsUserGroupNum
}

// GetFsUserGroupNumOk returns a tuple with the FsUserGroupNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSUser) GetFsUserGroupNumOk() (*int64, bool) {
	if o == nil || IsNil(o.FsUserGroupNum) {
		return nil, false
	}
	return o.FsUserGroupNum, true
}

// HasFsUserGroupNum returns a boolean if a field has been set.
func (o *FSUser) HasFsUserGroupNum() bool {
	if o != nil && !IsNil(o.FsUserGroupNum) {
		return true
	}

	return false
}

// SetFsUserGroupNum gets a reference to the given int64 and assigns it to the FsUserGroupNum field.
func (o *FSUser) SetFsUserGroupNum(v int64) {
	o.FsUserGroupNum = &v
}

// GetFsUserGroups returns the FsUserGroups field value if set, zero value otherwise.
func (o *FSUser) GetFsUserGroups() []FSUserGroupNestview {
	if o == nil || IsNil(o.FsUserGroups) {
		var ret []FSUserGroupNestview
		return ret
	}
	return o.FsUserGroups
}

// GetFsUserGroupsOk returns a tuple with the FsUserGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSUser) GetFsUserGroupsOk() ([]FSUserGroupNestview, bool) {
	if o == nil || IsNil(o.FsUserGroups) {
		return nil, false
	}
	return o.FsUserGroups, true
}

// HasFsUserGroups returns a boolean if a field has been set.
func (o *FSUser) HasFsUserGroups() bool {
	if o != nil && !IsNil(o.FsUserGroups) {
		return true
	}

	return false
}

// SetFsUserGroups gets a reference to the given []FSUserGroupNestview and assigns it to the FsUserGroups field.
func (o *FSUser) SetFsUserGroups(v []FSUserGroupNestview) {
	o.FsUserGroups = v
}

// GetGatewayGroup returns the GatewayGroup field value if set, zero value otherwise.
func (o *FSUser) GetGatewayGroup() DfsGatewayGroup {
	if o == nil || IsNil(o.GatewayGroup) {
		var ret DfsGatewayGroup
		return ret
	}
	return *o.GatewayGroup
}

// GetGatewayGroupOk returns a tuple with the GatewayGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSUser) GetGatewayGroupOk() (*DfsGatewayGroup, bool) {
	if o == nil || IsNil(o.GatewayGroup) {
		return nil, false
	}
	return o.GatewayGroup, true
}

// HasGatewayGroup returns a boolean if a field has been set.
func (o *FSUser) HasGatewayGroup() bool {
	if o != nil && !IsNil(o.GatewayGroup) {
		return true
	}

	return false
}

// SetGatewayGroup gets a reference to the given DfsGatewayGroup and assigns it to the GatewayGroup field.
func (o *FSUser) SetGatewayGroup(v DfsGatewayGroup) {
	o.GatewayGroup = &v
}

// GetHdfsNum returns the HdfsNum field value if set, zero value otherwise.
func (o *FSUser) GetHdfsNum() int64 {
	if o == nil || IsNil(o.HdfsNum) {
		var ret int64
		return ret
	}
	return *o.HdfsNum
}

// GetHdfsNumOk returns a tuple with the HdfsNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSUser) GetHdfsNumOk() (*int64, bool) {
	if o == nil || IsNil(o.HdfsNum) {
		return nil, false
	}
	return o.HdfsNum, true
}

// HasHdfsNum returns a boolean if a field has been set.
func (o *FSUser) HasHdfsNum() bool {
	if o != nil && !IsNil(o.HdfsNum) {
		return true
	}

	return false
}

// SetHdfsNum gets a reference to the given int64 and assigns it to the HdfsNum field.
func (o *FSUser) SetHdfsNum(v int64) {
	o.HdfsNum = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FSUser) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSUser) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FSUser) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *FSUser) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FSUser) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSUser) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FSUser) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FSUser) SetName(v string) {
	o.Name = &v
}

// GetPolicyFilterNum returns the PolicyFilterNum field value if set, zero value otherwise.
func (o *FSUser) GetPolicyFilterNum() int64 {
	if o == nil || IsNil(o.PolicyFilterNum) {
		var ret int64
		return ret
	}
	return *o.PolicyFilterNum
}

// GetPolicyFilterNumOk returns a tuple with the PolicyFilterNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSUser) GetPolicyFilterNumOk() (*int64, bool) {
	if o == nil || IsNil(o.PolicyFilterNum) {
		return nil, false
	}
	return o.PolicyFilterNum, true
}

// HasPolicyFilterNum returns a boolean if a field has been set.
func (o *FSUser) HasPolicyFilterNum() bool {
	if o != nil && !IsNil(o.PolicyFilterNum) {
		return true
	}

	return false
}

// SetPolicyFilterNum gets a reference to the given int64 and assigns it to the PolicyFilterNum field.
func (o *FSUser) SetPolicyFilterNum(v int64) {
	o.PolicyFilterNum = &v
}

// GetPrimaryGroup returns the PrimaryGroup field value if set, zero value otherwise.
func (o *FSUser) GetPrimaryGroup() FSUserGroupNestview {
	if o == nil || IsNil(o.PrimaryGroup) {
		var ret FSUserGroupNestview
		return ret
	}
	return *o.PrimaryGroup
}

// GetPrimaryGroupOk returns a tuple with the PrimaryGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSUser) GetPrimaryGroupOk() (*FSUserGroupNestview, bool) {
	if o == nil || IsNil(o.PrimaryGroup) {
		return nil, false
	}
	return o.PrimaryGroup, true
}

// HasPrimaryGroup returns a boolean if a field has been set.
func (o *FSUser) HasPrimaryGroup() bool {
	if o != nil && !IsNil(o.PrimaryGroup) {
		return true
	}

	return false
}

// SetPrimaryGroup gets a reference to the given FSUserGroupNestview and assigns it to the PrimaryGroup field.
func (o *FSUser) SetPrimaryGroup(v FSUserGroupNestview) {
	o.PrimaryGroup = &v
}

// GetQuotaNum returns the QuotaNum field value if set, zero value otherwise.
func (o *FSUser) GetQuotaNum() int64 {
	if o == nil || IsNil(o.QuotaNum) {
		var ret int64
		return ret
	}
	return *o.QuotaNum
}

// GetQuotaNumOk returns a tuple with the QuotaNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSUser) GetQuotaNumOk() (*int64, bool) {
	if o == nil || IsNil(o.QuotaNum) {
		return nil, false
	}
	return o.QuotaNum, true
}

// HasQuotaNum returns a boolean if a field has been set.
func (o *FSUser) HasQuotaNum() bool {
	if o != nil && !IsNil(o.QuotaNum) {
		return true
	}

	return false
}

// SetQuotaNum gets a reference to the given int64 and assigns it to the QuotaNum field.
func (o *FSUser) SetQuotaNum(v int64) {
	o.QuotaNum = &v
}

// GetS3Enabled returns the S3Enabled field value if set, zero value otherwise.
func (o *FSUser) GetS3Enabled() bool {
	if o == nil || IsNil(o.S3Enabled) {
		var ret bool
		return ret
	}
	return *o.S3Enabled
}

// GetS3EnabledOk returns a tuple with the S3Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSUser) GetS3EnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.S3Enabled) {
		return nil, false
	}
	return o.S3Enabled, true
}

// HasS3Enabled returns a boolean if a field has been set.
func (o *FSUser) HasS3Enabled() bool {
	if o != nil && !IsNil(o.S3Enabled) {
		return true
	}

	return false
}

// SetS3Enabled gets a reference to the given bool and assigns it to the S3Enabled field.
func (o *FSUser) SetS3Enabled(v bool) {
	o.S3Enabled = &v
}

// GetS3Status returns the S3Status field value if set, zero value otherwise.
func (o *FSUser) GetS3Status() string {
	if o == nil || IsNil(o.S3Status) {
		var ret string
		return ret
	}
	return *o.S3Status
}

// GetS3StatusOk returns a tuple with the S3Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSUser) GetS3StatusOk() (*string, bool) {
	if o == nil || IsNil(o.S3Status) {
		return nil, false
	}
	return o.S3Status, true
}

// HasS3Status returns a boolean if a field has been set.
func (o *FSUser) HasS3Status() bool {
	if o != nil && !IsNil(o.S3Status) {
		return true
	}

	return false
}

// SetS3Status gets a reference to the given string and assigns it to the S3Status field.
func (o *FSUser) SetS3Status(v string) {
	o.S3Status = &v
}

// GetShareNums returns the ShareNums field value if set, zero value otherwise.
func (o *FSUser) GetShareNums() map[string]int64 {
	if o == nil || IsNil(o.ShareNums) {
		var ret map[string]int64
		return ret
	}
	return *o.ShareNums
}

// GetShareNumsOk returns a tuple with the ShareNums field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSUser) GetShareNumsOk() (*map[string]int64, bool) {
	if o == nil || IsNil(o.ShareNums) {
		return nil, false
	}
	return o.ShareNums, true
}

// HasShareNums returns a boolean if a field has been set.
func (o *FSUser) HasShareNums() bool {
	if o != nil && !IsNil(o.ShareNums) {
		return true
	}

	return false
}

// SetShareNums gets a reference to the given map[string]int64 and assigns it to the ShareNums field.
func (o *FSUser) SetShareNums(v map[string]int64) {
	o.ShareNums = &v
}

// GetUpdate returns the Update field value if set, zero value otherwise.
func (o *FSUser) GetUpdate() time.Time {
	if o == nil || IsNil(o.Update) {
		var ret time.Time
		return ret
	}
	return *o.Update
}

// GetUpdateOk returns a tuple with the Update field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSUser) GetUpdateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Update) {
		return nil, false
	}
	return o.Update, true
}

// HasUpdate returns a boolean if a field has been set.
func (o *FSUser) HasUpdate() bool {
	if o != nil && !IsNil(o.Update) {
		return true
	}

	return false
}

// SetUpdate gets a reference to the given time.Time and assigns it to the Update field.
func (o *FSUser) SetUpdate(v time.Time) {
	o.Update = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *FSUser) GetUserId() int64 {
	if o == nil || IsNil(o.UserId) {
		var ret int64
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSUser) GetUserIdOk() (*int64, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *FSUser) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given int64 and assigns it to the UserId field.
func (o *FSUser) SetUserId(v int64) {
	o.UserId = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *FSUser) GetVersion() int64 {
	if o == nil || IsNil(o.Version) {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSUser) GetVersionOk() (*int64, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *FSUser) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *FSUser) SetVersion(v int64) {
	o.Version = &v
}

func (o FSUser) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FSUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BucketLimit) {
		toSerialize["bucket_limit"] = o.BucketLimit
	}
	if !IsNil(o.BucketNum) {
		toSerialize["bucket_num"] = o.BucketNum
	}
	if !IsNil(o.BucketParentPath) {
		toSerialize["bucket_parent_path"] = o.BucketParentPath
	}
	if !IsNil(o.BucketPermission) {
		toSerialize["bucket_permission"] = o.BucketPermission
	}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.FsUserGroupNum) {
		toSerialize["fs_user_group_num"] = o.FsUserGroupNum
	}
	if !IsNil(o.FsUserGroups) {
		toSerialize["fs_user_groups"] = o.FsUserGroups
	}
	if !IsNil(o.GatewayGroup) {
		toSerialize["gateway_group"] = o.GatewayGroup
	}
	if !IsNil(o.HdfsNum) {
		toSerialize["hdfs_num"] = o.HdfsNum
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.PolicyFilterNum) {
		toSerialize["policy_filter_num"] = o.PolicyFilterNum
	}
	if !IsNil(o.PrimaryGroup) {
		toSerialize["primary_group"] = o.PrimaryGroup
	}
	if !IsNil(o.QuotaNum) {
		toSerialize["quota_num"] = o.QuotaNum
	}
	if !IsNil(o.S3Enabled) {
		toSerialize["s3_enabled"] = o.S3Enabled
	}
	if !IsNil(o.S3Status) {
		toSerialize["s3_status"] = o.S3Status
	}
	if !IsNil(o.ShareNums) {
		toSerialize["share_nums"] = o.ShareNums
	}
	if !IsNil(o.Update) {
		toSerialize["update"] = o.Update
	}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableFSUser struct {
	value *FSUser
	isSet bool
}

func (v NullableFSUser) Get() *FSUser {
	return v.value
}

func (v *NullableFSUser) Set(val *FSUser) {
	v.value = val
	v.isSet = true
}

func (v NullableFSUser) IsSet() bool {
	return v.isSet
}

func (v *NullableFSUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFSUser(val *FSUser) *NullableFSUser {
	return &NullableFSUser{value: val, isSet: true}
}

func (v NullableFSUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFSUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


