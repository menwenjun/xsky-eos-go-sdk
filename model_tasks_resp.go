/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TasksResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TasksResp{}

// TasksResp struct for TasksResp
type TasksResp struct {
	// tasks
	Tasks []Task `json:"tasks"`
}

type _TasksResp TasksResp

// NewTasksResp instantiates a new TasksResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTasksResp(tasks []Task) *TasksResp {
	this := TasksResp{}
	this.Tasks = tasks
	return &this
}

// NewTasksRespWithDefaults instantiates a new TasksResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTasksRespWithDefaults() *TasksResp {
	this := TasksResp{}
	return &this
}

// GetTasks returns the Tasks field value
func (o *TasksResp) GetTasks() []Task {
	if o == nil {
		var ret []Task
		return ret
	}

	return o.Tasks
}

// GetTasksOk returns a tuple with the Tasks field value
// and a boolean to check if the value has been set.
func (o *TasksResp) GetTasksOk() ([]Task, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tasks, true
}

// SetTasks sets field value
func (o *TasksResp) SetTasks(v []Task) {
	o.Tasks = v
}

func (o TasksResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TasksResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["tasks"] = o.Tasks
	return toSerialize, nil
}

func (o *TasksResp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tasks",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTasksResp := _TasksResp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTasksResp)

	if err != nil {
		return err
	}

	*o = TasksResp(varTasksResp)

	return err
}

type NullableTasksResp struct {
	value *TasksResp
	isSet bool
}

func (v NullableTasksResp) Get() *TasksResp {
	return v.value
}

func (v *NullableTasksResp) Set(val *TasksResp) {
	v.value = val
	v.isSet = true
}

func (v NullableTasksResp) IsSet() bool {
	return v.isSet
}

func (v *NullableTasksResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTasksResp(val *TasksResp) *NullableTasksResp {
	return &NullableTasksResp{value: val, isSet: true}
}

func (v NullableTasksResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTasksResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


