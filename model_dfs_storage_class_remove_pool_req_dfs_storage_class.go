/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DfsStorageClassRemovePoolReqDfsStorageClass type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsStorageClassRemovePoolReqDfsStorageClass{}

// DfsStorageClassRemovePoolReqDfsStorageClass struct for DfsStorageClassRemovePoolReqDfsStorageClass
type DfsStorageClassRemovePoolReqDfsStorageClass struct {
	// pool ids to remove
	PoolIds []int64 `json:"pool_ids"`
	// whether to move the pool to the default class after it is removed
	ToDefault bool `json:"to_default"`
}

type _DfsStorageClassRemovePoolReqDfsStorageClass DfsStorageClassRemovePoolReqDfsStorageClass

// NewDfsStorageClassRemovePoolReqDfsStorageClass instantiates a new DfsStorageClassRemovePoolReqDfsStorageClass object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsStorageClassRemovePoolReqDfsStorageClass(poolIds []int64, toDefault bool) *DfsStorageClassRemovePoolReqDfsStorageClass {
	this := DfsStorageClassRemovePoolReqDfsStorageClass{}
	this.PoolIds = poolIds
	this.ToDefault = toDefault
	return &this
}

// NewDfsStorageClassRemovePoolReqDfsStorageClassWithDefaults instantiates a new DfsStorageClassRemovePoolReqDfsStorageClass object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsStorageClassRemovePoolReqDfsStorageClassWithDefaults() *DfsStorageClassRemovePoolReqDfsStorageClass {
	this := DfsStorageClassRemovePoolReqDfsStorageClass{}
	return &this
}

// GetPoolIds returns the PoolIds field value
func (o *DfsStorageClassRemovePoolReqDfsStorageClass) GetPoolIds() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}

	return o.PoolIds
}

// GetPoolIdsOk returns a tuple with the PoolIds field value
// and a boolean to check if the value has been set.
func (o *DfsStorageClassRemovePoolReqDfsStorageClass) GetPoolIdsOk() ([]int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.PoolIds, true
}

// SetPoolIds sets field value
func (o *DfsStorageClassRemovePoolReqDfsStorageClass) SetPoolIds(v []int64) {
	o.PoolIds = v
}

// GetToDefault returns the ToDefault field value
func (o *DfsStorageClassRemovePoolReqDfsStorageClass) GetToDefault() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ToDefault
}

// GetToDefaultOk returns a tuple with the ToDefault field value
// and a boolean to check if the value has been set.
func (o *DfsStorageClassRemovePoolReqDfsStorageClass) GetToDefaultOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToDefault, true
}

// SetToDefault sets field value
func (o *DfsStorageClassRemovePoolReqDfsStorageClass) SetToDefault(v bool) {
	o.ToDefault = v
}

func (o DfsStorageClassRemovePoolReqDfsStorageClass) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsStorageClassRemovePoolReqDfsStorageClass) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["pool_ids"] = o.PoolIds
	toSerialize["to_default"] = o.ToDefault
	return toSerialize, nil
}

func (o *DfsStorageClassRemovePoolReqDfsStorageClass) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pool_ids",
		"to_default",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDfsStorageClassRemovePoolReqDfsStorageClass := _DfsStorageClassRemovePoolReqDfsStorageClass{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDfsStorageClassRemovePoolReqDfsStorageClass)

	if err != nil {
		return err
	}

	*o = DfsStorageClassRemovePoolReqDfsStorageClass(varDfsStorageClassRemovePoolReqDfsStorageClass)

	return err
}

type NullableDfsStorageClassRemovePoolReqDfsStorageClass struct {
	value *DfsStorageClassRemovePoolReqDfsStorageClass
	isSet bool
}

func (v NullableDfsStorageClassRemovePoolReqDfsStorageClass) Get() *DfsStorageClassRemovePoolReqDfsStorageClass {
	return v.value
}

func (v *NullableDfsStorageClassRemovePoolReqDfsStorageClass) Set(val *DfsStorageClassRemovePoolReqDfsStorageClass) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsStorageClassRemovePoolReqDfsStorageClass) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsStorageClassRemovePoolReqDfsStorageClass) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsStorageClassRemovePoolReqDfsStorageClass(val *DfsStorageClassRemovePoolReqDfsStorageClass) *NullableDfsStorageClassRemovePoolReqDfsStorageClass {
	return &NullableDfsStorageClassRemovePoolReqDfsStorageClass{value: val, isSet: true}
}

func (v NullableDfsStorageClassRemovePoolReqDfsStorageClass) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsStorageClassRemovePoolReqDfsStorageClass) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


