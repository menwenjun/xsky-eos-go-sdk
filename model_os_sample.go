/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OSSample type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OSSample{}

// OSSample OSSample contains os samples
type OSSample struct {
	DeleteObjCategory *OSBucketUsageCategory `json:"delete_obj_category,omitempty"`
	GetObjCategory *OSBucketUsageCategory `json:"get_obj_category,omitempty"`
	ListBucketCategory *OSBucketUsageCategory `json:"list_bucket_category,omitempty"`
	Objects *int64 `json:"objects,omitempty"`
	PostObjCategory *OSBucketUsageCategory `json:"post_obj_category,omitempty"`
	PutObjCategory *OSBucketUsageCategory `json:"put_obj_category,omitempty"`
	UsedCapacityBytes *map[string]int64 `json:"used_capacity_bytes,omitempty"`
}

// NewOSSample instantiates a new OSSample object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOSSample() *OSSample {
	this := OSSample{}
	return &this
}

// NewOSSampleWithDefaults instantiates a new OSSample object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOSSampleWithDefaults() *OSSample {
	this := OSSample{}
	return &this
}

// GetDeleteObjCategory returns the DeleteObjCategory field value if set, zero value otherwise.
func (o *OSSample) GetDeleteObjCategory() OSBucketUsageCategory {
	if o == nil || IsNil(o.DeleteObjCategory) {
		var ret OSBucketUsageCategory
		return ret
	}
	return *o.DeleteObjCategory
}

// GetDeleteObjCategoryOk returns a tuple with the DeleteObjCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSSample) GetDeleteObjCategoryOk() (*OSBucketUsageCategory, bool) {
	if o == nil || IsNil(o.DeleteObjCategory) {
		return nil, false
	}
	return o.DeleteObjCategory, true
}

// HasDeleteObjCategory returns a boolean if a field has been set.
func (o *OSSample) HasDeleteObjCategory() bool {
	if o != nil && !IsNil(o.DeleteObjCategory) {
		return true
	}

	return false
}

// SetDeleteObjCategory gets a reference to the given OSBucketUsageCategory and assigns it to the DeleteObjCategory field.
func (o *OSSample) SetDeleteObjCategory(v OSBucketUsageCategory) {
	o.DeleteObjCategory = &v
}

// GetGetObjCategory returns the GetObjCategory field value if set, zero value otherwise.
func (o *OSSample) GetGetObjCategory() OSBucketUsageCategory {
	if o == nil || IsNil(o.GetObjCategory) {
		var ret OSBucketUsageCategory
		return ret
	}
	return *o.GetObjCategory
}

// GetGetObjCategoryOk returns a tuple with the GetObjCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSSample) GetGetObjCategoryOk() (*OSBucketUsageCategory, bool) {
	if o == nil || IsNil(o.GetObjCategory) {
		return nil, false
	}
	return o.GetObjCategory, true
}

// HasGetObjCategory returns a boolean if a field has been set.
func (o *OSSample) HasGetObjCategory() bool {
	if o != nil && !IsNil(o.GetObjCategory) {
		return true
	}

	return false
}

// SetGetObjCategory gets a reference to the given OSBucketUsageCategory and assigns it to the GetObjCategory field.
func (o *OSSample) SetGetObjCategory(v OSBucketUsageCategory) {
	o.GetObjCategory = &v
}

// GetListBucketCategory returns the ListBucketCategory field value if set, zero value otherwise.
func (o *OSSample) GetListBucketCategory() OSBucketUsageCategory {
	if o == nil || IsNil(o.ListBucketCategory) {
		var ret OSBucketUsageCategory
		return ret
	}
	return *o.ListBucketCategory
}

// GetListBucketCategoryOk returns a tuple with the ListBucketCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSSample) GetListBucketCategoryOk() (*OSBucketUsageCategory, bool) {
	if o == nil || IsNil(o.ListBucketCategory) {
		return nil, false
	}
	return o.ListBucketCategory, true
}

// HasListBucketCategory returns a boolean if a field has been set.
func (o *OSSample) HasListBucketCategory() bool {
	if o != nil && !IsNil(o.ListBucketCategory) {
		return true
	}

	return false
}

// SetListBucketCategory gets a reference to the given OSBucketUsageCategory and assigns it to the ListBucketCategory field.
func (o *OSSample) SetListBucketCategory(v OSBucketUsageCategory) {
	o.ListBucketCategory = &v
}

// GetObjects returns the Objects field value if set, zero value otherwise.
func (o *OSSample) GetObjects() int64 {
	if o == nil || IsNil(o.Objects) {
		var ret int64
		return ret
	}
	return *o.Objects
}

// GetObjectsOk returns a tuple with the Objects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSSample) GetObjectsOk() (*int64, bool) {
	if o == nil || IsNil(o.Objects) {
		return nil, false
	}
	return o.Objects, true
}

// HasObjects returns a boolean if a field has been set.
func (o *OSSample) HasObjects() bool {
	if o != nil && !IsNil(o.Objects) {
		return true
	}

	return false
}

// SetObjects gets a reference to the given int64 and assigns it to the Objects field.
func (o *OSSample) SetObjects(v int64) {
	o.Objects = &v
}

// GetPostObjCategory returns the PostObjCategory field value if set, zero value otherwise.
func (o *OSSample) GetPostObjCategory() OSBucketUsageCategory {
	if o == nil || IsNil(o.PostObjCategory) {
		var ret OSBucketUsageCategory
		return ret
	}
	return *o.PostObjCategory
}

// GetPostObjCategoryOk returns a tuple with the PostObjCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSSample) GetPostObjCategoryOk() (*OSBucketUsageCategory, bool) {
	if o == nil || IsNil(o.PostObjCategory) {
		return nil, false
	}
	return o.PostObjCategory, true
}

// HasPostObjCategory returns a boolean if a field has been set.
func (o *OSSample) HasPostObjCategory() bool {
	if o != nil && !IsNil(o.PostObjCategory) {
		return true
	}

	return false
}

// SetPostObjCategory gets a reference to the given OSBucketUsageCategory and assigns it to the PostObjCategory field.
func (o *OSSample) SetPostObjCategory(v OSBucketUsageCategory) {
	o.PostObjCategory = &v
}

// GetPutObjCategory returns the PutObjCategory field value if set, zero value otherwise.
func (o *OSSample) GetPutObjCategory() OSBucketUsageCategory {
	if o == nil || IsNil(o.PutObjCategory) {
		var ret OSBucketUsageCategory
		return ret
	}
	return *o.PutObjCategory
}

// GetPutObjCategoryOk returns a tuple with the PutObjCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSSample) GetPutObjCategoryOk() (*OSBucketUsageCategory, bool) {
	if o == nil || IsNil(o.PutObjCategory) {
		return nil, false
	}
	return o.PutObjCategory, true
}

// HasPutObjCategory returns a boolean if a field has been set.
func (o *OSSample) HasPutObjCategory() bool {
	if o != nil && !IsNil(o.PutObjCategory) {
		return true
	}

	return false
}

// SetPutObjCategory gets a reference to the given OSBucketUsageCategory and assigns it to the PutObjCategory field.
func (o *OSSample) SetPutObjCategory(v OSBucketUsageCategory) {
	o.PutObjCategory = &v
}

// GetUsedCapacityBytes returns the UsedCapacityBytes field value if set, zero value otherwise.
func (o *OSSample) GetUsedCapacityBytes() map[string]int64 {
	if o == nil || IsNil(o.UsedCapacityBytes) {
		var ret map[string]int64
		return ret
	}
	return *o.UsedCapacityBytes
}

// GetUsedCapacityBytesOk returns a tuple with the UsedCapacityBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSSample) GetUsedCapacityBytesOk() (*map[string]int64, bool) {
	if o == nil || IsNil(o.UsedCapacityBytes) {
		return nil, false
	}
	return o.UsedCapacityBytes, true
}

// HasUsedCapacityBytes returns a boolean if a field has been set.
func (o *OSSample) HasUsedCapacityBytes() bool {
	if o != nil && !IsNil(o.UsedCapacityBytes) {
		return true
	}

	return false
}

// SetUsedCapacityBytes gets a reference to the given map[string]int64 and assigns it to the UsedCapacityBytes field.
func (o *OSSample) SetUsedCapacityBytes(v map[string]int64) {
	o.UsedCapacityBytes = &v
}

func (o OSSample) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OSSample) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DeleteObjCategory) {
		toSerialize["delete_obj_category"] = o.DeleteObjCategory
	}
	if !IsNil(o.GetObjCategory) {
		toSerialize["get_obj_category"] = o.GetObjCategory
	}
	if !IsNil(o.ListBucketCategory) {
		toSerialize["list_bucket_category"] = o.ListBucketCategory
	}
	if !IsNil(o.Objects) {
		toSerialize["objects"] = o.Objects
	}
	if !IsNil(o.PostObjCategory) {
		toSerialize["post_obj_category"] = o.PostObjCategory
	}
	if !IsNil(o.PutObjCategory) {
		toSerialize["put_obj_category"] = o.PutObjCategory
	}
	if !IsNil(o.UsedCapacityBytes) {
		toSerialize["used_capacity_bytes"] = o.UsedCapacityBytes
	}
	return toSerialize, nil
}

type NullableOSSample struct {
	value *OSSample
	isSet bool
}

func (v NullableOSSample) Get() *OSSample {
	return v.value
}

func (v *NullableOSSample) Set(val *OSSample) {
	v.value = val
	v.isSet = true
}

func (v NullableOSSample) IsSet() bool {
	return v.isSet
}

func (v *NullableOSSample) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOSSample(val *OSSample) *NullableOSSample {
	return &NullableOSSample{value: val, isSet: true}
}

func (v NullableOSSample) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOSSample) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


