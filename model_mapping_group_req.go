/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MappingGroupReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MappingGroupReq{}

// MappingGroupReq struct for MappingGroupReq
type MappingGroupReq struct {
	AccessPathId *int64 `json:"access_path_id,omitempty"`
	BlockVolumeIds []int64 `json:"block_volume_ids,omitempty"`
	ClientGroupId *int64 `json:"client_group_id,omitempty"`
}

// NewMappingGroupReq instantiates a new MappingGroupReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMappingGroupReq() *MappingGroupReq {
	this := MappingGroupReq{}
	return &this
}

// NewMappingGroupReqWithDefaults instantiates a new MappingGroupReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMappingGroupReqWithDefaults() *MappingGroupReq {
	this := MappingGroupReq{}
	return &this
}

// GetAccessPathId returns the AccessPathId field value if set, zero value otherwise.
func (o *MappingGroupReq) GetAccessPathId() int64 {
	if o == nil || IsNil(o.AccessPathId) {
		var ret int64
		return ret
	}
	return *o.AccessPathId
}

// GetAccessPathIdOk returns a tuple with the AccessPathId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MappingGroupReq) GetAccessPathIdOk() (*int64, bool) {
	if o == nil || IsNil(o.AccessPathId) {
		return nil, false
	}
	return o.AccessPathId, true
}

// HasAccessPathId returns a boolean if a field has been set.
func (o *MappingGroupReq) HasAccessPathId() bool {
	if o != nil && !IsNil(o.AccessPathId) {
		return true
	}

	return false
}

// SetAccessPathId gets a reference to the given int64 and assigns it to the AccessPathId field.
func (o *MappingGroupReq) SetAccessPathId(v int64) {
	o.AccessPathId = &v
}

// GetBlockVolumeIds returns the BlockVolumeIds field value if set, zero value otherwise.
func (o *MappingGroupReq) GetBlockVolumeIds() []int64 {
	if o == nil || IsNil(o.BlockVolumeIds) {
		var ret []int64
		return ret
	}
	return o.BlockVolumeIds
}

// GetBlockVolumeIdsOk returns a tuple with the BlockVolumeIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MappingGroupReq) GetBlockVolumeIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.BlockVolumeIds) {
		return nil, false
	}
	return o.BlockVolumeIds, true
}

// HasBlockVolumeIds returns a boolean if a field has been set.
func (o *MappingGroupReq) HasBlockVolumeIds() bool {
	if o != nil && !IsNil(o.BlockVolumeIds) {
		return true
	}

	return false
}

// SetBlockVolumeIds gets a reference to the given []int64 and assigns it to the BlockVolumeIds field.
func (o *MappingGroupReq) SetBlockVolumeIds(v []int64) {
	o.BlockVolumeIds = v
}

// GetClientGroupId returns the ClientGroupId field value if set, zero value otherwise.
func (o *MappingGroupReq) GetClientGroupId() int64 {
	if o == nil || IsNil(o.ClientGroupId) {
		var ret int64
		return ret
	}
	return *o.ClientGroupId
}

// GetClientGroupIdOk returns a tuple with the ClientGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MappingGroupReq) GetClientGroupIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ClientGroupId) {
		return nil, false
	}
	return o.ClientGroupId, true
}

// HasClientGroupId returns a boolean if a field has been set.
func (o *MappingGroupReq) HasClientGroupId() bool {
	if o != nil && !IsNil(o.ClientGroupId) {
		return true
	}

	return false
}

// SetClientGroupId gets a reference to the given int64 and assigns it to the ClientGroupId field.
func (o *MappingGroupReq) SetClientGroupId(v int64) {
	o.ClientGroupId = &v
}

func (o MappingGroupReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MappingGroupReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccessPathId) {
		toSerialize["access_path_id"] = o.AccessPathId
	}
	if !IsNil(o.BlockVolumeIds) {
		toSerialize["block_volume_ids"] = o.BlockVolumeIds
	}
	if !IsNil(o.ClientGroupId) {
		toSerialize["client_group_id"] = o.ClientGroupId
	}
	return toSerialize, nil
}

type NullableMappingGroupReq struct {
	value *MappingGroupReq
	isSet bool
}

func (v NullableMappingGroupReq) Get() *MappingGroupReq {
	return v.value
}

func (v *NullableMappingGroupReq) Set(val *MappingGroupReq) {
	v.value = val
	v.isSet = true
}

func (v NullableMappingGroupReq) IsSet() bool {
	return v.isSet
}

func (v *NullableMappingGroupReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMappingGroupReq(val *MappingGroupReq) *NullableMappingGroupReq {
	return &NullableMappingGroupReq{value: val, isSet: true}
}

func (v NullableMappingGroupReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMappingGroupReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


