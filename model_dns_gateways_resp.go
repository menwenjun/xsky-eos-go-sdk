/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DNSGatewaysResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DNSGatewaysResp{}

// DNSGatewaysResp struct for DNSGatewaysResp
type DNSGatewaysResp struct {
	// dns gateway list
	DnsGateways []DNSGateway `json:"dns_gateways,omitempty"`
}

// NewDNSGatewaysResp instantiates a new DNSGatewaysResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDNSGatewaysResp() *DNSGatewaysResp {
	this := DNSGatewaysResp{}
	return &this
}

// NewDNSGatewaysRespWithDefaults instantiates a new DNSGatewaysResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDNSGatewaysRespWithDefaults() *DNSGatewaysResp {
	this := DNSGatewaysResp{}
	return &this
}

// GetDnsGateways returns the DnsGateways field value if set, zero value otherwise.
func (o *DNSGatewaysResp) GetDnsGateways() []DNSGateway {
	if o == nil || IsNil(o.DnsGateways) {
		var ret []DNSGateway
		return ret
	}
	return o.DnsGateways
}

// GetDnsGatewaysOk returns a tuple with the DnsGateways field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSGatewaysResp) GetDnsGatewaysOk() ([]DNSGateway, bool) {
	if o == nil || IsNil(o.DnsGateways) {
		return nil, false
	}
	return o.DnsGateways, true
}

// HasDnsGateways returns a boolean if a field has been set.
func (o *DNSGatewaysResp) HasDnsGateways() bool {
	if o != nil && !IsNil(o.DnsGateways) {
		return true
	}

	return false
}

// SetDnsGateways gets a reference to the given []DNSGateway and assigns it to the DnsGateways field.
func (o *DNSGatewaysResp) SetDnsGateways(v []DNSGateway) {
	o.DnsGateways = v
}

func (o DNSGatewaysResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DNSGatewaysResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DnsGateways) {
		toSerialize["dns_gateways"] = o.DnsGateways
	}
	return toSerialize, nil
}

type NullableDNSGatewaysResp struct {
	value *DNSGatewaysResp
	isSet bool
}

func (v NullableDNSGatewaysResp) Get() *DNSGatewaysResp {
	return v.value
}

func (v *NullableDNSGatewaysResp) Set(val *DNSGatewaysResp) {
	v.value = val
	v.isSet = true
}

func (v NullableDNSGatewaysResp) IsSet() bool {
	return v.isSet
}

func (v *NullableDNSGatewaysResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDNSGatewaysResp(val *DNSGatewaysResp) *NullableDNSGatewaysResp {
	return &NullableDNSGatewaysResp{value: val, isSet: true}
}

func (v NullableDNSGatewaysResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDNSGatewaysResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


