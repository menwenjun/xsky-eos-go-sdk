/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DfsDirectoriesReqDirectories type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsDirectoriesReqDirectories{}

// DfsDirectoriesReqDirectories struct for DfsDirectoriesReqDirectories
type DfsDirectoriesReqDirectories struct {
	// dfs rootfs id
	DfsRootfsId int64 `json:"dfs_rootfs_id"`
	// directory paths
	Directories []string `json:"directories"`
}

type _DfsDirectoriesReqDirectories DfsDirectoriesReqDirectories

// NewDfsDirectoriesReqDirectories instantiates a new DfsDirectoriesReqDirectories object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsDirectoriesReqDirectories(dfsRootfsId int64, directories []string) *DfsDirectoriesReqDirectories {
	this := DfsDirectoriesReqDirectories{}
	this.DfsRootfsId = dfsRootfsId
	this.Directories = directories
	return &this
}

// NewDfsDirectoriesReqDirectoriesWithDefaults instantiates a new DfsDirectoriesReqDirectories object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsDirectoriesReqDirectoriesWithDefaults() *DfsDirectoriesReqDirectories {
	this := DfsDirectoriesReqDirectories{}
	return &this
}

// GetDfsRootfsId returns the DfsRootfsId field value
func (o *DfsDirectoriesReqDirectories) GetDfsRootfsId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DfsRootfsId
}

// GetDfsRootfsIdOk returns a tuple with the DfsRootfsId field value
// and a boolean to check if the value has been set.
func (o *DfsDirectoriesReqDirectories) GetDfsRootfsIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DfsRootfsId, true
}

// SetDfsRootfsId sets field value
func (o *DfsDirectoriesReqDirectories) SetDfsRootfsId(v int64) {
	o.DfsRootfsId = v
}

// GetDirectories returns the Directories field value
func (o *DfsDirectoriesReqDirectories) GetDirectories() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Directories
}

// GetDirectoriesOk returns a tuple with the Directories field value
// and a boolean to check if the value has been set.
func (o *DfsDirectoriesReqDirectories) GetDirectoriesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Directories, true
}

// SetDirectories sets field value
func (o *DfsDirectoriesReqDirectories) SetDirectories(v []string) {
	o.Directories = v
}

func (o DfsDirectoriesReqDirectories) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsDirectoriesReqDirectories) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dfs_rootfs_id"] = o.DfsRootfsId
	toSerialize["directories"] = o.Directories
	return toSerialize, nil
}

func (o *DfsDirectoriesReqDirectories) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dfs_rootfs_id",
		"directories",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDfsDirectoriesReqDirectories := _DfsDirectoriesReqDirectories{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDfsDirectoriesReqDirectories)

	if err != nil {
		return err
	}

	*o = DfsDirectoriesReqDirectories(varDfsDirectoriesReqDirectories)

	return err
}

type NullableDfsDirectoriesReqDirectories struct {
	value *DfsDirectoriesReqDirectories
	isSet bool
}

func (v NullableDfsDirectoriesReqDirectories) Get() *DfsDirectoriesReqDirectories {
	return v.value
}

func (v *NullableDfsDirectoriesReqDirectories) Set(val *DfsDirectoriesReqDirectories) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsDirectoriesReqDirectories) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsDirectoriesReqDirectories) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsDirectoriesReqDirectories(val *DfsDirectoriesReqDirectories) *NullableDfsDirectoriesReqDirectories {
	return &NullableDfsDirectoriesReqDirectories{value: val, isSet: true}
}

func (v NullableDfsDirectoriesReqDirectories) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsDirectoriesReqDirectories) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


