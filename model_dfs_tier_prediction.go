/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the DfsTierPrediction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsTierPrediction{}

// DfsTierPrediction DfsTierPrediction contains tier prediction data
type DfsTierPrediction struct {
	Create *time.Time `json:"create,omitempty"`
	DataKbyte1day *int64 `json:"data_kbyte_1day,omitempty"`
	DataKbyte30days *int64 `json:"data_kbyte_30days,omitempty"`
	DataKbyte7days *int64 `json:"data_kbyte_7days,omitempty"`
	DataKbytePoints []DataKbytePredictionPoint `json:"data_kbyte_points,omitempty"`
	Id *int64 `json:"id,omitempty"`
	UsedKbyte1day *int64 `json:"used_kbyte_1day,omitempty"`
	UsedKbyte30days *int64 `json:"used_kbyte_30days,omitempty"`
	UsedKbyte7days *int64 `json:"used_kbyte_7days,omitempty"`
	UsedKbytePoints []PredictionPoint `json:"used_kbyte_points,omitempty"`
}

// NewDfsTierPrediction instantiates a new DfsTierPrediction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsTierPrediction() *DfsTierPrediction {
	this := DfsTierPrediction{}
	return &this
}

// NewDfsTierPredictionWithDefaults instantiates a new DfsTierPrediction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsTierPredictionWithDefaults() *DfsTierPrediction {
	this := DfsTierPrediction{}
	return &this
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *DfsTierPrediction) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTierPrediction) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *DfsTierPrediction) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *DfsTierPrediction) SetCreate(v time.Time) {
	o.Create = &v
}

// GetDataKbyte1day returns the DataKbyte1day field value if set, zero value otherwise.
func (o *DfsTierPrediction) GetDataKbyte1day() int64 {
	if o == nil || IsNil(o.DataKbyte1day) {
		var ret int64
		return ret
	}
	return *o.DataKbyte1day
}

// GetDataKbyte1dayOk returns a tuple with the DataKbyte1day field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTierPrediction) GetDataKbyte1dayOk() (*int64, bool) {
	if o == nil || IsNil(o.DataKbyte1day) {
		return nil, false
	}
	return o.DataKbyte1day, true
}

// HasDataKbyte1day returns a boolean if a field has been set.
func (o *DfsTierPrediction) HasDataKbyte1day() bool {
	if o != nil && !IsNil(o.DataKbyte1day) {
		return true
	}

	return false
}

// SetDataKbyte1day gets a reference to the given int64 and assigns it to the DataKbyte1day field.
func (o *DfsTierPrediction) SetDataKbyte1day(v int64) {
	o.DataKbyte1day = &v
}

// GetDataKbyte30days returns the DataKbyte30days field value if set, zero value otherwise.
func (o *DfsTierPrediction) GetDataKbyte30days() int64 {
	if o == nil || IsNil(o.DataKbyte30days) {
		var ret int64
		return ret
	}
	return *o.DataKbyte30days
}

// GetDataKbyte30daysOk returns a tuple with the DataKbyte30days field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTierPrediction) GetDataKbyte30daysOk() (*int64, bool) {
	if o == nil || IsNil(o.DataKbyte30days) {
		return nil, false
	}
	return o.DataKbyte30days, true
}

// HasDataKbyte30days returns a boolean if a field has been set.
func (o *DfsTierPrediction) HasDataKbyte30days() bool {
	if o != nil && !IsNil(o.DataKbyte30days) {
		return true
	}

	return false
}

// SetDataKbyte30days gets a reference to the given int64 and assigns it to the DataKbyte30days field.
func (o *DfsTierPrediction) SetDataKbyte30days(v int64) {
	o.DataKbyte30days = &v
}

// GetDataKbyte7days returns the DataKbyte7days field value if set, zero value otherwise.
func (o *DfsTierPrediction) GetDataKbyte7days() int64 {
	if o == nil || IsNil(o.DataKbyte7days) {
		var ret int64
		return ret
	}
	return *o.DataKbyte7days
}

// GetDataKbyte7daysOk returns a tuple with the DataKbyte7days field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTierPrediction) GetDataKbyte7daysOk() (*int64, bool) {
	if o == nil || IsNil(o.DataKbyte7days) {
		return nil, false
	}
	return o.DataKbyte7days, true
}

// HasDataKbyte7days returns a boolean if a field has been set.
func (o *DfsTierPrediction) HasDataKbyte7days() bool {
	if o != nil && !IsNil(o.DataKbyte7days) {
		return true
	}

	return false
}

// SetDataKbyte7days gets a reference to the given int64 and assigns it to the DataKbyte7days field.
func (o *DfsTierPrediction) SetDataKbyte7days(v int64) {
	o.DataKbyte7days = &v
}

// GetDataKbytePoints returns the DataKbytePoints field value if set, zero value otherwise.
func (o *DfsTierPrediction) GetDataKbytePoints() []DataKbytePredictionPoint {
	if o == nil || IsNil(o.DataKbytePoints) {
		var ret []DataKbytePredictionPoint
		return ret
	}
	return o.DataKbytePoints
}

// GetDataKbytePointsOk returns a tuple with the DataKbytePoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTierPrediction) GetDataKbytePointsOk() ([]DataKbytePredictionPoint, bool) {
	if o == nil || IsNil(o.DataKbytePoints) {
		return nil, false
	}
	return o.DataKbytePoints, true
}

// HasDataKbytePoints returns a boolean if a field has been set.
func (o *DfsTierPrediction) HasDataKbytePoints() bool {
	if o != nil && !IsNil(o.DataKbytePoints) {
		return true
	}

	return false
}

// SetDataKbytePoints gets a reference to the given []DataKbytePredictionPoint and assigns it to the DataKbytePoints field.
func (o *DfsTierPrediction) SetDataKbytePoints(v []DataKbytePredictionPoint) {
	o.DataKbytePoints = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DfsTierPrediction) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTierPrediction) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DfsTierPrediction) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *DfsTierPrediction) SetId(v int64) {
	o.Id = &v
}

// GetUsedKbyte1day returns the UsedKbyte1day field value if set, zero value otherwise.
func (o *DfsTierPrediction) GetUsedKbyte1day() int64 {
	if o == nil || IsNil(o.UsedKbyte1day) {
		var ret int64
		return ret
	}
	return *o.UsedKbyte1day
}

// GetUsedKbyte1dayOk returns a tuple with the UsedKbyte1day field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTierPrediction) GetUsedKbyte1dayOk() (*int64, bool) {
	if o == nil || IsNil(o.UsedKbyte1day) {
		return nil, false
	}
	return o.UsedKbyte1day, true
}

// HasUsedKbyte1day returns a boolean if a field has been set.
func (o *DfsTierPrediction) HasUsedKbyte1day() bool {
	if o != nil && !IsNil(o.UsedKbyte1day) {
		return true
	}

	return false
}

// SetUsedKbyte1day gets a reference to the given int64 and assigns it to the UsedKbyte1day field.
func (o *DfsTierPrediction) SetUsedKbyte1day(v int64) {
	o.UsedKbyte1day = &v
}

// GetUsedKbyte30days returns the UsedKbyte30days field value if set, zero value otherwise.
func (o *DfsTierPrediction) GetUsedKbyte30days() int64 {
	if o == nil || IsNil(o.UsedKbyte30days) {
		var ret int64
		return ret
	}
	return *o.UsedKbyte30days
}

// GetUsedKbyte30daysOk returns a tuple with the UsedKbyte30days field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTierPrediction) GetUsedKbyte30daysOk() (*int64, bool) {
	if o == nil || IsNil(o.UsedKbyte30days) {
		return nil, false
	}
	return o.UsedKbyte30days, true
}

// HasUsedKbyte30days returns a boolean if a field has been set.
func (o *DfsTierPrediction) HasUsedKbyte30days() bool {
	if o != nil && !IsNil(o.UsedKbyte30days) {
		return true
	}

	return false
}

// SetUsedKbyte30days gets a reference to the given int64 and assigns it to the UsedKbyte30days field.
func (o *DfsTierPrediction) SetUsedKbyte30days(v int64) {
	o.UsedKbyte30days = &v
}

// GetUsedKbyte7days returns the UsedKbyte7days field value if set, zero value otherwise.
func (o *DfsTierPrediction) GetUsedKbyte7days() int64 {
	if o == nil || IsNil(o.UsedKbyte7days) {
		var ret int64
		return ret
	}
	return *o.UsedKbyte7days
}

// GetUsedKbyte7daysOk returns a tuple with the UsedKbyte7days field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTierPrediction) GetUsedKbyte7daysOk() (*int64, bool) {
	if o == nil || IsNil(o.UsedKbyte7days) {
		return nil, false
	}
	return o.UsedKbyte7days, true
}

// HasUsedKbyte7days returns a boolean if a field has been set.
func (o *DfsTierPrediction) HasUsedKbyte7days() bool {
	if o != nil && !IsNil(o.UsedKbyte7days) {
		return true
	}

	return false
}

// SetUsedKbyte7days gets a reference to the given int64 and assigns it to the UsedKbyte7days field.
func (o *DfsTierPrediction) SetUsedKbyte7days(v int64) {
	o.UsedKbyte7days = &v
}

// GetUsedKbytePoints returns the UsedKbytePoints field value if set, zero value otherwise.
func (o *DfsTierPrediction) GetUsedKbytePoints() []PredictionPoint {
	if o == nil || IsNil(o.UsedKbytePoints) {
		var ret []PredictionPoint
		return ret
	}
	return o.UsedKbytePoints
}

// GetUsedKbytePointsOk returns a tuple with the UsedKbytePoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTierPrediction) GetUsedKbytePointsOk() ([]PredictionPoint, bool) {
	if o == nil || IsNil(o.UsedKbytePoints) {
		return nil, false
	}
	return o.UsedKbytePoints, true
}

// HasUsedKbytePoints returns a boolean if a field has been set.
func (o *DfsTierPrediction) HasUsedKbytePoints() bool {
	if o != nil && !IsNil(o.UsedKbytePoints) {
		return true
	}

	return false
}

// SetUsedKbytePoints gets a reference to the given []PredictionPoint and assigns it to the UsedKbytePoints field.
func (o *DfsTierPrediction) SetUsedKbytePoints(v []PredictionPoint) {
	o.UsedKbytePoints = v
}

func (o DfsTierPrediction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsTierPrediction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.DataKbyte1day) {
		toSerialize["data_kbyte_1day"] = o.DataKbyte1day
	}
	if !IsNil(o.DataKbyte30days) {
		toSerialize["data_kbyte_30days"] = o.DataKbyte30days
	}
	if !IsNil(o.DataKbyte7days) {
		toSerialize["data_kbyte_7days"] = o.DataKbyte7days
	}
	if !IsNil(o.DataKbytePoints) {
		toSerialize["data_kbyte_points"] = o.DataKbytePoints
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.UsedKbyte1day) {
		toSerialize["used_kbyte_1day"] = o.UsedKbyte1day
	}
	if !IsNil(o.UsedKbyte30days) {
		toSerialize["used_kbyte_30days"] = o.UsedKbyte30days
	}
	if !IsNil(o.UsedKbyte7days) {
		toSerialize["used_kbyte_7days"] = o.UsedKbyte7days
	}
	if !IsNil(o.UsedKbytePoints) {
		toSerialize["used_kbyte_points"] = o.UsedKbytePoints
	}
	return toSerialize, nil
}

type NullableDfsTierPrediction struct {
	value *DfsTierPrediction
	isSet bool
}

func (v NullableDfsTierPrediction) Get() *DfsTierPrediction {
	return v.value
}

func (v *NullableDfsTierPrediction) Set(val *DfsTierPrediction) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsTierPrediction) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsTierPrediction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsTierPrediction(val *DfsTierPrediction) *NullableDfsTierPrediction {
	return &NullableDfsTierPrediction{value: val, isSet: true}
}

func (v NullableDfsTierPrediction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsTierPrediction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


