/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ObjectStorageKeyUpdateReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectStorageKeyUpdateReq{}

// ObjectStorageKeyUpdateReq struct for ObjectStorageKeyUpdateReq
type ObjectStorageKeyUpdateReq struct {
	OsKey *ObjectStorageKeyUpdateReqKey `json:"os_key,omitempty"`
}

// NewObjectStorageKeyUpdateReq instantiates a new ObjectStorageKeyUpdateReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectStorageKeyUpdateReq() *ObjectStorageKeyUpdateReq {
	this := ObjectStorageKeyUpdateReq{}
	return &this
}

// NewObjectStorageKeyUpdateReqWithDefaults instantiates a new ObjectStorageKeyUpdateReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectStorageKeyUpdateReqWithDefaults() *ObjectStorageKeyUpdateReq {
	this := ObjectStorageKeyUpdateReq{}
	return &this
}

// GetOsKey returns the OsKey field value if set, zero value otherwise.
func (o *ObjectStorageKeyUpdateReq) GetOsKey() ObjectStorageKeyUpdateReqKey {
	if o == nil || IsNil(o.OsKey) {
		var ret ObjectStorageKeyUpdateReqKey
		return ret
	}
	return *o.OsKey
}

// GetOsKeyOk returns a tuple with the OsKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageKeyUpdateReq) GetOsKeyOk() (*ObjectStorageKeyUpdateReqKey, bool) {
	if o == nil || IsNil(o.OsKey) {
		return nil, false
	}
	return o.OsKey, true
}

// HasOsKey returns a boolean if a field has been set.
func (o *ObjectStorageKeyUpdateReq) HasOsKey() bool {
	if o != nil && !IsNil(o.OsKey) {
		return true
	}

	return false
}

// SetOsKey gets a reference to the given ObjectStorageKeyUpdateReqKey and assigns it to the OsKey field.
func (o *ObjectStorageKeyUpdateReq) SetOsKey(v ObjectStorageKeyUpdateReqKey) {
	o.OsKey = &v
}

func (o ObjectStorageKeyUpdateReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectStorageKeyUpdateReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OsKey) {
		toSerialize["os_key"] = o.OsKey
	}
	return toSerialize, nil
}

type NullableObjectStorageKeyUpdateReq struct {
	value *ObjectStorageKeyUpdateReq
	isSet bool
}

func (v NullableObjectStorageKeyUpdateReq) Get() *ObjectStorageKeyUpdateReq {
	return v.value
}

func (v *NullableObjectStorageKeyUpdateReq) Set(val *ObjectStorageKeyUpdateReq) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectStorageKeyUpdateReq) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectStorageKeyUpdateReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectStorageKeyUpdateReq(val *ObjectStorageKeyUpdateReq) *NullableObjectStorageKeyUpdateReq {
	return &NullableObjectStorageKeyUpdateReq{value: val, isSet: true}
}

func (v NullableObjectStorageKeyUpdateReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectStorageKeyUpdateReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


