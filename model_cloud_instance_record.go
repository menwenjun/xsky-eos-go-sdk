/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the CloudInstanceRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CloudInstanceRecord{}

// CloudInstanceRecord CloudInstanceRecord combine CloudInstance and CloudInstanceStat as API response
type CloudInstanceRecord struct {
	CloudDatacenter *CloudDatacenterNestview `json:"cloud_datacenter,omitempty"`
	CloudInstanceId *string `json:"cloud_instance_id,omitempty"`
	CloudPlatform *CloudPlatformNestview `json:"cloud_platform,omitempty"`
	CloudVolumeNum *int64 `json:"cloud_volume_num,omitempty"`
	Cluster *ClusterNestview `json:"cluster,omitempty"`
	Cores *int64 `json:"cores,omitempty"`
	Create *time.Time `json:"create,omitempty"`
	Hostname *string `json:"hostname,omitempty"`
	Id *int64 `json:"id,omitempty"`
	MemoryKbyte *int64 `json:"memory_kbyte,omitempty"`
	Name *string `json:"name,omitempty"`
	RootDeviceType *string `json:"root_device_type,omitempty"`
	Update *time.Time `json:"update,omitempty"`
	Samples []CloudInstanceStat `json:"samples,omitempty"`
}

// NewCloudInstanceRecord instantiates a new CloudInstanceRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCloudInstanceRecord() *CloudInstanceRecord {
	this := CloudInstanceRecord{}
	return &this
}

// NewCloudInstanceRecordWithDefaults instantiates a new CloudInstanceRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCloudInstanceRecordWithDefaults() *CloudInstanceRecord {
	this := CloudInstanceRecord{}
	return &this
}

// GetCloudDatacenter returns the CloudDatacenter field value if set, zero value otherwise.
func (o *CloudInstanceRecord) GetCloudDatacenter() CloudDatacenterNestview {
	if o == nil || IsNil(o.CloudDatacenter) {
		var ret CloudDatacenterNestview
		return ret
	}
	return *o.CloudDatacenter
}

// GetCloudDatacenterOk returns a tuple with the CloudDatacenter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudInstanceRecord) GetCloudDatacenterOk() (*CloudDatacenterNestview, bool) {
	if o == nil || IsNil(o.CloudDatacenter) {
		return nil, false
	}
	return o.CloudDatacenter, true
}

// HasCloudDatacenter returns a boolean if a field has been set.
func (o *CloudInstanceRecord) HasCloudDatacenter() bool {
	if o != nil && !IsNil(o.CloudDatacenter) {
		return true
	}

	return false
}

// SetCloudDatacenter gets a reference to the given CloudDatacenterNestview and assigns it to the CloudDatacenter field.
func (o *CloudInstanceRecord) SetCloudDatacenter(v CloudDatacenterNestview) {
	o.CloudDatacenter = &v
}

// GetCloudInstanceId returns the CloudInstanceId field value if set, zero value otherwise.
func (o *CloudInstanceRecord) GetCloudInstanceId() string {
	if o == nil || IsNil(o.CloudInstanceId) {
		var ret string
		return ret
	}
	return *o.CloudInstanceId
}

// GetCloudInstanceIdOk returns a tuple with the CloudInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudInstanceRecord) GetCloudInstanceIdOk() (*string, bool) {
	if o == nil || IsNil(o.CloudInstanceId) {
		return nil, false
	}
	return o.CloudInstanceId, true
}

// HasCloudInstanceId returns a boolean if a field has been set.
func (o *CloudInstanceRecord) HasCloudInstanceId() bool {
	if o != nil && !IsNil(o.CloudInstanceId) {
		return true
	}

	return false
}

// SetCloudInstanceId gets a reference to the given string and assigns it to the CloudInstanceId field.
func (o *CloudInstanceRecord) SetCloudInstanceId(v string) {
	o.CloudInstanceId = &v
}

// GetCloudPlatform returns the CloudPlatform field value if set, zero value otherwise.
func (o *CloudInstanceRecord) GetCloudPlatform() CloudPlatformNestview {
	if o == nil || IsNil(o.CloudPlatform) {
		var ret CloudPlatformNestview
		return ret
	}
	return *o.CloudPlatform
}

// GetCloudPlatformOk returns a tuple with the CloudPlatform field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudInstanceRecord) GetCloudPlatformOk() (*CloudPlatformNestview, bool) {
	if o == nil || IsNil(o.CloudPlatform) {
		return nil, false
	}
	return o.CloudPlatform, true
}

// HasCloudPlatform returns a boolean if a field has been set.
func (o *CloudInstanceRecord) HasCloudPlatform() bool {
	if o != nil && !IsNil(o.CloudPlatform) {
		return true
	}

	return false
}

// SetCloudPlatform gets a reference to the given CloudPlatformNestview and assigns it to the CloudPlatform field.
func (o *CloudInstanceRecord) SetCloudPlatform(v CloudPlatformNestview) {
	o.CloudPlatform = &v
}

// GetCloudVolumeNum returns the CloudVolumeNum field value if set, zero value otherwise.
func (o *CloudInstanceRecord) GetCloudVolumeNum() int64 {
	if o == nil || IsNil(o.CloudVolumeNum) {
		var ret int64
		return ret
	}
	return *o.CloudVolumeNum
}

// GetCloudVolumeNumOk returns a tuple with the CloudVolumeNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudInstanceRecord) GetCloudVolumeNumOk() (*int64, bool) {
	if o == nil || IsNil(o.CloudVolumeNum) {
		return nil, false
	}
	return o.CloudVolumeNum, true
}

// HasCloudVolumeNum returns a boolean if a field has been set.
func (o *CloudInstanceRecord) HasCloudVolumeNum() bool {
	if o != nil && !IsNil(o.CloudVolumeNum) {
		return true
	}

	return false
}

// SetCloudVolumeNum gets a reference to the given int64 and assigns it to the CloudVolumeNum field.
func (o *CloudInstanceRecord) SetCloudVolumeNum(v int64) {
	o.CloudVolumeNum = &v
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *CloudInstanceRecord) GetCluster() ClusterNestview {
	if o == nil || IsNil(o.Cluster) {
		var ret ClusterNestview
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudInstanceRecord) GetClusterOk() (*ClusterNestview, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *CloudInstanceRecord) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given ClusterNestview and assigns it to the Cluster field.
func (o *CloudInstanceRecord) SetCluster(v ClusterNestview) {
	o.Cluster = &v
}

// GetCores returns the Cores field value if set, zero value otherwise.
func (o *CloudInstanceRecord) GetCores() int64 {
	if o == nil || IsNil(o.Cores) {
		var ret int64
		return ret
	}
	return *o.Cores
}

// GetCoresOk returns a tuple with the Cores field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudInstanceRecord) GetCoresOk() (*int64, bool) {
	if o == nil || IsNil(o.Cores) {
		return nil, false
	}
	return o.Cores, true
}

// HasCores returns a boolean if a field has been set.
func (o *CloudInstanceRecord) HasCores() bool {
	if o != nil && !IsNil(o.Cores) {
		return true
	}

	return false
}

// SetCores gets a reference to the given int64 and assigns it to the Cores field.
func (o *CloudInstanceRecord) SetCores(v int64) {
	o.Cores = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *CloudInstanceRecord) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudInstanceRecord) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *CloudInstanceRecord) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *CloudInstanceRecord) SetCreate(v time.Time) {
	o.Create = &v
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *CloudInstanceRecord) GetHostname() string {
	if o == nil || IsNil(o.Hostname) {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudInstanceRecord) GetHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.Hostname) {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *CloudInstanceRecord) HasHostname() bool {
	if o != nil && !IsNil(o.Hostname) {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *CloudInstanceRecord) SetHostname(v string) {
	o.Hostname = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CloudInstanceRecord) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudInstanceRecord) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CloudInstanceRecord) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *CloudInstanceRecord) SetId(v int64) {
	o.Id = &v
}

// GetMemoryKbyte returns the MemoryKbyte field value if set, zero value otherwise.
func (o *CloudInstanceRecord) GetMemoryKbyte() int64 {
	if o == nil || IsNil(o.MemoryKbyte) {
		var ret int64
		return ret
	}
	return *o.MemoryKbyte
}

// GetMemoryKbyteOk returns a tuple with the MemoryKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudInstanceRecord) GetMemoryKbyteOk() (*int64, bool) {
	if o == nil || IsNil(o.MemoryKbyte) {
		return nil, false
	}
	return o.MemoryKbyte, true
}

// HasMemoryKbyte returns a boolean if a field has been set.
func (o *CloudInstanceRecord) HasMemoryKbyte() bool {
	if o != nil && !IsNil(o.MemoryKbyte) {
		return true
	}

	return false
}

// SetMemoryKbyte gets a reference to the given int64 and assigns it to the MemoryKbyte field.
func (o *CloudInstanceRecord) SetMemoryKbyte(v int64) {
	o.MemoryKbyte = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CloudInstanceRecord) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudInstanceRecord) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CloudInstanceRecord) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CloudInstanceRecord) SetName(v string) {
	o.Name = &v
}

// GetRootDeviceType returns the RootDeviceType field value if set, zero value otherwise.
func (o *CloudInstanceRecord) GetRootDeviceType() string {
	if o == nil || IsNil(o.RootDeviceType) {
		var ret string
		return ret
	}
	return *o.RootDeviceType
}

// GetRootDeviceTypeOk returns a tuple with the RootDeviceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudInstanceRecord) GetRootDeviceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RootDeviceType) {
		return nil, false
	}
	return o.RootDeviceType, true
}

// HasRootDeviceType returns a boolean if a field has been set.
func (o *CloudInstanceRecord) HasRootDeviceType() bool {
	if o != nil && !IsNil(o.RootDeviceType) {
		return true
	}

	return false
}

// SetRootDeviceType gets a reference to the given string and assigns it to the RootDeviceType field.
func (o *CloudInstanceRecord) SetRootDeviceType(v string) {
	o.RootDeviceType = &v
}

// GetUpdate returns the Update field value if set, zero value otherwise.
func (o *CloudInstanceRecord) GetUpdate() time.Time {
	if o == nil || IsNil(o.Update) {
		var ret time.Time
		return ret
	}
	return *o.Update
}

// GetUpdateOk returns a tuple with the Update field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudInstanceRecord) GetUpdateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Update) {
		return nil, false
	}
	return o.Update, true
}

// HasUpdate returns a boolean if a field has been set.
func (o *CloudInstanceRecord) HasUpdate() bool {
	if o != nil && !IsNil(o.Update) {
		return true
	}

	return false
}

// SetUpdate gets a reference to the given time.Time and assigns it to the Update field.
func (o *CloudInstanceRecord) SetUpdate(v time.Time) {
	o.Update = &v
}

// GetSamples returns the Samples field value if set, zero value otherwise.
func (o *CloudInstanceRecord) GetSamples() []CloudInstanceStat {
	if o == nil || IsNil(o.Samples) {
		var ret []CloudInstanceStat
		return ret
	}
	return o.Samples
}

// GetSamplesOk returns a tuple with the Samples field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudInstanceRecord) GetSamplesOk() ([]CloudInstanceStat, bool) {
	if o == nil || IsNil(o.Samples) {
		return nil, false
	}
	return o.Samples, true
}

// HasSamples returns a boolean if a field has been set.
func (o *CloudInstanceRecord) HasSamples() bool {
	if o != nil && !IsNil(o.Samples) {
		return true
	}

	return false
}

// SetSamples gets a reference to the given []CloudInstanceStat and assigns it to the Samples field.
func (o *CloudInstanceRecord) SetSamples(v []CloudInstanceStat) {
	o.Samples = v
}

func (o CloudInstanceRecord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CloudInstanceRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CloudDatacenter) {
		toSerialize["cloud_datacenter"] = o.CloudDatacenter
	}
	if !IsNil(o.CloudInstanceId) {
		toSerialize["cloud_instance_id"] = o.CloudInstanceId
	}
	if !IsNil(o.CloudPlatform) {
		toSerialize["cloud_platform"] = o.CloudPlatform
	}
	if !IsNil(o.CloudVolumeNum) {
		toSerialize["cloud_volume_num"] = o.CloudVolumeNum
	}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !IsNil(o.Cores) {
		toSerialize["cores"] = o.Cores
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.Hostname) {
		toSerialize["hostname"] = o.Hostname
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.MemoryKbyte) {
		toSerialize["memory_kbyte"] = o.MemoryKbyte
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.RootDeviceType) {
		toSerialize["root_device_type"] = o.RootDeviceType
	}
	if !IsNil(o.Update) {
		toSerialize["update"] = o.Update
	}
	if !IsNil(o.Samples) {
		toSerialize["samples"] = o.Samples
	}
	return toSerialize, nil
}

type NullableCloudInstanceRecord struct {
	value *CloudInstanceRecord
	isSet bool
}

func (v NullableCloudInstanceRecord) Get() *CloudInstanceRecord {
	return v.value
}

func (v *NullableCloudInstanceRecord) Set(val *CloudInstanceRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudInstanceRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudInstanceRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudInstanceRecord(val *CloudInstanceRecord) *NullableCloudInstanceRecord {
	return &NullableCloudInstanceRecord{value: val, isSet: true}
}

func (v NullableCloudInstanceRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudInstanceRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


