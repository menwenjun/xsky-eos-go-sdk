/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DfsFtpSharesAPIService DfsFtpSharesAPI service
type DfsFtpSharesAPIService service

type ApiAddDfsFTPShareACLsRequest struct {
	ctx context.Context
	ApiService *DfsFtpSharesAPIService
	dfsFtpShareId int64
	body *DfsFTPShareAddACLsReq
}

// ftp share acls info
func (r ApiAddDfsFTPShareACLsRequest) Body(body DfsFTPShareAddACLsReq) ApiAddDfsFTPShareACLsRequest {
	r.body = &body
	return r
}

func (r ApiAddDfsFTPShareACLsRequest) Execute() (*DfsFTPShareResp, *http.Response, error) {
	return r.ApiService.AddDfsFTPShareACLsExecute(r)
}

/*
AddDfsFTPShareACLs Method for AddDfsFTPShareACLs

Add dfs ftp share acls

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dfsFtpShareId dfs ftp share id
 @return ApiAddDfsFTPShareACLsRequest
*/
func (a *DfsFtpSharesAPIService) AddDfsFTPShareACLs(ctx context.Context, dfsFtpShareId int64) ApiAddDfsFTPShareACLsRequest {
	return ApiAddDfsFTPShareACLsRequest{
		ApiService: a,
		ctx: ctx,
		dfsFtpShareId: dfsFtpShareId,
	}
}

// Execute executes the request
//  @return DfsFTPShareResp
func (a *DfsFtpSharesAPIService) AddDfsFTPShareACLsExecute(r ApiAddDfsFTPShareACLsRequest) (*DfsFTPShareResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsFTPShareResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsFtpSharesAPIService.AddDfsFTPShareACLs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-ftp-shares/{dfs_ftp_share_id}:add-acls"
	localVarPath = strings.Replace(localVarPath, "{"+"dfs_ftp_share_id"+"}", url.PathEscape(parameterValueToString(r.dfsFtpShareId, "dfsFtpShareId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateDfsFTPShareRequest struct {
	ctx context.Context
	ApiService *DfsFtpSharesAPIService
	body *DfsFTPShareCreateReq
	allowPathCreate *bool
}

// share info
func (r ApiCreateDfsFTPShareRequest) Body(body DfsFTPShareCreateReq) ApiCreateDfsFTPShareRequest {
	r.body = &body
	return r
}

// allow create path when not existed
func (r ApiCreateDfsFTPShareRequest) AllowPathCreate(allowPathCreate bool) ApiCreateDfsFTPShareRequest {
	r.allowPathCreate = &allowPathCreate
	return r
}

func (r ApiCreateDfsFTPShareRequest) Execute() (*DfsFTPShareResp, *http.Response, error) {
	return r.ApiService.CreateDfsFTPShareExecute(r)
}

/*
CreateDfsFTPShare Method for CreateDfsFTPShare

Create dfs ftp share

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateDfsFTPShareRequest
*/
func (a *DfsFtpSharesAPIService) CreateDfsFTPShare(ctx context.Context) ApiCreateDfsFTPShareRequest {
	return ApiCreateDfsFTPShareRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DfsFTPShareResp
func (a *DfsFtpSharesAPIService) CreateDfsFTPShareExecute(r ApiCreateDfsFTPShareRequest) (*DfsFTPShareResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsFTPShareResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsFtpSharesAPIService.CreateDfsFTPShare")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-ftp-shares/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.allowPathCreate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allow_path_create", r.allowPathCreate, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteDfsFTPShareRequest struct {
	ctx context.Context
	ApiService *DfsFtpSharesAPIService
	dfsFtpShareId int64
	force *bool
	withDirectory *bool
}

// force delete or not
func (r ApiDeleteDfsFTPShareRequest) Force(force bool) ApiDeleteDfsFTPShareRequest {
	r.force = &force
	return r
}

// also delete directory
func (r ApiDeleteDfsFTPShareRequest) WithDirectory(withDirectory bool) ApiDeleteDfsFTPShareRequest {
	r.withDirectory = &withDirectory
	return r
}

func (r ApiDeleteDfsFTPShareRequest) Execute() (*DfsFTPShareResp, *http.Response, error) {
	return r.ApiService.DeleteDfsFTPShareExecute(r)
}

/*
DeleteDfsFTPShare Method for DeleteDfsFTPShare

delete dfs ftp share

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dfsFtpShareId share id
 @return ApiDeleteDfsFTPShareRequest
*/
func (a *DfsFtpSharesAPIService) DeleteDfsFTPShare(ctx context.Context, dfsFtpShareId int64) ApiDeleteDfsFTPShareRequest {
	return ApiDeleteDfsFTPShareRequest{
		ApiService: a,
		ctx: ctx,
		dfsFtpShareId: dfsFtpShareId,
	}
}

// Execute executes the request
//  @return DfsFTPShareResp
func (a *DfsFtpSharesAPIService) DeleteDfsFTPShareExecute(r ApiDeleteDfsFTPShareRequest) (*DfsFTPShareResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsFTPShareResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsFtpSharesAPIService.DeleteDfsFTPShare")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-ftp-shares/{dfs_ftp_share_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"dfs_ftp_share_id"+"}", url.PathEscape(parameterValueToString(r.dfsFtpShareId, "dfsFtpShareId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.force != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "force", r.force, "form", "")
	}
	if r.withDirectory != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "with_directory", r.withDirectory, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDfsFTPShareRequest struct {
	ctx context.Context
	ApiService *DfsFtpSharesAPIService
	dfsFtpShareId int64
}

func (r ApiGetDfsFTPShareRequest) Execute() (*DfsFTPShareResp, *http.Response, error) {
	return r.ApiService.GetDfsFTPShareExecute(r)
}

/*
GetDfsFTPShare Method for GetDfsFTPShare

Get dfs ftp share

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dfsFtpShareId share id
 @return ApiGetDfsFTPShareRequest
*/
func (a *DfsFtpSharesAPIService) GetDfsFTPShare(ctx context.Context, dfsFtpShareId int64) ApiGetDfsFTPShareRequest {
	return ApiGetDfsFTPShareRequest{
		ApiService: a,
		ctx: ctx,
		dfsFtpShareId: dfsFtpShareId,
	}
}

// Execute executes the request
//  @return DfsFTPShareResp
func (a *DfsFtpSharesAPIService) GetDfsFTPShareExecute(r ApiGetDfsFTPShareRequest) (*DfsFTPShareResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsFTPShareResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsFtpSharesAPIService.GetDfsFTPShare")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-ftp-shares/{dfs_ftp_share_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"dfs_ftp_share_id"+"}", url.PathEscape(parameterValueToString(r.dfsFtpShareId, "dfsFtpShareId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListDfsFTPSharesRequest struct {
	ctx context.Context
	ApiService *DfsFtpSharesAPIService
	limit *int64
	offset *int64
	clusterId *string
	dfsRootfsId *int64
	path *string
	dfsGatewayGroupId *int64
	q *string
	sort *string
}

// paging param
func (r ApiListDfsFTPSharesRequest) Limit(limit int64) ApiListDfsFTPSharesRequest {
	r.limit = &limit
	return r
}

// paging param
func (r ApiListDfsFTPSharesRequest) Offset(offset int64) ApiListDfsFTPSharesRequest {
	r.offset = &offset
	return r
}

// cluster id
func (r ApiListDfsFTPSharesRequest) ClusterId(clusterId string) ApiListDfsFTPSharesRequest {
	r.clusterId = &clusterId
	return r
}

// dfs rootfs id
func (r ApiListDfsFTPSharesRequest) DfsRootfsId(dfsRootfsId int64) ApiListDfsFTPSharesRequest {
	r.dfsRootfsId = &dfsRootfsId
	return r
}

// related dfs path
func (r ApiListDfsFTPSharesRequest) Path(path string) ApiListDfsFTPSharesRequest {
	r.path = &path
	return r
}

// dfs gateway group id
func (r ApiListDfsFTPSharesRequest) DfsGatewayGroupId(dfsGatewayGroupId int64) ApiListDfsFTPSharesRequest {
	r.dfsGatewayGroupId = &dfsGatewayGroupId
	return r
}

// query param of search
func (r ApiListDfsFTPSharesRequest) Q(q string) ApiListDfsFTPSharesRequest {
	r.q = &q
	return r
}

// sort param of search
func (r ApiListDfsFTPSharesRequest) Sort(sort string) ApiListDfsFTPSharesRequest {
	r.sort = &sort
	return r
}

func (r ApiListDfsFTPSharesRequest) Execute() (*DfsFTPSharesResp, *http.Response, error) {
	return r.ApiService.ListDfsFTPSharesExecute(r)
}

/*
ListDfsFTPShares Method for ListDfsFTPShares

List dfs ftp shares

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListDfsFTPSharesRequest
*/
func (a *DfsFtpSharesAPIService) ListDfsFTPShares(ctx context.Context) ApiListDfsFTPSharesRequest {
	return ApiListDfsFTPSharesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DfsFTPSharesResp
func (a *DfsFtpSharesAPIService) ListDfsFTPSharesExecute(r ApiListDfsFTPSharesRequest) (*DfsFTPSharesResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsFTPSharesResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsFtpSharesAPIService.ListDfsFTPShares")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-ftp-shares/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.clusterId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_id", r.clusterId, "form", "")
	}
	if r.dfsRootfsId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dfs_rootfs_id", r.dfsRootfsId, "form", "")
	}
	if r.path != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "path", r.path, "form", "")
	}
	if r.dfsGatewayGroupId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dfs_gateway_group_id", r.dfsGatewayGroupId, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRemoveDfsFTPShareACLsRequest struct {
	ctx context.Context
	ApiService *DfsFtpSharesAPIService
	dfsFtpShareId int64
	body *DfsFTPShareRemoveACLsReq
}

// share acls info
func (r ApiRemoveDfsFTPShareACLsRequest) Body(body DfsFTPShareRemoveACLsReq) ApiRemoveDfsFTPShareACLsRequest {
	r.body = &body
	return r
}

func (r ApiRemoveDfsFTPShareACLsRequest) Execute() (*DfsFTPShareResp, *http.Response, error) {
	return r.ApiService.RemoveDfsFTPShareACLsExecute(r)
}

/*
RemoveDfsFTPShareACLs Method for RemoveDfsFTPShareACLs

remove dfs ftp share acls

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dfsFtpShareId dfs ftp share id
 @return ApiRemoveDfsFTPShareACLsRequest
*/
func (a *DfsFtpSharesAPIService) RemoveDfsFTPShareACLs(ctx context.Context, dfsFtpShareId int64) ApiRemoveDfsFTPShareACLsRequest {
	return ApiRemoveDfsFTPShareACLsRequest{
		ApiService: a,
		ctx: ctx,
		dfsFtpShareId: dfsFtpShareId,
	}
}

// Execute executes the request
//  @return DfsFTPShareResp
func (a *DfsFtpSharesAPIService) RemoveDfsFTPShareACLsExecute(r ApiRemoveDfsFTPShareACLsRequest) (*DfsFTPShareResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsFTPShareResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsFtpSharesAPIService.RemoveDfsFTPShareACLs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-ftp-shares/{dfs_ftp_share_id}:remove-acls"
	localVarPath = strings.Replace(localVarPath, "{"+"dfs_ftp_share_id"+"}", url.PathEscape(parameterValueToString(r.dfsFtpShareId, "dfsFtpShareId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateDfsFTPShareRequest struct {
	ctx context.Context
	ApiService *DfsFtpSharesAPIService
	dfsFtpShareId int64
	body *DfsFTPShareUpdateReq
}

// share info
func (r ApiUpdateDfsFTPShareRequest) Body(body DfsFTPShareUpdateReq) ApiUpdateDfsFTPShareRequest {
	r.body = &body
	return r
}

func (r ApiUpdateDfsFTPShareRequest) Execute() (*DfsFTPShareResp, *http.Response, error) {
	return r.ApiService.UpdateDfsFTPShareExecute(r)
}

/*
UpdateDfsFTPShare Method for UpdateDfsFTPShare

update dfs ftp shares

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dfsFtpShareId share id
 @return ApiUpdateDfsFTPShareRequest
*/
func (a *DfsFtpSharesAPIService) UpdateDfsFTPShare(ctx context.Context, dfsFtpShareId int64) ApiUpdateDfsFTPShareRequest {
	return ApiUpdateDfsFTPShareRequest{
		ApiService: a,
		ctx: ctx,
		dfsFtpShareId: dfsFtpShareId,
	}
}

// Execute executes the request
//  @return DfsFTPShareResp
func (a *DfsFtpSharesAPIService) UpdateDfsFTPShareExecute(r ApiUpdateDfsFTPShareRequest) (*DfsFTPShareResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsFTPShareResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsFtpSharesAPIService.UpdateDfsFTPShare")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-ftp-shares/{dfs_ftp_share_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"dfs_ftp_share_id"+"}", url.PathEscape(parameterValueToString(r.dfsFtpShareId, "dfsFtpShareId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateDfsFTPShareACLsRequest struct {
	ctx context.Context
	ApiService *DfsFtpSharesAPIService
	dfsFtpShareId int64
	body *DfsFTPShareUpdateACLsReq
}

// ftp share acls info
func (r ApiUpdateDfsFTPShareACLsRequest) Body(body DfsFTPShareUpdateACLsReq) ApiUpdateDfsFTPShareACLsRequest {
	r.body = &body
	return r
}

func (r ApiUpdateDfsFTPShareACLsRequest) Execute() (*DfsFTPShareResp, *http.Response, error) {
	return r.ApiService.UpdateDfsFTPShareACLsExecute(r)
}

/*
UpdateDfsFTPShareACLs Method for UpdateDfsFTPShareACLs

Update dfs ftp share acls

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dfsFtpShareId ftp share id
 @return ApiUpdateDfsFTPShareACLsRequest
*/
func (a *DfsFtpSharesAPIService) UpdateDfsFTPShareACLs(ctx context.Context, dfsFtpShareId int64) ApiUpdateDfsFTPShareACLsRequest {
	return ApiUpdateDfsFTPShareACLsRequest{
		ApiService: a,
		ctx: ctx,
		dfsFtpShareId: dfsFtpShareId,
	}
}

// Execute executes the request
//  @return DfsFTPShareResp
func (a *DfsFtpSharesAPIService) UpdateDfsFTPShareACLsExecute(r ApiUpdateDfsFTPShareACLsRequest) (*DfsFTPShareResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DfsFTPShareResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DfsFtpSharesAPIService.UpdateDfsFTPShareACLs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dfs-ftp-shares/{dfs_ftp_share_id}:update-acls"
	localVarPath = strings.Replace(localVarPath, "{"+"dfs_ftp_share_id"+"}", url.PathEscape(parameterValueToString(r.dfsFtpShareId, "dfsFtpShareId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
