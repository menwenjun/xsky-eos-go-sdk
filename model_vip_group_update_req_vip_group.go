/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the VIPGroupUpdateReqVIPGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VIPGroupUpdateReqVIPGroup{}

// VIPGroupUpdateReqVIPGroup struct for VIPGroupUpdateReqVIPGroup
type VIPGroupUpdateReqVIPGroup struct {
	Preempt *bool `json:"preempt,omitempty"`
}

// NewVIPGroupUpdateReqVIPGroup instantiates a new VIPGroupUpdateReqVIPGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVIPGroupUpdateReqVIPGroup() *VIPGroupUpdateReqVIPGroup {
	this := VIPGroupUpdateReqVIPGroup{}
	return &this
}

// NewVIPGroupUpdateReqVIPGroupWithDefaults instantiates a new VIPGroupUpdateReqVIPGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVIPGroupUpdateReqVIPGroupWithDefaults() *VIPGroupUpdateReqVIPGroup {
	this := VIPGroupUpdateReqVIPGroup{}
	return &this
}

// GetPreempt returns the Preempt field value if set, zero value otherwise.
func (o *VIPGroupUpdateReqVIPGroup) GetPreempt() bool {
	if o == nil || IsNil(o.Preempt) {
		var ret bool
		return ret
	}
	return *o.Preempt
}

// GetPreemptOk returns a tuple with the Preempt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VIPGroupUpdateReqVIPGroup) GetPreemptOk() (*bool, bool) {
	if o == nil || IsNil(o.Preempt) {
		return nil, false
	}
	return o.Preempt, true
}

// HasPreempt returns a boolean if a field has been set.
func (o *VIPGroupUpdateReqVIPGroup) HasPreempt() bool {
	if o != nil && !IsNil(o.Preempt) {
		return true
	}

	return false
}

// SetPreempt gets a reference to the given bool and assigns it to the Preempt field.
func (o *VIPGroupUpdateReqVIPGroup) SetPreempt(v bool) {
	o.Preempt = &v
}

func (o VIPGroupUpdateReqVIPGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VIPGroupUpdateReqVIPGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Preempt) {
		toSerialize["preempt"] = o.Preempt
	}
	return toSerialize, nil
}

type NullableVIPGroupUpdateReqVIPGroup struct {
	value *VIPGroupUpdateReqVIPGroup
	isSet bool
}

func (v NullableVIPGroupUpdateReqVIPGroup) Get() *VIPGroupUpdateReqVIPGroup {
	return v.value
}

func (v *NullableVIPGroupUpdateReqVIPGroup) Set(val *VIPGroupUpdateReqVIPGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableVIPGroupUpdateReqVIPGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableVIPGroupUpdateReqVIPGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVIPGroupUpdateReqVIPGroup(val *VIPGroupUpdateReqVIPGroup) *NullableVIPGroupUpdateReqVIPGroup {
	return &NullableVIPGroupUpdateReqVIPGroup{value: val, isSet: true}
}

func (v NullableVIPGroupUpdateReqVIPGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVIPGroupUpdateReqVIPGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


