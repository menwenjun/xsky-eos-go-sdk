/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DfsWormsResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsWormsResp{}

// DfsWormsResp struct for DfsWormsResp
type DfsWormsResp struct {
	DfsWorms []DfsWorm `json:"dfs_worms"`
}

type _DfsWormsResp DfsWormsResp

// NewDfsWormsResp instantiates a new DfsWormsResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsWormsResp(dfsWorms []DfsWorm) *DfsWormsResp {
	this := DfsWormsResp{}
	this.DfsWorms = dfsWorms
	return &this
}

// NewDfsWormsRespWithDefaults instantiates a new DfsWormsResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsWormsRespWithDefaults() *DfsWormsResp {
	this := DfsWormsResp{}
	return &this
}

// GetDfsWorms returns the DfsWorms field value
func (o *DfsWormsResp) GetDfsWorms() []DfsWorm {
	if o == nil {
		var ret []DfsWorm
		return ret
	}

	return o.DfsWorms
}

// GetDfsWormsOk returns a tuple with the DfsWorms field value
// and a boolean to check if the value has been set.
func (o *DfsWormsResp) GetDfsWormsOk() ([]DfsWorm, bool) {
	if o == nil {
		return nil, false
	}
	return o.DfsWorms, true
}

// SetDfsWorms sets field value
func (o *DfsWormsResp) SetDfsWorms(v []DfsWorm) {
	o.DfsWorms = v
}

func (o DfsWormsResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsWormsResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dfs_worms"] = o.DfsWorms
	return toSerialize, nil
}

func (o *DfsWormsResp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dfs_worms",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDfsWormsResp := _DfsWormsResp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDfsWormsResp)

	if err != nil {
		return err
	}

	*o = DfsWormsResp(varDfsWormsResp)

	return err
}

type NullableDfsWormsResp struct {
	value *DfsWormsResp
	isSet bool
}

func (v NullableDfsWormsResp) Get() *DfsWormsResp {
	return v.value
}

func (v *NullableDfsWormsResp) Set(val *DfsWormsResp) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsWormsResp) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsWormsResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsWormsResp(val *DfsWormsResp) *NullableDfsWormsResp {
	return &NullableDfsWormsResp{value: val, isSet: true}
}

func (v NullableDfsWormsResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsWormsResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


