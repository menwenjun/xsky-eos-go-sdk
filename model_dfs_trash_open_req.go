/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DfsTrashOpenReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsTrashOpenReq{}

// DfsTrashOpenReq struct for DfsTrashOpenReq
type DfsTrashOpenReq struct {
	DfsTrash DfsTrashOpenReqTrash `json:"dfs_trash"`
}

type _DfsTrashOpenReq DfsTrashOpenReq

// NewDfsTrashOpenReq instantiates a new DfsTrashOpenReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsTrashOpenReq(dfsTrash DfsTrashOpenReqTrash) *DfsTrashOpenReq {
	this := DfsTrashOpenReq{}
	this.DfsTrash = dfsTrash
	return &this
}

// NewDfsTrashOpenReqWithDefaults instantiates a new DfsTrashOpenReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsTrashOpenReqWithDefaults() *DfsTrashOpenReq {
	this := DfsTrashOpenReq{}
	return &this
}

// GetDfsTrash returns the DfsTrash field value
func (o *DfsTrashOpenReq) GetDfsTrash() DfsTrashOpenReqTrash {
	if o == nil {
		var ret DfsTrashOpenReqTrash
		return ret
	}

	return o.DfsTrash
}

// GetDfsTrashOk returns a tuple with the DfsTrash field value
// and a boolean to check if the value has been set.
func (o *DfsTrashOpenReq) GetDfsTrashOk() (*DfsTrashOpenReqTrash, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DfsTrash, true
}

// SetDfsTrash sets field value
func (o *DfsTrashOpenReq) SetDfsTrash(v DfsTrashOpenReqTrash) {
	o.DfsTrash = v
}

func (o DfsTrashOpenReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsTrashOpenReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dfs_trash"] = o.DfsTrash
	return toSerialize, nil
}

func (o *DfsTrashOpenReq) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dfs_trash",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDfsTrashOpenReq := _DfsTrashOpenReq{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDfsTrashOpenReq)

	if err != nil {
		return err
	}

	*o = DfsTrashOpenReq(varDfsTrashOpenReq)

	return err
}

type NullableDfsTrashOpenReq struct {
	value *DfsTrashOpenReq
	isSet bool
}

func (v NullableDfsTrashOpenReq) Get() *DfsTrashOpenReq {
	return v.value
}

func (v *NullableDfsTrashOpenReq) Set(val *DfsTrashOpenReq) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsTrashOpenReq) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsTrashOpenReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsTrashOpenReq(val *DfsTrashOpenReq) *NullableDfsTrashOpenReq {
	return &NullableDfsTrashOpenReq{value: val, isSet: true}
}

func (v NullableDfsTrashOpenReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsTrashOpenReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


