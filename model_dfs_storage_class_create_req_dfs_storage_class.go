/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DfsStorageClassCreateReqDfsStorageClass type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsStorageClassCreateReqDfsStorageClass{}

// DfsStorageClassCreateReqDfsStorageClass struct for DfsStorageClassCreateReqDfsStorageClass
type DfsStorageClassCreateReqDfsStorageClass struct {
	// description of custom class
	Description *string `json:"description,omitempty"`
	// name of custom class
	Name string `json:"name"`
	// active pool policy array of custom class
	PoolPolicies []PoolPolicy `json:"pool_policies"`
	// id of rootfs
	RootfsId int64 `json:"rootfs_id"`
	// class unique id
	ScId int64 `json:"sc_id"`
	// write policy of custom class
	WritePolicy string `json:"write_policy"`
}

type _DfsStorageClassCreateReqDfsStorageClass DfsStorageClassCreateReqDfsStorageClass

// NewDfsStorageClassCreateReqDfsStorageClass instantiates a new DfsStorageClassCreateReqDfsStorageClass object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsStorageClassCreateReqDfsStorageClass(name string, poolPolicies []PoolPolicy, rootfsId int64, scId int64, writePolicy string) *DfsStorageClassCreateReqDfsStorageClass {
	this := DfsStorageClassCreateReqDfsStorageClass{}
	this.Name = name
	this.PoolPolicies = poolPolicies
	this.RootfsId = rootfsId
	this.ScId = scId
	this.WritePolicy = writePolicy
	return &this
}

// NewDfsStorageClassCreateReqDfsStorageClassWithDefaults instantiates a new DfsStorageClassCreateReqDfsStorageClass object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsStorageClassCreateReqDfsStorageClassWithDefaults() *DfsStorageClassCreateReqDfsStorageClass {
	this := DfsStorageClassCreateReqDfsStorageClass{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DfsStorageClassCreateReqDfsStorageClass) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsStorageClassCreateReqDfsStorageClass) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DfsStorageClassCreateReqDfsStorageClass) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DfsStorageClassCreateReqDfsStorageClass) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value
func (o *DfsStorageClassCreateReqDfsStorageClass) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DfsStorageClassCreateReqDfsStorageClass) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DfsStorageClassCreateReqDfsStorageClass) SetName(v string) {
	o.Name = v
}

// GetPoolPolicies returns the PoolPolicies field value
func (o *DfsStorageClassCreateReqDfsStorageClass) GetPoolPolicies() []PoolPolicy {
	if o == nil {
		var ret []PoolPolicy
		return ret
	}

	return o.PoolPolicies
}

// GetPoolPoliciesOk returns a tuple with the PoolPolicies field value
// and a boolean to check if the value has been set.
func (o *DfsStorageClassCreateReqDfsStorageClass) GetPoolPoliciesOk() ([]PoolPolicy, bool) {
	if o == nil {
		return nil, false
	}
	return o.PoolPolicies, true
}

// SetPoolPolicies sets field value
func (o *DfsStorageClassCreateReqDfsStorageClass) SetPoolPolicies(v []PoolPolicy) {
	o.PoolPolicies = v
}

// GetRootfsId returns the RootfsId field value
func (o *DfsStorageClassCreateReqDfsStorageClass) GetRootfsId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.RootfsId
}

// GetRootfsIdOk returns a tuple with the RootfsId field value
// and a boolean to check if the value has been set.
func (o *DfsStorageClassCreateReqDfsStorageClass) GetRootfsIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RootfsId, true
}

// SetRootfsId sets field value
func (o *DfsStorageClassCreateReqDfsStorageClass) SetRootfsId(v int64) {
	o.RootfsId = v
}

// GetScId returns the ScId field value
func (o *DfsStorageClassCreateReqDfsStorageClass) GetScId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ScId
}

// GetScIdOk returns a tuple with the ScId field value
// and a boolean to check if the value has been set.
func (o *DfsStorageClassCreateReqDfsStorageClass) GetScIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScId, true
}

// SetScId sets field value
func (o *DfsStorageClassCreateReqDfsStorageClass) SetScId(v int64) {
	o.ScId = v
}

// GetWritePolicy returns the WritePolicy field value
func (o *DfsStorageClassCreateReqDfsStorageClass) GetWritePolicy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WritePolicy
}

// GetWritePolicyOk returns a tuple with the WritePolicy field value
// and a boolean to check if the value has been set.
func (o *DfsStorageClassCreateReqDfsStorageClass) GetWritePolicyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WritePolicy, true
}

// SetWritePolicy sets field value
func (o *DfsStorageClassCreateReqDfsStorageClass) SetWritePolicy(v string) {
	o.WritePolicy = v
}

func (o DfsStorageClassCreateReqDfsStorageClass) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsStorageClassCreateReqDfsStorageClass) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["name"] = o.Name
	toSerialize["pool_policies"] = o.PoolPolicies
	toSerialize["rootfs_id"] = o.RootfsId
	toSerialize["sc_id"] = o.ScId
	toSerialize["write_policy"] = o.WritePolicy
	return toSerialize, nil
}

func (o *DfsStorageClassCreateReqDfsStorageClass) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"pool_policies",
		"rootfs_id",
		"sc_id",
		"write_policy",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDfsStorageClassCreateReqDfsStorageClass := _DfsStorageClassCreateReqDfsStorageClass{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDfsStorageClassCreateReqDfsStorageClass)

	if err != nil {
		return err
	}

	*o = DfsStorageClassCreateReqDfsStorageClass(varDfsStorageClassCreateReqDfsStorageClass)

	return err
}

type NullableDfsStorageClassCreateReqDfsStorageClass struct {
	value *DfsStorageClassCreateReqDfsStorageClass
	isSet bool
}

func (v NullableDfsStorageClassCreateReqDfsStorageClass) Get() *DfsStorageClassCreateReqDfsStorageClass {
	return v.value
}

func (v *NullableDfsStorageClassCreateReqDfsStorageClass) Set(val *DfsStorageClassCreateReqDfsStorageClass) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsStorageClassCreateReqDfsStorageClass) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsStorageClassCreateReqDfsStorageClass) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsStorageClassCreateReqDfsStorageClass(val *DfsStorageClassCreateReqDfsStorageClass) *NullableDfsStorageClassCreateReqDfsStorageClass {
	return &NullableDfsStorageClassCreateReqDfsStorageClass{value: val, isSet: true}
}

func (v NullableDfsStorageClassCreateReqDfsStorageClass) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsStorageClassCreateReqDfsStorageClass) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


