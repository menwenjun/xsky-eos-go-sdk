/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PartitionsResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PartitionsResp{}

// PartitionsResp struct for PartitionsResp
type PartitionsResp struct {
	Partitions []PartitionRecord `json:"partitions,omitempty"`
}

// NewPartitionsResp instantiates a new PartitionsResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPartitionsResp() *PartitionsResp {
	this := PartitionsResp{}
	return &this
}

// NewPartitionsRespWithDefaults instantiates a new PartitionsResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPartitionsRespWithDefaults() *PartitionsResp {
	this := PartitionsResp{}
	return &this
}

// GetPartitions returns the Partitions field value if set, zero value otherwise.
func (o *PartitionsResp) GetPartitions() []PartitionRecord {
	if o == nil || IsNil(o.Partitions) {
		var ret []PartitionRecord
		return ret
	}
	return o.Partitions
}

// GetPartitionsOk returns a tuple with the Partitions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionsResp) GetPartitionsOk() ([]PartitionRecord, bool) {
	if o == nil || IsNil(o.Partitions) {
		return nil, false
	}
	return o.Partitions, true
}

// HasPartitions returns a boolean if a field has been set.
func (o *PartitionsResp) HasPartitions() bool {
	if o != nil && !IsNil(o.Partitions) {
		return true
	}

	return false
}

// SetPartitions gets a reference to the given []PartitionRecord and assigns it to the Partitions field.
func (o *PartitionsResp) SetPartitions(v []PartitionRecord) {
	o.Partitions = v
}

func (o PartitionsResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PartitionsResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Partitions) {
		toSerialize["partitions"] = o.Partitions
	}
	return toSerialize, nil
}

type NullablePartitionsResp struct {
	value *PartitionsResp
	isSet bool
}

func (v NullablePartitionsResp) Get() *PartitionsResp {
	return v.value
}

func (v *NullablePartitionsResp) Set(val *PartitionsResp) {
	v.value = val
	v.isSet = true
}

func (v NullablePartitionsResp) IsSet() bool {
	return v.isSet
}

func (v *NullablePartitionsResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePartitionsResp(val *PartitionsResp) *NullablePartitionsResp {
	return &NullablePartitionsResp{value: val, isSet: true}
}

func (v NullablePartitionsResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePartitionsResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


