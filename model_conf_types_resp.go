/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ConfTypesResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfTypesResp{}

// ConfTypesResp struct for ConfTypesResp
type ConfTypesResp struct {
	ConfTypes []ConfType `json:"conf_types,omitempty"`
}

// NewConfTypesResp instantiates a new ConfTypesResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfTypesResp() *ConfTypesResp {
	this := ConfTypesResp{}
	return &this
}

// NewConfTypesRespWithDefaults instantiates a new ConfTypesResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfTypesRespWithDefaults() *ConfTypesResp {
	this := ConfTypesResp{}
	return &this
}

// GetConfTypes returns the ConfTypes field value if set, zero value otherwise.
func (o *ConfTypesResp) GetConfTypes() []ConfType {
	if o == nil || IsNil(o.ConfTypes) {
		var ret []ConfType
		return ret
	}
	return o.ConfTypes
}

// GetConfTypesOk returns a tuple with the ConfTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfTypesResp) GetConfTypesOk() ([]ConfType, bool) {
	if o == nil || IsNil(o.ConfTypes) {
		return nil, false
	}
	return o.ConfTypes, true
}

// HasConfTypes returns a boolean if a field has been set.
func (o *ConfTypesResp) HasConfTypes() bool {
	if o != nil && !IsNil(o.ConfTypes) {
		return true
	}

	return false
}

// SetConfTypes gets a reference to the given []ConfType and assigns it to the ConfTypes field.
func (o *ConfTypesResp) SetConfTypes(v []ConfType) {
	o.ConfTypes = v
}

func (o ConfTypesResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfTypesResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConfTypes) {
		toSerialize["conf_types"] = o.ConfTypes
	}
	return toSerialize, nil
}

type NullableConfTypesResp struct {
	value *ConfTypesResp
	isSet bool
}

func (v NullableConfTypesResp) Get() *ConfTypesResp {
	return v.value
}

func (v *NullableConfTypesResp) Set(val *ConfTypesResp) {
	v.value = val
	v.isSet = true
}

func (v NullableConfTypesResp) IsSet() bool {
	return v.isSet
}

func (v *NullableConfTypesResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfTypesResp(val *ConfTypesResp) *NullableConfTypesResp {
	return &NullableConfTypesResp{value: val, isSet: true}
}

func (v NullableConfTypesResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfTypesResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


