/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DfsGatewaysResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsGatewaysResp{}

// DfsGatewaysResp struct for DfsGatewaysResp
type DfsGatewaysResp struct {
	// dfs gateways
	DfsGateways []DfsGatewayRecord `json:"dfs_gateways"`
}

type _DfsGatewaysResp DfsGatewaysResp

// NewDfsGatewaysResp instantiates a new DfsGatewaysResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsGatewaysResp(dfsGateways []DfsGatewayRecord) *DfsGatewaysResp {
	this := DfsGatewaysResp{}
	this.DfsGateways = dfsGateways
	return &this
}

// NewDfsGatewaysRespWithDefaults instantiates a new DfsGatewaysResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsGatewaysRespWithDefaults() *DfsGatewaysResp {
	this := DfsGatewaysResp{}
	return &this
}

// GetDfsGateways returns the DfsGateways field value
func (o *DfsGatewaysResp) GetDfsGateways() []DfsGatewayRecord {
	if o == nil {
		var ret []DfsGatewayRecord
		return ret
	}

	return o.DfsGateways
}

// GetDfsGatewaysOk returns a tuple with the DfsGateways field value
// and a boolean to check if the value has been set.
func (o *DfsGatewaysResp) GetDfsGatewaysOk() ([]DfsGatewayRecord, bool) {
	if o == nil {
		return nil, false
	}
	return o.DfsGateways, true
}

// SetDfsGateways sets field value
func (o *DfsGatewaysResp) SetDfsGateways(v []DfsGatewayRecord) {
	o.DfsGateways = v
}

func (o DfsGatewaysResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsGatewaysResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dfs_gateways"] = o.DfsGateways
	return toSerialize, nil
}

func (o *DfsGatewaysResp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dfs_gateways",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDfsGatewaysResp := _DfsGatewaysResp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDfsGatewaysResp)

	if err != nil {
		return err
	}

	*o = DfsGatewaysResp(varDfsGatewaysResp)

	return err
}

type NullableDfsGatewaysResp struct {
	value *DfsGatewaysResp
	isSet bool
}

func (v NullableDfsGatewaysResp) Get() *DfsGatewaysResp {
	return v.value
}

func (v *NullableDfsGatewaysResp) Set(val *DfsGatewaysResp) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsGatewaysResp) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsGatewaysResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsGatewaysResp(val *DfsGatewaysResp) *NullableDfsGatewaysResp {
	return &NullableDfsGatewaysResp{value: val, isSet: true}
}

func (v NullableDfsGatewaysResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsGatewaysResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


