/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SnmpInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SnmpInfo{}

// SnmpInfo struct for SnmpInfo
type SnmpInfo struct {
	// enable snmp or not
	Enabled bool `json:"enabled"`
	// snmp gateways
	Gateways []SnmpGateway `json:"gateways"`
	// snmp receivers
	Receivers []TrapReceiver `json:"receivers"`
}

type _SnmpInfo SnmpInfo

// NewSnmpInfo instantiates a new SnmpInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnmpInfo(enabled bool, gateways []SnmpGateway, receivers []TrapReceiver) *SnmpInfo {
	this := SnmpInfo{}
	this.Enabled = enabled
	this.Gateways = gateways
	this.Receivers = receivers
	return &this
}

// NewSnmpInfoWithDefaults instantiates a new SnmpInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnmpInfoWithDefaults() *SnmpInfo {
	this := SnmpInfo{}
	return &this
}

// GetEnabled returns the Enabled field value
func (o *SnmpInfo) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *SnmpInfo) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *SnmpInfo) SetEnabled(v bool) {
	o.Enabled = v
}

// GetGateways returns the Gateways field value
func (o *SnmpInfo) GetGateways() []SnmpGateway {
	if o == nil {
		var ret []SnmpGateway
		return ret
	}

	return o.Gateways
}

// GetGatewaysOk returns a tuple with the Gateways field value
// and a boolean to check if the value has been set.
func (o *SnmpInfo) GetGatewaysOk() ([]SnmpGateway, bool) {
	if o == nil {
		return nil, false
	}
	return o.Gateways, true
}

// SetGateways sets field value
func (o *SnmpInfo) SetGateways(v []SnmpGateway) {
	o.Gateways = v
}

// GetReceivers returns the Receivers field value
func (o *SnmpInfo) GetReceivers() []TrapReceiver {
	if o == nil {
		var ret []TrapReceiver
		return ret
	}

	return o.Receivers
}

// GetReceiversOk returns a tuple with the Receivers field value
// and a boolean to check if the value has been set.
func (o *SnmpInfo) GetReceiversOk() ([]TrapReceiver, bool) {
	if o == nil {
		return nil, false
	}
	return o.Receivers, true
}

// SetReceivers sets field value
func (o *SnmpInfo) SetReceivers(v []TrapReceiver) {
	o.Receivers = v
}

func (o SnmpInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnmpInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enabled"] = o.Enabled
	toSerialize["gateways"] = o.Gateways
	toSerialize["receivers"] = o.Receivers
	return toSerialize, nil
}

func (o *SnmpInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enabled",
		"gateways",
		"receivers",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSnmpInfo := _SnmpInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSnmpInfo)

	if err != nil {
		return err
	}

	*o = SnmpInfo(varSnmpInfo)

	return err
}

type NullableSnmpInfo struct {
	value *SnmpInfo
	isSet bool
}

func (v NullableSnmpInfo) Get() *SnmpInfo {
	return v.value
}

func (v *NullableSnmpInfo) Set(val *SnmpInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableSnmpInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableSnmpInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnmpInfo(val *SnmpInfo) *NullableSnmpInfo {
	return &NullableSnmpInfo{value: val, isSet: true}
}

func (v NullableSnmpInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnmpInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


