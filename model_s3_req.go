/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the S3Req type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &S3Req{}

// S3Req struct for S3Req
type S3Req struct {
	BucketLimit *int64 `json:"bucket_limit,omitempty"`
	BucketPath *string `json:"bucket_path,omitempty"`
	BucketPermission *string `json:"bucket_permission,omitempty"`
	GatewayGroupId *int64 `json:"gateway_group_id,omitempty"`
	S3Enabled *bool `json:"s3_enabled,omitempty"`
	S3Keys []S3Key `json:"s3_keys,omitempty"`
}

// NewS3Req instantiates a new S3Req object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewS3Req() *S3Req {
	this := S3Req{}
	return &this
}

// NewS3ReqWithDefaults instantiates a new S3Req object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewS3ReqWithDefaults() *S3Req {
	this := S3Req{}
	return &this
}

// GetBucketLimit returns the BucketLimit field value if set, zero value otherwise.
func (o *S3Req) GetBucketLimit() int64 {
	if o == nil || IsNil(o.BucketLimit) {
		var ret int64
		return ret
	}
	return *o.BucketLimit
}

// GetBucketLimitOk returns a tuple with the BucketLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3Req) GetBucketLimitOk() (*int64, bool) {
	if o == nil || IsNil(o.BucketLimit) {
		return nil, false
	}
	return o.BucketLimit, true
}

// HasBucketLimit returns a boolean if a field has been set.
func (o *S3Req) HasBucketLimit() bool {
	if o != nil && !IsNil(o.BucketLimit) {
		return true
	}

	return false
}

// SetBucketLimit gets a reference to the given int64 and assigns it to the BucketLimit field.
func (o *S3Req) SetBucketLimit(v int64) {
	o.BucketLimit = &v
}

// GetBucketPath returns the BucketPath field value if set, zero value otherwise.
func (o *S3Req) GetBucketPath() string {
	if o == nil || IsNil(o.BucketPath) {
		var ret string
		return ret
	}
	return *o.BucketPath
}

// GetBucketPathOk returns a tuple with the BucketPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3Req) GetBucketPathOk() (*string, bool) {
	if o == nil || IsNil(o.BucketPath) {
		return nil, false
	}
	return o.BucketPath, true
}

// HasBucketPath returns a boolean if a field has been set.
func (o *S3Req) HasBucketPath() bool {
	if o != nil && !IsNil(o.BucketPath) {
		return true
	}

	return false
}

// SetBucketPath gets a reference to the given string and assigns it to the BucketPath field.
func (o *S3Req) SetBucketPath(v string) {
	o.BucketPath = &v
}

// GetBucketPermission returns the BucketPermission field value if set, zero value otherwise.
func (o *S3Req) GetBucketPermission() string {
	if o == nil || IsNil(o.BucketPermission) {
		var ret string
		return ret
	}
	return *o.BucketPermission
}

// GetBucketPermissionOk returns a tuple with the BucketPermission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3Req) GetBucketPermissionOk() (*string, bool) {
	if o == nil || IsNil(o.BucketPermission) {
		return nil, false
	}
	return o.BucketPermission, true
}

// HasBucketPermission returns a boolean if a field has been set.
func (o *S3Req) HasBucketPermission() bool {
	if o != nil && !IsNil(o.BucketPermission) {
		return true
	}

	return false
}

// SetBucketPermission gets a reference to the given string and assigns it to the BucketPermission field.
func (o *S3Req) SetBucketPermission(v string) {
	o.BucketPermission = &v
}

// GetGatewayGroupId returns the GatewayGroupId field value if set, zero value otherwise.
func (o *S3Req) GetGatewayGroupId() int64 {
	if o == nil || IsNil(o.GatewayGroupId) {
		var ret int64
		return ret
	}
	return *o.GatewayGroupId
}

// GetGatewayGroupIdOk returns a tuple with the GatewayGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3Req) GetGatewayGroupIdOk() (*int64, bool) {
	if o == nil || IsNil(o.GatewayGroupId) {
		return nil, false
	}
	return o.GatewayGroupId, true
}

// HasGatewayGroupId returns a boolean if a field has been set.
func (o *S3Req) HasGatewayGroupId() bool {
	if o != nil && !IsNil(o.GatewayGroupId) {
		return true
	}

	return false
}

// SetGatewayGroupId gets a reference to the given int64 and assigns it to the GatewayGroupId field.
func (o *S3Req) SetGatewayGroupId(v int64) {
	o.GatewayGroupId = &v
}

// GetS3Enabled returns the S3Enabled field value if set, zero value otherwise.
func (o *S3Req) GetS3Enabled() bool {
	if o == nil || IsNil(o.S3Enabled) {
		var ret bool
		return ret
	}
	return *o.S3Enabled
}

// GetS3EnabledOk returns a tuple with the S3Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3Req) GetS3EnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.S3Enabled) {
		return nil, false
	}
	return o.S3Enabled, true
}

// HasS3Enabled returns a boolean if a field has been set.
func (o *S3Req) HasS3Enabled() bool {
	if o != nil && !IsNil(o.S3Enabled) {
		return true
	}

	return false
}

// SetS3Enabled gets a reference to the given bool and assigns it to the S3Enabled field.
func (o *S3Req) SetS3Enabled(v bool) {
	o.S3Enabled = &v
}

// GetS3Keys returns the S3Keys field value if set, zero value otherwise.
func (o *S3Req) GetS3Keys() []S3Key {
	if o == nil || IsNil(o.S3Keys) {
		var ret []S3Key
		return ret
	}
	return o.S3Keys
}

// GetS3KeysOk returns a tuple with the S3Keys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3Req) GetS3KeysOk() ([]S3Key, bool) {
	if o == nil || IsNil(o.S3Keys) {
		return nil, false
	}
	return o.S3Keys, true
}

// HasS3Keys returns a boolean if a field has been set.
func (o *S3Req) HasS3Keys() bool {
	if o != nil && !IsNil(o.S3Keys) {
		return true
	}

	return false
}

// SetS3Keys gets a reference to the given []S3Key and assigns it to the S3Keys field.
func (o *S3Req) SetS3Keys(v []S3Key) {
	o.S3Keys = v
}

func (o S3Req) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o S3Req) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BucketLimit) {
		toSerialize["bucket_limit"] = o.BucketLimit
	}
	if !IsNil(o.BucketPath) {
		toSerialize["bucket_path"] = o.BucketPath
	}
	if !IsNil(o.BucketPermission) {
		toSerialize["bucket_permission"] = o.BucketPermission
	}
	if !IsNil(o.GatewayGroupId) {
		toSerialize["gateway_group_id"] = o.GatewayGroupId
	}
	if !IsNil(o.S3Enabled) {
		toSerialize["s3_enabled"] = o.S3Enabled
	}
	if !IsNil(o.S3Keys) {
		toSerialize["s3_keys"] = o.S3Keys
	}
	return toSerialize, nil
}

type NullableS3Req struct {
	value *S3Req
	isSet bool
}

func (v NullableS3Req) Get() *S3Req {
	return v.value
}

func (v *NullableS3Req) Set(val *S3Req) {
	v.value = val
	v.isSet = true
}

func (v NullableS3Req) IsSet() bool {
	return v.isSet
}

func (v *NullableS3Req) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableS3Req(val *S3Req) *NullableS3Req {
	return &NullableS3Req{value: val, isSet: true}
}

func (v NullableS3Req) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableS3Req) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


