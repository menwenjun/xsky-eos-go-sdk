/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SendVerificationReqVerification type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SendVerificationReqVerification{}

// SendVerificationReqVerification struct for SendVerificationReqVerification
type SendVerificationReqVerification struct {
	Email *string `json:"email,omitempty"`
	UserName *string `json:"user_name,omitempty"`
}

// NewSendVerificationReqVerification instantiates a new SendVerificationReqVerification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSendVerificationReqVerification() *SendVerificationReqVerification {
	this := SendVerificationReqVerification{}
	return &this
}

// NewSendVerificationReqVerificationWithDefaults instantiates a new SendVerificationReqVerification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSendVerificationReqVerificationWithDefaults() *SendVerificationReqVerification {
	this := SendVerificationReqVerification{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *SendVerificationReqVerification) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendVerificationReqVerification) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *SendVerificationReqVerification) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *SendVerificationReqVerification) SetEmail(v string) {
	o.Email = &v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *SendVerificationReqVerification) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendVerificationReqVerification) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *SendVerificationReqVerification) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *SendVerificationReqVerification) SetUserName(v string) {
	o.UserName = &v
}

func (o SendVerificationReqVerification) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SendVerificationReqVerification) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.UserName) {
		toSerialize["user_name"] = o.UserName
	}
	return toSerialize, nil
}

type NullableSendVerificationReqVerification struct {
	value *SendVerificationReqVerification
	isSet bool
}

func (v NullableSendVerificationReqVerification) Get() *SendVerificationReqVerification {
	return v.value
}

func (v *NullableSendVerificationReqVerification) Set(val *SendVerificationReqVerification) {
	v.value = val
	v.isSet = true
}

func (v NullableSendVerificationReqVerification) IsSet() bool {
	return v.isSet
}

func (v *NullableSendVerificationReqVerification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSendVerificationReqVerification(val *SendVerificationReqVerification) *NullableSendVerificationReqVerification {
	return &NullableSendVerificationReqVerification{value: val, isSet: true}
}

func (v NullableSendVerificationReqVerification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSendVerificationReqVerification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


