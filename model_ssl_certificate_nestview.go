/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SSLCertificateNestview type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SSLCertificateNestview{}

// SSLCertificateNestview struct for SSLCertificateNestview
type SSLCertificateNestview struct {
	// domain
	Domain *string `json:"domain,omitempty"`
	// redirect http request to https
	ForceHttps *bool `json:"force_https,omitempty"`
	// apply to all s3 load balancer groups
	GlobalApply *bool `json:"global_apply,omitempty"`
	// certificate id
	Id *int64 `json:"id,omitempty"`
	// certificate name
	Name *string `json:"name,omitempty"`
}

// NewSSLCertificateNestview instantiates a new SSLCertificateNestview object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSSLCertificateNestview() *SSLCertificateNestview {
	this := SSLCertificateNestview{}
	return &this
}

// NewSSLCertificateNestviewWithDefaults instantiates a new SSLCertificateNestview object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSSLCertificateNestviewWithDefaults() *SSLCertificateNestview {
	this := SSLCertificateNestview{}
	return &this
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *SSLCertificateNestview) GetDomain() string {
	if o == nil || IsNil(o.Domain) {
		var ret string
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLCertificateNestview) GetDomainOk() (*string, bool) {
	if o == nil || IsNil(o.Domain) {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *SSLCertificateNestview) HasDomain() bool {
	if o != nil && !IsNil(o.Domain) {
		return true
	}

	return false
}

// SetDomain gets a reference to the given string and assigns it to the Domain field.
func (o *SSLCertificateNestview) SetDomain(v string) {
	o.Domain = &v
}

// GetForceHttps returns the ForceHttps field value if set, zero value otherwise.
func (o *SSLCertificateNestview) GetForceHttps() bool {
	if o == nil || IsNil(o.ForceHttps) {
		var ret bool
		return ret
	}
	return *o.ForceHttps
}

// GetForceHttpsOk returns a tuple with the ForceHttps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLCertificateNestview) GetForceHttpsOk() (*bool, bool) {
	if o == nil || IsNil(o.ForceHttps) {
		return nil, false
	}
	return o.ForceHttps, true
}

// HasForceHttps returns a boolean if a field has been set.
func (o *SSLCertificateNestview) HasForceHttps() bool {
	if o != nil && !IsNil(o.ForceHttps) {
		return true
	}

	return false
}

// SetForceHttps gets a reference to the given bool and assigns it to the ForceHttps field.
func (o *SSLCertificateNestview) SetForceHttps(v bool) {
	o.ForceHttps = &v
}

// GetGlobalApply returns the GlobalApply field value if set, zero value otherwise.
func (o *SSLCertificateNestview) GetGlobalApply() bool {
	if o == nil || IsNil(o.GlobalApply) {
		var ret bool
		return ret
	}
	return *o.GlobalApply
}

// GetGlobalApplyOk returns a tuple with the GlobalApply field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLCertificateNestview) GetGlobalApplyOk() (*bool, bool) {
	if o == nil || IsNil(o.GlobalApply) {
		return nil, false
	}
	return o.GlobalApply, true
}

// HasGlobalApply returns a boolean if a field has been set.
func (o *SSLCertificateNestview) HasGlobalApply() bool {
	if o != nil && !IsNil(o.GlobalApply) {
		return true
	}

	return false
}

// SetGlobalApply gets a reference to the given bool and assigns it to the GlobalApply field.
func (o *SSLCertificateNestview) SetGlobalApply(v bool) {
	o.GlobalApply = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SSLCertificateNestview) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLCertificateNestview) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SSLCertificateNestview) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *SSLCertificateNestview) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SSLCertificateNestview) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLCertificateNestview) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SSLCertificateNestview) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SSLCertificateNestview) SetName(v string) {
	o.Name = &v
}

func (o SSLCertificateNestview) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SSLCertificateNestview) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Domain) {
		toSerialize["domain"] = o.Domain
	}
	if !IsNil(o.ForceHttps) {
		toSerialize["force_https"] = o.ForceHttps
	}
	if !IsNil(o.GlobalApply) {
		toSerialize["global_apply"] = o.GlobalApply
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableSSLCertificateNestview struct {
	value *SSLCertificateNestview
	isSet bool
}

func (v NullableSSLCertificateNestview) Get() *SSLCertificateNestview {
	return v.value
}

func (v *NullableSSLCertificateNestview) Set(val *SSLCertificateNestview) {
	v.value = val
	v.isSet = true
}

func (v NullableSSLCertificateNestview) IsSet() bool {
	return v.isSet
}

func (v *NullableSSLCertificateNestview) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSSLCertificateNestview(val *SSLCertificateNestview) *NullableSSLCertificateNestview {
	return &NullableSSLCertificateNestview{value: val, isSet: true}
}

func (v NullableSSLCertificateNestview) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSSLCertificateNestview) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


