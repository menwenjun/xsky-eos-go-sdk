/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the FSActiveDirectory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FSActiveDirectory{}

// FSActiveDirectory FSActiveDirectory defines file storage active directory +X:model:etcd_lock;
type FSActiveDirectory struct {
	ActionStatus *string `json:"action_status,omitempty"`
	Cluster *ClusterNestview `json:"cluster,omitempty"`
	Create *time.Time `json:"create,omitempty"`
	DfsGatewayGroupNum *int64 `json:"dfs_gateway_group_num,omitempty"`
	Id *int64 `json:"id,omitempty"`
	Ip *string `json:"ip,omitempty"`
	MaxUid *int64 `json:"max_uid,omitempty"`
	MinUid *int64 `json:"min_uid,omitempty"`
	Name *string `json:"name,omitempty"`
	Realm *string `json:"realm,omitempty"`
	Status *string `json:"status,omitempty"`
	Update *time.Time `json:"update,omitempty"`
	Username *string `json:"username,omitempty"`
	VerifyTime *time.Time `json:"verify_time,omitempty"`
	Workgroup *string `json:"workgroup,omitempty"`
}

// NewFSActiveDirectory instantiates a new FSActiveDirectory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFSActiveDirectory() *FSActiveDirectory {
	this := FSActiveDirectory{}
	return &this
}

// NewFSActiveDirectoryWithDefaults instantiates a new FSActiveDirectory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFSActiveDirectoryWithDefaults() *FSActiveDirectory {
	this := FSActiveDirectory{}
	return &this
}

// GetActionStatus returns the ActionStatus field value if set, zero value otherwise.
func (o *FSActiveDirectory) GetActionStatus() string {
	if o == nil || IsNil(o.ActionStatus) {
		var ret string
		return ret
	}
	return *o.ActionStatus
}

// GetActionStatusOk returns a tuple with the ActionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSActiveDirectory) GetActionStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ActionStatus) {
		return nil, false
	}
	return o.ActionStatus, true
}

// HasActionStatus returns a boolean if a field has been set.
func (o *FSActiveDirectory) HasActionStatus() bool {
	if o != nil && !IsNil(o.ActionStatus) {
		return true
	}

	return false
}

// SetActionStatus gets a reference to the given string and assigns it to the ActionStatus field.
func (o *FSActiveDirectory) SetActionStatus(v string) {
	o.ActionStatus = &v
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *FSActiveDirectory) GetCluster() ClusterNestview {
	if o == nil || IsNil(o.Cluster) {
		var ret ClusterNestview
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSActiveDirectory) GetClusterOk() (*ClusterNestview, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *FSActiveDirectory) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given ClusterNestview and assigns it to the Cluster field.
func (o *FSActiveDirectory) SetCluster(v ClusterNestview) {
	o.Cluster = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *FSActiveDirectory) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSActiveDirectory) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *FSActiveDirectory) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *FSActiveDirectory) SetCreate(v time.Time) {
	o.Create = &v
}

// GetDfsGatewayGroupNum returns the DfsGatewayGroupNum field value if set, zero value otherwise.
func (o *FSActiveDirectory) GetDfsGatewayGroupNum() int64 {
	if o == nil || IsNil(o.DfsGatewayGroupNum) {
		var ret int64
		return ret
	}
	return *o.DfsGatewayGroupNum
}

// GetDfsGatewayGroupNumOk returns a tuple with the DfsGatewayGroupNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSActiveDirectory) GetDfsGatewayGroupNumOk() (*int64, bool) {
	if o == nil || IsNil(o.DfsGatewayGroupNum) {
		return nil, false
	}
	return o.DfsGatewayGroupNum, true
}

// HasDfsGatewayGroupNum returns a boolean if a field has been set.
func (o *FSActiveDirectory) HasDfsGatewayGroupNum() bool {
	if o != nil && !IsNil(o.DfsGatewayGroupNum) {
		return true
	}

	return false
}

// SetDfsGatewayGroupNum gets a reference to the given int64 and assigns it to the DfsGatewayGroupNum field.
func (o *FSActiveDirectory) SetDfsGatewayGroupNum(v int64) {
	o.DfsGatewayGroupNum = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FSActiveDirectory) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSActiveDirectory) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FSActiveDirectory) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *FSActiveDirectory) SetId(v int64) {
	o.Id = &v
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *FSActiveDirectory) GetIp() string {
	if o == nil || IsNil(o.Ip) {
		var ret string
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSActiveDirectory) GetIpOk() (*string, bool) {
	if o == nil || IsNil(o.Ip) {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *FSActiveDirectory) HasIp() bool {
	if o != nil && !IsNil(o.Ip) {
		return true
	}

	return false
}

// SetIp gets a reference to the given string and assigns it to the Ip field.
func (o *FSActiveDirectory) SetIp(v string) {
	o.Ip = &v
}

// GetMaxUid returns the MaxUid field value if set, zero value otherwise.
func (o *FSActiveDirectory) GetMaxUid() int64 {
	if o == nil || IsNil(o.MaxUid) {
		var ret int64
		return ret
	}
	return *o.MaxUid
}

// GetMaxUidOk returns a tuple with the MaxUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSActiveDirectory) GetMaxUidOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxUid) {
		return nil, false
	}
	return o.MaxUid, true
}

// HasMaxUid returns a boolean if a field has been set.
func (o *FSActiveDirectory) HasMaxUid() bool {
	if o != nil && !IsNil(o.MaxUid) {
		return true
	}

	return false
}

// SetMaxUid gets a reference to the given int64 and assigns it to the MaxUid field.
func (o *FSActiveDirectory) SetMaxUid(v int64) {
	o.MaxUid = &v
}

// GetMinUid returns the MinUid field value if set, zero value otherwise.
func (o *FSActiveDirectory) GetMinUid() int64 {
	if o == nil || IsNil(o.MinUid) {
		var ret int64
		return ret
	}
	return *o.MinUid
}

// GetMinUidOk returns a tuple with the MinUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSActiveDirectory) GetMinUidOk() (*int64, bool) {
	if o == nil || IsNil(o.MinUid) {
		return nil, false
	}
	return o.MinUid, true
}

// HasMinUid returns a boolean if a field has been set.
func (o *FSActiveDirectory) HasMinUid() bool {
	if o != nil && !IsNil(o.MinUid) {
		return true
	}

	return false
}

// SetMinUid gets a reference to the given int64 and assigns it to the MinUid field.
func (o *FSActiveDirectory) SetMinUid(v int64) {
	o.MinUid = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FSActiveDirectory) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSActiveDirectory) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FSActiveDirectory) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FSActiveDirectory) SetName(v string) {
	o.Name = &v
}

// GetRealm returns the Realm field value if set, zero value otherwise.
func (o *FSActiveDirectory) GetRealm() string {
	if o == nil || IsNil(o.Realm) {
		var ret string
		return ret
	}
	return *o.Realm
}

// GetRealmOk returns a tuple with the Realm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSActiveDirectory) GetRealmOk() (*string, bool) {
	if o == nil || IsNil(o.Realm) {
		return nil, false
	}
	return o.Realm, true
}

// HasRealm returns a boolean if a field has been set.
func (o *FSActiveDirectory) HasRealm() bool {
	if o != nil && !IsNil(o.Realm) {
		return true
	}

	return false
}

// SetRealm gets a reference to the given string and assigns it to the Realm field.
func (o *FSActiveDirectory) SetRealm(v string) {
	o.Realm = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *FSActiveDirectory) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSActiveDirectory) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *FSActiveDirectory) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *FSActiveDirectory) SetStatus(v string) {
	o.Status = &v
}

// GetUpdate returns the Update field value if set, zero value otherwise.
func (o *FSActiveDirectory) GetUpdate() time.Time {
	if o == nil || IsNil(o.Update) {
		var ret time.Time
		return ret
	}
	return *o.Update
}

// GetUpdateOk returns a tuple with the Update field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSActiveDirectory) GetUpdateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Update) {
		return nil, false
	}
	return o.Update, true
}

// HasUpdate returns a boolean if a field has been set.
func (o *FSActiveDirectory) HasUpdate() bool {
	if o != nil && !IsNil(o.Update) {
		return true
	}

	return false
}

// SetUpdate gets a reference to the given time.Time and assigns it to the Update field.
func (o *FSActiveDirectory) SetUpdate(v time.Time) {
	o.Update = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *FSActiveDirectory) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSActiveDirectory) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *FSActiveDirectory) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *FSActiveDirectory) SetUsername(v string) {
	o.Username = &v
}

// GetVerifyTime returns the VerifyTime field value if set, zero value otherwise.
func (o *FSActiveDirectory) GetVerifyTime() time.Time {
	if o == nil || IsNil(o.VerifyTime) {
		var ret time.Time
		return ret
	}
	return *o.VerifyTime
}

// GetVerifyTimeOk returns a tuple with the VerifyTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSActiveDirectory) GetVerifyTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.VerifyTime) {
		return nil, false
	}
	return o.VerifyTime, true
}

// HasVerifyTime returns a boolean if a field has been set.
func (o *FSActiveDirectory) HasVerifyTime() bool {
	if o != nil && !IsNil(o.VerifyTime) {
		return true
	}

	return false
}

// SetVerifyTime gets a reference to the given time.Time and assigns it to the VerifyTime field.
func (o *FSActiveDirectory) SetVerifyTime(v time.Time) {
	o.VerifyTime = &v
}

// GetWorkgroup returns the Workgroup field value if set, zero value otherwise.
func (o *FSActiveDirectory) GetWorkgroup() string {
	if o == nil || IsNil(o.Workgroup) {
		var ret string
		return ret
	}
	return *o.Workgroup
}

// GetWorkgroupOk returns a tuple with the Workgroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FSActiveDirectory) GetWorkgroupOk() (*string, bool) {
	if o == nil || IsNil(o.Workgroup) {
		return nil, false
	}
	return o.Workgroup, true
}

// HasWorkgroup returns a boolean if a field has been set.
func (o *FSActiveDirectory) HasWorkgroup() bool {
	if o != nil && !IsNil(o.Workgroup) {
		return true
	}

	return false
}

// SetWorkgroup gets a reference to the given string and assigns it to the Workgroup field.
func (o *FSActiveDirectory) SetWorkgroup(v string) {
	o.Workgroup = &v
}

func (o FSActiveDirectory) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FSActiveDirectory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActionStatus) {
		toSerialize["action_status"] = o.ActionStatus
	}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.DfsGatewayGroupNum) {
		toSerialize["dfs_gateway_group_num"] = o.DfsGatewayGroupNum
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Ip) {
		toSerialize["ip"] = o.Ip
	}
	if !IsNil(o.MaxUid) {
		toSerialize["max_uid"] = o.MaxUid
	}
	if !IsNil(o.MinUid) {
		toSerialize["min_uid"] = o.MinUid
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Realm) {
		toSerialize["realm"] = o.Realm
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Update) {
		toSerialize["update"] = o.Update
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.VerifyTime) {
		toSerialize["verify_time"] = o.VerifyTime
	}
	if !IsNil(o.Workgroup) {
		toSerialize["workgroup"] = o.Workgroup
	}
	return toSerialize, nil
}

type NullableFSActiveDirectory struct {
	value *FSActiveDirectory
	isSet bool
}

func (v NullableFSActiveDirectory) Get() *FSActiveDirectory {
	return v.value
}

func (v *NullableFSActiveDirectory) Set(val *FSActiveDirectory) {
	v.value = val
	v.isSet = true
}

func (v NullableFSActiveDirectory) IsSet() bool {
	return v.isSet
}

func (v *NullableFSActiveDirectory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFSActiveDirectory(val *FSActiveDirectory) *NullableFSActiveDirectory {
	return &NullableFSActiveDirectory{value: val, isSet: true}
}

func (v NullableFSActiveDirectory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFSActiveDirectory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


