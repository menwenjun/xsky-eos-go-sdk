/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RegionUpdateReqRegion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegionUpdateReqRegion{}

// RegionUpdateReqRegion struct for RegionUpdateReqRegion
type RegionUpdateReqRegion struct {
	// retion name
	Name string `json:"name"`
	// region stats reserved day
	StatsReservedDays *int64 `json:"stats_reserved_days,omitempty"`
}

type _RegionUpdateReqRegion RegionUpdateReqRegion

// NewRegionUpdateReqRegion instantiates a new RegionUpdateReqRegion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegionUpdateReqRegion(name string) *RegionUpdateReqRegion {
	this := RegionUpdateReqRegion{}
	this.Name = name
	return &this
}

// NewRegionUpdateReqRegionWithDefaults instantiates a new RegionUpdateReqRegion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegionUpdateReqRegionWithDefaults() *RegionUpdateReqRegion {
	this := RegionUpdateReqRegion{}
	return &this
}

// GetName returns the Name field value
func (o *RegionUpdateReqRegion) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RegionUpdateReqRegion) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RegionUpdateReqRegion) SetName(v string) {
	o.Name = v
}

// GetStatsReservedDays returns the StatsReservedDays field value if set, zero value otherwise.
func (o *RegionUpdateReqRegion) GetStatsReservedDays() int64 {
	if o == nil || IsNil(o.StatsReservedDays) {
		var ret int64
		return ret
	}
	return *o.StatsReservedDays
}

// GetStatsReservedDaysOk returns a tuple with the StatsReservedDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionUpdateReqRegion) GetStatsReservedDaysOk() (*int64, bool) {
	if o == nil || IsNil(o.StatsReservedDays) {
		return nil, false
	}
	return o.StatsReservedDays, true
}

// HasStatsReservedDays returns a boolean if a field has been set.
func (o *RegionUpdateReqRegion) HasStatsReservedDays() bool {
	if o != nil && !IsNil(o.StatsReservedDays) {
		return true
	}

	return false
}

// SetStatsReservedDays gets a reference to the given int64 and assigns it to the StatsReservedDays field.
func (o *RegionUpdateReqRegion) SetStatsReservedDays(v int64) {
	o.StatsReservedDays = &v
}

func (o RegionUpdateReqRegion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegionUpdateReqRegion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.StatsReservedDays) {
		toSerialize["stats_reserved_days"] = o.StatsReservedDays
	}
	return toSerialize, nil
}

func (o *RegionUpdateReqRegion) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRegionUpdateReqRegion := _RegionUpdateReqRegion{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRegionUpdateReqRegion)

	if err != nil {
		return err
	}

	*o = RegionUpdateReqRegion(varRegionUpdateReqRegion)

	return err
}

type NullableRegionUpdateReqRegion struct {
	value *RegionUpdateReqRegion
	isSet bool
}

func (v NullableRegionUpdateReqRegion) Get() *RegionUpdateReqRegion {
	return v.value
}

func (v *NullableRegionUpdateReqRegion) Set(val *RegionUpdateReqRegion) {
	v.value = val
	v.isSet = true
}

func (v NullableRegionUpdateReqRegion) IsSet() bool {
	return v.isSet
}

func (v *NullableRegionUpdateReqRegion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegionUpdateReqRegion(val *RegionUpdateReqRegion) *NullableRegionUpdateReqRegion {
	return &NullableRegionUpdateReqRegion{value: val, isSet: true}
}

func (v NullableRegionUpdateReqRegion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegionUpdateReqRegion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


