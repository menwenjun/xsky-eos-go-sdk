/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DpDfsSnapshotsAPIService DpDfsSnapshotsAPI service
type DpDfsSnapshotsAPIService service

type ApiCreateDpDfsSnapshotRequest struct {
	ctx context.Context
	ApiService *DpDfsSnapshotsAPIService
	body *DpDfsSnapshotCreateReq
	allowPathCreate *bool
}

// dp dfs snapshot info
func (r ApiCreateDpDfsSnapshotRequest) Body(body DpDfsSnapshotCreateReq) ApiCreateDpDfsSnapshotRequest {
	r.body = &body
	return r
}

// allow create path when not existed
func (r ApiCreateDpDfsSnapshotRequest) AllowPathCreate(allowPathCreate bool) ApiCreateDpDfsSnapshotRequest {
	r.allowPathCreate = &allowPathCreate
	return r
}

func (r ApiCreateDpDfsSnapshotRequest) Execute() (*DpDfsSnapshotResp, *http.Response, error) {
	return r.ApiService.CreateDpDfsSnapshotExecute(r)
}

/*
CreateDpDfsSnapshot Method for CreateDpDfsSnapshot

Create dp dfs snapshot

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateDpDfsSnapshotRequest
*/
func (a *DpDfsSnapshotsAPIService) CreateDpDfsSnapshot(ctx context.Context) ApiCreateDpDfsSnapshotRequest {
	return ApiCreateDpDfsSnapshotRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DpDfsSnapshotResp
func (a *DpDfsSnapshotsAPIService) CreateDpDfsSnapshotExecute(r ApiCreateDpDfsSnapshotRequest) (*DpDfsSnapshotResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DpDfsSnapshotResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DpDfsSnapshotsAPIService.CreateDpDfsSnapshot")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dp-dfs-snapshots/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.allowPathCreate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allow_path_create", r.allowPathCreate, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteDPDfsSnapshotRequest struct {
	ctx context.Context
	ApiService *DpDfsSnapshotsAPIService
	dpDfsSnapshotId int64
}

func (r ApiDeleteDPDfsSnapshotRequest) Execute() (*DpDfsSnapshotResp, *http.Response, error) {
	return r.ApiService.DeleteDPDfsSnapshotExecute(r)
}

/*
DeleteDPDfsSnapshot Method for DeleteDPDfsSnapshot

Delete a dp dfs snapshot

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dpDfsSnapshotId dp dfs snapshot id
 @return ApiDeleteDPDfsSnapshotRequest
*/
func (a *DpDfsSnapshotsAPIService) DeleteDPDfsSnapshot(ctx context.Context, dpDfsSnapshotId int64) ApiDeleteDPDfsSnapshotRequest {
	return ApiDeleteDPDfsSnapshotRequest{
		ApiService: a,
		ctx: ctx,
		dpDfsSnapshotId: dpDfsSnapshotId,
	}
}

// Execute executes the request
//  @return DpDfsSnapshotResp
func (a *DpDfsSnapshotsAPIService) DeleteDPDfsSnapshotExecute(r ApiDeleteDPDfsSnapshotRequest) (*DpDfsSnapshotResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DpDfsSnapshotResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DpDfsSnapshotsAPIService.DeleteDPDfsSnapshot")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dp-dfs-snapshots/{dp_dfs_snapshot_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"dp_dfs_snapshot_id"+"}", url.PathEscape(parameterValueToString(r.dpDfsSnapshotId, "dpDfsSnapshotId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDpDfsSnapshotRequest struct {
	ctx context.Context
	ApiService *DpDfsSnapshotsAPIService
	dpDfsSnapshotId int64
}

func (r ApiGetDpDfsSnapshotRequest) Execute() (*DpDfsSnapshotResp, *http.Response, error) {
	return r.ApiService.GetDpDfsSnapshotExecute(r)
}

/*
GetDpDfsSnapshot Method for GetDpDfsSnapshot

get dp dfs snapshot

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dpDfsSnapshotId the dp dfs snapshot id
 @return ApiGetDpDfsSnapshotRequest
*/
func (a *DpDfsSnapshotsAPIService) GetDpDfsSnapshot(ctx context.Context, dpDfsSnapshotId int64) ApiGetDpDfsSnapshotRequest {
	return ApiGetDpDfsSnapshotRequest{
		ApiService: a,
		ctx: ctx,
		dpDfsSnapshotId: dpDfsSnapshotId,
	}
}

// Execute executes the request
//  @return DpDfsSnapshotResp
func (a *DpDfsSnapshotsAPIService) GetDpDfsSnapshotExecute(r ApiGetDpDfsSnapshotRequest) (*DpDfsSnapshotResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DpDfsSnapshotResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DpDfsSnapshotsAPIService.GetDpDfsSnapshot")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dp-dfs-snapshots/{dp_dfs_snapshot_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"dp_dfs_snapshot_id"+"}", url.PathEscape(parameterValueToString(r.dpDfsSnapshotId, "dpDfsSnapshotId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListDpDfsSnapshotsRequest struct {
	ctx context.Context
	ApiService *DpDfsSnapshotsAPIService
	limit *int64
	offset *int64
	q *string
	sort *string
	policyId *int64
	pathId *int64
}

// paging param
func (r ApiListDpDfsSnapshotsRequest) Limit(limit int64) ApiListDpDfsSnapshotsRequest {
	r.limit = &limit
	return r
}

// paging param
func (r ApiListDpDfsSnapshotsRequest) Offset(offset int64) ApiListDpDfsSnapshotsRequest {
	r.offset = &offset
	return r
}

// query param of search
func (r ApiListDpDfsSnapshotsRequest) Q(q string) ApiListDpDfsSnapshotsRequest {
	r.q = &q
	return r
}

// sort param of search
func (r ApiListDpDfsSnapshotsRequest) Sort(sort string) ApiListDpDfsSnapshotsRequest {
	r.sort = &sort
	return r
}

// related dp dfs snapshot policy id
func (r ApiListDpDfsSnapshotsRequest) PolicyId(policyId int64) ApiListDpDfsSnapshotsRequest {
	r.policyId = &policyId
	return r
}

// related dfs path id
func (r ApiListDpDfsSnapshotsRequest) PathId(pathId int64) ApiListDpDfsSnapshotsRequest {
	r.pathId = &pathId
	return r
}

func (r ApiListDpDfsSnapshotsRequest) Execute() (*DpDfsSnapshotsResp, *http.Response, error) {
	return r.ApiService.ListDpDfsSnapshotsExecute(r)
}

/*
ListDpDfsSnapshots Method for ListDpDfsSnapshots

List dp dfs snapshots

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListDpDfsSnapshotsRequest
*/
func (a *DpDfsSnapshotsAPIService) ListDpDfsSnapshots(ctx context.Context) ApiListDpDfsSnapshotsRequest {
	return ApiListDpDfsSnapshotsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DpDfsSnapshotsResp
func (a *DpDfsSnapshotsAPIService) ListDpDfsSnapshotsExecute(r ApiListDpDfsSnapshotsRequest) (*DpDfsSnapshotsResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DpDfsSnapshotsResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DpDfsSnapshotsAPIService.ListDpDfsSnapshots")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dp-dfs-snapshots/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.policyId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "policy_id", r.policyId, "form", "")
	}
	if r.pathId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "path_id", r.pathId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListDpDfsSnapshotsByDfsPathNameRequest struct {
	ctx context.Context
	ApiService *DpDfsSnapshotsAPIService
}

func (r ApiListDpDfsSnapshotsByDfsPathNameRequest) Execute() (*DpDfsSnapshotsResp, *http.Response, error) {
	return r.ApiService.ListDpDfsSnapshotsByDfsPathNameExecute(r)
}

/*
ListDpDfsSnapshotsByDfsPathName Method for ListDpDfsSnapshotsByDfsPathName

List dp dfs snapshots by name

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListDpDfsSnapshotsByDfsPathNameRequest
*/
func (a *DpDfsSnapshotsAPIService) ListDpDfsSnapshotsByDfsPathName(ctx context.Context) ApiListDpDfsSnapshotsByDfsPathNameRequest {
	return ApiListDpDfsSnapshotsByDfsPathNameRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DpDfsSnapshotsResp
func (a *DpDfsSnapshotsAPIService) ListDpDfsSnapshotsByDfsPathNameExecute(r ApiListDpDfsSnapshotsByDfsPathNameRequest) (*DpDfsSnapshotsResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DpDfsSnapshotsResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DpDfsSnapshotsAPIService.ListDpDfsSnapshotsByDfsPathName")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dp-dfs-snapshots/_search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
