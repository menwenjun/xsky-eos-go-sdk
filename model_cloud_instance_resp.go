/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CloudInstanceResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CloudInstanceResp{}

// CloudInstanceResp struct for CloudInstanceResp
type CloudInstanceResp struct {
	CloudInstance *CloudInstanceRecord `json:"cloud_instance,omitempty"`
}

// NewCloudInstanceResp instantiates a new CloudInstanceResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCloudInstanceResp() *CloudInstanceResp {
	this := CloudInstanceResp{}
	return &this
}

// NewCloudInstanceRespWithDefaults instantiates a new CloudInstanceResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCloudInstanceRespWithDefaults() *CloudInstanceResp {
	this := CloudInstanceResp{}
	return &this
}

// GetCloudInstance returns the CloudInstance field value if set, zero value otherwise.
func (o *CloudInstanceResp) GetCloudInstance() CloudInstanceRecord {
	if o == nil || IsNil(o.CloudInstance) {
		var ret CloudInstanceRecord
		return ret
	}
	return *o.CloudInstance
}

// GetCloudInstanceOk returns a tuple with the CloudInstance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudInstanceResp) GetCloudInstanceOk() (*CloudInstanceRecord, bool) {
	if o == nil || IsNil(o.CloudInstance) {
		return nil, false
	}
	return o.CloudInstance, true
}

// HasCloudInstance returns a boolean if a field has been set.
func (o *CloudInstanceResp) HasCloudInstance() bool {
	if o != nil && !IsNil(o.CloudInstance) {
		return true
	}

	return false
}

// SetCloudInstance gets a reference to the given CloudInstanceRecord and assigns it to the CloudInstance field.
func (o *CloudInstanceResp) SetCloudInstance(v CloudInstanceRecord) {
	o.CloudInstance = &v
}

func (o CloudInstanceResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CloudInstanceResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CloudInstance) {
		toSerialize["cloud_instance"] = o.CloudInstance
	}
	return toSerialize, nil
}

type NullableCloudInstanceResp struct {
	value *CloudInstanceResp
	isSet bool
}

func (v NullableCloudInstanceResp) Get() *CloudInstanceResp {
	return v.value
}

func (v *NullableCloudInstanceResp) Set(val *CloudInstanceResp) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudInstanceResp) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudInstanceResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudInstanceResp(val *CloudInstanceResp) *NullableCloudInstanceResp {
	return &NullableCloudInstanceResp{value: val, isSet: true}
}

func (v NullableCloudInstanceResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudInstanceResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


