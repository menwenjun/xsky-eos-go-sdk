/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the DfsTrashFile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsTrashFile{}

// DfsTrashFile struct for DfsTrashFile
type DfsTrashFile struct {
	// access time
	Access *time.Time `json:"access,omitempty"`
	// base file id in trash
	BaseFileId *string `json:"base_file_id,omitempty"`
	// file base name in trash
	BaseName *string `json:"base_name,omitempty"`
	// change time
	Change *time.Time `json:"change,omitempty"`
	DfsRootfs *NestedRootfs `json:"dfs_rootfs,omitempty"`
	DfsTrash *NestedTrash `json:"dfs_trash,omitempty"`
	// sub file count when it is a directory
	Files *int64 `json:"files,omitempty"`
	// file owner user group
	Group *int64 `json:"group,omitempty"`
	// file inode
	Inode *int64 `json:"inode,omitempty"`
	// modify time
	Modify *time.Time `json:"modify,omitempty"`
	// file name
	Name *string `json:"name,omitempty"`
	// original name before file moved to trash
	OriginalName *string `json:"original_name,omitempty"`
	// file owner user
	Owner *int64 `json:"owner,omitempty"`
	// parent path
	Parent *string `json:"parent,omitempty"`
	// file size
	Size *int64 `json:"size,omitempty"`
	// trash path
	TrashPath *string `json:"trash_path,omitempty"`
	// file type
	Type *string `json:"type,omitempty"`
}

// NewDfsTrashFile instantiates a new DfsTrashFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsTrashFile() *DfsTrashFile {
	this := DfsTrashFile{}
	return &this
}

// NewDfsTrashFileWithDefaults instantiates a new DfsTrashFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsTrashFileWithDefaults() *DfsTrashFile {
	this := DfsTrashFile{}
	return &this
}

// GetAccess returns the Access field value if set, zero value otherwise.
func (o *DfsTrashFile) GetAccess() time.Time {
	if o == nil || IsNil(o.Access) {
		var ret time.Time
		return ret
	}
	return *o.Access
}

// GetAccessOk returns a tuple with the Access field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTrashFile) GetAccessOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Access) {
		return nil, false
	}
	return o.Access, true
}

// HasAccess returns a boolean if a field has been set.
func (o *DfsTrashFile) HasAccess() bool {
	if o != nil && !IsNil(o.Access) {
		return true
	}

	return false
}

// SetAccess gets a reference to the given time.Time and assigns it to the Access field.
func (o *DfsTrashFile) SetAccess(v time.Time) {
	o.Access = &v
}

// GetBaseFileId returns the BaseFileId field value if set, zero value otherwise.
func (o *DfsTrashFile) GetBaseFileId() string {
	if o == nil || IsNil(o.BaseFileId) {
		var ret string
		return ret
	}
	return *o.BaseFileId
}

// GetBaseFileIdOk returns a tuple with the BaseFileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTrashFile) GetBaseFileIdOk() (*string, bool) {
	if o == nil || IsNil(o.BaseFileId) {
		return nil, false
	}
	return o.BaseFileId, true
}

// HasBaseFileId returns a boolean if a field has been set.
func (o *DfsTrashFile) HasBaseFileId() bool {
	if o != nil && !IsNil(o.BaseFileId) {
		return true
	}

	return false
}

// SetBaseFileId gets a reference to the given string and assigns it to the BaseFileId field.
func (o *DfsTrashFile) SetBaseFileId(v string) {
	o.BaseFileId = &v
}

// GetBaseName returns the BaseName field value if set, zero value otherwise.
func (o *DfsTrashFile) GetBaseName() string {
	if o == nil || IsNil(o.BaseName) {
		var ret string
		return ret
	}
	return *o.BaseName
}

// GetBaseNameOk returns a tuple with the BaseName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTrashFile) GetBaseNameOk() (*string, bool) {
	if o == nil || IsNil(o.BaseName) {
		return nil, false
	}
	return o.BaseName, true
}

// HasBaseName returns a boolean if a field has been set.
func (o *DfsTrashFile) HasBaseName() bool {
	if o != nil && !IsNil(o.BaseName) {
		return true
	}

	return false
}

// SetBaseName gets a reference to the given string and assigns it to the BaseName field.
func (o *DfsTrashFile) SetBaseName(v string) {
	o.BaseName = &v
}

// GetChange returns the Change field value if set, zero value otherwise.
func (o *DfsTrashFile) GetChange() time.Time {
	if o == nil || IsNil(o.Change) {
		var ret time.Time
		return ret
	}
	return *o.Change
}

// GetChangeOk returns a tuple with the Change field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTrashFile) GetChangeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Change) {
		return nil, false
	}
	return o.Change, true
}

// HasChange returns a boolean if a field has been set.
func (o *DfsTrashFile) HasChange() bool {
	if o != nil && !IsNil(o.Change) {
		return true
	}

	return false
}

// SetChange gets a reference to the given time.Time and assigns it to the Change field.
func (o *DfsTrashFile) SetChange(v time.Time) {
	o.Change = &v
}

// GetDfsRootfs returns the DfsRootfs field value if set, zero value otherwise.
func (o *DfsTrashFile) GetDfsRootfs() NestedRootfs {
	if o == nil || IsNil(o.DfsRootfs) {
		var ret NestedRootfs
		return ret
	}
	return *o.DfsRootfs
}

// GetDfsRootfsOk returns a tuple with the DfsRootfs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTrashFile) GetDfsRootfsOk() (*NestedRootfs, bool) {
	if o == nil || IsNil(o.DfsRootfs) {
		return nil, false
	}
	return o.DfsRootfs, true
}

// HasDfsRootfs returns a boolean if a field has been set.
func (o *DfsTrashFile) HasDfsRootfs() bool {
	if o != nil && !IsNil(o.DfsRootfs) {
		return true
	}

	return false
}

// SetDfsRootfs gets a reference to the given NestedRootfs and assigns it to the DfsRootfs field.
func (o *DfsTrashFile) SetDfsRootfs(v NestedRootfs) {
	o.DfsRootfs = &v
}

// GetDfsTrash returns the DfsTrash field value if set, zero value otherwise.
func (o *DfsTrashFile) GetDfsTrash() NestedTrash {
	if o == nil || IsNil(o.DfsTrash) {
		var ret NestedTrash
		return ret
	}
	return *o.DfsTrash
}

// GetDfsTrashOk returns a tuple with the DfsTrash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTrashFile) GetDfsTrashOk() (*NestedTrash, bool) {
	if o == nil || IsNil(o.DfsTrash) {
		return nil, false
	}
	return o.DfsTrash, true
}

// HasDfsTrash returns a boolean if a field has been set.
func (o *DfsTrashFile) HasDfsTrash() bool {
	if o != nil && !IsNil(o.DfsTrash) {
		return true
	}

	return false
}

// SetDfsTrash gets a reference to the given NestedTrash and assigns it to the DfsTrash field.
func (o *DfsTrashFile) SetDfsTrash(v NestedTrash) {
	o.DfsTrash = &v
}

// GetFiles returns the Files field value if set, zero value otherwise.
func (o *DfsTrashFile) GetFiles() int64 {
	if o == nil || IsNil(o.Files) {
		var ret int64
		return ret
	}
	return *o.Files
}

// GetFilesOk returns a tuple with the Files field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTrashFile) GetFilesOk() (*int64, bool) {
	if o == nil || IsNil(o.Files) {
		return nil, false
	}
	return o.Files, true
}

// HasFiles returns a boolean if a field has been set.
func (o *DfsTrashFile) HasFiles() bool {
	if o != nil && !IsNil(o.Files) {
		return true
	}

	return false
}

// SetFiles gets a reference to the given int64 and assigns it to the Files field.
func (o *DfsTrashFile) SetFiles(v int64) {
	o.Files = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *DfsTrashFile) GetGroup() int64 {
	if o == nil || IsNil(o.Group) {
		var ret int64
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTrashFile) GetGroupOk() (*int64, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *DfsTrashFile) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given int64 and assigns it to the Group field.
func (o *DfsTrashFile) SetGroup(v int64) {
	o.Group = &v
}

// GetInode returns the Inode field value if set, zero value otherwise.
func (o *DfsTrashFile) GetInode() int64 {
	if o == nil || IsNil(o.Inode) {
		var ret int64
		return ret
	}
	return *o.Inode
}

// GetInodeOk returns a tuple with the Inode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTrashFile) GetInodeOk() (*int64, bool) {
	if o == nil || IsNil(o.Inode) {
		return nil, false
	}
	return o.Inode, true
}

// HasInode returns a boolean if a field has been set.
func (o *DfsTrashFile) HasInode() bool {
	if o != nil && !IsNil(o.Inode) {
		return true
	}

	return false
}

// SetInode gets a reference to the given int64 and assigns it to the Inode field.
func (o *DfsTrashFile) SetInode(v int64) {
	o.Inode = &v
}

// GetModify returns the Modify field value if set, zero value otherwise.
func (o *DfsTrashFile) GetModify() time.Time {
	if o == nil || IsNil(o.Modify) {
		var ret time.Time
		return ret
	}
	return *o.Modify
}

// GetModifyOk returns a tuple with the Modify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTrashFile) GetModifyOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Modify) {
		return nil, false
	}
	return o.Modify, true
}

// HasModify returns a boolean if a field has been set.
func (o *DfsTrashFile) HasModify() bool {
	if o != nil && !IsNil(o.Modify) {
		return true
	}

	return false
}

// SetModify gets a reference to the given time.Time and assigns it to the Modify field.
func (o *DfsTrashFile) SetModify(v time.Time) {
	o.Modify = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DfsTrashFile) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTrashFile) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DfsTrashFile) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DfsTrashFile) SetName(v string) {
	o.Name = &v
}

// GetOriginalName returns the OriginalName field value if set, zero value otherwise.
func (o *DfsTrashFile) GetOriginalName() string {
	if o == nil || IsNil(o.OriginalName) {
		var ret string
		return ret
	}
	return *o.OriginalName
}

// GetOriginalNameOk returns a tuple with the OriginalName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTrashFile) GetOriginalNameOk() (*string, bool) {
	if o == nil || IsNil(o.OriginalName) {
		return nil, false
	}
	return o.OriginalName, true
}

// HasOriginalName returns a boolean if a field has been set.
func (o *DfsTrashFile) HasOriginalName() bool {
	if o != nil && !IsNil(o.OriginalName) {
		return true
	}

	return false
}

// SetOriginalName gets a reference to the given string and assigns it to the OriginalName field.
func (o *DfsTrashFile) SetOriginalName(v string) {
	o.OriginalName = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *DfsTrashFile) GetOwner() int64 {
	if o == nil || IsNil(o.Owner) {
		var ret int64
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTrashFile) GetOwnerOk() (*int64, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *DfsTrashFile) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given int64 and assigns it to the Owner field.
func (o *DfsTrashFile) SetOwner(v int64) {
	o.Owner = &v
}

// GetParent returns the Parent field value if set, zero value otherwise.
func (o *DfsTrashFile) GetParent() string {
	if o == nil || IsNil(o.Parent) {
		var ret string
		return ret
	}
	return *o.Parent
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTrashFile) GetParentOk() (*string, bool) {
	if o == nil || IsNil(o.Parent) {
		return nil, false
	}
	return o.Parent, true
}

// HasParent returns a boolean if a field has been set.
func (o *DfsTrashFile) HasParent() bool {
	if o != nil && !IsNil(o.Parent) {
		return true
	}

	return false
}

// SetParent gets a reference to the given string and assigns it to the Parent field.
func (o *DfsTrashFile) SetParent(v string) {
	o.Parent = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *DfsTrashFile) GetSize() int64 {
	if o == nil || IsNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTrashFile) GetSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *DfsTrashFile) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *DfsTrashFile) SetSize(v int64) {
	o.Size = &v
}

// GetTrashPath returns the TrashPath field value if set, zero value otherwise.
func (o *DfsTrashFile) GetTrashPath() string {
	if o == nil || IsNil(o.TrashPath) {
		var ret string
		return ret
	}
	return *o.TrashPath
}

// GetTrashPathOk returns a tuple with the TrashPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTrashFile) GetTrashPathOk() (*string, bool) {
	if o == nil || IsNil(o.TrashPath) {
		return nil, false
	}
	return o.TrashPath, true
}

// HasTrashPath returns a boolean if a field has been set.
func (o *DfsTrashFile) HasTrashPath() bool {
	if o != nil && !IsNil(o.TrashPath) {
		return true
	}

	return false
}

// SetTrashPath gets a reference to the given string and assigns it to the TrashPath field.
func (o *DfsTrashFile) SetTrashPath(v string) {
	o.TrashPath = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DfsTrashFile) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsTrashFile) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DfsTrashFile) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DfsTrashFile) SetType(v string) {
	o.Type = &v
}

func (o DfsTrashFile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsTrashFile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Access) {
		toSerialize["access"] = o.Access
	}
	if !IsNil(o.BaseFileId) {
		toSerialize["base_file_id"] = o.BaseFileId
	}
	if !IsNil(o.BaseName) {
		toSerialize["base_name"] = o.BaseName
	}
	if !IsNil(o.Change) {
		toSerialize["change"] = o.Change
	}
	if !IsNil(o.DfsRootfs) {
		toSerialize["dfs_rootfs"] = o.DfsRootfs
	}
	if !IsNil(o.DfsTrash) {
		toSerialize["dfs_trash"] = o.DfsTrash
	}
	if !IsNil(o.Files) {
		toSerialize["files"] = o.Files
	}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	if !IsNil(o.Inode) {
		toSerialize["inode"] = o.Inode
	}
	if !IsNil(o.Modify) {
		toSerialize["modify"] = o.Modify
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.OriginalName) {
		toSerialize["original_name"] = o.OriginalName
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !IsNil(o.Parent) {
		toSerialize["parent"] = o.Parent
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.TrashPath) {
		toSerialize["trash_path"] = o.TrashPath
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableDfsTrashFile struct {
	value *DfsTrashFile
	isSet bool
}

func (v NullableDfsTrashFile) Get() *DfsTrashFile {
	return v.value
}

func (v *NullableDfsTrashFile) Set(val *DfsTrashFile) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsTrashFile) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsTrashFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsTrashFile(val *DfsTrashFile) *NullableDfsTrashFile {
	return &NullableDfsTrashFile{value: val, isSet: true}
}

func (v NullableDfsTrashFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsTrashFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


