/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TrashUpdateReqTrash type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrashUpdateReqTrash{}

// TrashUpdateReqTrash struct for TrashUpdateReqTrash
type TrashUpdateReqTrash struct {
	Enabled *bool `json:"enabled,omitempty"`
	Retention *string `json:"retention,omitempty"`
}

// NewTrashUpdateReqTrash instantiates a new TrashUpdateReqTrash object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrashUpdateReqTrash() *TrashUpdateReqTrash {
	this := TrashUpdateReqTrash{}
	return &this
}

// NewTrashUpdateReqTrashWithDefaults instantiates a new TrashUpdateReqTrash object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrashUpdateReqTrashWithDefaults() *TrashUpdateReqTrash {
	this := TrashUpdateReqTrash{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *TrashUpdateReqTrash) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrashUpdateReqTrash) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *TrashUpdateReqTrash) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *TrashUpdateReqTrash) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetRetention returns the Retention field value if set, zero value otherwise.
func (o *TrashUpdateReqTrash) GetRetention() string {
	if o == nil || IsNil(o.Retention) {
		var ret string
		return ret
	}
	return *o.Retention
}

// GetRetentionOk returns a tuple with the Retention field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrashUpdateReqTrash) GetRetentionOk() (*string, bool) {
	if o == nil || IsNil(o.Retention) {
		return nil, false
	}
	return o.Retention, true
}

// HasRetention returns a boolean if a field has been set.
func (o *TrashUpdateReqTrash) HasRetention() bool {
	if o != nil && !IsNil(o.Retention) {
		return true
	}

	return false
}

// SetRetention gets a reference to the given string and assigns it to the Retention field.
func (o *TrashUpdateReqTrash) SetRetention(v string) {
	o.Retention = &v
}

func (o TrashUpdateReqTrash) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrashUpdateReqTrash) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Retention) {
		toSerialize["retention"] = o.Retention
	}
	return toSerialize, nil
}

type NullableTrashUpdateReqTrash struct {
	value *TrashUpdateReqTrash
	isSet bool
}

func (v NullableTrashUpdateReqTrash) Get() *TrashUpdateReqTrash {
	return v.value
}

func (v *NullableTrashUpdateReqTrash) Set(val *TrashUpdateReqTrash) {
	v.value = val
	v.isSet = true
}

func (v NullableTrashUpdateReqTrash) IsSet() bool {
	return v.isSet
}

func (v *NullableTrashUpdateReqTrash) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrashUpdateReqTrash(val *TrashUpdateReqTrash) *NullableTrashUpdateReqTrash {
	return &NullableTrashUpdateReqTrash{value: val, isSet: true}
}

func (v NullableTrashUpdateReqTrash) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrashUpdateReqTrash) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


