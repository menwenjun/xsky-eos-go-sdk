/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UserResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserResp{}

// UserResp struct for UserResp
type UserResp struct {
	User UserRecord `json:"user"`
}

type _UserResp UserResp

// NewUserResp instantiates a new UserResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserResp(user UserRecord) *UserResp {
	this := UserResp{}
	this.User = user
	return &this
}

// NewUserRespWithDefaults instantiates a new UserResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserRespWithDefaults() *UserResp {
	this := UserResp{}
	return &this
}

// GetUser returns the User field value
func (o *UserResp) GetUser() UserRecord {
	if o == nil {
		var ret UserRecord
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *UserResp) GetUserOk() (*UserRecord, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *UserResp) SetUser(v UserRecord) {
	o.User = v
}

func (o UserResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["user"] = o.User
	return toSerialize, nil
}

func (o *UserResp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"user",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserResp := _UserResp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserResp)

	if err != nil {
		return err
	}

	*o = UserResp(varUserResp)

	return err
}

type NullableUserResp struct {
	value *UserResp
	isSet bool
}

func (v NullableUserResp) Get() *UserResp {
	return v.value
}

func (v *NullableUserResp) Set(val *UserResp) {
	v.value = val
	v.isSet = true
}

func (v NullableUserResp) IsSet() bool {
	return v.isSet
}

func (v *NullableUserResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserResp(val *UserResp) *NullableUserResp {
	return &NullableUserResp{value: val, isSet: true}
}

func (v NullableUserResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


