/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the DfsRootfs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsRootfs{}

// DfsRootfs DfsRootfs defines model of dfs Root File System
type DfsRootfs struct {
	ActionStatus *string `json:"action_status,omitempty"`
	Cluster *ClusterNestview `json:"cluster,omitempty"`
	Create *time.Time `json:"create,omitempty"`
	Description *string `json:"description,omitempty"`
	DfsGatewayGroup *DfsGatewayGroupNestview `json:"dfs_gateway_group,omitempty"`
	GatewayGroupIds []int64 `json:"gateway_group_ids,omitempty"`
	GcSpeed *string `json:"gc_speed,omitempty"`
	HdfsNum *int64 `json:"hdfs_num,omitempty"`
	Id *int64 `json:"id,omitempty"`
	MetadataCluster *MetadataClusterNestview `json:"metadata_cluster,omitempty"`
	Name *string `json:"name,omitempty"`
	PriorityPolicyIds []int64 `json:"priority_policy_ids,omitempty"`
	Progress *float64 `json:"progress,omitempty"`
	ProgressInfo *ProgressInfo `json:"progress_info,omitempty"`
	QosNum *int64 `json:"qos_num,omitempty"`
	S3BucketNum *int64 `json:"s3_bucket_num,omitempty"`
	ShareNums *map[string]int64 `json:"share_nums,omitempty"`
	Shared *bool `json:"shared,omitempty"`
	Size *int64 `json:"size,omitempty"`
	Status *string `json:"status,omitempty"`
	StoragePolicyNum *int64 `json:"storage_policy_num,omitempty"`
	TierNum *int64 `json:"tier_num,omitempty"`
	Update *time.Time `json:"update,omitempty"`
	Uuid *string `json:"uuid,omitempty"`
	WormLogPath *string `json:"worm_log_path,omitempty"`
}

// NewDfsRootfs instantiates a new DfsRootfs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsRootfs() *DfsRootfs {
	this := DfsRootfs{}
	return &this
}

// NewDfsRootfsWithDefaults instantiates a new DfsRootfs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsRootfsWithDefaults() *DfsRootfs {
	this := DfsRootfs{}
	return &this
}

// GetActionStatus returns the ActionStatus field value if set, zero value otherwise.
func (o *DfsRootfs) GetActionStatus() string {
	if o == nil || IsNil(o.ActionStatus) {
		var ret string
		return ret
	}
	return *o.ActionStatus
}

// GetActionStatusOk returns a tuple with the ActionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsRootfs) GetActionStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ActionStatus) {
		return nil, false
	}
	return o.ActionStatus, true
}

// HasActionStatus returns a boolean if a field has been set.
func (o *DfsRootfs) HasActionStatus() bool {
	if o != nil && !IsNil(o.ActionStatus) {
		return true
	}

	return false
}

// SetActionStatus gets a reference to the given string and assigns it to the ActionStatus field.
func (o *DfsRootfs) SetActionStatus(v string) {
	o.ActionStatus = &v
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *DfsRootfs) GetCluster() ClusterNestview {
	if o == nil || IsNil(o.Cluster) {
		var ret ClusterNestview
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsRootfs) GetClusterOk() (*ClusterNestview, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *DfsRootfs) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given ClusterNestview and assigns it to the Cluster field.
func (o *DfsRootfs) SetCluster(v ClusterNestview) {
	o.Cluster = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *DfsRootfs) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsRootfs) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *DfsRootfs) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *DfsRootfs) SetCreate(v time.Time) {
	o.Create = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DfsRootfs) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsRootfs) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DfsRootfs) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DfsRootfs) SetDescription(v string) {
	o.Description = &v
}

// GetDfsGatewayGroup returns the DfsGatewayGroup field value if set, zero value otherwise.
func (o *DfsRootfs) GetDfsGatewayGroup() DfsGatewayGroupNestview {
	if o == nil || IsNil(o.DfsGatewayGroup) {
		var ret DfsGatewayGroupNestview
		return ret
	}
	return *o.DfsGatewayGroup
}

// GetDfsGatewayGroupOk returns a tuple with the DfsGatewayGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsRootfs) GetDfsGatewayGroupOk() (*DfsGatewayGroupNestview, bool) {
	if o == nil || IsNil(o.DfsGatewayGroup) {
		return nil, false
	}
	return o.DfsGatewayGroup, true
}

// HasDfsGatewayGroup returns a boolean if a field has been set.
func (o *DfsRootfs) HasDfsGatewayGroup() bool {
	if o != nil && !IsNil(o.DfsGatewayGroup) {
		return true
	}

	return false
}

// SetDfsGatewayGroup gets a reference to the given DfsGatewayGroupNestview and assigns it to the DfsGatewayGroup field.
func (o *DfsRootfs) SetDfsGatewayGroup(v DfsGatewayGroupNestview) {
	o.DfsGatewayGroup = &v
}

// GetGatewayGroupIds returns the GatewayGroupIds field value if set, zero value otherwise.
func (o *DfsRootfs) GetGatewayGroupIds() []int64 {
	if o == nil || IsNil(o.GatewayGroupIds) {
		var ret []int64
		return ret
	}
	return o.GatewayGroupIds
}

// GetGatewayGroupIdsOk returns a tuple with the GatewayGroupIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsRootfs) GetGatewayGroupIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.GatewayGroupIds) {
		return nil, false
	}
	return o.GatewayGroupIds, true
}

// HasGatewayGroupIds returns a boolean if a field has been set.
func (o *DfsRootfs) HasGatewayGroupIds() bool {
	if o != nil && !IsNil(o.GatewayGroupIds) {
		return true
	}

	return false
}

// SetGatewayGroupIds gets a reference to the given []int64 and assigns it to the GatewayGroupIds field.
func (o *DfsRootfs) SetGatewayGroupIds(v []int64) {
	o.GatewayGroupIds = v
}

// GetGcSpeed returns the GcSpeed field value if set, zero value otherwise.
func (o *DfsRootfs) GetGcSpeed() string {
	if o == nil || IsNil(o.GcSpeed) {
		var ret string
		return ret
	}
	return *o.GcSpeed
}

// GetGcSpeedOk returns a tuple with the GcSpeed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsRootfs) GetGcSpeedOk() (*string, bool) {
	if o == nil || IsNil(o.GcSpeed) {
		return nil, false
	}
	return o.GcSpeed, true
}

// HasGcSpeed returns a boolean if a field has been set.
func (o *DfsRootfs) HasGcSpeed() bool {
	if o != nil && !IsNil(o.GcSpeed) {
		return true
	}

	return false
}

// SetGcSpeed gets a reference to the given string and assigns it to the GcSpeed field.
func (o *DfsRootfs) SetGcSpeed(v string) {
	o.GcSpeed = &v
}

// GetHdfsNum returns the HdfsNum field value if set, zero value otherwise.
func (o *DfsRootfs) GetHdfsNum() int64 {
	if o == nil || IsNil(o.HdfsNum) {
		var ret int64
		return ret
	}
	return *o.HdfsNum
}

// GetHdfsNumOk returns a tuple with the HdfsNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsRootfs) GetHdfsNumOk() (*int64, bool) {
	if o == nil || IsNil(o.HdfsNum) {
		return nil, false
	}
	return o.HdfsNum, true
}

// HasHdfsNum returns a boolean if a field has been set.
func (o *DfsRootfs) HasHdfsNum() bool {
	if o != nil && !IsNil(o.HdfsNum) {
		return true
	}

	return false
}

// SetHdfsNum gets a reference to the given int64 and assigns it to the HdfsNum field.
func (o *DfsRootfs) SetHdfsNum(v int64) {
	o.HdfsNum = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DfsRootfs) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsRootfs) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DfsRootfs) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *DfsRootfs) SetId(v int64) {
	o.Id = &v
}

// GetMetadataCluster returns the MetadataCluster field value if set, zero value otherwise.
func (o *DfsRootfs) GetMetadataCluster() MetadataClusterNestview {
	if o == nil || IsNil(o.MetadataCluster) {
		var ret MetadataClusterNestview
		return ret
	}
	return *o.MetadataCluster
}

// GetMetadataClusterOk returns a tuple with the MetadataCluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsRootfs) GetMetadataClusterOk() (*MetadataClusterNestview, bool) {
	if o == nil || IsNil(o.MetadataCluster) {
		return nil, false
	}
	return o.MetadataCluster, true
}

// HasMetadataCluster returns a boolean if a field has been set.
func (o *DfsRootfs) HasMetadataCluster() bool {
	if o != nil && !IsNil(o.MetadataCluster) {
		return true
	}

	return false
}

// SetMetadataCluster gets a reference to the given MetadataClusterNestview and assigns it to the MetadataCluster field.
func (o *DfsRootfs) SetMetadataCluster(v MetadataClusterNestview) {
	o.MetadataCluster = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DfsRootfs) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsRootfs) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DfsRootfs) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DfsRootfs) SetName(v string) {
	o.Name = &v
}

// GetPriorityPolicyIds returns the PriorityPolicyIds field value if set, zero value otherwise.
func (o *DfsRootfs) GetPriorityPolicyIds() []int64 {
	if o == nil || IsNil(o.PriorityPolicyIds) {
		var ret []int64
		return ret
	}
	return o.PriorityPolicyIds
}

// GetPriorityPolicyIdsOk returns a tuple with the PriorityPolicyIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsRootfs) GetPriorityPolicyIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.PriorityPolicyIds) {
		return nil, false
	}
	return o.PriorityPolicyIds, true
}

// HasPriorityPolicyIds returns a boolean if a field has been set.
func (o *DfsRootfs) HasPriorityPolicyIds() bool {
	if o != nil && !IsNil(o.PriorityPolicyIds) {
		return true
	}

	return false
}

// SetPriorityPolicyIds gets a reference to the given []int64 and assigns it to the PriorityPolicyIds field.
func (o *DfsRootfs) SetPriorityPolicyIds(v []int64) {
	o.PriorityPolicyIds = v
}

// GetProgress returns the Progress field value if set, zero value otherwise.
func (o *DfsRootfs) GetProgress() float64 {
	if o == nil || IsNil(o.Progress) {
		var ret float64
		return ret
	}
	return *o.Progress
}

// GetProgressOk returns a tuple with the Progress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsRootfs) GetProgressOk() (*float64, bool) {
	if o == nil || IsNil(o.Progress) {
		return nil, false
	}
	return o.Progress, true
}

// HasProgress returns a boolean if a field has been set.
func (o *DfsRootfs) HasProgress() bool {
	if o != nil && !IsNil(o.Progress) {
		return true
	}

	return false
}

// SetProgress gets a reference to the given float64 and assigns it to the Progress field.
func (o *DfsRootfs) SetProgress(v float64) {
	o.Progress = &v
}

// GetProgressInfo returns the ProgressInfo field value if set, zero value otherwise.
func (o *DfsRootfs) GetProgressInfo() ProgressInfo {
	if o == nil || IsNil(o.ProgressInfo) {
		var ret ProgressInfo
		return ret
	}
	return *o.ProgressInfo
}

// GetProgressInfoOk returns a tuple with the ProgressInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsRootfs) GetProgressInfoOk() (*ProgressInfo, bool) {
	if o == nil || IsNil(o.ProgressInfo) {
		return nil, false
	}
	return o.ProgressInfo, true
}

// HasProgressInfo returns a boolean if a field has been set.
func (o *DfsRootfs) HasProgressInfo() bool {
	if o != nil && !IsNil(o.ProgressInfo) {
		return true
	}

	return false
}

// SetProgressInfo gets a reference to the given ProgressInfo and assigns it to the ProgressInfo field.
func (o *DfsRootfs) SetProgressInfo(v ProgressInfo) {
	o.ProgressInfo = &v
}

// GetQosNum returns the QosNum field value if set, zero value otherwise.
func (o *DfsRootfs) GetQosNum() int64 {
	if o == nil || IsNil(o.QosNum) {
		var ret int64
		return ret
	}
	return *o.QosNum
}

// GetQosNumOk returns a tuple with the QosNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsRootfs) GetQosNumOk() (*int64, bool) {
	if o == nil || IsNil(o.QosNum) {
		return nil, false
	}
	return o.QosNum, true
}

// HasQosNum returns a boolean if a field has been set.
func (o *DfsRootfs) HasQosNum() bool {
	if o != nil && !IsNil(o.QosNum) {
		return true
	}

	return false
}

// SetQosNum gets a reference to the given int64 and assigns it to the QosNum field.
func (o *DfsRootfs) SetQosNum(v int64) {
	o.QosNum = &v
}

// GetS3BucketNum returns the S3BucketNum field value if set, zero value otherwise.
func (o *DfsRootfs) GetS3BucketNum() int64 {
	if o == nil || IsNil(o.S3BucketNum) {
		var ret int64
		return ret
	}
	return *o.S3BucketNum
}

// GetS3BucketNumOk returns a tuple with the S3BucketNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsRootfs) GetS3BucketNumOk() (*int64, bool) {
	if o == nil || IsNil(o.S3BucketNum) {
		return nil, false
	}
	return o.S3BucketNum, true
}

// HasS3BucketNum returns a boolean if a field has been set.
func (o *DfsRootfs) HasS3BucketNum() bool {
	if o != nil && !IsNil(o.S3BucketNum) {
		return true
	}

	return false
}

// SetS3BucketNum gets a reference to the given int64 and assigns it to the S3BucketNum field.
func (o *DfsRootfs) SetS3BucketNum(v int64) {
	o.S3BucketNum = &v
}

// GetShareNums returns the ShareNums field value if set, zero value otherwise.
func (o *DfsRootfs) GetShareNums() map[string]int64 {
	if o == nil || IsNil(o.ShareNums) {
		var ret map[string]int64
		return ret
	}
	return *o.ShareNums
}

// GetShareNumsOk returns a tuple with the ShareNums field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsRootfs) GetShareNumsOk() (*map[string]int64, bool) {
	if o == nil || IsNil(o.ShareNums) {
		return nil, false
	}
	return o.ShareNums, true
}

// HasShareNums returns a boolean if a field has been set.
func (o *DfsRootfs) HasShareNums() bool {
	if o != nil && !IsNil(o.ShareNums) {
		return true
	}

	return false
}

// SetShareNums gets a reference to the given map[string]int64 and assigns it to the ShareNums field.
func (o *DfsRootfs) SetShareNums(v map[string]int64) {
	o.ShareNums = &v
}

// GetShared returns the Shared field value if set, zero value otherwise.
func (o *DfsRootfs) GetShared() bool {
	if o == nil || IsNil(o.Shared) {
		var ret bool
		return ret
	}
	return *o.Shared
}

// GetSharedOk returns a tuple with the Shared field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsRootfs) GetSharedOk() (*bool, bool) {
	if o == nil || IsNil(o.Shared) {
		return nil, false
	}
	return o.Shared, true
}

// HasShared returns a boolean if a field has been set.
func (o *DfsRootfs) HasShared() bool {
	if o != nil && !IsNil(o.Shared) {
		return true
	}

	return false
}

// SetShared gets a reference to the given bool and assigns it to the Shared field.
func (o *DfsRootfs) SetShared(v bool) {
	o.Shared = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *DfsRootfs) GetSize() int64 {
	if o == nil || IsNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsRootfs) GetSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *DfsRootfs) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *DfsRootfs) SetSize(v int64) {
	o.Size = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DfsRootfs) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsRootfs) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DfsRootfs) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *DfsRootfs) SetStatus(v string) {
	o.Status = &v
}

// GetStoragePolicyNum returns the StoragePolicyNum field value if set, zero value otherwise.
func (o *DfsRootfs) GetStoragePolicyNum() int64 {
	if o == nil || IsNil(o.StoragePolicyNum) {
		var ret int64
		return ret
	}
	return *o.StoragePolicyNum
}

// GetStoragePolicyNumOk returns a tuple with the StoragePolicyNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsRootfs) GetStoragePolicyNumOk() (*int64, bool) {
	if o == nil || IsNil(o.StoragePolicyNum) {
		return nil, false
	}
	return o.StoragePolicyNum, true
}

// HasStoragePolicyNum returns a boolean if a field has been set.
func (o *DfsRootfs) HasStoragePolicyNum() bool {
	if o != nil && !IsNil(o.StoragePolicyNum) {
		return true
	}

	return false
}

// SetStoragePolicyNum gets a reference to the given int64 and assigns it to the StoragePolicyNum field.
func (o *DfsRootfs) SetStoragePolicyNum(v int64) {
	o.StoragePolicyNum = &v
}

// GetTierNum returns the TierNum field value if set, zero value otherwise.
func (o *DfsRootfs) GetTierNum() int64 {
	if o == nil || IsNil(o.TierNum) {
		var ret int64
		return ret
	}
	return *o.TierNum
}

// GetTierNumOk returns a tuple with the TierNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsRootfs) GetTierNumOk() (*int64, bool) {
	if o == nil || IsNil(o.TierNum) {
		return nil, false
	}
	return o.TierNum, true
}

// HasTierNum returns a boolean if a field has been set.
func (o *DfsRootfs) HasTierNum() bool {
	if o != nil && !IsNil(o.TierNum) {
		return true
	}

	return false
}

// SetTierNum gets a reference to the given int64 and assigns it to the TierNum field.
func (o *DfsRootfs) SetTierNum(v int64) {
	o.TierNum = &v
}

// GetUpdate returns the Update field value if set, zero value otherwise.
func (o *DfsRootfs) GetUpdate() time.Time {
	if o == nil || IsNil(o.Update) {
		var ret time.Time
		return ret
	}
	return *o.Update
}

// GetUpdateOk returns a tuple with the Update field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsRootfs) GetUpdateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Update) {
		return nil, false
	}
	return o.Update, true
}

// HasUpdate returns a boolean if a field has been set.
func (o *DfsRootfs) HasUpdate() bool {
	if o != nil && !IsNil(o.Update) {
		return true
	}

	return false
}

// SetUpdate gets a reference to the given time.Time and assigns it to the Update field.
func (o *DfsRootfs) SetUpdate(v time.Time) {
	o.Update = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *DfsRootfs) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsRootfs) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *DfsRootfs) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *DfsRootfs) SetUuid(v string) {
	o.Uuid = &v
}

// GetWormLogPath returns the WormLogPath field value if set, zero value otherwise.
func (o *DfsRootfs) GetWormLogPath() string {
	if o == nil || IsNil(o.WormLogPath) {
		var ret string
		return ret
	}
	return *o.WormLogPath
}

// GetWormLogPathOk returns a tuple with the WormLogPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsRootfs) GetWormLogPathOk() (*string, bool) {
	if o == nil || IsNil(o.WormLogPath) {
		return nil, false
	}
	return o.WormLogPath, true
}

// HasWormLogPath returns a boolean if a field has been set.
func (o *DfsRootfs) HasWormLogPath() bool {
	if o != nil && !IsNil(o.WormLogPath) {
		return true
	}

	return false
}

// SetWormLogPath gets a reference to the given string and assigns it to the WormLogPath field.
func (o *DfsRootfs) SetWormLogPath(v string) {
	o.WormLogPath = &v
}

func (o DfsRootfs) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsRootfs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActionStatus) {
		toSerialize["action_status"] = o.ActionStatus
	}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DfsGatewayGroup) {
		toSerialize["dfs_gateway_group"] = o.DfsGatewayGroup
	}
	if !IsNil(o.GatewayGroupIds) {
		toSerialize["gateway_group_ids"] = o.GatewayGroupIds
	}
	if !IsNil(o.GcSpeed) {
		toSerialize["gc_speed"] = o.GcSpeed
	}
	if !IsNil(o.HdfsNum) {
		toSerialize["hdfs_num"] = o.HdfsNum
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.MetadataCluster) {
		toSerialize["metadata_cluster"] = o.MetadataCluster
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.PriorityPolicyIds) {
		toSerialize["priority_policy_ids"] = o.PriorityPolicyIds
	}
	if !IsNil(o.Progress) {
		toSerialize["progress"] = o.Progress
	}
	if !IsNil(o.ProgressInfo) {
		toSerialize["progress_info"] = o.ProgressInfo
	}
	if !IsNil(o.QosNum) {
		toSerialize["qos_num"] = o.QosNum
	}
	if !IsNil(o.S3BucketNum) {
		toSerialize["s3_bucket_num"] = o.S3BucketNum
	}
	if !IsNil(o.ShareNums) {
		toSerialize["share_nums"] = o.ShareNums
	}
	if !IsNil(o.Shared) {
		toSerialize["shared"] = o.Shared
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.StoragePolicyNum) {
		toSerialize["storage_policy_num"] = o.StoragePolicyNum
	}
	if !IsNil(o.TierNum) {
		toSerialize["tier_num"] = o.TierNum
	}
	if !IsNil(o.Update) {
		toSerialize["update"] = o.Update
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.WormLogPath) {
		toSerialize["worm_log_path"] = o.WormLogPath
	}
	return toSerialize, nil
}

type NullableDfsRootfs struct {
	value *DfsRootfs
	isSet bool
}

func (v NullableDfsRootfs) Get() *DfsRootfs {
	return v.value
}

func (v *NullableDfsRootfs) Set(val *DfsRootfs) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsRootfs) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsRootfs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsRootfs(val *DfsRootfs) *NullableDfsRootfs {
	return &NullableDfsRootfs{value: val, isSet: true}
}

func (v NullableDfsRootfs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsRootfs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


