/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the DiskRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DiskRecord{}

// DiskRecord DiskRecord contains information of a disk
type DiskRecord struct {
	ActionStatus *string `json:"action_status,omitempty"`
	// size of disk
	Bytes *int64 `json:"bytes,omitempty"`
	CacheCreate *time.Time `json:"cache_create,omitempty"`
	ChannelId *string `json:"channel_id,omitempty"`
	Cluster *ClusterNestview `json:"cluster,omitempty"`
	ControllerId *string `json:"controller_id,omitempty"`
	Create *time.Time `json:"create,omitempty"`
	Device *string `json:"device,omitempty"`
	DiskType *string `json:"disk_type,omitempty"`
	DriverType *string `json:"driver_type,omitempty"`
	EnclosureId *string `json:"enclosure_id,omitempty"`
	Host *Host `json:"host,omitempty"`
	Id *int64 `json:"id,omitempty"`
	// used as cache disk, deprecated
	IsCache *bool `json:"is_cache,omitempty"`
	// used as root disk, deprecated
	IsRoot *bool `json:"is_root,omitempty"`
	LightingStatus *string `json:"lighting_status,omitempty"`
	Model *string `json:"model,omitempty"`
	Name *string `json:"name,omitempty"`
	PartitionNum *int64 `json:"partition_num,omitempty"`
	PartitionTypes []string `json:"partition_types,omitempty"`
	Partitions []Partition `json:"partitions,omitempty"`
	PowerSafe *bool `json:"power_safe,omitempty"`
	RaidStatus *string `json:"raid_status,omitempty"`
	RotationRate *string `json:"rotation_rate,omitempty"`
	Rotational *bool `json:"rotational,omitempty"`
	Serial *string `json:"serial,omitempty"`
	SlotId *string `json:"slot_id,omitempty"`
	SmartAttrs []SmartAttr `json:"smart_attrs,omitempty"`
	SsdLifeLeft *int64 `json:"ssd_life_left,omitempty"`
	SsdType *string `json:"ssd_type,omitempty"`
	Status *string `json:"status,omitempty"`
	Type *string `json:"type,omitempty"`
	Update *time.Time `json:"update,omitempty"`
	// disk usage
	Usage *string `json:"usage,omitempty"`
	// disk is used, deprecated
	Used *bool `json:"used,omitempty"`
	Wwid *string `json:"wwid,omitempty"`
	Samples []DiskStat `json:"samples,omitempty"`
}

// NewDiskRecord instantiates a new DiskRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiskRecord() *DiskRecord {
	this := DiskRecord{}
	return &this
}

// NewDiskRecordWithDefaults instantiates a new DiskRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiskRecordWithDefaults() *DiskRecord {
	this := DiskRecord{}
	return &this
}

// GetActionStatus returns the ActionStatus field value if set, zero value otherwise.
func (o *DiskRecord) GetActionStatus() string {
	if o == nil || IsNil(o.ActionStatus) {
		var ret string
		return ret
	}
	return *o.ActionStatus
}

// GetActionStatusOk returns a tuple with the ActionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskRecord) GetActionStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ActionStatus) {
		return nil, false
	}
	return o.ActionStatus, true
}

// HasActionStatus returns a boolean if a field has been set.
func (o *DiskRecord) HasActionStatus() bool {
	if o != nil && !IsNil(o.ActionStatus) {
		return true
	}

	return false
}

// SetActionStatus gets a reference to the given string and assigns it to the ActionStatus field.
func (o *DiskRecord) SetActionStatus(v string) {
	o.ActionStatus = &v
}

// GetBytes returns the Bytes field value if set, zero value otherwise.
func (o *DiskRecord) GetBytes() int64 {
	if o == nil || IsNil(o.Bytes) {
		var ret int64
		return ret
	}
	return *o.Bytes
}

// GetBytesOk returns a tuple with the Bytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskRecord) GetBytesOk() (*int64, bool) {
	if o == nil || IsNil(o.Bytes) {
		return nil, false
	}
	return o.Bytes, true
}

// HasBytes returns a boolean if a field has been set.
func (o *DiskRecord) HasBytes() bool {
	if o != nil && !IsNil(o.Bytes) {
		return true
	}

	return false
}

// SetBytes gets a reference to the given int64 and assigns it to the Bytes field.
func (o *DiskRecord) SetBytes(v int64) {
	o.Bytes = &v
}

// GetCacheCreate returns the CacheCreate field value if set, zero value otherwise.
func (o *DiskRecord) GetCacheCreate() time.Time {
	if o == nil || IsNil(o.CacheCreate) {
		var ret time.Time
		return ret
	}
	return *o.CacheCreate
}

// GetCacheCreateOk returns a tuple with the CacheCreate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskRecord) GetCacheCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CacheCreate) {
		return nil, false
	}
	return o.CacheCreate, true
}

// HasCacheCreate returns a boolean if a field has been set.
func (o *DiskRecord) HasCacheCreate() bool {
	if o != nil && !IsNil(o.CacheCreate) {
		return true
	}

	return false
}

// SetCacheCreate gets a reference to the given time.Time and assigns it to the CacheCreate field.
func (o *DiskRecord) SetCacheCreate(v time.Time) {
	o.CacheCreate = &v
}

// GetChannelId returns the ChannelId field value if set, zero value otherwise.
func (o *DiskRecord) GetChannelId() string {
	if o == nil || IsNil(o.ChannelId) {
		var ret string
		return ret
	}
	return *o.ChannelId
}

// GetChannelIdOk returns a tuple with the ChannelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskRecord) GetChannelIdOk() (*string, bool) {
	if o == nil || IsNil(o.ChannelId) {
		return nil, false
	}
	return o.ChannelId, true
}

// HasChannelId returns a boolean if a field has been set.
func (o *DiskRecord) HasChannelId() bool {
	if o != nil && !IsNil(o.ChannelId) {
		return true
	}

	return false
}

// SetChannelId gets a reference to the given string and assigns it to the ChannelId field.
func (o *DiskRecord) SetChannelId(v string) {
	o.ChannelId = &v
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *DiskRecord) GetCluster() ClusterNestview {
	if o == nil || IsNil(o.Cluster) {
		var ret ClusterNestview
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskRecord) GetClusterOk() (*ClusterNestview, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *DiskRecord) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given ClusterNestview and assigns it to the Cluster field.
func (o *DiskRecord) SetCluster(v ClusterNestview) {
	o.Cluster = &v
}

// GetControllerId returns the ControllerId field value if set, zero value otherwise.
func (o *DiskRecord) GetControllerId() string {
	if o == nil || IsNil(o.ControllerId) {
		var ret string
		return ret
	}
	return *o.ControllerId
}

// GetControllerIdOk returns a tuple with the ControllerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskRecord) GetControllerIdOk() (*string, bool) {
	if o == nil || IsNil(o.ControllerId) {
		return nil, false
	}
	return o.ControllerId, true
}

// HasControllerId returns a boolean if a field has been set.
func (o *DiskRecord) HasControllerId() bool {
	if o != nil && !IsNil(o.ControllerId) {
		return true
	}

	return false
}

// SetControllerId gets a reference to the given string and assigns it to the ControllerId field.
func (o *DiskRecord) SetControllerId(v string) {
	o.ControllerId = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *DiskRecord) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskRecord) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *DiskRecord) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *DiskRecord) SetCreate(v time.Time) {
	o.Create = &v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *DiskRecord) GetDevice() string {
	if o == nil || IsNil(o.Device) {
		var ret string
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskRecord) GetDeviceOk() (*string, bool) {
	if o == nil || IsNil(o.Device) {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *DiskRecord) HasDevice() bool {
	if o != nil && !IsNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given string and assigns it to the Device field.
func (o *DiskRecord) SetDevice(v string) {
	o.Device = &v
}

// GetDiskType returns the DiskType field value if set, zero value otherwise.
func (o *DiskRecord) GetDiskType() string {
	if o == nil || IsNil(o.DiskType) {
		var ret string
		return ret
	}
	return *o.DiskType
}

// GetDiskTypeOk returns a tuple with the DiskType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskRecord) GetDiskTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DiskType) {
		return nil, false
	}
	return o.DiskType, true
}

// HasDiskType returns a boolean if a field has been set.
func (o *DiskRecord) HasDiskType() bool {
	if o != nil && !IsNil(o.DiskType) {
		return true
	}

	return false
}

// SetDiskType gets a reference to the given string and assigns it to the DiskType field.
func (o *DiskRecord) SetDiskType(v string) {
	o.DiskType = &v
}

// GetDriverType returns the DriverType field value if set, zero value otherwise.
func (o *DiskRecord) GetDriverType() string {
	if o == nil || IsNil(o.DriverType) {
		var ret string
		return ret
	}
	return *o.DriverType
}

// GetDriverTypeOk returns a tuple with the DriverType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskRecord) GetDriverTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DriverType) {
		return nil, false
	}
	return o.DriverType, true
}

// HasDriverType returns a boolean if a field has been set.
func (o *DiskRecord) HasDriverType() bool {
	if o != nil && !IsNil(o.DriverType) {
		return true
	}

	return false
}

// SetDriverType gets a reference to the given string and assigns it to the DriverType field.
func (o *DiskRecord) SetDriverType(v string) {
	o.DriverType = &v
}

// GetEnclosureId returns the EnclosureId field value if set, zero value otherwise.
func (o *DiskRecord) GetEnclosureId() string {
	if o == nil || IsNil(o.EnclosureId) {
		var ret string
		return ret
	}
	return *o.EnclosureId
}

// GetEnclosureIdOk returns a tuple with the EnclosureId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskRecord) GetEnclosureIdOk() (*string, bool) {
	if o == nil || IsNil(o.EnclosureId) {
		return nil, false
	}
	return o.EnclosureId, true
}

// HasEnclosureId returns a boolean if a field has been set.
func (o *DiskRecord) HasEnclosureId() bool {
	if o != nil && !IsNil(o.EnclosureId) {
		return true
	}

	return false
}

// SetEnclosureId gets a reference to the given string and assigns it to the EnclosureId field.
func (o *DiskRecord) SetEnclosureId(v string) {
	o.EnclosureId = &v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *DiskRecord) GetHost() Host {
	if o == nil || IsNil(o.Host) {
		var ret Host
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskRecord) GetHostOk() (*Host, bool) {
	if o == nil || IsNil(o.Host) {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *DiskRecord) HasHost() bool {
	if o != nil && !IsNil(o.Host) {
		return true
	}

	return false
}

// SetHost gets a reference to the given Host and assigns it to the Host field.
func (o *DiskRecord) SetHost(v Host) {
	o.Host = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DiskRecord) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskRecord) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DiskRecord) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *DiskRecord) SetId(v int64) {
	o.Id = &v
}

// GetIsCache returns the IsCache field value if set, zero value otherwise.
func (o *DiskRecord) GetIsCache() bool {
	if o == nil || IsNil(o.IsCache) {
		var ret bool
		return ret
	}
	return *o.IsCache
}

// GetIsCacheOk returns a tuple with the IsCache field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskRecord) GetIsCacheOk() (*bool, bool) {
	if o == nil || IsNil(o.IsCache) {
		return nil, false
	}
	return o.IsCache, true
}

// HasIsCache returns a boolean if a field has been set.
func (o *DiskRecord) HasIsCache() bool {
	if o != nil && !IsNil(o.IsCache) {
		return true
	}

	return false
}

// SetIsCache gets a reference to the given bool and assigns it to the IsCache field.
func (o *DiskRecord) SetIsCache(v bool) {
	o.IsCache = &v
}

// GetIsRoot returns the IsRoot field value if set, zero value otherwise.
func (o *DiskRecord) GetIsRoot() bool {
	if o == nil || IsNil(o.IsRoot) {
		var ret bool
		return ret
	}
	return *o.IsRoot
}

// GetIsRootOk returns a tuple with the IsRoot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskRecord) GetIsRootOk() (*bool, bool) {
	if o == nil || IsNil(o.IsRoot) {
		return nil, false
	}
	return o.IsRoot, true
}

// HasIsRoot returns a boolean if a field has been set.
func (o *DiskRecord) HasIsRoot() bool {
	if o != nil && !IsNil(o.IsRoot) {
		return true
	}

	return false
}

// SetIsRoot gets a reference to the given bool and assigns it to the IsRoot field.
func (o *DiskRecord) SetIsRoot(v bool) {
	o.IsRoot = &v
}

// GetLightingStatus returns the LightingStatus field value if set, zero value otherwise.
func (o *DiskRecord) GetLightingStatus() string {
	if o == nil || IsNil(o.LightingStatus) {
		var ret string
		return ret
	}
	return *o.LightingStatus
}

// GetLightingStatusOk returns a tuple with the LightingStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskRecord) GetLightingStatusOk() (*string, bool) {
	if o == nil || IsNil(o.LightingStatus) {
		return nil, false
	}
	return o.LightingStatus, true
}

// HasLightingStatus returns a boolean if a field has been set.
func (o *DiskRecord) HasLightingStatus() bool {
	if o != nil && !IsNil(o.LightingStatus) {
		return true
	}

	return false
}

// SetLightingStatus gets a reference to the given string and assigns it to the LightingStatus field.
func (o *DiskRecord) SetLightingStatus(v string) {
	o.LightingStatus = &v
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *DiskRecord) GetModel() string {
	if o == nil || IsNil(o.Model) {
		var ret string
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskRecord) GetModelOk() (*string, bool) {
	if o == nil || IsNil(o.Model) {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *DiskRecord) HasModel() bool {
	if o != nil && !IsNil(o.Model) {
		return true
	}

	return false
}

// SetModel gets a reference to the given string and assigns it to the Model field.
func (o *DiskRecord) SetModel(v string) {
	o.Model = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DiskRecord) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskRecord) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DiskRecord) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DiskRecord) SetName(v string) {
	o.Name = &v
}

// GetPartitionNum returns the PartitionNum field value if set, zero value otherwise.
func (o *DiskRecord) GetPartitionNum() int64 {
	if o == nil || IsNil(o.PartitionNum) {
		var ret int64
		return ret
	}
	return *o.PartitionNum
}

// GetPartitionNumOk returns a tuple with the PartitionNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskRecord) GetPartitionNumOk() (*int64, bool) {
	if o == nil || IsNil(o.PartitionNum) {
		return nil, false
	}
	return o.PartitionNum, true
}

// HasPartitionNum returns a boolean if a field has been set.
func (o *DiskRecord) HasPartitionNum() bool {
	if o != nil && !IsNil(o.PartitionNum) {
		return true
	}

	return false
}

// SetPartitionNum gets a reference to the given int64 and assigns it to the PartitionNum field.
func (o *DiskRecord) SetPartitionNum(v int64) {
	o.PartitionNum = &v
}

// GetPartitionTypes returns the PartitionTypes field value if set, zero value otherwise.
func (o *DiskRecord) GetPartitionTypes() []string {
	if o == nil || IsNil(o.PartitionTypes) {
		var ret []string
		return ret
	}
	return o.PartitionTypes
}

// GetPartitionTypesOk returns a tuple with the PartitionTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskRecord) GetPartitionTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.PartitionTypes) {
		return nil, false
	}
	return o.PartitionTypes, true
}

// HasPartitionTypes returns a boolean if a field has been set.
func (o *DiskRecord) HasPartitionTypes() bool {
	if o != nil && !IsNil(o.PartitionTypes) {
		return true
	}

	return false
}

// SetPartitionTypes gets a reference to the given []string and assigns it to the PartitionTypes field.
func (o *DiskRecord) SetPartitionTypes(v []string) {
	o.PartitionTypes = v
}

// GetPartitions returns the Partitions field value if set, zero value otherwise.
func (o *DiskRecord) GetPartitions() []Partition {
	if o == nil || IsNil(o.Partitions) {
		var ret []Partition
		return ret
	}
	return o.Partitions
}

// GetPartitionsOk returns a tuple with the Partitions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskRecord) GetPartitionsOk() ([]Partition, bool) {
	if o == nil || IsNil(o.Partitions) {
		return nil, false
	}
	return o.Partitions, true
}

// HasPartitions returns a boolean if a field has been set.
func (o *DiskRecord) HasPartitions() bool {
	if o != nil && !IsNil(o.Partitions) {
		return true
	}

	return false
}

// SetPartitions gets a reference to the given []Partition and assigns it to the Partitions field.
func (o *DiskRecord) SetPartitions(v []Partition) {
	o.Partitions = v
}

// GetPowerSafe returns the PowerSafe field value if set, zero value otherwise.
func (o *DiskRecord) GetPowerSafe() bool {
	if o == nil || IsNil(o.PowerSafe) {
		var ret bool
		return ret
	}
	return *o.PowerSafe
}

// GetPowerSafeOk returns a tuple with the PowerSafe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskRecord) GetPowerSafeOk() (*bool, bool) {
	if o == nil || IsNil(o.PowerSafe) {
		return nil, false
	}
	return o.PowerSafe, true
}

// HasPowerSafe returns a boolean if a field has been set.
func (o *DiskRecord) HasPowerSafe() bool {
	if o != nil && !IsNil(o.PowerSafe) {
		return true
	}

	return false
}

// SetPowerSafe gets a reference to the given bool and assigns it to the PowerSafe field.
func (o *DiskRecord) SetPowerSafe(v bool) {
	o.PowerSafe = &v
}

// GetRaidStatus returns the RaidStatus field value if set, zero value otherwise.
func (o *DiskRecord) GetRaidStatus() string {
	if o == nil || IsNil(o.RaidStatus) {
		var ret string
		return ret
	}
	return *o.RaidStatus
}

// GetRaidStatusOk returns a tuple with the RaidStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskRecord) GetRaidStatusOk() (*string, bool) {
	if o == nil || IsNil(o.RaidStatus) {
		return nil, false
	}
	return o.RaidStatus, true
}

// HasRaidStatus returns a boolean if a field has been set.
func (o *DiskRecord) HasRaidStatus() bool {
	if o != nil && !IsNil(o.RaidStatus) {
		return true
	}

	return false
}

// SetRaidStatus gets a reference to the given string and assigns it to the RaidStatus field.
func (o *DiskRecord) SetRaidStatus(v string) {
	o.RaidStatus = &v
}

// GetRotationRate returns the RotationRate field value if set, zero value otherwise.
func (o *DiskRecord) GetRotationRate() string {
	if o == nil || IsNil(o.RotationRate) {
		var ret string
		return ret
	}
	return *o.RotationRate
}

// GetRotationRateOk returns a tuple with the RotationRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskRecord) GetRotationRateOk() (*string, bool) {
	if o == nil || IsNil(o.RotationRate) {
		return nil, false
	}
	return o.RotationRate, true
}

// HasRotationRate returns a boolean if a field has been set.
func (o *DiskRecord) HasRotationRate() bool {
	if o != nil && !IsNil(o.RotationRate) {
		return true
	}

	return false
}

// SetRotationRate gets a reference to the given string and assigns it to the RotationRate field.
func (o *DiskRecord) SetRotationRate(v string) {
	o.RotationRate = &v
}

// GetRotational returns the Rotational field value if set, zero value otherwise.
func (o *DiskRecord) GetRotational() bool {
	if o == nil || IsNil(o.Rotational) {
		var ret bool
		return ret
	}
	return *o.Rotational
}

// GetRotationalOk returns a tuple with the Rotational field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskRecord) GetRotationalOk() (*bool, bool) {
	if o == nil || IsNil(o.Rotational) {
		return nil, false
	}
	return o.Rotational, true
}

// HasRotational returns a boolean if a field has been set.
func (o *DiskRecord) HasRotational() bool {
	if o != nil && !IsNil(o.Rotational) {
		return true
	}

	return false
}

// SetRotational gets a reference to the given bool and assigns it to the Rotational field.
func (o *DiskRecord) SetRotational(v bool) {
	o.Rotational = &v
}

// GetSerial returns the Serial field value if set, zero value otherwise.
func (o *DiskRecord) GetSerial() string {
	if o == nil || IsNil(o.Serial) {
		var ret string
		return ret
	}
	return *o.Serial
}

// GetSerialOk returns a tuple with the Serial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskRecord) GetSerialOk() (*string, bool) {
	if o == nil || IsNil(o.Serial) {
		return nil, false
	}
	return o.Serial, true
}

// HasSerial returns a boolean if a field has been set.
func (o *DiskRecord) HasSerial() bool {
	if o != nil && !IsNil(o.Serial) {
		return true
	}

	return false
}

// SetSerial gets a reference to the given string and assigns it to the Serial field.
func (o *DiskRecord) SetSerial(v string) {
	o.Serial = &v
}

// GetSlotId returns the SlotId field value if set, zero value otherwise.
func (o *DiskRecord) GetSlotId() string {
	if o == nil || IsNil(o.SlotId) {
		var ret string
		return ret
	}
	return *o.SlotId
}

// GetSlotIdOk returns a tuple with the SlotId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskRecord) GetSlotIdOk() (*string, bool) {
	if o == nil || IsNil(o.SlotId) {
		return nil, false
	}
	return o.SlotId, true
}

// HasSlotId returns a boolean if a field has been set.
func (o *DiskRecord) HasSlotId() bool {
	if o != nil && !IsNil(o.SlotId) {
		return true
	}

	return false
}

// SetSlotId gets a reference to the given string and assigns it to the SlotId field.
func (o *DiskRecord) SetSlotId(v string) {
	o.SlotId = &v
}

// GetSmartAttrs returns the SmartAttrs field value if set, zero value otherwise.
func (o *DiskRecord) GetSmartAttrs() []SmartAttr {
	if o == nil || IsNil(o.SmartAttrs) {
		var ret []SmartAttr
		return ret
	}
	return o.SmartAttrs
}

// GetSmartAttrsOk returns a tuple with the SmartAttrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskRecord) GetSmartAttrsOk() ([]SmartAttr, bool) {
	if o == nil || IsNil(o.SmartAttrs) {
		return nil, false
	}
	return o.SmartAttrs, true
}

// HasSmartAttrs returns a boolean if a field has been set.
func (o *DiskRecord) HasSmartAttrs() bool {
	if o != nil && !IsNil(o.SmartAttrs) {
		return true
	}

	return false
}

// SetSmartAttrs gets a reference to the given []SmartAttr and assigns it to the SmartAttrs field.
func (o *DiskRecord) SetSmartAttrs(v []SmartAttr) {
	o.SmartAttrs = v
}

// GetSsdLifeLeft returns the SsdLifeLeft field value if set, zero value otherwise.
func (o *DiskRecord) GetSsdLifeLeft() int64 {
	if o == nil || IsNil(o.SsdLifeLeft) {
		var ret int64
		return ret
	}
	return *o.SsdLifeLeft
}

// GetSsdLifeLeftOk returns a tuple with the SsdLifeLeft field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskRecord) GetSsdLifeLeftOk() (*int64, bool) {
	if o == nil || IsNil(o.SsdLifeLeft) {
		return nil, false
	}
	return o.SsdLifeLeft, true
}

// HasSsdLifeLeft returns a boolean if a field has been set.
func (o *DiskRecord) HasSsdLifeLeft() bool {
	if o != nil && !IsNil(o.SsdLifeLeft) {
		return true
	}

	return false
}

// SetSsdLifeLeft gets a reference to the given int64 and assigns it to the SsdLifeLeft field.
func (o *DiskRecord) SetSsdLifeLeft(v int64) {
	o.SsdLifeLeft = &v
}

// GetSsdType returns the SsdType field value if set, zero value otherwise.
func (o *DiskRecord) GetSsdType() string {
	if o == nil || IsNil(o.SsdType) {
		var ret string
		return ret
	}
	return *o.SsdType
}

// GetSsdTypeOk returns a tuple with the SsdType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskRecord) GetSsdTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SsdType) {
		return nil, false
	}
	return o.SsdType, true
}

// HasSsdType returns a boolean if a field has been set.
func (o *DiskRecord) HasSsdType() bool {
	if o != nil && !IsNil(o.SsdType) {
		return true
	}

	return false
}

// SetSsdType gets a reference to the given string and assigns it to the SsdType field.
func (o *DiskRecord) SetSsdType(v string) {
	o.SsdType = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DiskRecord) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskRecord) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DiskRecord) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *DiskRecord) SetStatus(v string) {
	o.Status = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DiskRecord) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskRecord) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DiskRecord) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DiskRecord) SetType(v string) {
	o.Type = &v
}

// GetUpdate returns the Update field value if set, zero value otherwise.
func (o *DiskRecord) GetUpdate() time.Time {
	if o == nil || IsNil(o.Update) {
		var ret time.Time
		return ret
	}
	return *o.Update
}

// GetUpdateOk returns a tuple with the Update field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskRecord) GetUpdateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Update) {
		return nil, false
	}
	return o.Update, true
}

// HasUpdate returns a boolean if a field has been set.
func (o *DiskRecord) HasUpdate() bool {
	if o != nil && !IsNil(o.Update) {
		return true
	}

	return false
}

// SetUpdate gets a reference to the given time.Time and assigns it to the Update field.
func (o *DiskRecord) SetUpdate(v time.Time) {
	o.Update = &v
}

// GetUsage returns the Usage field value if set, zero value otherwise.
func (o *DiskRecord) GetUsage() string {
	if o == nil || IsNil(o.Usage) {
		var ret string
		return ret
	}
	return *o.Usage
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskRecord) GetUsageOk() (*string, bool) {
	if o == nil || IsNil(o.Usage) {
		return nil, false
	}
	return o.Usage, true
}

// HasUsage returns a boolean if a field has been set.
func (o *DiskRecord) HasUsage() bool {
	if o != nil && !IsNil(o.Usage) {
		return true
	}

	return false
}

// SetUsage gets a reference to the given string and assigns it to the Usage field.
func (o *DiskRecord) SetUsage(v string) {
	o.Usage = &v
}

// GetUsed returns the Used field value if set, zero value otherwise.
func (o *DiskRecord) GetUsed() bool {
	if o == nil || IsNil(o.Used) {
		var ret bool
		return ret
	}
	return *o.Used
}

// GetUsedOk returns a tuple with the Used field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskRecord) GetUsedOk() (*bool, bool) {
	if o == nil || IsNil(o.Used) {
		return nil, false
	}
	return o.Used, true
}

// HasUsed returns a boolean if a field has been set.
func (o *DiskRecord) HasUsed() bool {
	if o != nil && !IsNil(o.Used) {
		return true
	}

	return false
}

// SetUsed gets a reference to the given bool and assigns it to the Used field.
func (o *DiskRecord) SetUsed(v bool) {
	o.Used = &v
}

// GetWwid returns the Wwid field value if set, zero value otherwise.
func (o *DiskRecord) GetWwid() string {
	if o == nil || IsNil(o.Wwid) {
		var ret string
		return ret
	}
	return *o.Wwid
}

// GetWwidOk returns a tuple with the Wwid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskRecord) GetWwidOk() (*string, bool) {
	if o == nil || IsNil(o.Wwid) {
		return nil, false
	}
	return o.Wwid, true
}

// HasWwid returns a boolean if a field has been set.
func (o *DiskRecord) HasWwid() bool {
	if o != nil && !IsNil(o.Wwid) {
		return true
	}

	return false
}

// SetWwid gets a reference to the given string and assigns it to the Wwid field.
func (o *DiskRecord) SetWwid(v string) {
	o.Wwid = &v
}

// GetSamples returns the Samples field value if set, zero value otherwise.
func (o *DiskRecord) GetSamples() []DiskStat {
	if o == nil || IsNil(o.Samples) {
		var ret []DiskStat
		return ret
	}
	return o.Samples
}

// GetSamplesOk returns a tuple with the Samples field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskRecord) GetSamplesOk() ([]DiskStat, bool) {
	if o == nil || IsNil(o.Samples) {
		return nil, false
	}
	return o.Samples, true
}

// HasSamples returns a boolean if a field has been set.
func (o *DiskRecord) HasSamples() bool {
	if o != nil && !IsNil(o.Samples) {
		return true
	}

	return false
}

// SetSamples gets a reference to the given []DiskStat and assigns it to the Samples field.
func (o *DiskRecord) SetSamples(v []DiskStat) {
	o.Samples = v
}

func (o DiskRecord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DiskRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActionStatus) {
		toSerialize["action_status"] = o.ActionStatus
	}
	if !IsNil(o.Bytes) {
		toSerialize["bytes"] = o.Bytes
	}
	if !IsNil(o.CacheCreate) {
		toSerialize["cache_create"] = o.CacheCreate
	}
	if !IsNil(o.ChannelId) {
		toSerialize["channel_id"] = o.ChannelId
	}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !IsNil(o.ControllerId) {
		toSerialize["controller_id"] = o.ControllerId
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	if !IsNil(o.DiskType) {
		toSerialize["disk_type"] = o.DiskType
	}
	if !IsNil(o.DriverType) {
		toSerialize["driver_type"] = o.DriverType
	}
	if !IsNil(o.EnclosureId) {
		toSerialize["enclosure_id"] = o.EnclosureId
	}
	if !IsNil(o.Host) {
		toSerialize["host"] = o.Host
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IsCache) {
		toSerialize["is_cache"] = o.IsCache
	}
	if !IsNil(o.IsRoot) {
		toSerialize["is_root"] = o.IsRoot
	}
	if !IsNil(o.LightingStatus) {
		toSerialize["lighting_status"] = o.LightingStatus
	}
	if !IsNil(o.Model) {
		toSerialize["model"] = o.Model
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.PartitionNum) {
		toSerialize["partition_num"] = o.PartitionNum
	}
	if !IsNil(o.PartitionTypes) {
		toSerialize["partition_types"] = o.PartitionTypes
	}
	if !IsNil(o.Partitions) {
		toSerialize["partitions"] = o.Partitions
	}
	if !IsNil(o.PowerSafe) {
		toSerialize["power_safe"] = o.PowerSafe
	}
	if !IsNil(o.RaidStatus) {
		toSerialize["raid_status"] = o.RaidStatus
	}
	if !IsNil(o.RotationRate) {
		toSerialize["rotation_rate"] = o.RotationRate
	}
	if !IsNil(o.Rotational) {
		toSerialize["rotational"] = o.Rotational
	}
	if !IsNil(o.Serial) {
		toSerialize["serial"] = o.Serial
	}
	if !IsNil(o.SlotId) {
		toSerialize["slot_id"] = o.SlotId
	}
	if !IsNil(o.SmartAttrs) {
		toSerialize["smart_attrs"] = o.SmartAttrs
	}
	if !IsNil(o.SsdLifeLeft) {
		toSerialize["ssd_life_left"] = o.SsdLifeLeft
	}
	if !IsNil(o.SsdType) {
		toSerialize["ssd_type"] = o.SsdType
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Update) {
		toSerialize["update"] = o.Update
	}
	if !IsNil(o.Usage) {
		toSerialize["usage"] = o.Usage
	}
	if !IsNil(o.Used) {
		toSerialize["used"] = o.Used
	}
	if !IsNil(o.Wwid) {
		toSerialize["wwid"] = o.Wwid
	}
	if !IsNil(o.Samples) {
		toSerialize["samples"] = o.Samples
	}
	return toSerialize, nil
}

type NullableDiskRecord struct {
	value *DiskRecord
	isSet bool
}

func (v NullableDiskRecord) Get() *DiskRecord {
	return v.value
}

func (v *NullableDiskRecord) Set(val *DiskRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableDiskRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableDiskRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiskRecord(val *DiskRecord) *NullableDiskRecord {
	return &NullableDiskRecord{value: val, isSet: true}
}

func (v NullableDiskRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiskRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


