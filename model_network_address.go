/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the NetworkAddress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkAddress{}

// NetworkAddress NetworkAddress defines model of network address
type NetworkAddress struct {
	Available *bool `json:"available,omitempty"`
	Cluster *Cluster `json:"cluster,omitempty"`
	Create *time.Time `json:"create,omitempty"`
	Host *HostNestview `json:"host,omitempty"`
	Id *int64 `json:"id,omitempty"`
	Ip *string `json:"ip,omitempty"`
	Mask *int64 `json:"mask,omitempty"`
	NetworkInterface *NetworkInterfaceNestview `json:"network_interface,omitempty"`
	OspCluster *Cluster `json:"osp_cluster,omitempty"`
	Roles []string `json:"roles,omitempty"`
	SlaveSwitchTime *time.Time `json:"slave_switch_time,omitempty"`
	SlaveSwitched *bool `json:"slave_switched,omitempty"`
	Update *time.Time `json:"update,omitempty"`
}

// NewNetworkAddress instantiates a new NetworkAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkAddress() *NetworkAddress {
	this := NetworkAddress{}
	return &this
}

// NewNetworkAddressWithDefaults instantiates a new NetworkAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkAddressWithDefaults() *NetworkAddress {
	this := NetworkAddress{}
	return &this
}

// GetAvailable returns the Available field value if set, zero value otherwise.
func (o *NetworkAddress) GetAvailable() bool {
	if o == nil || IsNil(o.Available) {
		var ret bool
		return ret
	}
	return *o.Available
}

// GetAvailableOk returns a tuple with the Available field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkAddress) GetAvailableOk() (*bool, bool) {
	if o == nil || IsNil(o.Available) {
		return nil, false
	}
	return o.Available, true
}

// HasAvailable returns a boolean if a field has been set.
func (o *NetworkAddress) HasAvailable() bool {
	if o != nil && !IsNil(o.Available) {
		return true
	}

	return false
}

// SetAvailable gets a reference to the given bool and assigns it to the Available field.
func (o *NetworkAddress) SetAvailable(v bool) {
	o.Available = &v
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *NetworkAddress) GetCluster() Cluster {
	if o == nil || IsNil(o.Cluster) {
		var ret Cluster
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkAddress) GetClusterOk() (*Cluster, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *NetworkAddress) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given Cluster and assigns it to the Cluster field.
func (o *NetworkAddress) SetCluster(v Cluster) {
	o.Cluster = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *NetworkAddress) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkAddress) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *NetworkAddress) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *NetworkAddress) SetCreate(v time.Time) {
	o.Create = &v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *NetworkAddress) GetHost() HostNestview {
	if o == nil || IsNil(o.Host) {
		var ret HostNestview
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkAddress) GetHostOk() (*HostNestview, bool) {
	if o == nil || IsNil(o.Host) {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *NetworkAddress) HasHost() bool {
	if o != nil && !IsNil(o.Host) {
		return true
	}

	return false
}

// SetHost gets a reference to the given HostNestview and assigns it to the Host field.
func (o *NetworkAddress) SetHost(v HostNestview) {
	o.Host = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NetworkAddress) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkAddress) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *NetworkAddress) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *NetworkAddress) SetId(v int64) {
	o.Id = &v
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *NetworkAddress) GetIp() string {
	if o == nil || IsNil(o.Ip) {
		var ret string
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkAddress) GetIpOk() (*string, bool) {
	if o == nil || IsNil(o.Ip) {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *NetworkAddress) HasIp() bool {
	if o != nil && !IsNil(o.Ip) {
		return true
	}

	return false
}

// SetIp gets a reference to the given string and assigns it to the Ip field.
func (o *NetworkAddress) SetIp(v string) {
	o.Ip = &v
}

// GetMask returns the Mask field value if set, zero value otherwise.
func (o *NetworkAddress) GetMask() int64 {
	if o == nil || IsNil(o.Mask) {
		var ret int64
		return ret
	}
	return *o.Mask
}

// GetMaskOk returns a tuple with the Mask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkAddress) GetMaskOk() (*int64, bool) {
	if o == nil || IsNil(o.Mask) {
		return nil, false
	}
	return o.Mask, true
}

// HasMask returns a boolean if a field has been set.
func (o *NetworkAddress) HasMask() bool {
	if o != nil && !IsNil(o.Mask) {
		return true
	}

	return false
}

// SetMask gets a reference to the given int64 and assigns it to the Mask field.
func (o *NetworkAddress) SetMask(v int64) {
	o.Mask = &v
}

// GetNetworkInterface returns the NetworkInterface field value if set, zero value otherwise.
func (o *NetworkAddress) GetNetworkInterface() NetworkInterfaceNestview {
	if o == nil || IsNil(o.NetworkInterface) {
		var ret NetworkInterfaceNestview
		return ret
	}
	return *o.NetworkInterface
}

// GetNetworkInterfaceOk returns a tuple with the NetworkInterface field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkAddress) GetNetworkInterfaceOk() (*NetworkInterfaceNestview, bool) {
	if o == nil || IsNil(o.NetworkInterface) {
		return nil, false
	}
	return o.NetworkInterface, true
}

// HasNetworkInterface returns a boolean if a field has been set.
func (o *NetworkAddress) HasNetworkInterface() bool {
	if o != nil && !IsNil(o.NetworkInterface) {
		return true
	}

	return false
}

// SetNetworkInterface gets a reference to the given NetworkInterfaceNestview and assigns it to the NetworkInterface field.
func (o *NetworkAddress) SetNetworkInterface(v NetworkInterfaceNestview) {
	o.NetworkInterface = &v
}

// GetOspCluster returns the OspCluster field value if set, zero value otherwise.
func (o *NetworkAddress) GetOspCluster() Cluster {
	if o == nil || IsNil(o.OspCluster) {
		var ret Cluster
		return ret
	}
	return *o.OspCluster
}

// GetOspClusterOk returns a tuple with the OspCluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkAddress) GetOspClusterOk() (*Cluster, bool) {
	if o == nil || IsNil(o.OspCluster) {
		return nil, false
	}
	return o.OspCluster, true
}

// HasOspCluster returns a boolean if a field has been set.
func (o *NetworkAddress) HasOspCluster() bool {
	if o != nil && !IsNil(o.OspCluster) {
		return true
	}

	return false
}

// SetOspCluster gets a reference to the given Cluster and assigns it to the OspCluster field.
func (o *NetworkAddress) SetOspCluster(v Cluster) {
	o.OspCluster = &v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *NetworkAddress) GetRoles() []string {
	if o == nil || IsNil(o.Roles) {
		var ret []string
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkAddress) GetRolesOk() ([]string, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *NetworkAddress) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []string and assigns it to the Roles field.
func (o *NetworkAddress) SetRoles(v []string) {
	o.Roles = v
}

// GetSlaveSwitchTime returns the SlaveSwitchTime field value if set, zero value otherwise.
func (o *NetworkAddress) GetSlaveSwitchTime() time.Time {
	if o == nil || IsNil(o.SlaveSwitchTime) {
		var ret time.Time
		return ret
	}
	return *o.SlaveSwitchTime
}

// GetSlaveSwitchTimeOk returns a tuple with the SlaveSwitchTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkAddress) GetSlaveSwitchTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.SlaveSwitchTime) {
		return nil, false
	}
	return o.SlaveSwitchTime, true
}

// HasSlaveSwitchTime returns a boolean if a field has been set.
func (o *NetworkAddress) HasSlaveSwitchTime() bool {
	if o != nil && !IsNil(o.SlaveSwitchTime) {
		return true
	}

	return false
}

// SetSlaveSwitchTime gets a reference to the given time.Time and assigns it to the SlaveSwitchTime field.
func (o *NetworkAddress) SetSlaveSwitchTime(v time.Time) {
	o.SlaveSwitchTime = &v
}

// GetSlaveSwitched returns the SlaveSwitched field value if set, zero value otherwise.
func (o *NetworkAddress) GetSlaveSwitched() bool {
	if o == nil || IsNil(o.SlaveSwitched) {
		var ret bool
		return ret
	}
	return *o.SlaveSwitched
}

// GetSlaveSwitchedOk returns a tuple with the SlaveSwitched field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkAddress) GetSlaveSwitchedOk() (*bool, bool) {
	if o == nil || IsNil(o.SlaveSwitched) {
		return nil, false
	}
	return o.SlaveSwitched, true
}

// HasSlaveSwitched returns a boolean if a field has been set.
func (o *NetworkAddress) HasSlaveSwitched() bool {
	if o != nil && !IsNil(o.SlaveSwitched) {
		return true
	}

	return false
}

// SetSlaveSwitched gets a reference to the given bool and assigns it to the SlaveSwitched field.
func (o *NetworkAddress) SetSlaveSwitched(v bool) {
	o.SlaveSwitched = &v
}

// GetUpdate returns the Update field value if set, zero value otherwise.
func (o *NetworkAddress) GetUpdate() time.Time {
	if o == nil || IsNil(o.Update) {
		var ret time.Time
		return ret
	}
	return *o.Update
}

// GetUpdateOk returns a tuple with the Update field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkAddress) GetUpdateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Update) {
		return nil, false
	}
	return o.Update, true
}

// HasUpdate returns a boolean if a field has been set.
func (o *NetworkAddress) HasUpdate() bool {
	if o != nil && !IsNil(o.Update) {
		return true
	}

	return false
}

// SetUpdate gets a reference to the given time.Time and assigns it to the Update field.
func (o *NetworkAddress) SetUpdate(v time.Time) {
	o.Update = &v
}

func (o NetworkAddress) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkAddress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Available) {
		toSerialize["available"] = o.Available
	}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.Host) {
		toSerialize["host"] = o.Host
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Ip) {
		toSerialize["ip"] = o.Ip
	}
	if !IsNil(o.Mask) {
		toSerialize["mask"] = o.Mask
	}
	if !IsNil(o.NetworkInterface) {
		toSerialize["network_interface"] = o.NetworkInterface
	}
	if !IsNil(o.OspCluster) {
		toSerialize["osp_cluster"] = o.OspCluster
	}
	if !IsNil(o.Roles) {
		toSerialize["roles"] = o.Roles
	}
	if !IsNil(o.SlaveSwitchTime) {
		toSerialize["slave_switch_time"] = o.SlaveSwitchTime
	}
	if !IsNil(o.SlaveSwitched) {
		toSerialize["slave_switched"] = o.SlaveSwitched
	}
	if !IsNil(o.Update) {
		toSerialize["update"] = o.Update
	}
	return toSerialize, nil
}

type NullableNetworkAddress struct {
	value *NetworkAddress
	isSet bool
}

func (v NullableNetworkAddress) Get() *NetworkAddress {
	return v.value
}

func (v *NullableNetworkAddress) Set(val *NetworkAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkAddress(val *NetworkAddress) *NullableNetworkAddress {
	return &NullableNetworkAddress{value: val, isSet: true}
}

func (v NullableNetworkAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


