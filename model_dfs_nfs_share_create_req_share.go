/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DfsNFSShareCreateReqShare type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsNFSShareCreateReqShare{}

// DfsNFSShareCreateReqShare struct for DfsNFSShareCreateReqShare
type DfsNFSShareCreateReqShare struct {
	// description of share
	Description *string `json:"description,omitempty"`
	// gateway group id
	DfsGatewayGroupId *int64 `json:"dfs_gateway_group_id,omitempty"`
	// access control array
	DfsNfsShareAcls []DfsNFSShareACLReq `json:"dfs_nfs_share_acls,omitempty"`
	// rootfs id
	DfsRootfsId int64 `json:"dfs_rootfs_id"`
	// name of share
	Name string `json:"name"`
	// nfs versions of nfs supported
	NfsVersions []string `json:"nfs_versions,omitempty"`
	// directory path
	Path string `json:"path"`
}

type _DfsNFSShareCreateReqShare DfsNFSShareCreateReqShare

// NewDfsNFSShareCreateReqShare instantiates a new DfsNFSShareCreateReqShare object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsNFSShareCreateReqShare(dfsRootfsId int64, name string, path string) *DfsNFSShareCreateReqShare {
	this := DfsNFSShareCreateReqShare{}
	this.DfsRootfsId = dfsRootfsId
	this.Name = name
	this.Path = path
	return &this
}

// NewDfsNFSShareCreateReqShareWithDefaults instantiates a new DfsNFSShareCreateReqShare object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsNFSShareCreateReqShareWithDefaults() *DfsNFSShareCreateReqShare {
	this := DfsNFSShareCreateReqShare{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DfsNFSShareCreateReqShare) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsNFSShareCreateReqShare) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DfsNFSShareCreateReqShare) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DfsNFSShareCreateReqShare) SetDescription(v string) {
	o.Description = &v
}

// GetDfsGatewayGroupId returns the DfsGatewayGroupId field value if set, zero value otherwise.
func (o *DfsNFSShareCreateReqShare) GetDfsGatewayGroupId() int64 {
	if o == nil || IsNil(o.DfsGatewayGroupId) {
		var ret int64
		return ret
	}
	return *o.DfsGatewayGroupId
}

// GetDfsGatewayGroupIdOk returns a tuple with the DfsGatewayGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsNFSShareCreateReqShare) GetDfsGatewayGroupIdOk() (*int64, bool) {
	if o == nil || IsNil(o.DfsGatewayGroupId) {
		return nil, false
	}
	return o.DfsGatewayGroupId, true
}

// HasDfsGatewayGroupId returns a boolean if a field has been set.
func (o *DfsNFSShareCreateReqShare) HasDfsGatewayGroupId() bool {
	if o != nil && !IsNil(o.DfsGatewayGroupId) {
		return true
	}

	return false
}

// SetDfsGatewayGroupId gets a reference to the given int64 and assigns it to the DfsGatewayGroupId field.
func (o *DfsNFSShareCreateReqShare) SetDfsGatewayGroupId(v int64) {
	o.DfsGatewayGroupId = &v
}

// GetDfsNfsShareAcls returns the DfsNfsShareAcls field value if set, zero value otherwise.
func (o *DfsNFSShareCreateReqShare) GetDfsNfsShareAcls() []DfsNFSShareACLReq {
	if o == nil || IsNil(o.DfsNfsShareAcls) {
		var ret []DfsNFSShareACLReq
		return ret
	}
	return o.DfsNfsShareAcls
}

// GetDfsNfsShareAclsOk returns a tuple with the DfsNfsShareAcls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsNFSShareCreateReqShare) GetDfsNfsShareAclsOk() ([]DfsNFSShareACLReq, bool) {
	if o == nil || IsNil(o.DfsNfsShareAcls) {
		return nil, false
	}
	return o.DfsNfsShareAcls, true
}

// HasDfsNfsShareAcls returns a boolean if a field has been set.
func (o *DfsNFSShareCreateReqShare) HasDfsNfsShareAcls() bool {
	if o != nil && !IsNil(o.DfsNfsShareAcls) {
		return true
	}

	return false
}

// SetDfsNfsShareAcls gets a reference to the given []DfsNFSShareACLReq and assigns it to the DfsNfsShareAcls field.
func (o *DfsNFSShareCreateReqShare) SetDfsNfsShareAcls(v []DfsNFSShareACLReq) {
	o.DfsNfsShareAcls = v
}

// GetDfsRootfsId returns the DfsRootfsId field value
func (o *DfsNFSShareCreateReqShare) GetDfsRootfsId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DfsRootfsId
}

// GetDfsRootfsIdOk returns a tuple with the DfsRootfsId field value
// and a boolean to check if the value has been set.
func (o *DfsNFSShareCreateReqShare) GetDfsRootfsIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DfsRootfsId, true
}

// SetDfsRootfsId sets field value
func (o *DfsNFSShareCreateReqShare) SetDfsRootfsId(v int64) {
	o.DfsRootfsId = v
}

// GetName returns the Name field value
func (o *DfsNFSShareCreateReqShare) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DfsNFSShareCreateReqShare) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DfsNFSShareCreateReqShare) SetName(v string) {
	o.Name = v
}

// GetNfsVersions returns the NfsVersions field value if set, zero value otherwise.
func (o *DfsNFSShareCreateReqShare) GetNfsVersions() []string {
	if o == nil || IsNil(o.NfsVersions) {
		var ret []string
		return ret
	}
	return o.NfsVersions
}

// GetNfsVersionsOk returns a tuple with the NfsVersions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsNFSShareCreateReqShare) GetNfsVersionsOk() ([]string, bool) {
	if o == nil || IsNil(o.NfsVersions) {
		return nil, false
	}
	return o.NfsVersions, true
}

// HasNfsVersions returns a boolean if a field has been set.
func (o *DfsNFSShareCreateReqShare) HasNfsVersions() bool {
	if o != nil && !IsNil(o.NfsVersions) {
		return true
	}

	return false
}

// SetNfsVersions gets a reference to the given []string and assigns it to the NfsVersions field.
func (o *DfsNFSShareCreateReqShare) SetNfsVersions(v []string) {
	o.NfsVersions = v
}

// GetPath returns the Path field value
func (o *DfsNFSShareCreateReqShare) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *DfsNFSShareCreateReqShare) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *DfsNFSShareCreateReqShare) SetPath(v string) {
	o.Path = v
}

func (o DfsNFSShareCreateReqShare) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsNFSShareCreateReqShare) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DfsGatewayGroupId) {
		toSerialize["dfs_gateway_group_id"] = o.DfsGatewayGroupId
	}
	if !IsNil(o.DfsNfsShareAcls) {
		toSerialize["dfs_nfs_share_acls"] = o.DfsNfsShareAcls
	}
	toSerialize["dfs_rootfs_id"] = o.DfsRootfsId
	toSerialize["name"] = o.Name
	if !IsNil(o.NfsVersions) {
		toSerialize["nfs_versions"] = o.NfsVersions
	}
	toSerialize["path"] = o.Path
	return toSerialize, nil
}

func (o *DfsNFSShareCreateReqShare) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dfs_rootfs_id",
		"name",
		"path",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDfsNFSShareCreateReqShare := _DfsNFSShareCreateReqShare{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDfsNFSShareCreateReqShare)

	if err != nil {
		return err
	}

	*o = DfsNFSShareCreateReqShare(varDfsNFSShareCreateReqShare)

	return err
}

type NullableDfsNFSShareCreateReqShare struct {
	value *DfsNFSShareCreateReqShare
	isSet bool
}

func (v NullableDfsNFSShareCreateReqShare) Get() *DfsNFSShareCreateReqShare {
	return v.value
}

func (v *NullableDfsNFSShareCreateReqShare) Set(val *DfsNFSShareCreateReqShare) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsNFSShareCreateReqShare) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsNFSShareCreateReqShare) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsNFSShareCreateReqShare(val *DfsNFSShareCreateReqShare) *NullableDfsNFSShareCreateReqShare {
	return &NullableDfsNFSShareCreateReqShare{value: val, isSet: true}
}

func (v NullableDfsNFSShareCreateReqShare) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsNFSShareCreateReqShare) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


