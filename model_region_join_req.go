/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RegionJoinReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegionJoinReq{}

// RegionJoinReq struct for RegionJoinReq
type RegionJoinReq struct {
	Region *RegionJoinReqRegion `json:"region,omitempty"`
}

// NewRegionJoinReq instantiates a new RegionJoinReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegionJoinReq() *RegionJoinReq {
	this := RegionJoinReq{}
	return &this
}

// NewRegionJoinReqWithDefaults instantiates a new RegionJoinReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegionJoinReqWithDefaults() *RegionJoinReq {
	this := RegionJoinReq{}
	return &this
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *RegionJoinReq) GetRegion() RegionJoinReqRegion {
	if o == nil || IsNil(o.Region) {
		var ret RegionJoinReqRegion
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionJoinReq) GetRegionOk() (*RegionJoinReqRegion, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *RegionJoinReq) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given RegionJoinReqRegion and assigns it to the Region field.
func (o *RegionJoinReq) SetRegion(v RegionJoinReqRegion) {
	o.Region = &v
}

func (o RegionJoinReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegionJoinReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	return toSerialize, nil
}

type NullableRegionJoinReq struct {
	value *RegionJoinReq
	isSet bool
}

func (v NullableRegionJoinReq) Get() *RegionJoinReq {
	return v.value
}

func (v *NullableRegionJoinReq) Set(val *RegionJoinReq) {
	v.value = val
	v.isSet = true
}

func (v NullableRegionJoinReq) IsSet() bool {
	return v.isSet
}

func (v *NullableRegionJoinReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegionJoinReq(val *RegionJoinReq) *NullableRegionJoinReq {
	return &NullableRegionJoinReq{value: val, isSet: true}
}

func (v NullableRegionJoinReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegionJoinReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


