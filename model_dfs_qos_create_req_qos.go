/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DfsQosCreateReqQos type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsQosCreateReqQos{}

// DfsQosCreateReqQos struct for DfsQosCreateReqQos
type DfsQosCreateReqQos struct {
	// path of qos
	DfsPath string `json:"dfs_path"`
	// qos policy id of qos
	DfsQosPolicyId int64 `json:"dfs_qos_policy_id"`
	// id of dfs rootfs
	DfsRootfsId int64 `json:"dfs_rootfs_id"`
}

type _DfsQosCreateReqQos DfsQosCreateReqQos

// NewDfsQosCreateReqQos instantiates a new DfsQosCreateReqQos object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsQosCreateReqQos(dfsPath string, dfsQosPolicyId int64, dfsRootfsId int64) *DfsQosCreateReqQos {
	this := DfsQosCreateReqQos{}
	this.DfsPath = dfsPath
	this.DfsQosPolicyId = dfsQosPolicyId
	this.DfsRootfsId = dfsRootfsId
	return &this
}

// NewDfsQosCreateReqQosWithDefaults instantiates a new DfsQosCreateReqQos object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsQosCreateReqQosWithDefaults() *DfsQosCreateReqQos {
	this := DfsQosCreateReqQos{}
	return &this
}

// GetDfsPath returns the DfsPath field value
func (o *DfsQosCreateReqQos) GetDfsPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DfsPath
}

// GetDfsPathOk returns a tuple with the DfsPath field value
// and a boolean to check if the value has been set.
func (o *DfsQosCreateReqQos) GetDfsPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DfsPath, true
}

// SetDfsPath sets field value
func (o *DfsQosCreateReqQos) SetDfsPath(v string) {
	o.DfsPath = v
}

// GetDfsQosPolicyId returns the DfsQosPolicyId field value
func (o *DfsQosCreateReqQos) GetDfsQosPolicyId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DfsQosPolicyId
}

// GetDfsQosPolicyIdOk returns a tuple with the DfsQosPolicyId field value
// and a boolean to check if the value has been set.
func (o *DfsQosCreateReqQos) GetDfsQosPolicyIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DfsQosPolicyId, true
}

// SetDfsQosPolicyId sets field value
func (o *DfsQosCreateReqQos) SetDfsQosPolicyId(v int64) {
	o.DfsQosPolicyId = v
}

// GetDfsRootfsId returns the DfsRootfsId field value
func (o *DfsQosCreateReqQos) GetDfsRootfsId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DfsRootfsId
}

// GetDfsRootfsIdOk returns a tuple with the DfsRootfsId field value
// and a boolean to check if the value has been set.
func (o *DfsQosCreateReqQos) GetDfsRootfsIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DfsRootfsId, true
}

// SetDfsRootfsId sets field value
func (o *DfsQosCreateReqQos) SetDfsRootfsId(v int64) {
	o.DfsRootfsId = v
}

func (o DfsQosCreateReqQos) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsQosCreateReqQos) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dfs_path"] = o.DfsPath
	toSerialize["dfs_qos_policy_id"] = o.DfsQosPolicyId
	toSerialize["dfs_rootfs_id"] = o.DfsRootfsId
	return toSerialize, nil
}

func (o *DfsQosCreateReqQos) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dfs_path",
		"dfs_qos_policy_id",
		"dfs_rootfs_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDfsQosCreateReqQos := _DfsQosCreateReqQos{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDfsQosCreateReqQos)

	if err != nil {
		return err
	}

	*o = DfsQosCreateReqQos(varDfsQosCreateReqQos)

	return err
}

type NullableDfsQosCreateReqQos struct {
	value *DfsQosCreateReqQos
	isSet bool
}

func (v NullableDfsQosCreateReqQos) Get() *DfsQosCreateReqQos {
	return v.value
}

func (v *NullableDfsQosCreateReqQos) Set(val *DfsQosCreateReqQos) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsQosCreateReqQos) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsQosCreateReqQos) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsQosCreateReqQos(val *DfsQosCreateReqQos) *NullableDfsQosCreateReqQos {
	return &NullableDfsQosCreateReqQos{value: val, isSet: true}
}

func (v NullableDfsQosCreateReqQos) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsQosCreateReqQos) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


