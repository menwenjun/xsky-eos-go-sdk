/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// CloudInstancesAPIService CloudInstancesAPI service
type CloudInstancesAPIService service

type ApiGetCloudInstanceRequest struct {
	ctx context.Context
	ApiService *CloudInstancesAPIService
	cloudInstanceId int64
}

func (r ApiGetCloudInstanceRequest) Execute() (*CloudInstanceResp, *http.Response, error) {
	return r.ApiService.GetCloudInstanceExecute(r)
}

/*
GetCloudInstance Method for GetCloudInstance

Get a cloud instance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param cloudInstanceId cloud instance id
 @return ApiGetCloudInstanceRequest
*/
func (a *CloudInstancesAPIService) GetCloudInstance(ctx context.Context, cloudInstanceId int64) ApiGetCloudInstanceRequest {
	return ApiGetCloudInstanceRequest{
		ApiService: a,
		ctx: ctx,
		cloudInstanceId: cloudInstanceId,
	}
}

// Execute executes the request
//  @return CloudInstanceResp
func (a *CloudInstancesAPIService) GetCloudInstanceExecute(r ApiGetCloudInstanceRequest) (*CloudInstanceResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CloudInstanceResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudInstancesAPIService.GetCloudInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud-instances/{cloud_instance_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"cloud_instance_id"+"}", url.PathEscape(parameterValueToString(r.cloudInstanceId, "cloudInstanceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCloudInstanceSamplesRequest struct {
	ctx context.Context
	ApiService *CloudInstancesAPIService
	cloudInstanceId int64
	durationBegin *string
	durationEnd *string
	period *string
}

// duration begin timestamp
func (r ApiGetCloudInstanceSamplesRequest) DurationBegin(durationBegin string) ApiGetCloudInstanceSamplesRequest {
	r.durationBegin = &durationBegin
	return r
}

// duration end timestamp
func (r ApiGetCloudInstanceSamplesRequest) DurationEnd(durationEnd string) ApiGetCloudInstanceSamplesRequest {
	r.durationEnd = &durationEnd
	return r
}

// samples period
func (r ApiGetCloudInstanceSamplesRequest) Period(period string) ApiGetCloudInstanceSamplesRequest {
	r.period = &period
	return r
}

func (r ApiGetCloudInstanceSamplesRequest) Execute() (*CloudInstanceSamplesResp, *http.Response, error) {
	return r.ApiService.GetCloudInstanceSamplesExecute(r)
}

/*
GetCloudInstanceSamples Method for GetCloudInstanceSamples

get a cloud instance's Samples

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param cloudInstanceId cloud instance id
 @return ApiGetCloudInstanceSamplesRequest
*/
func (a *CloudInstancesAPIService) GetCloudInstanceSamples(ctx context.Context, cloudInstanceId int64) ApiGetCloudInstanceSamplesRequest {
	return ApiGetCloudInstanceSamplesRequest{
		ApiService: a,
		ctx: ctx,
		cloudInstanceId: cloudInstanceId,
	}
}

// Execute executes the request
//  @return CloudInstanceSamplesResp
func (a *CloudInstancesAPIService) GetCloudInstanceSamplesExecute(r ApiGetCloudInstanceSamplesRequest) (*CloudInstanceSamplesResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CloudInstanceSamplesResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudInstancesAPIService.GetCloudInstanceSamples")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud-instances/{cloud_instance_id}/samples"
	localVarPath = strings.Replace(localVarPath, "{"+"cloud_instance_id"+"}", url.PathEscape(parameterValueToString(r.cloudInstanceId, "cloudInstanceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.durationBegin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration_begin", r.durationBegin, "form", "")
	}
	if r.durationEnd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration_end", r.durationEnd, "form", "")
	}
	if r.period != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "period", r.period, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListCloudInstancesRequest struct {
	ctx context.Context
	ApiService *CloudInstancesAPIService
	limit *int64
	offset *int64
	cloudPlatformId *int64
	cloudPlatformType *string
	cloudPlatformName *string
	clusterId *string
}

// paging param
func (r ApiListCloudInstancesRequest) Limit(limit int64) ApiListCloudInstancesRequest {
	r.limit = &limit
	return r
}

// paging param
func (r ApiListCloudInstancesRequest) Offset(offset int64) ApiListCloudInstancesRequest {
	r.offset = &offset
	return r
}

// cloud platform id
func (r ApiListCloudInstancesRequest) CloudPlatformId(cloudPlatformId int64) ApiListCloudInstancesRequest {
	r.cloudPlatformId = &cloudPlatformId
	return r
}

// cloud platform type
func (r ApiListCloudInstancesRequest) CloudPlatformType(cloudPlatformType string) ApiListCloudInstancesRequest {
	r.cloudPlatformType = &cloudPlatformType
	return r
}

// cloud platform name
func (r ApiListCloudInstancesRequest) CloudPlatformName(cloudPlatformName string) ApiListCloudInstancesRequest {
	r.cloudPlatformName = &cloudPlatformName
	return r
}

// cluster id
func (r ApiListCloudInstancesRequest) ClusterId(clusterId string) ApiListCloudInstancesRequest {
	r.clusterId = &clusterId
	return r
}

func (r ApiListCloudInstancesRequest) Execute() (*CloudInstancesResp, *http.Response, error) {
	return r.ApiService.ListCloudInstancesExecute(r)
}

/*
ListCloudInstances Method for ListCloudInstances

List cloud instances

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListCloudInstancesRequest
*/
func (a *CloudInstancesAPIService) ListCloudInstances(ctx context.Context) ApiListCloudInstancesRequest {
	return ApiListCloudInstancesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CloudInstancesResp
func (a *CloudInstancesAPIService) ListCloudInstancesExecute(r ApiListCloudInstancesRequest) (*CloudInstancesResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CloudInstancesResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudInstancesAPIService.ListCloudInstances")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud-instances/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.cloudPlatformId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cloud_platform_id", r.cloudPlatformId, "form", "")
	}
	if r.cloudPlatformType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cloud_platform_type", r.cloudPlatformType, "form", "")
	}
	if r.cloudPlatformName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cloud_platform_name", r.cloudPlatformName, "form", "")
	}
	if r.clusterId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_id", r.clusterId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
