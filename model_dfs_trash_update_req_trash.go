/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DfsTrashUpdateReqTrash type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsTrashUpdateReqTrash{}

// DfsTrashUpdateReqTrash struct for DfsTrashUpdateReqTrash
type DfsTrashUpdateReqTrash struct {
	// file expired time
	ExpiredTime int64 `json:"expired_time"`
}

type _DfsTrashUpdateReqTrash DfsTrashUpdateReqTrash

// NewDfsTrashUpdateReqTrash instantiates a new DfsTrashUpdateReqTrash object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsTrashUpdateReqTrash(expiredTime int64) *DfsTrashUpdateReqTrash {
	this := DfsTrashUpdateReqTrash{}
	this.ExpiredTime = expiredTime
	return &this
}

// NewDfsTrashUpdateReqTrashWithDefaults instantiates a new DfsTrashUpdateReqTrash object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsTrashUpdateReqTrashWithDefaults() *DfsTrashUpdateReqTrash {
	this := DfsTrashUpdateReqTrash{}
	return &this
}

// GetExpiredTime returns the ExpiredTime field value
func (o *DfsTrashUpdateReqTrash) GetExpiredTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ExpiredTime
}

// GetExpiredTimeOk returns a tuple with the ExpiredTime field value
// and a boolean to check if the value has been set.
func (o *DfsTrashUpdateReqTrash) GetExpiredTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpiredTime, true
}

// SetExpiredTime sets field value
func (o *DfsTrashUpdateReqTrash) SetExpiredTime(v int64) {
	o.ExpiredTime = v
}

func (o DfsTrashUpdateReqTrash) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsTrashUpdateReqTrash) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["expired_time"] = o.ExpiredTime
	return toSerialize, nil
}

func (o *DfsTrashUpdateReqTrash) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"expired_time",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDfsTrashUpdateReqTrash := _DfsTrashUpdateReqTrash{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDfsTrashUpdateReqTrash)

	if err != nil {
		return err
	}

	*o = DfsTrashUpdateReqTrash(varDfsTrashUpdateReqTrash)

	return err
}

type NullableDfsTrashUpdateReqTrash struct {
	value *DfsTrashUpdateReqTrash
	isSet bool
}

func (v NullableDfsTrashUpdateReqTrash) Get() *DfsTrashUpdateReqTrash {
	return v.value
}

func (v *NullableDfsTrashUpdateReqTrash) Set(val *DfsTrashUpdateReqTrash) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsTrashUpdateReqTrash) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsTrashUpdateReqTrash) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsTrashUpdateReqTrash(val *DfsTrashUpdateReqTrash) *NullableDfsTrashUpdateReqTrash {
	return &NullableDfsTrashUpdateReqTrash{value: val, isSet: true}
}

func (v NullableDfsTrashUpdateReqTrash) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsTrashUpdateReqTrash) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


