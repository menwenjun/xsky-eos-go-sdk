/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DNSZonesResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DNSZonesResp{}

// DNSZonesResp struct for DNSZonesResp
type DNSZonesResp struct {
	// dns zone list
	DnsZones []DNSZone `json:"dns_zones,omitempty"`
}

// NewDNSZonesResp instantiates a new DNSZonesResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDNSZonesResp() *DNSZonesResp {
	this := DNSZonesResp{}
	return &this
}

// NewDNSZonesRespWithDefaults instantiates a new DNSZonesResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDNSZonesRespWithDefaults() *DNSZonesResp {
	this := DNSZonesResp{}
	return &this
}

// GetDnsZones returns the DnsZones field value if set, zero value otherwise.
func (o *DNSZonesResp) GetDnsZones() []DNSZone {
	if o == nil || IsNil(o.DnsZones) {
		var ret []DNSZone
		return ret
	}
	return o.DnsZones
}

// GetDnsZonesOk returns a tuple with the DnsZones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSZonesResp) GetDnsZonesOk() ([]DNSZone, bool) {
	if o == nil || IsNil(o.DnsZones) {
		return nil, false
	}
	return o.DnsZones, true
}

// HasDnsZones returns a boolean if a field has been set.
func (o *DNSZonesResp) HasDnsZones() bool {
	if o != nil && !IsNil(o.DnsZones) {
		return true
	}

	return false
}

// SetDnsZones gets a reference to the given []DNSZone and assigns it to the DnsZones field.
func (o *DNSZonesResp) SetDnsZones(v []DNSZone) {
	o.DnsZones = v
}

func (o DNSZonesResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DNSZonesResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DnsZones) {
		toSerialize["dns_zones"] = o.DnsZones
	}
	return toSerialize, nil
}

type NullableDNSZonesResp struct {
	value *DNSZonesResp
	isSet bool
}

func (v NullableDNSZonesResp) Get() *DNSZonesResp {
	return v.value
}

func (v *NullableDNSZonesResp) Set(val *DNSZonesResp) {
	v.value = val
	v.isSet = true
}

func (v NullableDNSZonesResp) IsSet() bool {
	return v.isSet
}

func (v *NullableDNSZonesResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDNSZonesResp(val *DNSZonesResp) *NullableDNSZonesResp {
	return &NullableDNSZonesResp{value: val, isSet: true}
}

func (v NullableDNSZonesResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDNSZonesResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


