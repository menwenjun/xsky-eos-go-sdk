/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AdminVIPCreateReqAdminVip type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdminVIPCreateReqAdminVip{}

// AdminVIPCreateReqAdminVip struct for AdminVIPCreateReqAdminVip
type AdminVIPCreateReqAdminVip struct {
	Enable bool `json:"enable"`
	Ip *string `json:"ip,omitempty"`
	Mask *int64 `json:"mask,omitempty"`
}

type _AdminVIPCreateReqAdminVip AdminVIPCreateReqAdminVip

// NewAdminVIPCreateReqAdminVip instantiates a new AdminVIPCreateReqAdminVip object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdminVIPCreateReqAdminVip(enable bool) *AdminVIPCreateReqAdminVip {
	this := AdminVIPCreateReqAdminVip{}
	this.Enable = enable
	return &this
}

// NewAdminVIPCreateReqAdminVipWithDefaults instantiates a new AdminVIPCreateReqAdminVip object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdminVIPCreateReqAdminVipWithDefaults() *AdminVIPCreateReqAdminVip {
	this := AdminVIPCreateReqAdminVip{}
	return &this
}

// GetEnable returns the Enable field value
func (o *AdminVIPCreateReqAdminVip) GetEnable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enable
}

// GetEnableOk returns a tuple with the Enable field value
// and a boolean to check if the value has been set.
func (o *AdminVIPCreateReqAdminVip) GetEnableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enable, true
}

// SetEnable sets field value
func (o *AdminVIPCreateReqAdminVip) SetEnable(v bool) {
	o.Enable = v
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *AdminVIPCreateReqAdminVip) GetIp() string {
	if o == nil || IsNil(o.Ip) {
		var ret string
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminVIPCreateReqAdminVip) GetIpOk() (*string, bool) {
	if o == nil || IsNil(o.Ip) {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *AdminVIPCreateReqAdminVip) HasIp() bool {
	if o != nil && !IsNil(o.Ip) {
		return true
	}

	return false
}

// SetIp gets a reference to the given string and assigns it to the Ip field.
func (o *AdminVIPCreateReqAdminVip) SetIp(v string) {
	o.Ip = &v
}

// GetMask returns the Mask field value if set, zero value otherwise.
func (o *AdminVIPCreateReqAdminVip) GetMask() int64 {
	if o == nil || IsNil(o.Mask) {
		var ret int64
		return ret
	}
	return *o.Mask
}

// GetMaskOk returns a tuple with the Mask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminVIPCreateReqAdminVip) GetMaskOk() (*int64, bool) {
	if o == nil || IsNil(o.Mask) {
		return nil, false
	}
	return o.Mask, true
}

// HasMask returns a boolean if a field has been set.
func (o *AdminVIPCreateReqAdminVip) HasMask() bool {
	if o != nil && !IsNil(o.Mask) {
		return true
	}

	return false
}

// SetMask gets a reference to the given int64 and assigns it to the Mask field.
func (o *AdminVIPCreateReqAdminVip) SetMask(v int64) {
	o.Mask = &v
}

func (o AdminVIPCreateReqAdminVip) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdminVIPCreateReqAdminVip) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enable"] = o.Enable
	if !IsNil(o.Ip) {
		toSerialize["ip"] = o.Ip
	}
	if !IsNil(o.Mask) {
		toSerialize["mask"] = o.Mask
	}
	return toSerialize, nil
}

func (o *AdminVIPCreateReqAdminVip) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enable",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAdminVIPCreateReqAdminVip := _AdminVIPCreateReqAdminVip{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAdminVIPCreateReqAdminVip)

	if err != nil {
		return err
	}

	*o = AdminVIPCreateReqAdminVip(varAdminVIPCreateReqAdminVip)

	return err
}

type NullableAdminVIPCreateReqAdminVip struct {
	value *AdminVIPCreateReqAdminVip
	isSet bool
}

func (v NullableAdminVIPCreateReqAdminVip) Get() *AdminVIPCreateReqAdminVip {
	return v.value
}

func (v *NullableAdminVIPCreateReqAdminVip) Set(val *AdminVIPCreateReqAdminVip) {
	v.value = val
	v.isSet = true
}

func (v NullableAdminVIPCreateReqAdminVip) IsSet() bool {
	return v.isSet
}

func (v *NullableAdminVIPCreateReqAdminVip) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdminVIPCreateReqAdminVip(val *AdminVIPCreateReqAdminVip) *NullableAdminVIPCreateReqAdminVip {
	return &NullableAdminVIPCreateReqAdminVip{value: val, isSet: true}
}

func (v NullableAdminVIPCreateReqAdminVip) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdminVIPCreateReqAdminVip) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


