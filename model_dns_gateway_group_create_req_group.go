/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DNSGatewayGroupCreateReqGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DNSGatewayGroupCreateReqGroup{}

// DNSGatewayGroupCreateReqGroup struct for DNSGatewayGroupCreateReqGroup
type DNSGatewayGroupCreateReqGroup struct {
	// dns gateway id list
	HostIds []int64 `json:"host_ids"`
	// dns gateway group name
	Name string `json:"name"`
	// dns origin
	Origin string `json:"origin"`
	// dns service port
	Port int64 `json:"port"`
	// dns ttl with zone
	Ttl *int64 `json:"ttl,omitempty"`
	// dns vip groups
	VipGroups []DNSGatewayGroupCreateReqGroupVIPGroupsElt `json:"vip_groups,omitempty"`
}

type _DNSGatewayGroupCreateReqGroup DNSGatewayGroupCreateReqGroup

// NewDNSGatewayGroupCreateReqGroup instantiates a new DNSGatewayGroupCreateReqGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDNSGatewayGroupCreateReqGroup(hostIds []int64, name string, origin string, port int64) *DNSGatewayGroupCreateReqGroup {
	this := DNSGatewayGroupCreateReqGroup{}
	this.HostIds = hostIds
	this.Name = name
	this.Origin = origin
	this.Port = port
	return &this
}

// NewDNSGatewayGroupCreateReqGroupWithDefaults instantiates a new DNSGatewayGroupCreateReqGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDNSGatewayGroupCreateReqGroupWithDefaults() *DNSGatewayGroupCreateReqGroup {
	this := DNSGatewayGroupCreateReqGroup{}
	return &this
}

// GetHostIds returns the HostIds field value
func (o *DNSGatewayGroupCreateReqGroup) GetHostIds() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}

	return o.HostIds
}

// GetHostIdsOk returns a tuple with the HostIds field value
// and a boolean to check if the value has been set.
func (o *DNSGatewayGroupCreateReqGroup) GetHostIdsOk() ([]int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.HostIds, true
}

// SetHostIds sets field value
func (o *DNSGatewayGroupCreateReqGroup) SetHostIds(v []int64) {
	o.HostIds = v
}

// GetName returns the Name field value
func (o *DNSGatewayGroupCreateReqGroup) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DNSGatewayGroupCreateReqGroup) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DNSGatewayGroupCreateReqGroup) SetName(v string) {
	o.Name = v
}

// GetOrigin returns the Origin field value
func (o *DNSGatewayGroupCreateReqGroup) GetOrigin() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Origin
}

// GetOriginOk returns a tuple with the Origin field value
// and a boolean to check if the value has been set.
func (o *DNSGatewayGroupCreateReqGroup) GetOriginOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Origin, true
}

// SetOrigin sets field value
func (o *DNSGatewayGroupCreateReqGroup) SetOrigin(v string) {
	o.Origin = v
}

// GetPort returns the Port field value
func (o *DNSGatewayGroupCreateReqGroup) GetPort() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *DNSGatewayGroupCreateReqGroup) GetPortOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *DNSGatewayGroupCreateReqGroup) SetPort(v int64) {
	o.Port = v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *DNSGatewayGroupCreateReqGroup) GetTtl() int64 {
	if o == nil || IsNil(o.Ttl) {
		var ret int64
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSGatewayGroupCreateReqGroup) GetTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.Ttl) {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *DNSGatewayGroupCreateReqGroup) HasTtl() bool {
	if o != nil && !IsNil(o.Ttl) {
		return true
	}

	return false
}

// SetTtl gets a reference to the given int64 and assigns it to the Ttl field.
func (o *DNSGatewayGroupCreateReqGroup) SetTtl(v int64) {
	o.Ttl = &v
}

// GetVipGroups returns the VipGroups field value if set, zero value otherwise.
func (o *DNSGatewayGroupCreateReqGroup) GetVipGroups() []DNSGatewayGroupCreateReqGroupVIPGroupsElt {
	if o == nil || IsNil(o.VipGroups) {
		var ret []DNSGatewayGroupCreateReqGroupVIPGroupsElt
		return ret
	}
	return o.VipGroups
}

// GetVipGroupsOk returns a tuple with the VipGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSGatewayGroupCreateReqGroup) GetVipGroupsOk() ([]DNSGatewayGroupCreateReqGroupVIPGroupsElt, bool) {
	if o == nil || IsNil(o.VipGroups) {
		return nil, false
	}
	return o.VipGroups, true
}

// HasVipGroups returns a boolean if a field has been set.
func (o *DNSGatewayGroupCreateReqGroup) HasVipGroups() bool {
	if o != nil && !IsNil(o.VipGroups) {
		return true
	}

	return false
}

// SetVipGroups gets a reference to the given []DNSGatewayGroupCreateReqGroupVIPGroupsElt and assigns it to the VipGroups field.
func (o *DNSGatewayGroupCreateReqGroup) SetVipGroups(v []DNSGatewayGroupCreateReqGroupVIPGroupsElt) {
	o.VipGroups = v
}

func (o DNSGatewayGroupCreateReqGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DNSGatewayGroupCreateReqGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["host_ids"] = o.HostIds
	toSerialize["name"] = o.Name
	toSerialize["origin"] = o.Origin
	toSerialize["port"] = o.Port
	if !IsNil(o.Ttl) {
		toSerialize["ttl"] = o.Ttl
	}
	if !IsNil(o.VipGroups) {
		toSerialize["vip_groups"] = o.VipGroups
	}
	return toSerialize, nil
}

func (o *DNSGatewayGroupCreateReqGroup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"host_ids",
		"name",
		"origin",
		"port",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDNSGatewayGroupCreateReqGroup := _DNSGatewayGroupCreateReqGroup{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDNSGatewayGroupCreateReqGroup)

	if err != nil {
		return err
	}

	*o = DNSGatewayGroupCreateReqGroup(varDNSGatewayGroupCreateReqGroup)

	return err
}

type NullableDNSGatewayGroupCreateReqGroup struct {
	value *DNSGatewayGroupCreateReqGroup
	isSet bool
}

func (v NullableDNSGatewayGroupCreateReqGroup) Get() *DNSGatewayGroupCreateReqGroup {
	return v.value
}

func (v *NullableDNSGatewayGroupCreateReqGroup) Set(val *DNSGatewayGroupCreateReqGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableDNSGatewayGroupCreateReqGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableDNSGatewayGroupCreateReqGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDNSGatewayGroupCreateReqGroup(val *DNSGatewayGroupCreateReqGroup) *NullableDNSGatewayGroupCreateReqGroup {
	return &NullableDNSGatewayGroupCreateReqGroup{value: val, isSet: true}
}

func (v NullableDNSGatewayGroupCreateReqGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDNSGatewayGroupCreateReqGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


