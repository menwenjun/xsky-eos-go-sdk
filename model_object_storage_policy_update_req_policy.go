/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ObjectStoragePolicyUpdateReqPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectStoragePolicyUpdateReqPolicy{}

// ObjectStoragePolicyUpdateReqPolicy struct for ObjectStoragePolicyUpdateReqPolicy
type ObjectStoragePolicyUpdateReqPolicy struct {
	CachePoolId *int64 `json:"cache_pool_id,omitempty"`
	Compress *bool `json:"compress,omitempty"`
	Crypto *bool `json:"crypto,omitempty"`
	Deduplication *bool `json:"deduplication,omitempty"`
	Default *bool `json:"default,omitempty"`
	Description *string `json:"description,omitempty"`
	Shared *bool `json:"shared,omitempty"`
}

// NewObjectStoragePolicyUpdateReqPolicy instantiates a new ObjectStoragePolicyUpdateReqPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectStoragePolicyUpdateReqPolicy() *ObjectStoragePolicyUpdateReqPolicy {
	this := ObjectStoragePolicyUpdateReqPolicy{}
	return &this
}

// NewObjectStoragePolicyUpdateReqPolicyWithDefaults instantiates a new ObjectStoragePolicyUpdateReqPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectStoragePolicyUpdateReqPolicyWithDefaults() *ObjectStoragePolicyUpdateReqPolicy {
	this := ObjectStoragePolicyUpdateReqPolicy{}
	return &this
}

// GetCachePoolId returns the CachePoolId field value if set, zero value otherwise.
func (o *ObjectStoragePolicyUpdateReqPolicy) GetCachePoolId() int64 {
	if o == nil || IsNil(o.CachePoolId) {
		var ret int64
		return ret
	}
	return *o.CachePoolId
}

// GetCachePoolIdOk returns a tuple with the CachePoolId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStoragePolicyUpdateReqPolicy) GetCachePoolIdOk() (*int64, bool) {
	if o == nil || IsNil(o.CachePoolId) {
		return nil, false
	}
	return o.CachePoolId, true
}

// HasCachePoolId returns a boolean if a field has been set.
func (o *ObjectStoragePolicyUpdateReqPolicy) HasCachePoolId() bool {
	if o != nil && !IsNil(o.CachePoolId) {
		return true
	}

	return false
}

// SetCachePoolId gets a reference to the given int64 and assigns it to the CachePoolId field.
func (o *ObjectStoragePolicyUpdateReqPolicy) SetCachePoolId(v int64) {
	o.CachePoolId = &v
}

// GetCompress returns the Compress field value if set, zero value otherwise.
func (o *ObjectStoragePolicyUpdateReqPolicy) GetCompress() bool {
	if o == nil || IsNil(o.Compress) {
		var ret bool
		return ret
	}
	return *o.Compress
}

// GetCompressOk returns a tuple with the Compress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStoragePolicyUpdateReqPolicy) GetCompressOk() (*bool, bool) {
	if o == nil || IsNil(o.Compress) {
		return nil, false
	}
	return o.Compress, true
}

// HasCompress returns a boolean if a field has been set.
func (o *ObjectStoragePolicyUpdateReqPolicy) HasCompress() bool {
	if o != nil && !IsNil(o.Compress) {
		return true
	}

	return false
}

// SetCompress gets a reference to the given bool and assigns it to the Compress field.
func (o *ObjectStoragePolicyUpdateReqPolicy) SetCompress(v bool) {
	o.Compress = &v
}

// GetCrypto returns the Crypto field value if set, zero value otherwise.
func (o *ObjectStoragePolicyUpdateReqPolicy) GetCrypto() bool {
	if o == nil || IsNil(o.Crypto) {
		var ret bool
		return ret
	}
	return *o.Crypto
}

// GetCryptoOk returns a tuple with the Crypto field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStoragePolicyUpdateReqPolicy) GetCryptoOk() (*bool, bool) {
	if o == nil || IsNil(o.Crypto) {
		return nil, false
	}
	return o.Crypto, true
}

// HasCrypto returns a boolean if a field has been set.
func (o *ObjectStoragePolicyUpdateReqPolicy) HasCrypto() bool {
	if o != nil && !IsNil(o.Crypto) {
		return true
	}

	return false
}

// SetCrypto gets a reference to the given bool and assigns it to the Crypto field.
func (o *ObjectStoragePolicyUpdateReqPolicy) SetCrypto(v bool) {
	o.Crypto = &v
}

// GetDeduplication returns the Deduplication field value if set, zero value otherwise.
func (o *ObjectStoragePolicyUpdateReqPolicy) GetDeduplication() bool {
	if o == nil || IsNil(o.Deduplication) {
		var ret bool
		return ret
	}
	return *o.Deduplication
}

// GetDeduplicationOk returns a tuple with the Deduplication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStoragePolicyUpdateReqPolicy) GetDeduplicationOk() (*bool, bool) {
	if o == nil || IsNil(o.Deduplication) {
		return nil, false
	}
	return o.Deduplication, true
}

// HasDeduplication returns a boolean if a field has been set.
func (o *ObjectStoragePolicyUpdateReqPolicy) HasDeduplication() bool {
	if o != nil && !IsNil(o.Deduplication) {
		return true
	}

	return false
}

// SetDeduplication gets a reference to the given bool and assigns it to the Deduplication field.
func (o *ObjectStoragePolicyUpdateReqPolicy) SetDeduplication(v bool) {
	o.Deduplication = &v
}

// GetDefault returns the Default field value if set, zero value otherwise.
func (o *ObjectStoragePolicyUpdateReqPolicy) GetDefault() bool {
	if o == nil || IsNil(o.Default) {
		var ret bool
		return ret
	}
	return *o.Default
}

// GetDefaultOk returns a tuple with the Default field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStoragePolicyUpdateReqPolicy) GetDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.Default) {
		return nil, false
	}
	return o.Default, true
}

// HasDefault returns a boolean if a field has been set.
func (o *ObjectStoragePolicyUpdateReqPolicy) HasDefault() bool {
	if o != nil && !IsNil(o.Default) {
		return true
	}

	return false
}

// SetDefault gets a reference to the given bool and assigns it to the Default field.
func (o *ObjectStoragePolicyUpdateReqPolicy) SetDefault(v bool) {
	o.Default = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ObjectStoragePolicyUpdateReqPolicy) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStoragePolicyUpdateReqPolicy) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ObjectStoragePolicyUpdateReqPolicy) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ObjectStoragePolicyUpdateReqPolicy) SetDescription(v string) {
	o.Description = &v
}

// GetShared returns the Shared field value if set, zero value otherwise.
func (o *ObjectStoragePolicyUpdateReqPolicy) GetShared() bool {
	if o == nil || IsNil(o.Shared) {
		var ret bool
		return ret
	}
	return *o.Shared
}

// GetSharedOk returns a tuple with the Shared field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStoragePolicyUpdateReqPolicy) GetSharedOk() (*bool, bool) {
	if o == nil || IsNil(o.Shared) {
		return nil, false
	}
	return o.Shared, true
}

// HasShared returns a boolean if a field has been set.
func (o *ObjectStoragePolicyUpdateReqPolicy) HasShared() bool {
	if o != nil && !IsNil(o.Shared) {
		return true
	}

	return false
}

// SetShared gets a reference to the given bool and assigns it to the Shared field.
func (o *ObjectStoragePolicyUpdateReqPolicy) SetShared(v bool) {
	o.Shared = &v
}

func (o ObjectStoragePolicyUpdateReqPolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectStoragePolicyUpdateReqPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CachePoolId) {
		toSerialize["cache_pool_id"] = o.CachePoolId
	}
	if !IsNil(o.Compress) {
		toSerialize["compress"] = o.Compress
	}
	if !IsNil(o.Crypto) {
		toSerialize["crypto"] = o.Crypto
	}
	if !IsNil(o.Deduplication) {
		toSerialize["deduplication"] = o.Deduplication
	}
	if !IsNil(o.Default) {
		toSerialize["default"] = o.Default
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Shared) {
		toSerialize["shared"] = o.Shared
	}
	return toSerialize, nil
}

type NullableObjectStoragePolicyUpdateReqPolicy struct {
	value *ObjectStoragePolicyUpdateReqPolicy
	isSet bool
}

func (v NullableObjectStoragePolicyUpdateReqPolicy) Get() *ObjectStoragePolicyUpdateReqPolicy {
	return v.value
}

func (v *NullableObjectStoragePolicyUpdateReqPolicy) Set(val *ObjectStoragePolicyUpdateReqPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectStoragePolicyUpdateReqPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectStoragePolicyUpdateReqPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectStoragePolicyUpdateReqPolicy(val *ObjectStoragePolicyUpdateReqPolicy) *NullableObjectStoragePolicyUpdateReqPolicy {
	return &NullableObjectStoragePolicyUpdateReqPolicy{value: val, isSet: true}
}

func (v NullableObjectStoragePolicyUpdateReqPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectStoragePolicyUpdateReqPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


