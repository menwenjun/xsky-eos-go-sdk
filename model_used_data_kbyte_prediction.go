/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the UsedDataKbytePrediction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UsedDataKbytePrediction{}

// UsedDataKbytePrediction UsedDataKbytePrediction is a point in a prediction graph
type UsedDataKbytePrediction struct {
	Create *time.Time `json:"create,omitempty"`
	UsedDataKbyte *int64 `json:"used_data_kbyte,omitempty"`
}

// NewUsedDataKbytePrediction instantiates a new UsedDataKbytePrediction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsedDataKbytePrediction() *UsedDataKbytePrediction {
	this := UsedDataKbytePrediction{}
	return &this
}

// NewUsedDataKbytePredictionWithDefaults instantiates a new UsedDataKbytePrediction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsedDataKbytePredictionWithDefaults() *UsedDataKbytePrediction {
	this := UsedDataKbytePrediction{}
	return &this
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *UsedDataKbytePrediction) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsedDataKbytePrediction) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *UsedDataKbytePrediction) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *UsedDataKbytePrediction) SetCreate(v time.Time) {
	o.Create = &v
}

// GetUsedDataKbyte returns the UsedDataKbyte field value if set, zero value otherwise.
func (o *UsedDataKbytePrediction) GetUsedDataKbyte() int64 {
	if o == nil || IsNil(o.UsedDataKbyte) {
		var ret int64
		return ret
	}
	return *o.UsedDataKbyte
}

// GetUsedDataKbyteOk returns a tuple with the UsedDataKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsedDataKbytePrediction) GetUsedDataKbyteOk() (*int64, bool) {
	if o == nil || IsNil(o.UsedDataKbyte) {
		return nil, false
	}
	return o.UsedDataKbyte, true
}

// HasUsedDataKbyte returns a boolean if a field has been set.
func (o *UsedDataKbytePrediction) HasUsedDataKbyte() bool {
	if o != nil && !IsNil(o.UsedDataKbyte) {
		return true
	}

	return false
}

// SetUsedDataKbyte gets a reference to the given int64 and assigns it to the UsedDataKbyte field.
func (o *UsedDataKbytePrediction) SetUsedDataKbyte(v int64) {
	o.UsedDataKbyte = &v
}

func (o UsedDataKbytePrediction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UsedDataKbytePrediction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.UsedDataKbyte) {
		toSerialize["used_data_kbyte"] = o.UsedDataKbyte
	}
	return toSerialize, nil
}

type NullableUsedDataKbytePrediction struct {
	value *UsedDataKbytePrediction
	isSet bool
}

func (v NullableUsedDataKbytePrediction) Get() *UsedDataKbytePrediction {
	return v.value
}

func (v *NullableUsedDataKbytePrediction) Set(val *UsedDataKbytePrediction) {
	v.value = val
	v.isSet = true
}

func (v NullableUsedDataKbytePrediction) IsSet() bool {
	return v.isSet
}

func (v *NullableUsedDataKbytePrediction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsedDataKbytePrediction(val *UsedDataKbytePrediction) *NullableUsedDataKbytePrediction {
	return &NullableUsedDataKbytePrediction{value: val, isSet: true}
}

func (v NullableUsedDataKbytePrediction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsedDataKbytePrediction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


