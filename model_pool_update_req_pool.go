/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PoolUpdateReqPool type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PoolUpdateReqPool{}

// PoolUpdateReqPool struct for PoolUpdateReqPool
type PoolUpdateReqPool struct {
	CompressAlgorithm *string `json:"compress_algorithm,omitempty"`
	Compressed *bool `json:"compressed,omitempty"`
	// default managed volume format: 128 or 129
	DefaultManagedVolumeFormat *int64 `json:"default_managed_volume_format,omitempty"`
	FailureDomainType *string `json:"failure_domain_type,omitempty"`
	IoBypassEnabled *bool `json:"io_bypass_enabled,omitempty"`
	IoBypassMode *string `json:"io_bypass_mode,omitempty"`
	IoBypassThreshold *int64 `json:"io_bypass_threshold,omitempty"`
	Name *string `json:"name,omitempty"`
	// ec k+m:h<->k+m
	OutFailureDomainNum *int64 `json:"out_failure_domain_num,omitempty"`
	PrimaryPlacementNodeId *int64 `json:"primary_placement_node_id,omitempty"`
	Property *map[string][]string `json:"property,omitempty"`
	Qos *OsdQos `json:"qos,omitempty"`
	Ruleset []PoolRuleReq `json:"ruleset,omitempty"`
	Size *int64 `json:"size,omitempty"`
	ThinProvisioned *bool `json:"thin_provisioned,omitempty"`
}

// NewPoolUpdateReqPool instantiates a new PoolUpdateReqPool object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPoolUpdateReqPool() *PoolUpdateReqPool {
	this := PoolUpdateReqPool{}
	return &this
}

// NewPoolUpdateReqPoolWithDefaults instantiates a new PoolUpdateReqPool object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPoolUpdateReqPoolWithDefaults() *PoolUpdateReqPool {
	this := PoolUpdateReqPool{}
	return &this
}

// GetCompressAlgorithm returns the CompressAlgorithm field value if set, zero value otherwise.
func (o *PoolUpdateReqPool) GetCompressAlgorithm() string {
	if o == nil || IsNil(o.CompressAlgorithm) {
		var ret string
		return ret
	}
	return *o.CompressAlgorithm
}

// GetCompressAlgorithmOk returns a tuple with the CompressAlgorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolUpdateReqPool) GetCompressAlgorithmOk() (*string, bool) {
	if o == nil || IsNil(o.CompressAlgorithm) {
		return nil, false
	}
	return o.CompressAlgorithm, true
}

// HasCompressAlgorithm returns a boolean if a field has been set.
func (o *PoolUpdateReqPool) HasCompressAlgorithm() bool {
	if o != nil && !IsNil(o.CompressAlgorithm) {
		return true
	}

	return false
}

// SetCompressAlgorithm gets a reference to the given string and assigns it to the CompressAlgorithm field.
func (o *PoolUpdateReqPool) SetCompressAlgorithm(v string) {
	o.CompressAlgorithm = &v
}

// GetCompressed returns the Compressed field value if set, zero value otherwise.
func (o *PoolUpdateReqPool) GetCompressed() bool {
	if o == nil || IsNil(o.Compressed) {
		var ret bool
		return ret
	}
	return *o.Compressed
}

// GetCompressedOk returns a tuple with the Compressed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolUpdateReqPool) GetCompressedOk() (*bool, bool) {
	if o == nil || IsNil(o.Compressed) {
		return nil, false
	}
	return o.Compressed, true
}

// HasCompressed returns a boolean if a field has been set.
func (o *PoolUpdateReqPool) HasCompressed() bool {
	if o != nil && !IsNil(o.Compressed) {
		return true
	}

	return false
}

// SetCompressed gets a reference to the given bool and assigns it to the Compressed field.
func (o *PoolUpdateReqPool) SetCompressed(v bool) {
	o.Compressed = &v
}

// GetDefaultManagedVolumeFormat returns the DefaultManagedVolumeFormat field value if set, zero value otherwise.
func (o *PoolUpdateReqPool) GetDefaultManagedVolumeFormat() int64 {
	if o == nil || IsNil(o.DefaultManagedVolumeFormat) {
		var ret int64
		return ret
	}
	return *o.DefaultManagedVolumeFormat
}

// GetDefaultManagedVolumeFormatOk returns a tuple with the DefaultManagedVolumeFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolUpdateReqPool) GetDefaultManagedVolumeFormatOk() (*int64, bool) {
	if o == nil || IsNil(o.DefaultManagedVolumeFormat) {
		return nil, false
	}
	return o.DefaultManagedVolumeFormat, true
}

// HasDefaultManagedVolumeFormat returns a boolean if a field has been set.
func (o *PoolUpdateReqPool) HasDefaultManagedVolumeFormat() bool {
	if o != nil && !IsNil(o.DefaultManagedVolumeFormat) {
		return true
	}

	return false
}

// SetDefaultManagedVolumeFormat gets a reference to the given int64 and assigns it to the DefaultManagedVolumeFormat field.
func (o *PoolUpdateReqPool) SetDefaultManagedVolumeFormat(v int64) {
	o.DefaultManagedVolumeFormat = &v
}

// GetFailureDomainType returns the FailureDomainType field value if set, zero value otherwise.
func (o *PoolUpdateReqPool) GetFailureDomainType() string {
	if o == nil || IsNil(o.FailureDomainType) {
		var ret string
		return ret
	}
	return *o.FailureDomainType
}

// GetFailureDomainTypeOk returns a tuple with the FailureDomainType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolUpdateReqPool) GetFailureDomainTypeOk() (*string, bool) {
	if o == nil || IsNil(o.FailureDomainType) {
		return nil, false
	}
	return o.FailureDomainType, true
}

// HasFailureDomainType returns a boolean if a field has been set.
func (o *PoolUpdateReqPool) HasFailureDomainType() bool {
	if o != nil && !IsNil(o.FailureDomainType) {
		return true
	}

	return false
}

// SetFailureDomainType gets a reference to the given string and assigns it to the FailureDomainType field.
func (o *PoolUpdateReqPool) SetFailureDomainType(v string) {
	o.FailureDomainType = &v
}

// GetIoBypassEnabled returns the IoBypassEnabled field value if set, zero value otherwise.
func (o *PoolUpdateReqPool) GetIoBypassEnabled() bool {
	if o == nil || IsNil(o.IoBypassEnabled) {
		var ret bool
		return ret
	}
	return *o.IoBypassEnabled
}

// GetIoBypassEnabledOk returns a tuple with the IoBypassEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolUpdateReqPool) GetIoBypassEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IoBypassEnabled) {
		return nil, false
	}
	return o.IoBypassEnabled, true
}

// HasIoBypassEnabled returns a boolean if a field has been set.
func (o *PoolUpdateReqPool) HasIoBypassEnabled() bool {
	if o != nil && !IsNil(o.IoBypassEnabled) {
		return true
	}

	return false
}

// SetIoBypassEnabled gets a reference to the given bool and assigns it to the IoBypassEnabled field.
func (o *PoolUpdateReqPool) SetIoBypassEnabled(v bool) {
	o.IoBypassEnabled = &v
}

// GetIoBypassMode returns the IoBypassMode field value if set, zero value otherwise.
func (o *PoolUpdateReqPool) GetIoBypassMode() string {
	if o == nil || IsNil(o.IoBypassMode) {
		var ret string
		return ret
	}
	return *o.IoBypassMode
}

// GetIoBypassModeOk returns a tuple with the IoBypassMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolUpdateReqPool) GetIoBypassModeOk() (*string, bool) {
	if o == nil || IsNil(o.IoBypassMode) {
		return nil, false
	}
	return o.IoBypassMode, true
}

// HasIoBypassMode returns a boolean if a field has been set.
func (o *PoolUpdateReqPool) HasIoBypassMode() bool {
	if o != nil && !IsNil(o.IoBypassMode) {
		return true
	}

	return false
}

// SetIoBypassMode gets a reference to the given string and assigns it to the IoBypassMode field.
func (o *PoolUpdateReqPool) SetIoBypassMode(v string) {
	o.IoBypassMode = &v
}

// GetIoBypassThreshold returns the IoBypassThreshold field value if set, zero value otherwise.
func (o *PoolUpdateReqPool) GetIoBypassThreshold() int64 {
	if o == nil || IsNil(o.IoBypassThreshold) {
		var ret int64
		return ret
	}
	return *o.IoBypassThreshold
}

// GetIoBypassThresholdOk returns a tuple with the IoBypassThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolUpdateReqPool) GetIoBypassThresholdOk() (*int64, bool) {
	if o == nil || IsNil(o.IoBypassThreshold) {
		return nil, false
	}
	return o.IoBypassThreshold, true
}

// HasIoBypassThreshold returns a boolean if a field has been set.
func (o *PoolUpdateReqPool) HasIoBypassThreshold() bool {
	if o != nil && !IsNil(o.IoBypassThreshold) {
		return true
	}

	return false
}

// SetIoBypassThreshold gets a reference to the given int64 and assigns it to the IoBypassThreshold field.
func (o *PoolUpdateReqPool) SetIoBypassThreshold(v int64) {
	o.IoBypassThreshold = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PoolUpdateReqPool) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolUpdateReqPool) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PoolUpdateReqPool) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PoolUpdateReqPool) SetName(v string) {
	o.Name = &v
}

// GetOutFailureDomainNum returns the OutFailureDomainNum field value if set, zero value otherwise.
func (o *PoolUpdateReqPool) GetOutFailureDomainNum() int64 {
	if o == nil || IsNil(o.OutFailureDomainNum) {
		var ret int64
		return ret
	}
	return *o.OutFailureDomainNum
}

// GetOutFailureDomainNumOk returns a tuple with the OutFailureDomainNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolUpdateReqPool) GetOutFailureDomainNumOk() (*int64, bool) {
	if o == nil || IsNil(o.OutFailureDomainNum) {
		return nil, false
	}
	return o.OutFailureDomainNum, true
}

// HasOutFailureDomainNum returns a boolean if a field has been set.
func (o *PoolUpdateReqPool) HasOutFailureDomainNum() bool {
	if o != nil && !IsNil(o.OutFailureDomainNum) {
		return true
	}

	return false
}

// SetOutFailureDomainNum gets a reference to the given int64 and assigns it to the OutFailureDomainNum field.
func (o *PoolUpdateReqPool) SetOutFailureDomainNum(v int64) {
	o.OutFailureDomainNum = &v
}

// GetPrimaryPlacementNodeId returns the PrimaryPlacementNodeId field value if set, zero value otherwise.
func (o *PoolUpdateReqPool) GetPrimaryPlacementNodeId() int64 {
	if o == nil || IsNil(o.PrimaryPlacementNodeId) {
		var ret int64
		return ret
	}
	return *o.PrimaryPlacementNodeId
}

// GetPrimaryPlacementNodeIdOk returns a tuple with the PrimaryPlacementNodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolUpdateReqPool) GetPrimaryPlacementNodeIdOk() (*int64, bool) {
	if o == nil || IsNil(o.PrimaryPlacementNodeId) {
		return nil, false
	}
	return o.PrimaryPlacementNodeId, true
}

// HasPrimaryPlacementNodeId returns a boolean if a field has been set.
func (o *PoolUpdateReqPool) HasPrimaryPlacementNodeId() bool {
	if o != nil && !IsNil(o.PrimaryPlacementNodeId) {
		return true
	}

	return false
}

// SetPrimaryPlacementNodeId gets a reference to the given int64 and assigns it to the PrimaryPlacementNodeId field.
func (o *PoolUpdateReqPool) SetPrimaryPlacementNodeId(v int64) {
	o.PrimaryPlacementNodeId = &v
}

// GetProperty returns the Property field value if set, zero value otherwise.
func (o *PoolUpdateReqPool) GetProperty() map[string][]string {
	if o == nil || IsNil(o.Property) {
		var ret map[string][]string
		return ret
	}
	return *o.Property
}

// GetPropertyOk returns a tuple with the Property field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolUpdateReqPool) GetPropertyOk() (*map[string][]string, bool) {
	if o == nil || IsNil(o.Property) {
		return nil, false
	}
	return o.Property, true
}

// HasProperty returns a boolean if a field has been set.
func (o *PoolUpdateReqPool) HasProperty() bool {
	if o != nil && !IsNil(o.Property) {
		return true
	}

	return false
}

// SetProperty gets a reference to the given map[string][]string and assigns it to the Property field.
func (o *PoolUpdateReqPool) SetProperty(v map[string][]string) {
	o.Property = &v
}

// GetQos returns the Qos field value if set, zero value otherwise.
func (o *PoolUpdateReqPool) GetQos() OsdQos {
	if o == nil || IsNil(o.Qos) {
		var ret OsdQos
		return ret
	}
	return *o.Qos
}

// GetQosOk returns a tuple with the Qos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolUpdateReqPool) GetQosOk() (*OsdQos, bool) {
	if o == nil || IsNil(o.Qos) {
		return nil, false
	}
	return o.Qos, true
}

// HasQos returns a boolean if a field has been set.
func (o *PoolUpdateReqPool) HasQos() bool {
	if o != nil && !IsNil(o.Qos) {
		return true
	}

	return false
}

// SetQos gets a reference to the given OsdQos and assigns it to the Qos field.
func (o *PoolUpdateReqPool) SetQos(v OsdQos) {
	o.Qos = &v
}

// GetRuleset returns the Ruleset field value if set, zero value otherwise.
func (o *PoolUpdateReqPool) GetRuleset() []PoolRuleReq {
	if o == nil || IsNil(o.Ruleset) {
		var ret []PoolRuleReq
		return ret
	}
	return o.Ruleset
}

// GetRulesetOk returns a tuple with the Ruleset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolUpdateReqPool) GetRulesetOk() ([]PoolRuleReq, bool) {
	if o == nil || IsNil(o.Ruleset) {
		return nil, false
	}
	return o.Ruleset, true
}

// HasRuleset returns a boolean if a field has been set.
func (o *PoolUpdateReqPool) HasRuleset() bool {
	if o != nil && !IsNil(o.Ruleset) {
		return true
	}

	return false
}

// SetRuleset gets a reference to the given []PoolRuleReq and assigns it to the Ruleset field.
func (o *PoolUpdateReqPool) SetRuleset(v []PoolRuleReq) {
	o.Ruleset = v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *PoolUpdateReqPool) GetSize() int64 {
	if o == nil || IsNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolUpdateReqPool) GetSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *PoolUpdateReqPool) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *PoolUpdateReqPool) SetSize(v int64) {
	o.Size = &v
}

// GetThinProvisioned returns the ThinProvisioned field value if set, zero value otherwise.
func (o *PoolUpdateReqPool) GetThinProvisioned() bool {
	if o == nil || IsNil(o.ThinProvisioned) {
		var ret bool
		return ret
	}
	return *o.ThinProvisioned
}

// GetThinProvisionedOk returns a tuple with the ThinProvisioned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolUpdateReqPool) GetThinProvisionedOk() (*bool, bool) {
	if o == nil || IsNil(o.ThinProvisioned) {
		return nil, false
	}
	return o.ThinProvisioned, true
}

// HasThinProvisioned returns a boolean if a field has been set.
func (o *PoolUpdateReqPool) HasThinProvisioned() bool {
	if o != nil && !IsNil(o.ThinProvisioned) {
		return true
	}

	return false
}

// SetThinProvisioned gets a reference to the given bool and assigns it to the ThinProvisioned field.
func (o *PoolUpdateReqPool) SetThinProvisioned(v bool) {
	o.ThinProvisioned = &v
}

func (o PoolUpdateReqPool) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PoolUpdateReqPool) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CompressAlgorithm) {
		toSerialize["compress_algorithm"] = o.CompressAlgorithm
	}
	if !IsNil(o.Compressed) {
		toSerialize["compressed"] = o.Compressed
	}
	if !IsNil(o.DefaultManagedVolumeFormat) {
		toSerialize["default_managed_volume_format"] = o.DefaultManagedVolumeFormat
	}
	if !IsNil(o.FailureDomainType) {
		toSerialize["failure_domain_type"] = o.FailureDomainType
	}
	if !IsNil(o.IoBypassEnabled) {
		toSerialize["io_bypass_enabled"] = o.IoBypassEnabled
	}
	if !IsNil(o.IoBypassMode) {
		toSerialize["io_bypass_mode"] = o.IoBypassMode
	}
	if !IsNil(o.IoBypassThreshold) {
		toSerialize["io_bypass_threshold"] = o.IoBypassThreshold
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.OutFailureDomainNum) {
		toSerialize["out_failure_domain_num"] = o.OutFailureDomainNum
	}
	if !IsNil(o.PrimaryPlacementNodeId) {
		toSerialize["primary_placement_node_id"] = o.PrimaryPlacementNodeId
	}
	if !IsNil(o.Property) {
		toSerialize["property"] = o.Property
	}
	if !IsNil(o.Qos) {
		toSerialize["qos"] = o.Qos
	}
	if !IsNil(o.Ruleset) {
		toSerialize["ruleset"] = o.Ruleset
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.ThinProvisioned) {
		toSerialize["thin_provisioned"] = o.ThinProvisioned
	}
	return toSerialize, nil
}

type NullablePoolUpdateReqPool struct {
	value *PoolUpdateReqPool
	isSet bool
}

func (v NullablePoolUpdateReqPool) Get() *PoolUpdateReqPool {
	return v.value
}

func (v *NullablePoolUpdateReqPool) Set(val *PoolUpdateReqPool) {
	v.value = val
	v.isSet = true
}

func (v NullablePoolUpdateReqPool) IsSet() bool {
	return v.isSet
}

func (v *NullablePoolUpdateReqPool) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePoolUpdateReqPool(val *PoolUpdateReqPool) *NullablePoolUpdateReqPool {
	return &NullablePoolUpdateReqPool{value: val, isSet: true}
}

func (v NullablePoolUpdateReqPool) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePoolUpdateReqPool) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


