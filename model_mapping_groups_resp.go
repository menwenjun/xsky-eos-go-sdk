/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MappingGroupsResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MappingGroupsResp{}

// MappingGroupsResp struct for MappingGroupsResp
type MappingGroupsResp struct {
	MappingGroups []MappingGroup `json:"mapping_groups"`
}

type _MappingGroupsResp MappingGroupsResp

// NewMappingGroupsResp instantiates a new MappingGroupsResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMappingGroupsResp(mappingGroups []MappingGroup) *MappingGroupsResp {
	this := MappingGroupsResp{}
	this.MappingGroups = mappingGroups
	return &this
}

// NewMappingGroupsRespWithDefaults instantiates a new MappingGroupsResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMappingGroupsRespWithDefaults() *MappingGroupsResp {
	this := MappingGroupsResp{}
	return &this
}

// GetMappingGroups returns the MappingGroups field value
func (o *MappingGroupsResp) GetMappingGroups() []MappingGroup {
	if o == nil {
		var ret []MappingGroup
		return ret
	}

	return o.MappingGroups
}

// GetMappingGroupsOk returns a tuple with the MappingGroups field value
// and a boolean to check if the value has been set.
func (o *MappingGroupsResp) GetMappingGroupsOk() ([]MappingGroup, bool) {
	if o == nil {
		return nil, false
	}
	return o.MappingGroups, true
}

// SetMappingGroups sets field value
func (o *MappingGroupsResp) SetMappingGroups(v []MappingGroup) {
	o.MappingGroups = v
}

func (o MappingGroupsResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MappingGroupsResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["mapping_groups"] = o.MappingGroups
	return toSerialize, nil
}

func (o *MappingGroupsResp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"mapping_groups",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMappingGroupsResp := _MappingGroupsResp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMappingGroupsResp)

	if err != nil {
		return err
	}

	*o = MappingGroupsResp(varMappingGroupsResp)

	return err
}

type NullableMappingGroupsResp struct {
	value *MappingGroupsResp
	isSet bool
}

func (v NullableMappingGroupsResp) Get() *MappingGroupsResp {
	return v.value
}

func (v *NullableMappingGroupsResp) Set(val *MappingGroupsResp) {
	v.value = val
	v.isSet = true
}

func (v NullableMappingGroupsResp) IsSet() bool {
	return v.isSet
}

func (v *NullableMappingGroupsResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMappingGroupsResp(val *MappingGroupsResp) *NullableMappingGroupsResp {
	return &NullableMappingGroupsResp{value: val, isSet: true}
}

func (v NullableMappingGroupsResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMappingGroupsResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


