/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DfsDirectoryReqDirectory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsDirectoryReqDirectory{}

// DfsDirectoryReqDirectory struct for DfsDirectoryReqDirectory
type DfsDirectoryReqDirectory struct {
	// clean resources with directory, used when deleting
	Clean *bool `json:"clean,omitempty"`
	// dfs rootfs id
	DfsRootfsId int64 `json:"dfs_rootfs_id"`
	// directory path
	Path string `json:"path"`
	// recursive create directory, used when creating
	Recursive *bool `json:"recursive,omitempty"`
	// storage policy id array
	StoragePolicyIds []int64 `json:"storage_policy_ids,omitempty"`
}

type _DfsDirectoryReqDirectory DfsDirectoryReqDirectory

// NewDfsDirectoryReqDirectory instantiates a new DfsDirectoryReqDirectory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsDirectoryReqDirectory(dfsRootfsId int64, path string) *DfsDirectoryReqDirectory {
	this := DfsDirectoryReqDirectory{}
	this.DfsRootfsId = dfsRootfsId
	this.Path = path
	return &this
}

// NewDfsDirectoryReqDirectoryWithDefaults instantiates a new DfsDirectoryReqDirectory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsDirectoryReqDirectoryWithDefaults() *DfsDirectoryReqDirectory {
	this := DfsDirectoryReqDirectory{}
	return &this
}

// GetClean returns the Clean field value if set, zero value otherwise.
func (o *DfsDirectoryReqDirectory) GetClean() bool {
	if o == nil || IsNil(o.Clean) {
		var ret bool
		return ret
	}
	return *o.Clean
}

// GetCleanOk returns a tuple with the Clean field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsDirectoryReqDirectory) GetCleanOk() (*bool, bool) {
	if o == nil || IsNil(o.Clean) {
		return nil, false
	}
	return o.Clean, true
}

// HasClean returns a boolean if a field has been set.
func (o *DfsDirectoryReqDirectory) HasClean() bool {
	if o != nil && !IsNil(o.Clean) {
		return true
	}

	return false
}

// SetClean gets a reference to the given bool and assigns it to the Clean field.
func (o *DfsDirectoryReqDirectory) SetClean(v bool) {
	o.Clean = &v
}

// GetDfsRootfsId returns the DfsRootfsId field value
func (o *DfsDirectoryReqDirectory) GetDfsRootfsId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DfsRootfsId
}

// GetDfsRootfsIdOk returns a tuple with the DfsRootfsId field value
// and a boolean to check if the value has been set.
func (o *DfsDirectoryReqDirectory) GetDfsRootfsIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DfsRootfsId, true
}

// SetDfsRootfsId sets field value
func (o *DfsDirectoryReqDirectory) SetDfsRootfsId(v int64) {
	o.DfsRootfsId = v
}

// GetPath returns the Path field value
func (o *DfsDirectoryReqDirectory) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *DfsDirectoryReqDirectory) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *DfsDirectoryReqDirectory) SetPath(v string) {
	o.Path = v
}

// GetRecursive returns the Recursive field value if set, zero value otherwise.
func (o *DfsDirectoryReqDirectory) GetRecursive() bool {
	if o == nil || IsNil(o.Recursive) {
		var ret bool
		return ret
	}
	return *o.Recursive
}

// GetRecursiveOk returns a tuple with the Recursive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsDirectoryReqDirectory) GetRecursiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Recursive) {
		return nil, false
	}
	return o.Recursive, true
}

// HasRecursive returns a boolean if a field has been set.
func (o *DfsDirectoryReqDirectory) HasRecursive() bool {
	if o != nil && !IsNil(o.Recursive) {
		return true
	}

	return false
}

// SetRecursive gets a reference to the given bool and assigns it to the Recursive field.
func (o *DfsDirectoryReqDirectory) SetRecursive(v bool) {
	o.Recursive = &v
}

// GetStoragePolicyIds returns the StoragePolicyIds field value if set, zero value otherwise.
func (o *DfsDirectoryReqDirectory) GetStoragePolicyIds() []int64 {
	if o == nil || IsNil(o.StoragePolicyIds) {
		var ret []int64
		return ret
	}
	return o.StoragePolicyIds
}

// GetStoragePolicyIdsOk returns a tuple with the StoragePolicyIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsDirectoryReqDirectory) GetStoragePolicyIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.StoragePolicyIds) {
		return nil, false
	}
	return o.StoragePolicyIds, true
}

// HasStoragePolicyIds returns a boolean if a field has been set.
func (o *DfsDirectoryReqDirectory) HasStoragePolicyIds() bool {
	if o != nil && !IsNil(o.StoragePolicyIds) {
		return true
	}

	return false
}

// SetStoragePolicyIds gets a reference to the given []int64 and assigns it to the StoragePolicyIds field.
func (o *DfsDirectoryReqDirectory) SetStoragePolicyIds(v []int64) {
	o.StoragePolicyIds = v
}

func (o DfsDirectoryReqDirectory) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsDirectoryReqDirectory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Clean) {
		toSerialize["clean"] = o.Clean
	}
	toSerialize["dfs_rootfs_id"] = o.DfsRootfsId
	toSerialize["path"] = o.Path
	if !IsNil(o.Recursive) {
		toSerialize["recursive"] = o.Recursive
	}
	if !IsNil(o.StoragePolicyIds) {
		toSerialize["storage_policy_ids"] = o.StoragePolicyIds
	}
	return toSerialize, nil
}

func (o *DfsDirectoryReqDirectory) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dfs_rootfs_id",
		"path",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDfsDirectoryReqDirectory := _DfsDirectoryReqDirectory{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDfsDirectoryReqDirectory)

	if err != nil {
		return err
	}

	*o = DfsDirectoryReqDirectory(varDfsDirectoryReqDirectory)

	return err
}

type NullableDfsDirectoryReqDirectory struct {
	value *DfsDirectoryReqDirectory
	isSet bool
}

func (v NullableDfsDirectoryReqDirectory) Get() *DfsDirectoryReqDirectory {
	return v.value
}

func (v *NullableDfsDirectoryReqDirectory) Set(val *DfsDirectoryReqDirectory) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsDirectoryReqDirectory) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsDirectoryReqDirectory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsDirectoryReqDirectory(val *DfsDirectoryReqDirectory) *NullableDfsDirectoryReqDirectory {
	return &NullableDfsDirectoryReqDirectory{value: val, isSet: true}
}

func (v NullableDfsDirectoryReqDirectory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsDirectoryReqDirectory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


