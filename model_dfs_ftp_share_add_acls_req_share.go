/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DfsFTPShareAddACLsReqShare type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsFTPShareAddACLsReqShare{}

// DfsFTPShareAddACLsReqShare struct for DfsFTPShareAddACLsReqShare
type DfsFTPShareAddACLsReqShare struct {
	// access control array
	DfsFtpShareAcls []DfsFTPShareACLReq `json:"dfs_ftp_share_acls"`
}

type _DfsFTPShareAddACLsReqShare DfsFTPShareAddACLsReqShare

// NewDfsFTPShareAddACLsReqShare instantiates a new DfsFTPShareAddACLsReqShare object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsFTPShareAddACLsReqShare(dfsFtpShareAcls []DfsFTPShareACLReq) *DfsFTPShareAddACLsReqShare {
	this := DfsFTPShareAddACLsReqShare{}
	this.DfsFtpShareAcls = dfsFtpShareAcls
	return &this
}

// NewDfsFTPShareAddACLsReqShareWithDefaults instantiates a new DfsFTPShareAddACLsReqShare object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsFTPShareAddACLsReqShareWithDefaults() *DfsFTPShareAddACLsReqShare {
	this := DfsFTPShareAddACLsReqShare{}
	return &this
}

// GetDfsFtpShareAcls returns the DfsFtpShareAcls field value
func (o *DfsFTPShareAddACLsReqShare) GetDfsFtpShareAcls() []DfsFTPShareACLReq {
	if o == nil {
		var ret []DfsFTPShareACLReq
		return ret
	}

	return o.DfsFtpShareAcls
}

// GetDfsFtpShareAclsOk returns a tuple with the DfsFtpShareAcls field value
// and a boolean to check if the value has been set.
func (o *DfsFTPShareAddACLsReqShare) GetDfsFtpShareAclsOk() ([]DfsFTPShareACLReq, bool) {
	if o == nil {
		return nil, false
	}
	return o.DfsFtpShareAcls, true
}

// SetDfsFtpShareAcls sets field value
func (o *DfsFTPShareAddACLsReqShare) SetDfsFtpShareAcls(v []DfsFTPShareACLReq) {
	o.DfsFtpShareAcls = v
}

func (o DfsFTPShareAddACLsReqShare) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsFTPShareAddACLsReqShare) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dfs_ftp_share_acls"] = o.DfsFtpShareAcls
	return toSerialize, nil
}

func (o *DfsFTPShareAddACLsReqShare) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dfs_ftp_share_acls",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDfsFTPShareAddACLsReqShare := _DfsFTPShareAddACLsReqShare{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDfsFTPShareAddACLsReqShare)

	if err != nil {
		return err
	}

	*o = DfsFTPShareAddACLsReqShare(varDfsFTPShareAddACLsReqShare)

	return err
}

type NullableDfsFTPShareAddACLsReqShare struct {
	value *DfsFTPShareAddACLsReqShare
	isSet bool
}

func (v NullableDfsFTPShareAddACLsReqShare) Get() *DfsFTPShareAddACLsReqShare {
	return v.value
}

func (v *NullableDfsFTPShareAddACLsReqShare) Set(val *DfsFTPShareAddACLsReqShare) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsFTPShareAddACLsReqShare) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsFTPShareAddACLsReqShare) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsFTPShareAddACLsReqShare(val *DfsFTPShareAddACLsReqShare) *NullableDfsFTPShareAddACLsReqShare {
	return &NullableDfsFTPShareAddACLsReqShare{value: val, isSet: true}
}

func (v NullableDfsFTPShareAddACLsReqShare) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsFTPShareAddACLsReqShare) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


