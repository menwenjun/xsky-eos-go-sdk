/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AlertRuleUpdateReqRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlertRuleUpdateReqRule{}

// AlertRuleUpdateReqRule struct for AlertRuleUpdateReqRule
type AlertRuleUpdateReqRule struct {
	// enable the alert rule or not
	Enabled *bool `json:"enabled,omitempty"`
	// trigger period of alert rule
	TriggerPeriod *int64 `json:"trigger_period,omitempty"`
	// trigger value of alert rule
	TriggerValue *string `json:"trigger_value,omitempty"`
}

// NewAlertRuleUpdateReqRule instantiates a new AlertRuleUpdateReqRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertRuleUpdateReqRule() *AlertRuleUpdateReqRule {
	this := AlertRuleUpdateReqRule{}
	return &this
}

// NewAlertRuleUpdateReqRuleWithDefaults instantiates a new AlertRuleUpdateReqRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertRuleUpdateReqRuleWithDefaults() *AlertRuleUpdateReqRule {
	this := AlertRuleUpdateReqRule{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *AlertRuleUpdateReqRule) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRuleUpdateReqRule) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *AlertRuleUpdateReqRule) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *AlertRuleUpdateReqRule) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetTriggerPeriod returns the TriggerPeriod field value if set, zero value otherwise.
func (o *AlertRuleUpdateReqRule) GetTriggerPeriod() int64 {
	if o == nil || IsNil(o.TriggerPeriod) {
		var ret int64
		return ret
	}
	return *o.TriggerPeriod
}

// GetTriggerPeriodOk returns a tuple with the TriggerPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRuleUpdateReqRule) GetTriggerPeriodOk() (*int64, bool) {
	if o == nil || IsNil(o.TriggerPeriod) {
		return nil, false
	}
	return o.TriggerPeriod, true
}

// HasTriggerPeriod returns a boolean if a field has been set.
func (o *AlertRuleUpdateReqRule) HasTriggerPeriod() bool {
	if o != nil && !IsNil(o.TriggerPeriod) {
		return true
	}

	return false
}

// SetTriggerPeriod gets a reference to the given int64 and assigns it to the TriggerPeriod field.
func (o *AlertRuleUpdateReqRule) SetTriggerPeriod(v int64) {
	o.TriggerPeriod = &v
}

// GetTriggerValue returns the TriggerValue field value if set, zero value otherwise.
func (o *AlertRuleUpdateReqRule) GetTriggerValue() string {
	if o == nil || IsNil(o.TriggerValue) {
		var ret string
		return ret
	}
	return *o.TriggerValue
}

// GetTriggerValueOk returns a tuple with the TriggerValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRuleUpdateReqRule) GetTriggerValueOk() (*string, bool) {
	if o == nil || IsNil(o.TriggerValue) {
		return nil, false
	}
	return o.TriggerValue, true
}

// HasTriggerValue returns a boolean if a field has been set.
func (o *AlertRuleUpdateReqRule) HasTriggerValue() bool {
	if o != nil && !IsNil(o.TriggerValue) {
		return true
	}

	return false
}

// SetTriggerValue gets a reference to the given string and assigns it to the TriggerValue field.
func (o *AlertRuleUpdateReqRule) SetTriggerValue(v string) {
	o.TriggerValue = &v
}

func (o AlertRuleUpdateReqRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlertRuleUpdateReqRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.TriggerPeriod) {
		toSerialize["trigger_period"] = o.TriggerPeriod
	}
	if !IsNil(o.TriggerValue) {
		toSerialize["trigger_value"] = o.TriggerValue
	}
	return toSerialize, nil
}

type NullableAlertRuleUpdateReqRule struct {
	value *AlertRuleUpdateReqRule
	isSet bool
}

func (v NullableAlertRuleUpdateReqRule) Get() *AlertRuleUpdateReqRule {
	return v.value
}

func (v *NullableAlertRuleUpdateReqRule) Set(val *AlertRuleUpdateReqRule) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertRuleUpdateReqRule) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertRuleUpdateReqRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertRuleUpdateReqRule(val *AlertRuleUpdateReqRule) *NullableAlertRuleUpdateReqRule {
	return &NullableAlertRuleUpdateReqRule{value: val, isSet: true}
}

func (v NullableAlertRuleUpdateReqRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertRuleUpdateReqRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


