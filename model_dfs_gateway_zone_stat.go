/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the DfsGatewayZoneStat type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsGatewayZoneStat{}

// DfsGatewayZoneStat DfsGatewayZoneStat records dfs gateway zone stat info
type DfsGatewayZoneStat struct {
	Create *time.Time `json:"create,omitempty"`
	DataCacheHitRate *float64 `json:"data_cache_hit_rate,omitempty"`
	MetaCacheHitRate *float64 `json:"meta_cache_hit_rate,omitempty"`
	MetaDeleteLatencyUs *float64 `json:"meta_delete_latency_us,omitempty"`
	MetaDeleteOps *float64 `json:"meta_delete_ops,omitempty"`
	MetaListLatencyUs *float64 `json:"meta_list_latency_us,omitempty"`
	MetaListOps *float64 `json:"meta_list_ops,omitempty"`
	MetaReadLatencyUs *float64 `json:"meta_read_latency_us,omitempty"`
	MetaReadOps *float64 `json:"meta_read_ops,omitempty"`
	MetaWriteLatencyUs *float64 `json:"meta_write_latency_us,omitempty"`
	MetaWriteOps *float64 `json:"meta_write_ops,omitempty"`
	ReadAheadBandwidthKbyte *float64 `json:"read_ahead_bandwidth_kbyte,omitempty"`
	ReadAheadIops *float64 `json:"read_ahead_iops,omitempty"`
	ReadBandwidthKbyte *float64 `json:"read_bandwidth_kbyte,omitempty"`
	ReadIops *float64 `json:"read_iops,omitempty"`
	ReadLatencyUs *float64 `json:"read_latency_us,omitempty"`
	WriteBandwidthKbyte *float64 `json:"write_bandwidth_kbyte,omitempty"`
	WriteIops *float64 `json:"write_iops,omitempty"`
	WriteLatencyUs *float64 `json:"write_latency_us,omitempty"`
}

// NewDfsGatewayZoneStat instantiates a new DfsGatewayZoneStat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsGatewayZoneStat() *DfsGatewayZoneStat {
	this := DfsGatewayZoneStat{}
	return &this
}

// NewDfsGatewayZoneStatWithDefaults instantiates a new DfsGatewayZoneStat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsGatewayZoneStatWithDefaults() *DfsGatewayZoneStat {
	this := DfsGatewayZoneStat{}
	return &this
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *DfsGatewayZoneStat) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsGatewayZoneStat) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *DfsGatewayZoneStat) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *DfsGatewayZoneStat) SetCreate(v time.Time) {
	o.Create = &v
}

// GetDataCacheHitRate returns the DataCacheHitRate field value if set, zero value otherwise.
func (o *DfsGatewayZoneStat) GetDataCacheHitRate() float64 {
	if o == nil || IsNil(o.DataCacheHitRate) {
		var ret float64
		return ret
	}
	return *o.DataCacheHitRate
}

// GetDataCacheHitRateOk returns a tuple with the DataCacheHitRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsGatewayZoneStat) GetDataCacheHitRateOk() (*float64, bool) {
	if o == nil || IsNil(o.DataCacheHitRate) {
		return nil, false
	}
	return o.DataCacheHitRate, true
}

// HasDataCacheHitRate returns a boolean if a field has been set.
func (o *DfsGatewayZoneStat) HasDataCacheHitRate() bool {
	if o != nil && !IsNil(o.DataCacheHitRate) {
		return true
	}

	return false
}

// SetDataCacheHitRate gets a reference to the given float64 and assigns it to the DataCacheHitRate field.
func (o *DfsGatewayZoneStat) SetDataCacheHitRate(v float64) {
	o.DataCacheHitRate = &v
}

// GetMetaCacheHitRate returns the MetaCacheHitRate field value if set, zero value otherwise.
func (o *DfsGatewayZoneStat) GetMetaCacheHitRate() float64 {
	if o == nil || IsNil(o.MetaCacheHitRate) {
		var ret float64
		return ret
	}
	return *o.MetaCacheHitRate
}

// GetMetaCacheHitRateOk returns a tuple with the MetaCacheHitRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsGatewayZoneStat) GetMetaCacheHitRateOk() (*float64, bool) {
	if o == nil || IsNil(o.MetaCacheHitRate) {
		return nil, false
	}
	return o.MetaCacheHitRate, true
}

// HasMetaCacheHitRate returns a boolean if a field has been set.
func (o *DfsGatewayZoneStat) HasMetaCacheHitRate() bool {
	if o != nil && !IsNil(o.MetaCacheHitRate) {
		return true
	}

	return false
}

// SetMetaCacheHitRate gets a reference to the given float64 and assigns it to the MetaCacheHitRate field.
func (o *DfsGatewayZoneStat) SetMetaCacheHitRate(v float64) {
	o.MetaCacheHitRate = &v
}

// GetMetaDeleteLatencyUs returns the MetaDeleteLatencyUs field value if set, zero value otherwise.
func (o *DfsGatewayZoneStat) GetMetaDeleteLatencyUs() float64 {
	if o == nil || IsNil(o.MetaDeleteLatencyUs) {
		var ret float64
		return ret
	}
	return *o.MetaDeleteLatencyUs
}

// GetMetaDeleteLatencyUsOk returns a tuple with the MetaDeleteLatencyUs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsGatewayZoneStat) GetMetaDeleteLatencyUsOk() (*float64, bool) {
	if o == nil || IsNil(o.MetaDeleteLatencyUs) {
		return nil, false
	}
	return o.MetaDeleteLatencyUs, true
}

// HasMetaDeleteLatencyUs returns a boolean if a field has been set.
func (o *DfsGatewayZoneStat) HasMetaDeleteLatencyUs() bool {
	if o != nil && !IsNil(o.MetaDeleteLatencyUs) {
		return true
	}

	return false
}

// SetMetaDeleteLatencyUs gets a reference to the given float64 and assigns it to the MetaDeleteLatencyUs field.
func (o *DfsGatewayZoneStat) SetMetaDeleteLatencyUs(v float64) {
	o.MetaDeleteLatencyUs = &v
}

// GetMetaDeleteOps returns the MetaDeleteOps field value if set, zero value otherwise.
func (o *DfsGatewayZoneStat) GetMetaDeleteOps() float64 {
	if o == nil || IsNil(o.MetaDeleteOps) {
		var ret float64
		return ret
	}
	return *o.MetaDeleteOps
}

// GetMetaDeleteOpsOk returns a tuple with the MetaDeleteOps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsGatewayZoneStat) GetMetaDeleteOpsOk() (*float64, bool) {
	if o == nil || IsNil(o.MetaDeleteOps) {
		return nil, false
	}
	return o.MetaDeleteOps, true
}

// HasMetaDeleteOps returns a boolean if a field has been set.
func (o *DfsGatewayZoneStat) HasMetaDeleteOps() bool {
	if o != nil && !IsNil(o.MetaDeleteOps) {
		return true
	}

	return false
}

// SetMetaDeleteOps gets a reference to the given float64 and assigns it to the MetaDeleteOps field.
func (o *DfsGatewayZoneStat) SetMetaDeleteOps(v float64) {
	o.MetaDeleteOps = &v
}

// GetMetaListLatencyUs returns the MetaListLatencyUs field value if set, zero value otherwise.
func (o *DfsGatewayZoneStat) GetMetaListLatencyUs() float64 {
	if o == nil || IsNil(o.MetaListLatencyUs) {
		var ret float64
		return ret
	}
	return *o.MetaListLatencyUs
}

// GetMetaListLatencyUsOk returns a tuple with the MetaListLatencyUs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsGatewayZoneStat) GetMetaListLatencyUsOk() (*float64, bool) {
	if o == nil || IsNil(o.MetaListLatencyUs) {
		return nil, false
	}
	return o.MetaListLatencyUs, true
}

// HasMetaListLatencyUs returns a boolean if a field has been set.
func (o *DfsGatewayZoneStat) HasMetaListLatencyUs() bool {
	if o != nil && !IsNil(o.MetaListLatencyUs) {
		return true
	}

	return false
}

// SetMetaListLatencyUs gets a reference to the given float64 and assigns it to the MetaListLatencyUs field.
func (o *DfsGatewayZoneStat) SetMetaListLatencyUs(v float64) {
	o.MetaListLatencyUs = &v
}

// GetMetaListOps returns the MetaListOps field value if set, zero value otherwise.
func (o *DfsGatewayZoneStat) GetMetaListOps() float64 {
	if o == nil || IsNil(o.MetaListOps) {
		var ret float64
		return ret
	}
	return *o.MetaListOps
}

// GetMetaListOpsOk returns a tuple with the MetaListOps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsGatewayZoneStat) GetMetaListOpsOk() (*float64, bool) {
	if o == nil || IsNil(o.MetaListOps) {
		return nil, false
	}
	return o.MetaListOps, true
}

// HasMetaListOps returns a boolean if a field has been set.
func (o *DfsGatewayZoneStat) HasMetaListOps() bool {
	if o != nil && !IsNil(o.MetaListOps) {
		return true
	}

	return false
}

// SetMetaListOps gets a reference to the given float64 and assigns it to the MetaListOps field.
func (o *DfsGatewayZoneStat) SetMetaListOps(v float64) {
	o.MetaListOps = &v
}

// GetMetaReadLatencyUs returns the MetaReadLatencyUs field value if set, zero value otherwise.
func (o *DfsGatewayZoneStat) GetMetaReadLatencyUs() float64 {
	if o == nil || IsNil(o.MetaReadLatencyUs) {
		var ret float64
		return ret
	}
	return *o.MetaReadLatencyUs
}

// GetMetaReadLatencyUsOk returns a tuple with the MetaReadLatencyUs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsGatewayZoneStat) GetMetaReadLatencyUsOk() (*float64, bool) {
	if o == nil || IsNil(o.MetaReadLatencyUs) {
		return nil, false
	}
	return o.MetaReadLatencyUs, true
}

// HasMetaReadLatencyUs returns a boolean if a field has been set.
func (o *DfsGatewayZoneStat) HasMetaReadLatencyUs() bool {
	if o != nil && !IsNil(o.MetaReadLatencyUs) {
		return true
	}

	return false
}

// SetMetaReadLatencyUs gets a reference to the given float64 and assigns it to the MetaReadLatencyUs field.
func (o *DfsGatewayZoneStat) SetMetaReadLatencyUs(v float64) {
	o.MetaReadLatencyUs = &v
}

// GetMetaReadOps returns the MetaReadOps field value if set, zero value otherwise.
func (o *DfsGatewayZoneStat) GetMetaReadOps() float64 {
	if o == nil || IsNil(o.MetaReadOps) {
		var ret float64
		return ret
	}
	return *o.MetaReadOps
}

// GetMetaReadOpsOk returns a tuple with the MetaReadOps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsGatewayZoneStat) GetMetaReadOpsOk() (*float64, bool) {
	if o == nil || IsNil(o.MetaReadOps) {
		return nil, false
	}
	return o.MetaReadOps, true
}

// HasMetaReadOps returns a boolean if a field has been set.
func (o *DfsGatewayZoneStat) HasMetaReadOps() bool {
	if o != nil && !IsNil(o.MetaReadOps) {
		return true
	}

	return false
}

// SetMetaReadOps gets a reference to the given float64 and assigns it to the MetaReadOps field.
func (o *DfsGatewayZoneStat) SetMetaReadOps(v float64) {
	o.MetaReadOps = &v
}

// GetMetaWriteLatencyUs returns the MetaWriteLatencyUs field value if set, zero value otherwise.
func (o *DfsGatewayZoneStat) GetMetaWriteLatencyUs() float64 {
	if o == nil || IsNil(o.MetaWriteLatencyUs) {
		var ret float64
		return ret
	}
	return *o.MetaWriteLatencyUs
}

// GetMetaWriteLatencyUsOk returns a tuple with the MetaWriteLatencyUs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsGatewayZoneStat) GetMetaWriteLatencyUsOk() (*float64, bool) {
	if o == nil || IsNil(o.MetaWriteLatencyUs) {
		return nil, false
	}
	return o.MetaWriteLatencyUs, true
}

// HasMetaWriteLatencyUs returns a boolean if a field has been set.
func (o *DfsGatewayZoneStat) HasMetaWriteLatencyUs() bool {
	if o != nil && !IsNil(o.MetaWriteLatencyUs) {
		return true
	}

	return false
}

// SetMetaWriteLatencyUs gets a reference to the given float64 and assigns it to the MetaWriteLatencyUs field.
func (o *DfsGatewayZoneStat) SetMetaWriteLatencyUs(v float64) {
	o.MetaWriteLatencyUs = &v
}

// GetMetaWriteOps returns the MetaWriteOps field value if set, zero value otherwise.
func (o *DfsGatewayZoneStat) GetMetaWriteOps() float64 {
	if o == nil || IsNil(o.MetaWriteOps) {
		var ret float64
		return ret
	}
	return *o.MetaWriteOps
}

// GetMetaWriteOpsOk returns a tuple with the MetaWriteOps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsGatewayZoneStat) GetMetaWriteOpsOk() (*float64, bool) {
	if o == nil || IsNil(o.MetaWriteOps) {
		return nil, false
	}
	return o.MetaWriteOps, true
}

// HasMetaWriteOps returns a boolean if a field has been set.
func (o *DfsGatewayZoneStat) HasMetaWriteOps() bool {
	if o != nil && !IsNil(o.MetaWriteOps) {
		return true
	}

	return false
}

// SetMetaWriteOps gets a reference to the given float64 and assigns it to the MetaWriteOps field.
func (o *DfsGatewayZoneStat) SetMetaWriteOps(v float64) {
	o.MetaWriteOps = &v
}

// GetReadAheadBandwidthKbyte returns the ReadAheadBandwidthKbyte field value if set, zero value otherwise.
func (o *DfsGatewayZoneStat) GetReadAheadBandwidthKbyte() float64 {
	if o == nil || IsNil(o.ReadAheadBandwidthKbyte) {
		var ret float64
		return ret
	}
	return *o.ReadAheadBandwidthKbyte
}

// GetReadAheadBandwidthKbyteOk returns a tuple with the ReadAheadBandwidthKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsGatewayZoneStat) GetReadAheadBandwidthKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.ReadAheadBandwidthKbyte) {
		return nil, false
	}
	return o.ReadAheadBandwidthKbyte, true
}

// HasReadAheadBandwidthKbyte returns a boolean if a field has been set.
func (o *DfsGatewayZoneStat) HasReadAheadBandwidthKbyte() bool {
	if o != nil && !IsNil(o.ReadAheadBandwidthKbyte) {
		return true
	}

	return false
}

// SetReadAheadBandwidthKbyte gets a reference to the given float64 and assigns it to the ReadAheadBandwidthKbyte field.
func (o *DfsGatewayZoneStat) SetReadAheadBandwidthKbyte(v float64) {
	o.ReadAheadBandwidthKbyte = &v
}

// GetReadAheadIops returns the ReadAheadIops field value if set, zero value otherwise.
func (o *DfsGatewayZoneStat) GetReadAheadIops() float64 {
	if o == nil || IsNil(o.ReadAheadIops) {
		var ret float64
		return ret
	}
	return *o.ReadAheadIops
}

// GetReadAheadIopsOk returns a tuple with the ReadAheadIops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsGatewayZoneStat) GetReadAheadIopsOk() (*float64, bool) {
	if o == nil || IsNil(o.ReadAheadIops) {
		return nil, false
	}
	return o.ReadAheadIops, true
}

// HasReadAheadIops returns a boolean if a field has been set.
func (o *DfsGatewayZoneStat) HasReadAheadIops() bool {
	if o != nil && !IsNil(o.ReadAheadIops) {
		return true
	}

	return false
}

// SetReadAheadIops gets a reference to the given float64 and assigns it to the ReadAheadIops field.
func (o *DfsGatewayZoneStat) SetReadAheadIops(v float64) {
	o.ReadAheadIops = &v
}

// GetReadBandwidthKbyte returns the ReadBandwidthKbyte field value if set, zero value otherwise.
func (o *DfsGatewayZoneStat) GetReadBandwidthKbyte() float64 {
	if o == nil || IsNil(o.ReadBandwidthKbyte) {
		var ret float64
		return ret
	}
	return *o.ReadBandwidthKbyte
}

// GetReadBandwidthKbyteOk returns a tuple with the ReadBandwidthKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsGatewayZoneStat) GetReadBandwidthKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.ReadBandwidthKbyte) {
		return nil, false
	}
	return o.ReadBandwidthKbyte, true
}

// HasReadBandwidthKbyte returns a boolean if a field has been set.
func (o *DfsGatewayZoneStat) HasReadBandwidthKbyte() bool {
	if o != nil && !IsNil(o.ReadBandwidthKbyte) {
		return true
	}

	return false
}

// SetReadBandwidthKbyte gets a reference to the given float64 and assigns it to the ReadBandwidthKbyte field.
func (o *DfsGatewayZoneStat) SetReadBandwidthKbyte(v float64) {
	o.ReadBandwidthKbyte = &v
}

// GetReadIops returns the ReadIops field value if set, zero value otherwise.
func (o *DfsGatewayZoneStat) GetReadIops() float64 {
	if o == nil || IsNil(o.ReadIops) {
		var ret float64
		return ret
	}
	return *o.ReadIops
}

// GetReadIopsOk returns a tuple with the ReadIops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsGatewayZoneStat) GetReadIopsOk() (*float64, bool) {
	if o == nil || IsNil(o.ReadIops) {
		return nil, false
	}
	return o.ReadIops, true
}

// HasReadIops returns a boolean if a field has been set.
func (o *DfsGatewayZoneStat) HasReadIops() bool {
	if o != nil && !IsNil(o.ReadIops) {
		return true
	}

	return false
}

// SetReadIops gets a reference to the given float64 and assigns it to the ReadIops field.
func (o *DfsGatewayZoneStat) SetReadIops(v float64) {
	o.ReadIops = &v
}

// GetReadLatencyUs returns the ReadLatencyUs field value if set, zero value otherwise.
func (o *DfsGatewayZoneStat) GetReadLatencyUs() float64 {
	if o == nil || IsNil(o.ReadLatencyUs) {
		var ret float64
		return ret
	}
	return *o.ReadLatencyUs
}

// GetReadLatencyUsOk returns a tuple with the ReadLatencyUs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsGatewayZoneStat) GetReadLatencyUsOk() (*float64, bool) {
	if o == nil || IsNil(o.ReadLatencyUs) {
		return nil, false
	}
	return o.ReadLatencyUs, true
}

// HasReadLatencyUs returns a boolean if a field has been set.
func (o *DfsGatewayZoneStat) HasReadLatencyUs() bool {
	if o != nil && !IsNil(o.ReadLatencyUs) {
		return true
	}

	return false
}

// SetReadLatencyUs gets a reference to the given float64 and assigns it to the ReadLatencyUs field.
func (o *DfsGatewayZoneStat) SetReadLatencyUs(v float64) {
	o.ReadLatencyUs = &v
}

// GetWriteBandwidthKbyte returns the WriteBandwidthKbyte field value if set, zero value otherwise.
func (o *DfsGatewayZoneStat) GetWriteBandwidthKbyte() float64 {
	if o == nil || IsNil(o.WriteBandwidthKbyte) {
		var ret float64
		return ret
	}
	return *o.WriteBandwidthKbyte
}

// GetWriteBandwidthKbyteOk returns a tuple with the WriteBandwidthKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsGatewayZoneStat) GetWriteBandwidthKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.WriteBandwidthKbyte) {
		return nil, false
	}
	return o.WriteBandwidthKbyte, true
}

// HasWriteBandwidthKbyte returns a boolean if a field has been set.
func (o *DfsGatewayZoneStat) HasWriteBandwidthKbyte() bool {
	if o != nil && !IsNil(o.WriteBandwidthKbyte) {
		return true
	}

	return false
}

// SetWriteBandwidthKbyte gets a reference to the given float64 and assigns it to the WriteBandwidthKbyte field.
func (o *DfsGatewayZoneStat) SetWriteBandwidthKbyte(v float64) {
	o.WriteBandwidthKbyte = &v
}

// GetWriteIops returns the WriteIops field value if set, zero value otherwise.
func (o *DfsGatewayZoneStat) GetWriteIops() float64 {
	if o == nil || IsNil(o.WriteIops) {
		var ret float64
		return ret
	}
	return *o.WriteIops
}

// GetWriteIopsOk returns a tuple with the WriteIops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsGatewayZoneStat) GetWriteIopsOk() (*float64, bool) {
	if o == nil || IsNil(o.WriteIops) {
		return nil, false
	}
	return o.WriteIops, true
}

// HasWriteIops returns a boolean if a field has been set.
func (o *DfsGatewayZoneStat) HasWriteIops() bool {
	if o != nil && !IsNil(o.WriteIops) {
		return true
	}

	return false
}

// SetWriteIops gets a reference to the given float64 and assigns it to the WriteIops field.
func (o *DfsGatewayZoneStat) SetWriteIops(v float64) {
	o.WriteIops = &v
}

// GetWriteLatencyUs returns the WriteLatencyUs field value if set, zero value otherwise.
func (o *DfsGatewayZoneStat) GetWriteLatencyUs() float64 {
	if o == nil || IsNil(o.WriteLatencyUs) {
		var ret float64
		return ret
	}
	return *o.WriteLatencyUs
}

// GetWriteLatencyUsOk returns a tuple with the WriteLatencyUs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsGatewayZoneStat) GetWriteLatencyUsOk() (*float64, bool) {
	if o == nil || IsNil(o.WriteLatencyUs) {
		return nil, false
	}
	return o.WriteLatencyUs, true
}

// HasWriteLatencyUs returns a boolean if a field has been set.
func (o *DfsGatewayZoneStat) HasWriteLatencyUs() bool {
	if o != nil && !IsNil(o.WriteLatencyUs) {
		return true
	}

	return false
}

// SetWriteLatencyUs gets a reference to the given float64 and assigns it to the WriteLatencyUs field.
func (o *DfsGatewayZoneStat) SetWriteLatencyUs(v float64) {
	o.WriteLatencyUs = &v
}

func (o DfsGatewayZoneStat) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsGatewayZoneStat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.DataCacheHitRate) {
		toSerialize["data_cache_hit_rate"] = o.DataCacheHitRate
	}
	if !IsNil(o.MetaCacheHitRate) {
		toSerialize["meta_cache_hit_rate"] = o.MetaCacheHitRate
	}
	if !IsNil(o.MetaDeleteLatencyUs) {
		toSerialize["meta_delete_latency_us"] = o.MetaDeleteLatencyUs
	}
	if !IsNil(o.MetaDeleteOps) {
		toSerialize["meta_delete_ops"] = o.MetaDeleteOps
	}
	if !IsNil(o.MetaListLatencyUs) {
		toSerialize["meta_list_latency_us"] = o.MetaListLatencyUs
	}
	if !IsNil(o.MetaListOps) {
		toSerialize["meta_list_ops"] = o.MetaListOps
	}
	if !IsNil(o.MetaReadLatencyUs) {
		toSerialize["meta_read_latency_us"] = o.MetaReadLatencyUs
	}
	if !IsNil(o.MetaReadOps) {
		toSerialize["meta_read_ops"] = o.MetaReadOps
	}
	if !IsNil(o.MetaWriteLatencyUs) {
		toSerialize["meta_write_latency_us"] = o.MetaWriteLatencyUs
	}
	if !IsNil(o.MetaWriteOps) {
		toSerialize["meta_write_ops"] = o.MetaWriteOps
	}
	if !IsNil(o.ReadAheadBandwidthKbyte) {
		toSerialize["read_ahead_bandwidth_kbyte"] = o.ReadAheadBandwidthKbyte
	}
	if !IsNil(o.ReadAheadIops) {
		toSerialize["read_ahead_iops"] = o.ReadAheadIops
	}
	if !IsNil(o.ReadBandwidthKbyte) {
		toSerialize["read_bandwidth_kbyte"] = o.ReadBandwidthKbyte
	}
	if !IsNil(o.ReadIops) {
		toSerialize["read_iops"] = o.ReadIops
	}
	if !IsNil(o.ReadLatencyUs) {
		toSerialize["read_latency_us"] = o.ReadLatencyUs
	}
	if !IsNil(o.WriteBandwidthKbyte) {
		toSerialize["write_bandwidth_kbyte"] = o.WriteBandwidthKbyte
	}
	if !IsNil(o.WriteIops) {
		toSerialize["write_iops"] = o.WriteIops
	}
	if !IsNil(o.WriteLatencyUs) {
		toSerialize["write_latency_us"] = o.WriteLatencyUs
	}
	return toSerialize, nil
}

type NullableDfsGatewayZoneStat struct {
	value *DfsGatewayZoneStat
	isSet bool
}

func (v NullableDfsGatewayZoneStat) Get() *DfsGatewayZoneStat {
	return v.value
}

func (v *NullableDfsGatewayZoneStat) Set(val *DfsGatewayZoneStat) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsGatewayZoneStat) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsGatewayZoneStat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsGatewayZoneStat(val *DfsGatewayZoneStat) *NullableDfsGatewayZoneStat {
	return &NullableDfsGatewayZoneStat{value: val, isSet: true}
}

func (v NullableDfsGatewayZoneStat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsGatewayZoneStat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


