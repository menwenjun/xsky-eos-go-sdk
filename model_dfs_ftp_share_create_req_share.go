/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DfsFTPShareCreateReqShare type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsFTPShareCreateReqShare{}

// DfsFTPShareCreateReqShare struct for DfsFTPShareCreateReqShare
type DfsFTPShareCreateReqShare struct {
	// description of share
	Description *string `json:"description,omitempty"`
	// access control array
	DfsFtpShareAcls []DfsFTPShareACLReq `json:"dfs_ftp_share_acls,omitempty"`
	// gateway group id
	DfsGatewayGroupId *int64 `json:"dfs_gateway_group_id,omitempty"`
	// rootfs id
	DfsRootfsId int64 `json:"dfs_rootfs_id"`
	// name of share
	Name string `json:"name"`
	// diectrory path
	Path string `json:"path"`
}

type _DfsFTPShareCreateReqShare DfsFTPShareCreateReqShare

// NewDfsFTPShareCreateReqShare instantiates a new DfsFTPShareCreateReqShare object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsFTPShareCreateReqShare(dfsRootfsId int64, name string, path string) *DfsFTPShareCreateReqShare {
	this := DfsFTPShareCreateReqShare{}
	this.DfsRootfsId = dfsRootfsId
	this.Name = name
	this.Path = path
	return &this
}

// NewDfsFTPShareCreateReqShareWithDefaults instantiates a new DfsFTPShareCreateReqShare object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsFTPShareCreateReqShareWithDefaults() *DfsFTPShareCreateReqShare {
	this := DfsFTPShareCreateReqShare{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DfsFTPShareCreateReqShare) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFTPShareCreateReqShare) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DfsFTPShareCreateReqShare) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DfsFTPShareCreateReqShare) SetDescription(v string) {
	o.Description = &v
}

// GetDfsFtpShareAcls returns the DfsFtpShareAcls field value if set, zero value otherwise.
func (o *DfsFTPShareCreateReqShare) GetDfsFtpShareAcls() []DfsFTPShareACLReq {
	if o == nil || IsNil(o.DfsFtpShareAcls) {
		var ret []DfsFTPShareACLReq
		return ret
	}
	return o.DfsFtpShareAcls
}

// GetDfsFtpShareAclsOk returns a tuple with the DfsFtpShareAcls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFTPShareCreateReqShare) GetDfsFtpShareAclsOk() ([]DfsFTPShareACLReq, bool) {
	if o == nil || IsNil(o.DfsFtpShareAcls) {
		return nil, false
	}
	return o.DfsFtpShareAcls, true
}

// HasDfsFtpShareAcls returns a boolean if a field has been set.
func (o *DfsFTPShareCreateReqShare) HasDfsFtpShareAcls() bool {
	if o != nil && !IsNil(o.DfsFtpShareAcls) {
		return true
	}

	return false
}

// SetDfsFtpShareAcls gets a reference to the given []DfsFTPShareACLReq and assigns it to the DfsFtpShareAcls field.
func (o *DfsFTPShareCreateReqShare) SetDfsFtpShareAcls(v []DfsFTPShareACLReq) {
	o.DfsFtpShareAcls = v
}

// GetDfsGatewayGroupId returns the DfsGatewayGroupId field value if set, zero value otherwise.
func (o *DfsFTPShareCreateReqShare) GetDfsGatewayGroupId() int64 {
	if o == nil || IsNil(o.DfsGatewayGroupId) {
		var ret int64
		return ret
	}
	return *o.DfsGatewayGroupId
}

// GetDfsGatewayGroupIdOk returns a tuple with the DfsGatewayGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsFTPShareCreateReqShare) GetDfsGatewayGroupIdOk() (*int64, bool) {
	if o == nil || IsNil(o.DfsGatewayGroupId) {
		return nil, false
	}
	return o.DfsGatewayGroupId, true
}

// HasDfsGatewayGroupId returns a boolean if a field has been set.
func (o *DfsFTPShareCreateReqShare) HasDfsGatewayGroupId() bool {
	if o != nil && !IsNil(o.DfsGatewayGroupId) {
		return true
	}

	return false
}

// SetDfsGatewayGroupId gets a reference to the given int64 and assigns it to the DfsGatewayGroupId field.
func (o *DfsFTPShareCreateReqShare) SetDfsGatewayGroupId(v int64) {
	o.DfsGatewayGroupId = &v
}

// GetDfsRootfsId returns the DfsRootfsId field value
func (o *DfsFTPShareCreateReqShare) GetDfsRootfsId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DfsRootfsId
}

// GetDfsRootfsIdOk returns a tuple with the DfsRootfsId field value
// and a boolean to check if the value has been set.
func (o *DfsFTPShareCreateReqShare) GetDfsRootfsIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DfsRootfsId, true
}

// SetDfsRootfsId sets field value
func (o *DfsFTPShareCreateReqShare) SetDfsRootfsId(v int64) {
	o.DfsRootfsId = v
}

// GetName returns the Name field value
func (o *DfsFTPShareCreateReqShare) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DfsFTPShareCreateReqShare) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DfsFTPShareCreateReqShare) SetName(v string) {
	o.Name = v
}

// GetPath returns the Path field value
func (o *DfsFTPShareCreateReqShare) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *DfsFTPShareCreateReqShare) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *DfsFTPShareCreateReqShare) SetPath(v string) {
	o.Path = v
}

func (o DfsFTPShareCreateReqShare) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsFTPShareCreateReqShare) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DfsFtpShareAcls) {
		toSerialize["dfs_ftp_share_acls"] = o.DfsFtpShareAcls
	}
	if !IsNil(o.DfsGatewayGroupId) {
		toSerialize["dfs_gateway_group_id"] = o.DfsGatewayGroupId
	}
	toSerialize["dfs_rootfs_id"] = o.DfsRootfsId
	toSerialize["name"] = o.Name
	toSerialize["path"] = o.Path
	return toSerialize, nil
}

func (o *DfsFTPShareCreateReqShare) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dfs_rootfs_id",
		"name",
		"path",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDfsFTPShareCreateReqShare := _DfsFTPShareCreateReqShare{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDfsFTPShareCreateReqShare)

	if err != nil {
		return err
	}

	*o = DfsFTPShareCreateReqShare(varDfsFTPShareCreateReqShare)

	return err
}

type NullableDfsFTPShareCreateReqShare struct {
	value *DfsFTPShareCreateReqShare
	isSet bool
}

func (v NullableDfsFTPShareCreateReqShare) Get() *DfsFTPShareCreateReqShare {
	return v.value
}

func (v *NullableDfsFTPShareCreateReqShare) Set(val *DfsFTPShareCreateReqShare) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsFTPShareCreateReqShare) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsFTPShareCreateReqShare) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsFTPShareCreateReqShare(val *DfsFTPShareCreateReqShare) *NullableDfsFTPShareCreateReqShare {
	return &NullableDfsFTPShareCreateReqShare{value: val, isSet: true}
}

func (v NullableDfsFTPShareCreateReqShare) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsFTPShareCreateReqShare) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


