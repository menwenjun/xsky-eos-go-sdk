/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the VMFlavorResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VMFlavorResp{}

// VMFlavorResp struct for VMFlavorResp
type VMFlavorResp struct {
	VmFlavor *VMFlavor `json:"vm_flavor,omitempty"`
}

// NewVMFlavorResp instantiates a new VMFlavorResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVMFlavorResp() *VMFlavorResp {
	this := VMFlavorResp{}
	return &this
}

// NewVMFlavorRespWithDefaults instantiates a new VMFlavorResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVMFlavorRespWithDefaults() *VMFlavorResp {
	this := VMFlavorResp{}
	return &this
}

// GetVmFlavor returns the VmFlavor field value if set, zero value otherwise.
func (o *VMFlavorResp) GetVmFlavor() VMFlavor {
	if o == nil || IsNil(o.VmFlavor) {
		var ret VMFlavor
		return ret
	}
	return *o.VmFlavor
}

// GetVmFlavorOk returns a tuple with the VmFlavor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMFlavorResp) GetVmFlavorOk() (*VMFlavor, bool) {
	if o == nil || IsNil(o.VmFlavor) {
		return nil, false
	}
	return o.VmFlavor, true
}

// HasVmFlavor returns a boolean if a field has been set.
func (o *VMFlavorResp) HasVmFlavor() bool {
	if o != nil && !IsNil(o.VmFlavor) {
		return true
	}

	return false
}

// SetVmFlavor gets a reference to the given VMFlavor and assigns it to the VmFlavor field.
func (o *VMFlavorResp) SetVmFlavor(v VMFlavor) {
	o.VmFlavor = &v
}

func (o VMFlavorResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VMFlavorResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.VmFlavor) {
		toSerialize["vm_flavor"] = o.VmFlavor
	}
	return toSerialize, nil
}

type NullableVMFlavorResp struct {
	value *VMFlavorResp
	isSet bool
}

func (v NullableVMFlavorResp) Get() *VMFlavorResp {
	return v.value
}

func (v *NullableVMFlavorResp) Set(val *VMFlavorResp) {
	v.value = val
	v.isSet = true
}

func (v NullableVMFlavorResp) IsSet() bool {
	return v.isSet
}

func (v *NullableVMFlavorResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVMFlavorResp(val *VMFlavorResp) *NullableVMFlavorResp {
	return &NullableVMFlavorResp{value: val, isSet: true}
}

func (v NullableVMFlavorResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVMFlavorResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


