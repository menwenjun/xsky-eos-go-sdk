/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// FsUserGroupsAPIService FsUserGroupsAPI service
type FsUserGroupsAPIService service

type ApiAddFSUsersRequest struct {
	ctx context.Context
	ApiService *FsUserGroupsAPIService
	fsUserGroupId int64
	body *FSUserGroupAddUsersReq
}

// users info
func (r ApiAddFSUsersRequest) Body(body FSUserGroupAddUsersReq) ApiAddFSUsersRequest {
	r.body = &body
	return r
}

func (r ApiAddFSUsersRequest) Execute() (*FSUserGroupResp, *http.Response, error) {
	return r.ApiService.AddFSUsersExecute(r)
}

/*
AddFSUsers Method for AddFSUsers

add users to file storage user group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param fsUserGroupId user group id
 @return ApiAddFSUsersRequest
*/
func (a *FsUserGroupsAPIService) AddFSUsers(ctx context.Context, fsUserGroupId int64) ApiAddFSUsersRequest {
	return ApiAddFSUsersRequest{
		ApiService: a,
		ctx: ctx,
		fsUserGroupId: fsUserGroupId,
	}
}

// Execute executes the request
//  @return FSUserGroupResp
func (a *FsUserGroupsAPIService) AddFSUsersExecute(r ApiAddFSUsersRequest) (*FSUserGroupResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FSUserGroupResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FsUserGroupsAPIService.AddFSUsers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fs-user-groups/{fs_user_group_id}/fs-users"
	localVarPath = strings.Replace(localVarPath, "{"+"fs_user_group_id"+"}", url.PathEscape(parameterValueToString(r.fsUserGroupId, "fsUserGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateFSUserGroupRequest struct {
	ctx context.Context
	ApiService *FsUserGroupsAPIService
	body *FSUserGroupCreateReq
	clusterId *string
}

// user group info
func (r ApiCreateFSUserGroupRequest) Body(body FSUserGroupCreateReq) ApiCreateFSUserGroupRequest {
	r.body = &body
	return r
}

// cluster id
func (r ApiCreateFSUserGroupRequest) ClusterId(clusterId string) ApiCreateFSUserGroupRequest {
	r.clusterId = &clusterId
	return r
}

func (r ApiCreateFSUserGroupRequest) Execute() (*FSUserGroupResp, *http.Response, error) {
	return r.ApiService.CreateFSUserGroupExecute(r)
}

/*
CreateFSUserGroup Method for CreateFSUserGroup

Create file storage user group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateFSUserGroupRequest
*/
func (a *FsUserGroupsAPIService) CreateFSUserGroup(ctx context.Context) ApiCreateFSUserGroupRequest {
	return ApiCreateFSUserGroupRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FSUserGroupResp
func (a *FsUserGroupsAPIService) CreateFSUserGroupExecute(r ApiCreateFSUserGroupRequest) (*FSUserGroupResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FSUserGroupResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FsUserGroupsAPIService.CreateFSUserGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fs-user-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.clusterId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_id", r.clusterId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteFSUserGroupRequest struct {
	ctx context.Context
	ApiService *FsUserGroupsAPIService
	fsUserGroupId int64
}

func (r ApiDeleteFSUserGroupRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteFSUserGroupExecute(r)
}

/*
DeleteFSUserGroup Method for DeleteFSUserGroup

delete file storage user group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param fsUserGroupId user group id
 @return ApiDeleteFSUserGroupRequest
*/
func (a *FsUserGroupsAPIService) DeleteFSUserGroup(ctx context.Context, fsUserGroupId int64) ApiDeleteFSUserGroupRequest {
	return ApiDeleteFSUserGroupRequest{
		ApiService: a,
		ctx: ctx,
		fsUserGroupId: fsUserGroupId,
	}
}

// Execute executes the request
func (a *FsUserGroupsAPIService) DeleteFSUserGroupExecute(r ApiDeleteFSUserGroupRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FsUserGroupsAPIService.DeleteFSUserGroup")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fs-user-groups/{fs_user_group_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"fs_user_group_id"+"}", url.PathEscape(parameterValueToString(r.fsUserGroupId, "fsUserGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetFSUserGroupRequest struct {
	ctx context.Context
	ApiService *FsUserGroupsAPIService
	fsUserGroupId int64
}

func (r ApiGetFSUserGroupRequest) Execute() (*FSUserGroupResp, *http.Response, error) {
	return r.ApiService.GetFSUserGroupExecute(r)
}

/*
GetFSUserGroup Method for GetFSUserGroup

Get file storage user group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param fsUserGroupId user group id
 @return ApiGetFSUserGroupRequest
*/
func (a *FsUserGroupsAPIService) GetFSUserGroup(ctx context.Context, fsUserGroupId int64) ApiGetFSUserGroupRequest {
	return ApiGetFSUserGroupRequest{
		ApiService: a,
		ctx: ctx,
		fsUserGroupId: fsUserGroupId,
	}
}

// Execute executes the request
//  @return FSUserGroupResp
func (a *FsUserGroupsAPIService) GetFSUserGroupExecute(r ApiGetFSUserGroupRequest) (*FSUserGroupResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FSUserGroupResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FsUserGroupsAPIService.GetFSUserGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fs-user-groups/{fs_user_group_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"fs_user_group_id"+"}", url.PathEscape(parameterValueToString(r.fsUserGroupId, "fsUserGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListFSUserGroupsRequest struct {
	ctx context.Context
	ApiService *FsUserGroupsAPIService
	limit *int64
	offset *int64
	q *string
	sort *string
	clusterId *string
	type_ *string
	fsUserId *int64
	notDfsHdfsId *int64
	notDfsSmbShareId *int64
	groupId *int64
}

// paging param
func (r ApiListFSUserGroupsRequest) Limit(limit int64) ApiListFSUserGroupsRequest {
	r.limit = &limit
	return r
}

// paging param
func (r ApiListFSUserGroupsRequest) Offset(offset int64) ApiListFSUserGroupsRequest {
	r.offset = &offset
	return r
}

// query param of search
func (r ApiListFSUserGroupsRequest) Q(q string) ApiListFSUserGroupsRequest {
	r.q = &q
	return r
}

// sort param of search
func (r ApiListFSUserGroupsRequest) Sort(sort string) ApiListFSUserGroupsRequest {
	r.sort = &sort
	return r
}

// cluster id
func (r ApiListFSUserGroupsRequest) ClusterId(clusterId string) ApiListFSUserGroupsRequest {
	r.clusterId = &clusterId
	return r
}

// security type of file storage user group
func (r ApiListFSUserGroupsRequest) Type_(type_ string) ApiListFSUserGroupsRequest {
	r.type_ = &type_
	return r
}

// file storage user id
func (r ApiListFSUserGroupsRequest) FsUserId(fsUserId int64) ApiListFSUserGroupsRequest {
	r.fsUserId = &fsUserId
	return r
}

// id of dfs hdfs user groups not in
func (r ApiListFSUserGroupsRequest) NotDfsHdfsId(notDfsHdfsId int64) ApiListFSUserGroupsRequest {
	r.notDfsHdfsId = &notDfsHdfsId
	return r
}

// id of dfs smb share user groups not in
func (r ApiListFSUserGroupsRequest) NotDfsSmbShareId(notDfsSmbShareId int64) ApiListFSUserGroupsRequest {
	r.notDfsSmbShareId = &notDfsSmbShareId
	return r
}

// group id
func (r ApiListFSUserGroupsRequest) GroupId(groupId int64) ApiListFSUserGroupsRequest {
	r.groupId = &groupId
	return r
}

func (r ApiListFSUserGroupsRequest) Execute() (*FSUserGroupsResp, *http.Response, error) {
	return r.ApiService.ListFSUserGroupsExecute(r)
}

/*
ListFSUserGroups Method for ListFSUserGroups

List file storage user groups

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListFSUserGroupsRequest
*/
func (a *FsUserGroupsAPIService) ListFSUserGroups(ctx context.Context) ApiListFSUserGroupsRequest {
	return ApiListFSUserGroupsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FSUserGroupsResp
func (a *FsUserGroupsAPIService) ListFSUserGroupsExecute(r ApiListFSUserGroupsRequest) (*FSUserGroupsResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FSUserGroupsResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FsUserGroupsAPIService.ListFSUserGroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fs-user-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.clusterId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_id", r.clusterId, "form", "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "form", "")
	}
	if r.fsUserId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fs_user_id", r.fsUserId, "form", "")
	}
	if r.notDfsHdfsId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "not_dfs_hdfs_id", r.notDfsHdfsId, "form", "")
	}
	if r.notDfsSmbShareId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "not_dfs_smb_share_id", r.notDfsSmbShareId, "form", "")
	}
	if r.groupId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "group_id", r.groupId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRemoveFSUsersRequest struct {
	ctx context.Context
	ApiService *FsUserGroupsAPIService
	fsUserGroupId int64
	body *FSUserGroupRemoveUsersReq
}

// users info
func (r ApiRemoveFSUsersRequest) Body(body FSUserGroupRemoveUsersReq) ApiRemoveFSUsersRequest {
	r.body = &body
	return r
}

func (r ApiRemoveFSUsersRequest) Execute() (*FSUserGroupResp, *http.Response, error) {
	return r.ApiService.RemoveFSUsersExecute(r)
}

/*
RemoveFSUsers Method for RemoveFSUsers

remove users from file storage user group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param fsUserGroupId user group id
 @return ApiRemoveFSUsersRequest
*/
func (a *FsUserGroupsAPIService) RemoveFSUsers(ctx context.Context, fsUserGroupId int64) ApiRemoveFSUsersRequest {
	return ApiRemoveFSUsersRequest{
		ApiService: a,
		ctx: ctx,
		fsUserGroupId: fsUserGroupId,
	}
}

// Execute executes the request
//  @return FSUserGroupResp
func (a *FsUserGroupsAPIService) RemoveFSUsersExecute(r ApiRemoveFSUsersRequest) (*FSUserGroupResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FSUserGroupResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FsUserGroupsAPIService.RemoveFSUsers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fs-user-groups/{fs_user_group_id}/fs-users"
	localVarPath = strings.Replace(localVarPath, "{"+"fs_user_group_id"+"}", url.PathEscape(parameterValueToString(r.fsUserGroupId, "fsUserGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateFSUserGroupRequest struct {
	ctx context.Context
	ApiService *FsUserGroupsAPIService
	fsUserGroupId int64
	body *FSUserGroupUpdateReq
}

// user group info
func (r ApiUpdateFSUserGroupRequest) Body(body FSUserGroupUpdateReq) ApiUpdateFSUserGroupRequest {
	r.body = &body
	return r
}

func (r ApiUpdateFSUserGroupRequest) Execute() (*FSUserGroupResp, *http.Response, error) {
	return r.ApiService.UpdateFSUserGroupExecute(r)
}

/*
UpdateFSUserGroup Method for UpdateFSUserGroup

Update file storage user group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param fsUserGroupId user group id
 @return ApiUpdateFSUserGroupRequest
*/
func (a *FsUserGroupsAPIService) UpdateFSUserGroup(ctx context.Context, fsUserGroupId int64) ApiUpdateFSUserGroupRequest {
	return ApiUpdateFSUserGroupRequest{
		ApiService: a,
		ctx: ctx,
		fsUserGroupId: fsUserGroupId,
	}
}

// Execute executes the request
//  @return FSUserGroupResp
func (a *FsUserGroupsAPIService) UpdateFSUserGroupExecute(r ApiUpdateFSUserGroupRequest) (*FSUserGroupResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FSUserGroupResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FsUserGroupsAPIService.UpdateFSUserGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fs-user-groups/{fs_user_group_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"fs_user_group_id"+"}", url.PathEscape(parameterValueToString(r.fsUserGroupId, "fsUserGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
