/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DfsDirectoriesReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsDirectoriesReq{}

// DfsDirectoriesReq struct for DfsDirectoriesReq
type DfsDirectoriesReq struct {
	DfsDirectories DfsDirectoriesReqDirectories `json:"dfs_directories"`
}

type _DfsDirectoriesReq DfsDirectoriesReq

// NewDfsDirectoriesReq instantiates a new DfsDirectoriesReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsDirectoriesReq(dfsDirectories DfsDirectoriesReqDirectories) *DfsDirectoriesReq {
	this := DfsDirectoriesReq{}
	this.DfsDirectories = dfsDirectories
	return &this
}

// NewDfsDirectoriesReqWithDefaults instantiates a new DfsDirectoriesReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsDirectoriesReqWithDefaults() *DfsDirectoriesReq {
	this := DfsDirectoriesReq{}
	return &this
}

// GetDfsDirectories returns the DfsDirectories field value
func (o *DfsDirectoriesReq) GetDfsDirectories() DfsDirectoriesReqDirectories {
	if o == nil {
		var ret DfsDirectoriesReqDirectories
		return ret
	}

	return o.DfsDirectories
}

// GetDfsDirectoriesOk returns a tuple with the DfsDirectories field value
// and a boolean to check if the value has been set.
func (o *DfsDirectoriesReq) GetDfsDirectoriesOk() (*DfsDirectoriesReqDirectories, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DfsDirectories, true
}

// SetDfsDirectories sets field value
func (o *DfsDirectoriesReq) SetDfsDirectories(v DfsDirectoriesReqDirectories) {
	o.DfsDirectories = v
}

func (o DfsDirectoriesReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsDirectoriesReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dfs_directories"] = o.DfsDirectories
	return toSerialize, nil
}

func (o *DfsDirectoriesReq) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dfs_directories",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDfsDirectoriesReq := _DfsDirectoriesReq{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDfsDirectoriesReq)

	if err != nil {
		return err
	}

	*o = DfsDirectoriesReq(varDfsDirectoriesReq)

	return err
}

type NullableDfsDirectoriesReq struct {
	value *DfsDirectoriesReq
	isSet bool
}

func (v NullableDfsDirectoriesReq) Get() *DfsDirectoriesReq {
	return v.value
}

func (v *NullableDfsDirectoriesReq) Set(val *DfsDirectoriesReq) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsDirectoriesReq) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsDirectoriesReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsDirectoriesReq(val *DfsDirectoriesReq) *NullableDfsDirectoriesReq {
	return &NullableDfsDirectoriesReq{value: val, isSet: true}
}

func (v NullableDfsDirectoriesReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsDirectoriesReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


