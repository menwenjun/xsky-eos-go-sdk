/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the NetworkInterfaceResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkInterfaceResp{}

// NetworkInterfaceResp struct for NetworkInterfaceResp
type NetworkInterfaceResp struct {
	NetworkInterface *NetworkInterfaceRecord `json:"network_interface,omitempty"`
}

// NewNetworkInterfaceResp instantiates a new NetworkInterfaceResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkInterfaceResp() *NetworkInterfaceResp {
	this := NetworkInterfaceResp{}
	return &this
}

// NewNetworkInterfaceRespWithDefaults instantiates a new NetworkInterfaceResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkInterfaceRespWithDefaults() *NetworkInterfaceResp {
	this := NetworkInterfaceResp{}
	return &this
}

// GetNetworkInterface returns the NetworkInterface field value if set, zero value otherwise.
func (o *NetworkInterfaceResp) GetNetworkInterface() NetworkInterfaceRecord {
	if o == nil || IsNil(o.NetworkInterface) {
		var ret NetworkInterfaceRecord
		return ret
	}
	return *o.NetworkInterface
}

// GetNetworkInterfaceOk returns a tuple with the NetworkInterface field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInterfaceResp) GetNetworkInterfaceOk() (*NetworkInterfaceRecord, bool) {
	if o == nil || IsNil(o.NetworkInterface) {
		return nil, false
	}
	return o.NetworkInterface, true
}

// HasNetworkInterface returns a boolean if a field has been set.
func (o *NetworkInterfaceResp) HasNetworkInterface() bool {
	if o != nil && !IsNil(o.NetworkInterface) {
		return true
	}

	return false
}

// SetNetworkInterface gets a reference to the given NetworkInterfaceRecord and assigns it to the NetworkInterface field.
func (o *NetworkInterfaceResp) SetNetworkInterface(v NetworkInterfaceRecord) {
	o.NetworkInterface = &v
}

func (o NetworkInterfaceResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkInterfaceResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NetworkInterface) {
		toSerialize["network_interface"] = o.NetworkInterface
	}
	return toSerialize, nil
}

type NullableNetworkInterfaceResp struct {
	value *NetworkInterfaceResp
	isSet bool
}

func (v NullableNetworkInterfaceResp) Get() *NetworkInterfaceResp {
	return v.value
}

func (v *NullableNetworkInterfaceResp) Set(val *NetworkInterfaceResp) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkInterfaceResp) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkInterfaceResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkInterfaceResp(val *NetworkInterfaceResp) *NullableNetworkInterfaceResp {
	return &NullableNetworkInterfaceResp{value: val, isSet: true}
}

func (v NullableNetworkInterfaceResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkInterfaceResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


