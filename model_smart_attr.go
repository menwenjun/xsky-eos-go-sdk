/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the SmartAttr type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmartAttr{}

// SmartAttr SmartAttr defines disk smart attribute +X:model:generate
type SmartAttr struct {
	// sata only
	AttrId *int64 `json:"attr_id,omitempty"`
	Create *time.Time `json:"create,omitempty"`
	DeviceId *string `json:"device_id,omitempty"`
	Flag *string `json:"flag,omitempty"`
	Id *int64 `json:"id,omitempty"`
	// base
	Name *string `json:"name,omitempty"`
	RawValue *string `json:"raw_value,omitempty"`
	Status *string `json:"status,omitempty"`
	Thresh *string `json:"thresh,omitempty"`
	Type *string `json:"type,omitempty"`
	Value *string `json:"value,omitempty"`
	WhenFailed *string `json:"when_failed,omitempty"`
	Worst *string `json:"worst,omitempty"`
}

// NewSmartAttr instantiates a new SmartAttr object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmartAttr() *SmartAttr {
	this := SmartAttr{}
	return &this
}

// NewSmartAttrWithDefaults instantiates a new SmartAttr object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmartAttrWithDefaults() *SmartAttr {
	this := SmartAttr{}
	return &this
}

// GetAttrId returns the AttrId field value if set, zero value otherwise.
func (o *SmartAttr) GetAttrId() int64 {
	if o == nil || IsNil(o.AttrId) {
		var ret int64
		return ret
	}
	return *o.AttrId
}

// GetAttrIdOk returns a tuple with the AttrId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartAttr) GetAttrIdOk() (*int64, bool) {
	if o == nil || IsNil(o.AttrId) {
		return nil, false
	}
	return o.AttrId, true
}

// HasAttrId returns a boolean if a field has been set.
func (o *SmartAttr) HasAttrId() bool {
	if o != nil && !IsNil(o.AttrId) {
		return true
	}

	return false
}

// SetAttrId gets a reference to the given int64 and assigns it to the AttrId field.
func (o *SmartAttr) SetAttrId(v int64) {
	o.AttrId = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *SmartAttr) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartAttr) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *SmartAttr) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *SmartAttr) SetCreate(v time.Time) {
	o.Create = &v
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise.
func (o *SmartAttr) GetDeviceId() string {
	if o == nil || IsNil(o.DeviceId) {
		var ret string
		return ret
	}
	return *o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartAttr) GetDeviceIdOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceId) {
		return nil, false
	}
	return o.DeviceId, true
}

// HasDeviceId returns a boolean if a field has been set.
func (o *SmartAttr) HasDeviceId() bool {
	if o != nil && !IsNil(o.DeviceId) {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given string and assigns it to the DeviceId field.
func (o *SmartAttr) SetDeviceId(v string) {
	o.DeviceId = &v
}

// GetFlag returns the Flag field value if set, zero value otherwise.
func (o *SmartAttr) GetFlag() string {
	if o == nil || IsNil(o.Flag) {
		var ret string
		return ret
	}
	return *o.Flag
}

// GetFlagOk returns a tuple with the Flag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartAttr) GetFlagOk() (*string, bool) {
	if o == nil || IsNil(o.Flag) {
		return nil, false
	}
	return o.Flag, true
}

// HasFlag returns a boolean if a field has been set.
func (o *SmartAttr) HasFlag() bool {
	if o != nil && !IsNil(o.Flag) {
		return true
	}

	return false
}

// SetFlag gets a reference to the given string and assigns it to the Flag field.
func (o *SmartAttr) SetFlag(v string) {
	o.Flag = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SmartAttr) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartAttr) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SmartAttr) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *SmartAttr) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SmartAttr) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartAttr) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SmartAttr) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SmartAttr) SetName(v string) {
	o.Name = &v
}

// GetRawValue returns the RawValue field value if set, zero value otherwise.
func (o *SmartAttr) GetRawValue() string {
	if o == nil || IsNil(o.RawValue) {
		var ret string
		return ret
	}
	return *o.RawValue
}

// GetRawValueOk returns a tuple with the RawValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartAttr) GetRawValueOk() (*string, bool) {
	if o == nil || IsNil(o.RawValue) {
		return nil, false
	}
	return o.RawValue, true
}

// HasRawValue returns a boolean if a field has been set.
func (o *SmartAttr) HasRawValue() bool {
	if o != nil && !IsNil(o.RawValue) {
		return true
	}

	return false
}

// SetRawValue gets a reference to the given string and assigns it to the RawValue field.
func (o *SmartAttr) SetRawValue(v string) {
	o.RawValue = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SmartAttr) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartAttr) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SmartAttr) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *SmartAttr) SetStatus(v string) {
	o.Status = &v
}

// GetThresh returns the Thresh field value if set, zero value otherwise.
func (o *SmartAttr) GetThresh() string {
	if o == nil || IsNil(o.Thresh) {
		var ret string
		return ret
	}
	return *o.Thresh
}

// GetThreshOk returns a tuple with the Thresh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartAttr) GetThreshOk() (*string, bool) {
	if o == nil || IsNil(o.Thresh) {
		return nil, false
	}
	return o.Thresh, true
}

// HasThresh returns a boolean if a field has been set.
func (o *SmartAttr) HasThresh() bool {
	if o != nil && !IsNil(o.Thresh) {
		return true
	}

	return false
}

// SetThresh gets a reference to the given string and assigns it to the Thresh field.
func (o *SmartAttr) SetThresh(v string) {
	o.Thresh = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SmartAttr) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartAttr) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SmartAttr) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SmartAttr) SetType(v string) {
	o.Type = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *SmartAttr) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartAttr) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *SmartAttr) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *SmartAttr) SetValue(v string) {
	o.Value = &v
}

// GetWhenFailed returns the WhenFailed field value if set, zero value otherwise.
func (o *SmartAttr) GetWhenFailed() string {
	if o == nil || IsNil(o.WhenFailed) {
		var ret string
		return ret
	}
	return *o.WhenFailed
}

// GetWhenFailedOk returns a tuple with the WhenFailed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartAttr) GetWhenFailedOk() (*string, bool) {
	if o == nil || IsNil(o.WhenFailed) {
		return nil, false
	}
	return o.WhenFailed, true
}

// HasWhenFailed returns a boolean if a field has been set.
func (o *SmartAttr) HasWhenFailed() bool {
	if o != nil && !IsNil(o.WhenFailed) {
		return true
	}

	return false
}

// SetWhenFailed gets a reference to the given string and assigns it to the WhenFailed field.
func (o *SmartAttr) SetWhenFailed(v string) {
	o.WhenFailed = &v
}

// GetWorst returns the Worst field value if set, zero value otherwise.
func (o *SmartAttr) GetWorst() string {
	if o == nil || IsNil(o.Worst) {
		var ret string
		return ret
	}
	return *o.Worst
}

// GetWorstOk returns a tuple with the Worst field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartAttr) GetWorstOk() (*string, bool) {
	if o == nil || IsNil(o.Worst) {
		return nil, false
	}
	return o.Worst, true
}

// HasWorst returns a boolean if a field has been set.
func (o *SmartAttr) HasWorst() bool {
	if o != nil && !IsNil(o.Worst) {
		return true
	}

	return false
}

// SetWorst gets a reference to the given string and assigns it to the Worst field.
func (o *SmartAttr) SetWorst(v string) {
	o.Worst = &v
}

func (o SmartAttr) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmartAttr) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AttrId) {
		toSerialize["attr_id"] = o.AttrId
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.DeviceId) {
		toSerialize["device_id"] = o.DeviceId
	}
	if !IsNil(o.Flag) {
		toSerialize["flag"] = o.Flag
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.RawValue) {
		toSerialize["raw_value"] = o.RawValue
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Thresh) {
		toSerialize["thresh"] = o.Thresh
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.WhenFailed) {
		toSerialize["when_failed"] = o.WhenFailed
	}
	if !IsNil(o.Worst) {
		toSerialize["worst"] = o.Worst
	}
	return toSerialize, nil
}

type NullableSmartAttr struct {
	value *SmartAttr
	isSet bool
}

func (v NullableSmartAttr) Get() *SmartAttr {
	return v.value
}

func (v *NullableSmartAttr) Set(val *SmartAttr) {
	v.value = val
	v.isSet = true
}

func (v NullableSmartAttr) IsSet() bool {
	return v.isSet
}

func (v *NullableSmartAttr) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmartAttr(val *SmartAttr) *NullableSmartAttr {
	return &NullableSmartAttr{value: val, isSet: true}
}

func (v NullableSmartAttr) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmartAttr) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


