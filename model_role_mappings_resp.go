/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RoleMappingsResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoleMappingsResp{}

// RoleMappingsResp struct for RoleMappingsResp
type RoleMappingsResp struct {
	// role mappings
	RoleMappings []RoleMapping `json:"role_mappings,omitempty"`
}

// NewRoleMappingsResp instantiates a new RoleMappingsResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleMappingsResp() *RoleMappingsResp {
	this := RoleMappingsResp{}
	return &this
}

// NewRoleMappingsRespWithDefaults instantiates a new RoleMappingsResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleMappingsRespWithDefaults() *RoleMappingsResp {
	this := RoleMappingsResp{}
	return &this
}

// GetRoleMappings returns the RoleMappings field value if set, zero value otherwise.
func (o *RoleMappingsResp) GetRoleMappings() []RoleMapping {
	if o == nil || IsNil(o.RoleMappings) {
		var ret []RoleMapping
		return ret
	}
	return o.RoleMappings
}

// GetRoleMappingsOk returns a tuple with the RoleMappings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleMappingsResp) GetRoleMappingsOk() ([]RoleMapping, bool) {
	if o == nil || IsNil(o.RoleMappings) {
		return nil, false
	}
	return o.RoleMappings, true
}

// HasRoleMappings returns a boolean if a field has been set.
func (o *RoleMappingsResp) HasRoleMappings() bool {
	if o != nil && !IsNil(o.RoleMappings) {
		return true
	}

	return false
}

// SetRoleMappings gets a reference to the given []RoleMapping and assigns it to the RoleMappings field.
func (o *RoleMappingsResp) SetRoleMappings(v []RoleMapping) {
	o.RoleMappings = v
}

func (o RoleMappingsResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoleMappingsResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RoleMappings) {
		toSerialize["role_mappings"] = o.RoleMappings
	}
	return toSerialize, nil
}

type NullableRoleMappingsResp struct {
	value *RoleMappingsResp
	isSet bool
}

func (v NullableRoleMappingsResp) Get() *RoleMappingsResp {
	return v.value
}

func (v *NullableRoleMappingsResp) Set(val *RoleMappingsResp) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleMappingsResp) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleMappingsResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleMappingsResp(val *RoleMappingsResp) *NullableRoleMappingsResp {
	return &NullableRoleMappingsResp{value: val, isSet: true}
}

func (v NullableRoleMappingsResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleMappingsResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


