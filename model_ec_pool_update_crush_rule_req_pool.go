/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ECPoolUpdateCrushRuleReqPool type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ECPoolUpdateCrushRuleReqPool{}

// ECPoolUpdateCrushRuleReqPool struct for ECPoolUpdateCrushRuleReqPool
type ECPoolUpdateCrushRuleReqPool struct {
	CodingChunkNum int64 `json:"coding_chunk_num"`
	DataChunkNum int64 `json:"data_chunk_num"`
}

type _ECPoolUpdateCrushRuleReqPool ECPoolUpdateCrushRuleReqPool

// NewECPoolUpdateCrushRuleReqPool instantiates a new ECPoolUpdateCrushRuleReqPool object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewECPoolUpdateCrushRuleReqPool(codingChunkNum int64, dataChunkNum int64) *ECPoolUpdateCrushRuleReqPool {
	this := ECPoolUpdateCrushRuleReqPool{}
	this.CodingChunkNum = codingChunkNum
	this.DataChunkNum = dataChunkNum
	return &this
}

// NewECPoolUpdateCrushRuleReqPoolWithDefaults instantiates a new ECPoolUpdateCrushRuleReqPool object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewECPoolUpdateCrushRuleReqPoolWithDefaults() *ECPoolUpdateCrushRuleReqPool {
	this := ECPoolUpdateCrushRuleReqPool{}
	return &this
}

// GetCodingChunkNum returns the CodingChunkNum field value
func (o *ECPoolUpdateCrushRuleReqPool) GetCodingChunkNum() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CodingChunkNum
}

// GetCodingChunkNumOk returns a tuple with the CodingChunkNum field value
// and a boolean to check if the value has been set.
func (o *ECPoolUpdateCrushRuleReqPool) GetCodingChunkNumOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CodingChunkNum, true
}

// SetCodingChunkNum sets field value
func (o *ECPoolUpdateCrushRuleReqPool) SetCodingChunkNum(v int64) {
	o.CodingChunkNum = v
}

// GetDataChunkNum returns the DataChunkNum field value
func (o *ECPoolUpdateCrushRuleReqPool) GetDataChunkNum() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DataChunkNum
}

// GetDataChunkNumOk returns a tuple with the DataChunkNum field value
// and a boolean to check if the value has been set.
func (o *ECPoolUpdateCrushRuleReqPool) GetDataChunkNumOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataChunkNum, true
}

// SetDataChunkNum sets field value
func (o *ECPoolUpdateCrushRuleReqPool) SetDataChunkNum(v int64) {
	o.DataChunkNum = v
}

func (o ECPoolUpdateCrushRuleReqPool) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ECPoolUpdateCrushRuleReqPool) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["coding_chunk_num"] = o.CodingChunkNum
	toSerialize["data_chunk_num"] = o.DataChunkNum
	return toSerialize, nil
}

func (o *ECPoolUpdateCrushRuleReqPool) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"coding_chunk_num",
		"data_chunk_num",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varECPoolUpdateCrushRuleReqPool := _ECPoolUpdateCrushRuleReqPool{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varECPoolUpdateCrushRuleReqPool)

	if err != nil {
		return err
	}

	*o = ECPoolUpdateCrushRuleReqPool(varECPoolUpdateCrushRuleReqPool)

	return err
}

type NullableECPoolUpdateCrushRuleReqPool struct {
	value *ECPoolUpdateCrushRuleReqPool
	isSet bool
}

func (v NullableECPoolUpdateCrushRuleReqPool) Get() *ECPoolUpdateCrushRuleReqPool {
	return v.value
}

func (v *NullableECPoolUpdateCrushRuleReqPool) Set(val *ECPoolUpdateCrushRuleReqPool) {
	v.value = val
	v.isSet = true
}

func (v NullableECPoolUpdateCrushRuleReqPool) IsSet() bool {
	return v.isSet
}

func (v *NullableECPoolUpdateCrushRuleReqPool) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableECPoolUpdateCrushRuleReqPool(val *ECPoolUpdateCrushRuleReqPool) *NullableECPoolUpdateCrushRuleReqPool {
	return &NullableECPoolUpdateCrushRuleReqPool{value: val, isSet: true}
}

func (v NullableECPoolUpdateCrushRuleReqPool) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableECPoolUpdateCrushRuleReqPool) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


