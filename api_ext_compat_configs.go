/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// ExtCompatConfigsAPIService ExtCompatConfigsAPI service
type ExtCompatConfigsAPIService service

type ApiListExtCompatConfRequest struct {
	ctx context.Context
	ApiService *ExtCompatConfigsAPIService
	extName *string
	funcName *string
	policy *string
	hostId *int64
}

// filter the external interface name of ext compat conf
func (r ApiListExtCompatConfRequest) ExtName(extName string) ApiListExtCompatConfRequest {
	r.extName = &extName
	return r
}

// filter the function name of ext compat conf
func (r ApiListExtCompatConfRequest) FuncName(funcName string) ApiListExtCompatConfRequest {
	r.funcName = &funcName
	return r
}

// filter the policy of ext compat conf
func (r ApiListExtCompatConfRequest) Policy(policy string) ApiListExtCompatConfRequest {
	r.policy = &policy
	return r
}

// filter the host of ext compat conf, 0 for global config
func (r ApiListExtCompatConfRequest) HostId(hostId int64) ApiListExtCompatConfRequest {
	r.hostId = &hostId
	return r
}

func (r ApiListExtCompatConfRequest) Execute() (*ExtCompatConfResp, *http.Response, error) {
	return r.ApiService.ListExtCompatConfExecute(r)
}

/*
ListExtCompatConf Method for ListExtCompatConf

list ext compat conf

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListExtCompatConfRequest
*/
func (a *ExtCompatConfigsAPIService) ListExtCompatConf(ctx context.Context) ApiListExtCompatConfRequest {
	return ApiListExtCompatConfRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ExtCompatConfResp
func (a *ExtCompatConfigsAPIService) ListExtCompatConfExecute(r ApiListExtCompatConfRequest) (*ExtCompatConfResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExtCompatConfResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtCompatConfigsAPIService.ListExtCompatConf")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ext-compat-configs/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.extName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ext_name", r.extName, "form", "")
	}
	if r.funcName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "func_name", r.funcName, "form", "")
	}
	if r.policy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "policy", r.policy, "form", "")
	}
	if r.hostId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "host_id", r.hostId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSetExtCompatConfRequest struct {
	ctx context.Context
	ApiService *ExtCompatConfigsAPIService
	body *SetExtCompatConfReq
}

// ext compat conf
func (r ApiSetExtCompatConfRequest) Body(body SetExtCompatConfReq) ApiSetExtCompatConfRequest {
	r.body = &body
	return r
}

func (r ApiSetExtCompatConfRequest) Execute() (*SetExtCompatConfResp, *http.Response, error) {
	return r.ApiService.SetExtCompatConfExecute(r)
}

/*
SetExtCompatConf Method for SetExtCompatConf

set ext compat conf

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSetExtCompatConfRequest
*/
func (a *ExtCompatConfigsAPIService) SetExtCompatConf(ctx context.Context) ApiSetExtCompatConfRequest {
	return ApiSetExtCompatConfRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SetExtCompatConfResp
func (a *ExtCompatConfigsAPIService) SetExtCompatConfExecute(r ApiSetExtCompatConfRequest) (*SetExtCompatConfResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SetExtCompatConfResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtCompatConfigsAPIService.SetExtCompatConf")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ext-compat-configs/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
