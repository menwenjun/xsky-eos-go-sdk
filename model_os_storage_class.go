/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the OSStorageClass type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OSStorageClass{}

// OSStorageClass OSStorageClass is the model of os_storage_class
type OSStorageClass struct {
	ActivePoolIds []int64 `json:"active_pool_ids,omitempty"`
	ClassId *string `json:"class_id,omitempty"`
	Cluster *ClusterNestview `json:"cluster,omitempty"`
	Create *time.Time `json:"create,omitempty"`
	Description *string `json:"description,omitempty"`
	Id *int64 `json:"id,omitempty"`
	InactivePoolIds []int64 `json:"inactive_pool_ids,omitempty"`
	Name *string `json:"name,omitempty"`
	OsPolicy *ObjectStoragePolicy `json:"os_policy,omitempty"`
	OsPolicyId *int64 `json:"os_policy_id,omitempty"`
	Status *string `json:"status,omitempty"`
	Update *time.Time `json:"update,omitempty"`
}

// NewOSStorageClass instantiates a new OSStorageClass object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOSStorageClass() *OSStorageClass {
	this := OSStorageClass{}
	return &this
}

// NewOSStorageClassWithDefaults instantiates a new OSStorageClass object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOSStorageClassWithDefaults() *OSStorageClass {
	this := OSStorageClass{}
	return &this
}

// GetActivePoolIds returns the ActivePoolIds field value if set, zero value otherwise.
func (o *OSStorageClass) GetActivePoolIds() []int64 {
	if o == nil || IsNil(o.ActivePoolIds) {
		var ret []int64
		return ret
	}
	return o.ActivePoolIds
}

// GetActivePoolIdsOk returns a tuple with the ActivePoolIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSStorageClass) GetActivePoolIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.ActivePoolIds) {
		return nil, false
	}
	return o.ActivePoolIds, true
}

// HasActivePoolIds returns a boolean if a field has been set.
func (o *OSStorageClass) HasActivePoolIds() bool {
	if o != nil && !IsNil(o.ActivePoolIds) {
		return true
	}

	return false
}

// SetActivePoolIds gets a reference to the given []int64 and assigns it to the ActivePoolIds field.
func (o *OSStorageClass) SetActivePoolIds(v []int64) {
	o.ActivePoolIds = v
}

// GetClassId returns the ClassId field value if set, zero value otherwise.
func (o *OSStorageClass) GetClassId() string {
	if o == nil || IsNil(o.ClassId) {
		var ret string
		return ret
	}
	return *o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSStorageClass) GetClassIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClassId) {
		return nil, false
	}
	return o.ClassId, true
}

// HasClassId returns a boolean if a field has been set.
func (o *OSStorageClass) HasClassId() bool {
	if o != nil && !IsNil(o.ClassId) {
		return true
	}

	return false
}

// SetClassId gets a reference to the given string and assigns it to the ClassId field.
func (o *OSStorageClass) SetClassId(v string) {
	o.ClassId = &v
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *OSStorageClass) GetCluster() ClusterNestview {
	if o == nil || IsNil(o.Cluster) {
		var ret ClusterNestview
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSStorageClass) GetClusterOk() (*ClusterNestview, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *OSStorageClass) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given ClusterNestview and assigns it to the Cluster field.
func (o *OSStorageClass) SetCluster(v ClusterNestview) {
	o.Cluster = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *OSStorageClass) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSStorageClass) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *OSStorageClass) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *OSStorageClass) SetCreate(v time.Time) {
	o.Create = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *OSStorageClass) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSStorageClass) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *OSStorageClass) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *OSStorageClass) SetDescription(v string) {
	o.Description = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OSStorageClass) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSStorageClass) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OSStorageClass) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *OSStorageClass) SetId(v int64) {
	o.Id = &v
}

// GetInactivePoolIds returns the InactivePoolIds field value if set, zero value otherwise.
func (o *OSStorageClass) GetInactivePoolIds() []int64 {
	if o == nil || IsNil(o.InactivePoolIds) {
		var ret []int64
		return ret
	}
	return o.InactivePoolIds
}

// GetInactivePoolIdsOk returns a tuple with the InactivePoolIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSStorageClass) GetInactivePoolIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.InactivePoolIds) {
		return nil, false
	}
	return o.InactivePoolIds, true
}

// HasInactivePoolIds returns a boolean if a field has been set.
func (o *OSStorageClass) HasInactivePoolIds() bool {
	if o != nil && !IsNil(o.InactivePoolIds) {
		return true
	}

	return false
}

// SetInactivePoolIds gets a reference to the given []int64 and assigns it to the InactivePoolIds field.
func (o *OSStorageClass) SetInactivePoolIds(v []int64) {
	o.InactivePoolIds = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *OSStorageClass) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSStorageClass) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *OSStorageClass) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *OSStorageClass) SetName(v string) {
	o.Name = &v
}

// GetOsPolicy returns the OsPolicy field value if set, zero value otherwise.
func (o *OSStorageClass) GetOsPolicy() ObjectStoragePolicy {
	if o == nil || IsNil(o.OsPolicy) {
		var ret ObjectStoragePolicy
		return ret
	}
	return *o.OsPolicy
}

// GetOsPolicyOk returns a tuple with the OsPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSStorageClass) GetOsPolicyOk() (*ObjectStoragePolicy, bool) {
	if o == nil || IsNil(o.OsPolicy) {
		return nil, false
	}
	return o.OsPolicy, true
}

// HasOsPolicy returns a boolean if a field has been set.
func (o *OSStorageClass) HasOsPolicy() bool {
	if o != nil && !IsNil(o.OsPolicy) {
		return true
	}

	return false
}

// SetOsPolicy gets a reference to the given ObjectStoragePolicy and assigns it to the OsPolicy field.
func (o *OSStorageClass) SetOsPolicy(v ObjectStoragePolicy) {
	o.OsPolicy = &v
}

// GetOsPolicyId returns the OsPolicyId field value if set, zero value otherwise.
func (o *OSStorageClass) GetOsPolicyId() int64 {
	if o == nil || IsNil(o.OsPolicyId) {
		var ret int64
		return ret
	}
	return *o.OsPolicyId
}

// GetOsPolicyIdOk returns a tuple with the OsPolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSStorageClass) GetOsPolicyIdOk() (*int64, bool) {
	if o == nil || IsNil(o.OsPolicyId) {
		return nil, false
	}
	return o.OsPolicyId, true
}

// HasOsPolicyId returns a boolean if a field has been set.
func (o *OSStorageClass) HasOsPolicyId() bool {
	if o != nil && !IsNil(o.OsPolicyId) {
		return true
	}

	return false
}

// SetOsPolicyId gets a reference to the given int64 and assigns it to the OsPolicyId field.
func (o *OSStorageClass) SetOsPolicyId(v int64) {
	o.OsPolicyId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *OSStorageClass) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSStorageClass) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *OSStorageClass) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *OSStorageClass) SetStatus(v string) {
	o.Status = &v
}

// GetUpdate returns the Update field value if set, zero value otherwise.
func (o *OSStorageClass) GetUpdate() time.Time {
	if o == nil || IsNil(o.Update) {
		var ret time.Time
		return ret
	}
	return *o.Update
}

// GetUpdateOk returns a tuple with the Update field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSStorageClass) GetUpdateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Update) {
		return nil, false
	}
	return o.Update, true
}

// HasUpdate returns a boolean if a field has been set.
func (o *OSStorageClass) HasUpdate() bool {
	if o != nil && !IsNil(o.Update) {
		return true
	}

	return false
}

// SetUpdate gets a reference to the given time.Time and assigns it to the Update field.
func (o *OSStorageClass) SetUpdate(v time.Time) {
	o.Update = &v
}

func (o OSStorageClass) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OSStorageClass) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActivePoolIds) {
		toSerialize["active_pool_ids"] = o.ActivePoolIds
	}
	if !IsNil(o.ClassId) {
		toSerialize["class_id"] = o.ClassId
	}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.InactivePoolIds) {
		toSerialize["inactive_pool_ids"] = o.InactivePoolIds
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.OsPolicy) {
		toSerialize["os_policy"] = o.OsPolicy
	}
	if !IsNil(o.OsPolicyId) {
		toSerialize["os_policy_id"] = o.OsPolicyId
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Update) {
		toSerialize["update"] = o.Update
	}
	return toSerialize, nil
}

type NullableOSStorageClass struct {
	value *OSStorageClass
	isSet bool
}

func (v NullableOSStorageClass) Get() *OSStorageClass {
	return v.value
}

func (v *NullableOSStorageClass) Set(val *OSStorageClass) {
	v.value = val
	v.isSet = true
}

func (v NullableOSStorageClass) IsSet() bool {
	return v.isSet
}

func (v *NullableOSStorageClass) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOSStorageClass(val *OSStorageClass) *NullableOSStorageClass {
	return &NullableOSStorageClass{value: val, isSet: true}
}

func (v NullableOSStorageClass) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOSStorageClass) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


