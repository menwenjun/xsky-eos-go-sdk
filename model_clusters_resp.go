/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ClustersResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClustersResp{}

// ClustersResp struct for ClustersResp
type ClustersResp struct {
	Clusters []Cluster `json:"clusters,omitempty"`
}

// NewClustersResp instantiates a new ClustersResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClustersResp() *ClustersResp {
	this := ClustersResp{}
	return &this
}

// NewClustersRespWithDefaults instantiates a new ClustersResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClustersRespWithDefaults() *ClustersResp {
	this := ClustersResp{}
	return &this
}

// GetClusters returns the Clusters field value if set, zero value otherwise.
func (o *ClustersResp) GetClusters() []Cluster {
	if o == nil || IsNil(o.Clusters) {
		var ret []Cluster
		return ret
	}
	return o.Clusters
}

// GetClustersOk returns a tuple with the Clusters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClustersResp) GetClustersOk() ([]Cluster, bool) {
	if o == nil || IsNil(o.Clusters) {
		return nil, false
	}
	return o.Clusters, true
}

// HasClusters returns a boolean if a field has been set.
func (o *ClustersResp) HasClusters() bool {
	if o != nil && !IsNil(o.Clusters) {
		return true
	}

	return false
}

// SetClusters gets a reference to the given []Cluster and assigns it to the Clusters field.
func (o *ClustersResp) SetClusters(v []Cluster) {
	o.Clusters = v
}

func (o ClustersResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClustersResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Clusters) {
		toSerialize["clusters"] = o.Clusters
	}
	return toSerialize, nil
}

type NullableClustersResp struct {
	value *ClustersResp
	isSet bool
}

func (v NullableClustersResp) Get() *ClustersResp {
	return v.value
}

func (v *NullableClustersResp) Set(val *ClustersResp) {
	v.value = val
	v.isSet = true
}

func (v NullableClustersResp) IsSet() bool {
	return v.isSet
}

func (v *NullableClustersResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClustersResp(val *ClustersResp) *NullableClustersResp {
	return &NullableClustersResp{value: val, isSet: true}
}

func (v NullableClustersResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClustersResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


