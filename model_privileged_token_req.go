/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PrivilegedTokenReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrivilegedTokenReq{}

// PrivilegedTokenReq struct for PrivilegedTokenReq
type PrivilegedTokenReq struct {
	PrivilegedToken string `json:"privileged_token"`
}

type _PrivilegedTokenReq PrivilegedTokenReq

// NewPrivilegedTokenReq instantiates a new PrivilegedTokenReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrivilegedTokenReq(privilegedToken string) *PrivilegedTokenReq {
	this := PrivilegedTokenReq{}
	this.PrivilegedToken = privilegedToken
	return &this
}

// NewPrivilegedTokenReqWithDefaults instantiates a new PrivilegedTokenReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrivilegedTokenReqWithDefaults() *PrivilegedTokenReq {
	this := PrivilegedTokenReq{}
	return &this
}

// GetPrivilegedToken returns the PrivilegedToken field value
func (o *PrivilegedTokenReq) GetPrivilegedToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PrivilegedToken
}

// GetPrivilegedTokenOk returns a tuple with the PrivilegedToken field value
// and a boolean to check if the value has been set.
func (o *PrivilegedTokenReq) GetPrivilegedTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrivilegedToken, true
}

// SetPrivilegedToken sets field value
func (o *PrivilegedTokenReq) SetPrivilegedToken(v string) {
	o.PrivilegedToken = v
}

func (o PrivilegedTokenReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrivilegedTokenReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["privileged_token"] = o.PrivilegedToken
	return toSerialize, nil
}

func (o *PrivilegedTokenReq) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"privileged_token",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPrivilegedTokenReq := _PrivilegedTokenReq{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPrivilegedTokenReq)

	if err != nil {
		return err
	}

	*o = PrivilegedTokenReq(varPrivilegedTokenReq)

	return err
}

type NullablePrivilegedTokenReq struct {
	value *PrivilegedTokenReq
	isSet bool
}

func (v NullablePrivilegedTokenReq) Get() *PrivilegedTokenReq {
	return v.value
}

func (v *NullablePrivilegedTokenReq) Set(val *PrivilegedTokenReq) {
	v.value = val
	v.isSet = true
}

func (v NullablePrivilegedTokenReq) IsSet() bool {
	return v.isSet
}

func (v *NullablePrivilegedTokenReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrivilegedTokenReq(val *PrivilegedTokenReq) *NullablePrivilegedTokenReq {
	return &NullablePrivilegedTokenReq{value: val, isSet: true}
}

func (v NullablePrivilegedTokenReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrivilegedTokenReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


