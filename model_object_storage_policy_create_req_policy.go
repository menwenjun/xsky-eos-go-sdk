/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ObjectStoragePolicyCreateReqPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectStoragePolicyCreateReqPolicy{}

// ObjectStoragePolicyCreateReqPolicy struct for ObjectStoragePolicyCreateReqPolicy
type ObjectStoragePolicyCreateReqPolicy struct {
	CachePoolId *int64 `json:"cache_pool_id,omitempty"`
	Compress *bool `json:"compress,omitempty"`
	Crypto *bool `json:"crypto,omitempty"`
	Deduplication *bool `json:"deduplication,omitempty"`
	Description *string `json:"description,omitempty"`
	IndexPoolId int64 `json:"index_pool_id"`
	Name string `json:"name"`
	Shared *bool `json:"shared,omitempty"`
	StorageClasses []ObjectStoragePolicyCreateReqPolicyStorageClassesElt `json:"storage_classes"`
}

type _ObjectStoragePolicyCreateReqPolicy ObjectStoragePolicyCreateReqPolicy

// NewObjectStoragePolicyCreateReqPolicy instantiates a new ObjectStoragePolicyCreateReqPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectStoragePolicyCreateReqPolicy(indexPoolId int64, name string, storageClasses []ObjectStoragePolicyCreateReqPolicyStorageClassesElt) *ObjectStoragePolicyCreateReqPolicy {
	this := ObjectStoragePolicyCreateReqPolicy{}
	this.IndexPoolId = indexPoolId
	this.Name = name
	this.StorageClasses = storageClasses
	return &this
}

// NewObjectStoragePolicyCreateReqPolicyWithDefaults instantiates a new ObjectStoragePolicyCreateReqPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectStoragePolicyCreateReqPolicyWithDefaults() *ObjectStoragePolicyCreateReqPolicy {
	this := ObjectStoragePolicyCreateReqPolicy{}
	return &this
}

// GetCachePoolId returns the CachePoolId field value if set, zero value otherwise.
func (o *ObjectStoragePolicyCreateReqPolicy) GetCachePoolId() int64 {
	if o == nil || IsNil(o.CachePoolId) {
		var ret int64
		return ret
	}
	return *o.CachePoolId
}

// GetCachePoolIdOk returns a tuple with the CachePoolId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStoragePolicyCreateReqPolicy) GetCachePoolIdOk() (*int64, bool) {
	if o == nil || IsNil(o.CachePoolId) {
		return nil, false
	}
	return o.CachePoolId, true
}

// HasCachePoolId returns a boolean if a field has been set.
func (o *ObjectStoragePolicyCreateReqPolicy) HasCachePoolId() bool {
	if o != nil && !IsNil(o.CachePoolId) {
		return true
	}

	return false
}

// SetCachePoolId gets a reference to the given int64 and assigns it to the CachePoolId field.
func (o *ObjectStoragePolicyCreateReqPolicy) SetCachePoolId(v int64) {
	o.CachePoolId = &v
}

// GetCompress returns the Compress field value if set, zero value otherwise.
func (o *ObjectStoragePolicyCreateReqPolicy) GetCompress() bool {
	if o == nil || IsNil(o.Compress) {
		var ret bool
		return ret
	}
	return *o.Compress
}

// GetCompressOk returns a tuple with the Compress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStoragePolicyCreateReqPolicy) GetCompressOk() (*bool, bool) {
	if o == nil || IsNil(o.Compress) {
		return nil, false
	}
	return o.Compress, true
}

// HasCompress returns a boolean if a field has been set.
func (o *ObjectStoragePolicyCreateReqPolicy) HasCompress() bool {
	if o != nil && !IsNil(o.Compress) {
		return true
	}

	return false
}

// SetCompress gets a reference to the given bool and assigns it to the Compress field.
func (o *ObjectStoragePolicyCreateReqPolicy) SetCompress(v bool) {
	o.Compress = &v
}

// GetCrypto returns the Crypto field value if set, zero value otherwise.
func (o *ObjectStoragePolicyCreateReqPolicy) GetCrypto() bool {
	if o == nil || IsNil(o.Crypto) {
		var ret bool
		return ret
	}
	return *o.Crypto
}

// GetCryptoOk returns a tuple with the Crypto field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStoragePolicyCreateReqPolicy) GetCryptoOk() (*bool, bool) {
	if o == nil || IsNil(o.Crypto) {
		return nil, false
	}
	return o.Crypto, true
}

// HasCrypto returns a boolean if a field has been set.
func (o *ObjectStoragePolicyCreateReqPolicy) HasCrypto() bool {
	if o != nil && !IsNil(o.Crypto) {
		return true
	}

	return false
}

// SetCrypto gets a reference to the given bool and assigns it to the Crypto field.
func (o *ObjectStoragePolicyCreateReqPolicy) SetCrypto(v bool) {
	o.Crypto = &v
}

// GetDeduplication returns the Deduplication field value if set, zero value otherwise.
func (o *ObjectStoragePolicyCreateReqPolicy) GetDeduplication() bool {
	if o == nil || IsNil(o.Deduplication) {
		var ret bool
		return ret
	}
	return *o.Deduplication
}

// GetDeduplicationOk returns a tuple with the Deduplication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStoragePolicyCreateReqPolicy) GetDeduplicationOk() (*bool, bool) {
	if o == nil || IsNil(o.Deduplication) {
		return nil, false
	}
	return o.Deduplication, true
}

// HasDeduplication returns a boolean if a field has been set.
func (o *ObjectStoragePolicyCreateReqPolicy) HasDeduplication() bool {
	if o != nil && !IsNil(o.Deduplication) {
		return true
	}

	return false
}

// SetDeduplication gets a reference to the given bool and assigns it to the Deduplication field.
func (o *ObjectStoragePolicyCreateReqPolicy) SetDeduplication(v bool) {
	o.Deduplication = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ObjectStoragePolicyCreateReqPolicy) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStoragePolicyCreateReqPolicy) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ObjectStoragePolicyCreateReqPolicy) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ObjectStoragePolicyCreateReqPolicy) SetDescription(v string) {
	o.Description = &v
}

// GetIndexPoolId returns the IndexPoolId field value
func (o *ObjectStoragePolicyCreateReqPolicy) GetIndexPoolId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.IndexPoolId
}

// GetIndexPoolIdOk returns a tuple with the IndexPoolId field value
// and a boolean to check if the value has been set.
func (o *ObjectStoragePolicyCreateReqPolicy) GetIndexPoolIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IndexPoolId, true
}

// SetIndexPoolId sets field value
func (o *ObjectStoragePolicyCreateReqPolicy) SetIndexPoolId(v int64) {
	o.IndexPoolId = v
}

// GetName returns the Name field value
func (o *ObjectStoragePolicyCreateReqPolicy) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ObjectStoragePolicyCreateReqPolicy) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ObjectStoragePolicyCreateReqPolicy) SetName(v string) {
	o.Name = v
}

// GetShared returns the Shared field value if set, zero value otherwise.
func (o *ObjectStoragePolicyCreateReqPolicy) GetShared() bool {
	if o == nil || IsNil(o.Shared) {
		var ret bool
		return ret
	}
	return *o.Shared
}

// GetSharedOk returns a tuple with the Shared field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStoragePolicyCreateReqPolicy) GetSharedOk() (*bool, bool) {
	if o == nil || IsNil(o.Shared) {
		return nil, false
	}
	return o.Shared, true
}

// HasShared returns a boolean if a field has been set.
func (o *ObjectStoragePolicyCreateReqPolicy) HasShared() bool {
	if o != nil && !IsNil(o.Shared) {
		return true
	}

	return false
}

// SetShared gets a reference to the given bool and assigns it to the Shared field.
func (o *ObjectStoragePolicyCreateReqPolicy) SetShared(v bool) {
	o.Shared = &v
}

// GetStorageClasses returns the StorageClasses field value
func (o *ObjectStoragePolicyCreateReqPolicy) GetStorageClasses() []ObjectStoragePolicyCreateReqPolicyStorageClassesElt {
	if o == nil {
		var ret []ObjectStoragePolicyCreateReqPolicyStorageClassesElt
		return ret
	}

	return o.StorageClasses
}

// GetStorageClassesOk returns a tuple with the StorageClasses field value
// and a boolean to check if the value has been set.
func (o *ObjectStoragePolicyCreateReqPolicy) GetStorageClassesOk() ([]ObjectStoragePolicyCreateReqPolicyStorageClassesElt, bool) {
	if o == nil {
		return nil, false
	}
	return o.StorageClasses, true
}

// SetStorageClasses sets field value
func (o *ObjectStoragePolicyCreateReqPolicy) SetStorageClasses(v []ObjectStoragePolicyCreateReqPolicyStorageClassesElt) {
	o.StorageClasses = v
}

func (o ObjectStoragePolicyCreateReqPolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectStoragePolicyCreateReqPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CachePoolId) {
		toSerialize["cache_pool_id"] = o.CachePoolId
	}
	if !IsNil(o.Compress) {
		toSerialize["compress"] = o.Compress
	}
	if !IsNil(o.Crypto) {
		toSerialize["crypto"] = o.Crypto
	}
	if !IsNil(o.Deduplication) {
		toSerialize["deduplication"] = o.Deduplication
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["index_pool_id"] = o.IndexPoolId
	toSerialize["name"] = o.Name
	if !IsNil(o.Shared) {
		toSerialize["shared"] = o.Shared
	}
	toSerialize["storage_classes"] = o.StorageClasses
	return toSerialize, nil
}

func (o *ObjectStoragePolicyCreateReqPolicy) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"index_pool_id",
		"name",
		"storage_classes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varObjectStoragePolicyCreateReqPolicy := _ObjectStoragePolicyCreateReqPolicy{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varObjectStoragePolicyCreateReqPolicy)

	if err != nil {
		return err
	}

	*o = ObjectStoragePolicyCreateReqPolicy(varObjectStoragePolicyCreateReqPolicy)

	return err
}

type NullableObjectStoragePolicyCreateReqPolicy struct {
	value *ObjectStoragePolicyCreateReqPolicy
	isSet bool
}

func (v NullableObjectStoragePolicyCreateReqPolicy) Get() *ObjectStoragePolicyCreateReqPolicy {
	return v.value
}

func (v *NullableObjectStoragePolicyCreateReqPolicy) Set(val *ObjectStoragePolicyCreateReqPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectStoragePolicyCreateReqPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectStoragePolicyCreateReqPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectStoragePolicyCreateReqPolicy(val *ObjectStoragePolicyCreateReqPolicy) *NullableObjectStoragePolicyCreateReqPolicy {
	return &NullableObjectStoragePolicyCreateReqPolicy{value: val, isSet: true}
}

func (v NullableObjectStoragePolicyCreateReqPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectStoragePolicyCreateReqPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


