/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TargetsResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TargetsResp{}

// TargetsResp struct for TargetsResp
type TargetsResp struct {
	Targets []TargetRecord `json:"targets"`
}

type _TargetsResp TargetsResp

// NewTargetsResp instantiates a new TargetsResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTargetsResp(targets []TargetRecord) *TargetsResp {
	this := TargetsResp{}
	this.Targets = targets
	return &this
}

// NewTargetsRespWithDefaults instantiates a new TargetsResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTargetsRespWithDefaults() *TargetsResp {
	this := TargetsResp{}
	return &this
}

// GetTargets returns the Targets field value
func (o *TargetsResp) GetTargets() []TargetRecord {
	if o == nil {
		var ret []TargetRecord
		return ret
	}

	return o.Targets
}

// GetTargetsOk returns a tuple with the Targets field value
// and a boolean to check if the value has been set.
func (o *TargetsResp) GetTargetsOk() ([]TargetRecord, bool) {
	if o == nil {
		return nil, false
	}
	return o.Targets, true
}

// SetTargets sets field value
func (o *TargetsResp) SetTargets(v []TargetRecord) {
	o.Targets = v
}

func (o TargetsResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TargetsResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["targets"] = o.Targets
	return toSerialize, nil
}

func (o *TargetsResp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"targets",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTargetsResp := _TargetsResp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTargetsResp)

	if err != nil {
		return err
	}

	*o = TargetsResp(varTargetsResp)

	return err
}

type NullableTargetsResp struct {
	value *TargetsResp
	isSet bool
}

func (v NullableTargetsResp) Get() *TargetsResp {
	return v.value
}

func (v *NullableTargetsResp) Set(val *TargetsResp) {
	v.value = val
	v.isSet = true
}

func (v NullableTargetsResp) IsSet() bool {
	return v.isSet
}

func (v *NullableTargetsResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTargetsResp(val *TargetsResp) *NullableTargetsResp {
	return &NullableTargetsResp{value: val, isSet: true}
}

func (v NullableTargetsResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTargetsResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


