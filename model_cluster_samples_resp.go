/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ClusterSamplesResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterSamplesResp{}

// ClusterSamplesResp struct for ClusterSamplesResp
type ClusterSamplesResp struct {
	// cluster samples
	ClusterSamples []ClusterStat `json:"cluster_samples"`
}

type _ClusterSamplesResp ClusterSamplesResp

// NewClusterSamplesResp instantiates a new ClusterSamplesResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterSamplesResp(clusterSamples []ClusterStat) *ClusterSamplesResp {
	this := ClusterSamplesResp{}
	this.ClusterSamples = clusterSamples
	return &this
}

// NewClusterSamplesRespWithDefaults instantiates a new ClusterSamplesResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterSamplesRespWithDefaults() *ClusterSamplesResp {
	this := ClusterSamplesResp{}
	return &this
}

// GetClusterSamples returns the ClusterSamples field value
func (o *ClusterSamplesResp) GetClusterSamples() []ClusterStat {
	if o == nil {
		var ret []ClusterStat
		return ret
	}

	return o.ClusterSamples
}

// GetClusterSamplesOk returns a tuple with the ClusterSamples field value
// and a boolean to check if the value has been set.
func (o *ClusterSamplesResp) GetClusterSamplesOk() ([]ClusterStat, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClusterSamples, true
}

// SetClusterSamples sets field value
func (o *ClusterSamplesResp) SetClusterSamples(v []ClusterStat) {
	o.ClusterSamples = v
}

func (o ClusterSamplesResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterSamplesResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cluster_samples"] = o.ClusterSamples
	return toSerialize, nil
}

func (o *ClusterSamplesResp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cluster_samples",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClusterSamplesResp := _ClusterSamplesResp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varClusterSamplesResp)

	if err != nil {
		return err
	}

	*o = ClusterSamplesResp(varClusterSamplesResp)

	return err
}

type NullableClusterSamplesResp struct {
	value *ClusterSamplesResp
	isSet bool
}

func (v NullableClusterSamplesResp) Get() *ClusterSamplesResp {
	return v.value
}

func (v *NullableClusterSamplesResp) Set(val *ClusterSamplesResp) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterSamplesResp) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterSamplesResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterSamplesResp(val *ClusterSamplesResp) *NullableClusterSamplesResp {
	return &NullableClusterSamplesResp{value: val, isSet: true}
}

func (v NullableClusterSamplesResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterSamplesResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


