/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// BlockVolumeGroupSnapshotsAPIService BlockVolumeGroupSnapshotsAPI service
type BlockVolumeGroupSnapshotsAPIService service

type ApiCreateBlockVolumeGroupSnapshotRequest struct {
	ctx context.Context
	ApiService *BlockVolumeGroupSnapshotsAPIService
	body *VolumeGroupSnapshotCreateReq
	clusterId *string
}

// volume group snapshot info
func (r ApiCreateBlockVolumeGroupSnapshotRequest) Body(body VolumeGroupSnapshotCreateReq) ApiCreateBlockVolumeGroupSnapshotRequest {
	r.body = &body
	return r
}

// cluster id
func (r ApiCreateBlockVolumeGroupSnapshotRequest) ClusterId(clusterId string) ApiCreateBlockVolumeGroupSnapshotRequest {
	r.clusterId = &clusterId
	return r
}

func (r ApiCreateBlockVolumeGroupSnapshotRequest) Execute() (*VolumeGroupSnapshotResp, *http.Response, error) {
	return r.ApiService.CreateBlockVolumeGroupSnapshotExecute(r)
}

/*
CreateBlockVolumeGroupSnapshot Method for CreateBlockVolumeGroupSnapshot

Create block volume group snapshot

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateBlockVolumeGroupSnapshotRequest
*/
func (a *BlockVolumeGroupSnapshotsAPIService) CreateBlockVolumeGroupSnapshot(ctx context.Context) ApiCreateBlockVolumeGroupSnapshotRequest {
	return ApiCreateBlockVolumeGroupSnapshotRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return VolumeGroupSnapshotResp
func (a *BlockVolumeGroupSnapshotsAPIService) CreateBlockVolumeGroupSnapshotExecute(r ApiCreateBlockVolumeGroupSnapshotRequest) (*VolumeGroupSnapshotResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VolumeGroupSnapshotResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockVolumeGroupSnapshotsAPIService.CreateBlockVolumeGroupSnapshot")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/block-volume-group-snapshots/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.clusterId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_id", r.clusterId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteBlockVolumeGroupSnapshotRequest struct {
	ctx context.Context
	ApiService *BlockVolumeGroupSnapshotsAPIService
	blockVolumeGroupSnapshotId int64
}

func (r ApiDeleteBlockVolumeGroupSnapshotRequest) Execute() (*VolumeGroupSnapshotResp, *http.Response, error) {
	return r.ApiService.DeleteBlockVolumeGroupSnapshotExecute(r)
}

/*
DeleteBlockVolumeGroupSnapshot Method for DeleteBlockVolumeGroupSnapshot

Delete a block volume group snapshot

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param blockVolumeGroupSnapshotId block volume group snapshot id
 @return ApiDeleteBlockVolumeGroupSnapshotRequest
*/
func (a *BlockVolumeGroupSnapshotsAPIService) DeleteBlockVolumeGroupSnapshot(ctx context.Context, blockVolumeGroupSnapshotId int64) ApiDeleteBlockVolumeGroupSnapshotRequest {
	return ApiDeleteBlockVolumeGroupSnapshotRequest{
		ApiService: a,
		ctx: ctx,
		blockVolumeGroupSnapshotId: blockVolumeGroupSnapshotId,
	}
}

// Execute executes the request
//  @return VolumeGroupSnapshotResp
func (a *BlockVolumeGroupSnapshotsAPIService) DeleteBlockVolumeGroupSnapshotExecute(r ApiDeleteBlockVolumeGroupSnapshotRequest) (*VolumeGroupSnapshotResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VolumeGroupSnapshotResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockVolumeGroupSnapshotsAPIService.DeleteBlockVolumeGroupSnapshot")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/block-volume-group-snapshots/{block_volume_group_snapshot_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"block_volume_group_snapshot_id"+"}", url.PathEscape(parameterValueToString(r.blockVolumeGroupSnapshotId, "blockVolumeGroupSnapshotId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetBlockVolumeGroupSnapshotRequest struct {
	ctx context.Context
	ApiService *BlockVolumeGroupSnapshotsAPIService
	blockVolumeGroupSnapshotId int64
}

func (r ApiGetBlockVolumeGroupSnapshotRequest) Execute() (*VolumeGroupSnapshotResp, *http.Response, error) {
	return r.ApiService.GetBlockVolumeGroupSnapshotExecute(r)
}

/*
GetBlockVolumeGroupSnapshot Method for GetBlockVolumeGroupSnapshot

get block volume group snapshot

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param blockVolumeGroupSnapshotId the block volume group snapshot id
 @return ApiGetBlockVolumeGroupSnapshotRequest
*/
func (a *BlockVolumeGroupSnapshotsAPIService) GetBlockVolumeGroupSnapshot(ctx context.Context, blockVolumeGroupSnapshotId int64) ApiGetBlockVolumeGroupSnapshotRequest {
	return ApiGetBlockVolumeGroupSnapshotRequest{
		ApiService: a,
		ctx: ctx,
		blockVolumeGroupSnapshotId: blockVolumeGroupSnapshotId,
	}
}

// Execute executes the request
//  @return VolumeGroupSnapshotResp
func (a *BlockVolumeGroupSnapshotsAPIService) GetBlockVolumeGroupSnapshotExecute(r ApiGetBlockVolumeGroupSnapshotRequest) (*VolumeGroupSnapshotResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VolumeGroupSnapshotResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockVolumeGroupSnapshotsAPIService.GetBlockVolumeGroupSnapshot")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/block-volume-group-snapshots/{block_volume_group_snapshot_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"block_volume_group_snapshot_id"+"}", url.PathEscape(parameterValueToString(r.blockVolumeGroupSnapshotId, "blockVolumeGroupSnapshotId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListBlockVolumeGroupSnapshotsRequest struct {
	ctx context.Context
	ApiService *BlockVolumeGroupSnapshotsAPIService
	clusterId *string
	blockVolumeGroupId *int64
	name *string
	passive *bool
	limit *int64
	offset *int64
	q *string
	sort *string
}

// cluster id
func (r ApiListBlockVolumeGroupSnapshotsRequest) ClusterId(clusterId string) ApiListBlockVolumeGroupSnapshotsRequest {
	r.clusterId = &clusterId
	return r
}

// related volume group id
func (r ApiListBlockVolumeGroupSnapshotsRequest) BlockVolumeGroupId(blockVolumeGroupId int64) ApiListBlockVolumeGroupSnapshotsRequest {
	r.blockVolumeGroupId = &blockVolumeGroupId
	return r
}

// name of volume group snapshot
func (r ApiListBlockVolumeGroupSnapshotsRequest) Name(name string) ApiListBlockVolumeGroupSnapshotsRequest {
	r.name = &name
	return r
}

// passive or not
func (r ApiListBlockVolumeGroupSnapshotsRequest) Passive(passive bool) ApiListBlockVolumeGroupSnapshotsRequest {
	r.passive = &passive
	return r
}

// paging param
func (r ApiListBlockVolumeGroupSnapshotsRequest) Limit(limit int64) ApiListBlockVolumeGroupSnapshotsRequest {
	r.limit = &limit
	return r
}

// paging param
func (r ApiListBlockVolumeGroupSnapshotsRequest) Offset(offset int64) ApiListBlockVolumeGroupSnapshotsRequest {
	r.offset = &offset
	return r
}

// query param of search
func (r ApiListBlockVolumeGroupSnapshotsRequest) Q(q string) ApiListBlockVolumeGroupSnapshotsRequest {
	r.q = &q
	return r
}

// sort param of search
func (r ApiListBlockVolumeGroupSnapshotsRequest) Sort(sort string) ApiListBlockVolumeGroupSnapshotsRequest {
	r.sort = &sort
	return r
}

func (r ApiListBlockVolumeGroupSnapshotsRequest) Execute() (*VolumeGroupSnapshotsResp, *http.Response, error) {
	return r.ApiService.ListBlockVolumeGroupSnapshotsExecute(r)
}

/*
ListBlockVolumeGroupSnapshots Method for ListBlockVolumeGroupSnapshots

List block volume group snapshots

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListBlockVolumeGroupSnapshotsRequest
*/
func (a *BlockVolumeGroupSnapshotsAPIService) ListBlockVolumeGroupSnapshots(ctx context.Context) ApiListBlockVolumeGroupSnapshotsRequest {
	return ApiListBlockVolumeGroupSnapshotsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return VolumeGroupSnapshotsResp
func (a *BlockVolumeGroupSnapshotsAPIService) ListBlockVolumeGroupSnapshotsExecute(r ApiListBlockVolumeGroupSnapshotsRequest) (*VolumeGroupSnapshotsResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VolumeGroupSnapshotsResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockVolumeGroupSnapshotsAPIService.ListBlockVolumeGroupSnapshots")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/block-volume-group-snapshots/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.clusterId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_id", r.clusterId, "form", "")
	}
	if r.blockVolumeGroupId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "block_volume_group_id", r.blockVolumeGroupId, "form", "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.passive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "passive", r.passive, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateBlockVolumeGroupSnapshotRequest struct {
	ctx context.Context
	ApiService *BlockVolumeGroupSnapshotsAPIService
	blockVolumeGroupSnapshotId int64
	body *VolumeGroupSnapshotUpdateReq
}

// volume group snapshot info
func (r ApiUpdateBlockVolumeGroupSnapshotRequest) Body(body VolumeGroupSnapshotUpdateReq) ApiUpdateBlockVolumeGroupSnapshotRequest {
	r.body = &body
	return r
}

func (r ApiUpdateBlockVolumeGroupSnapshotRequest) Execute() (*VolumeGroupSnapshotResp, *http.Response, error) {
	return r.ApiService.UpdateBlockVolumeGroupSnapshotExecute(r)
}

/*
UpdateBlockVolumeGroupSnapshot Method for UpdateBlockVolumeGroupSnapshot

Update block volume group snapshot

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param blockVolumeGroupSnapshotId the block volume group snapshot id
 @return ApiUpdateBlockVolumeGroupSnapshotRequest
*/
func (a *BlockVolumeGroupSnapshotsAPIService) UpdateBlockVolumeGroupSnapshot(ctx context.Context, blockVolumeGroupSnapshotId int64) ApiUpdateBlockVolumeGroupSnapshotRequest {
	return ApiUpdateBlockVolumeGroupSnapshotRequest{
		ApiService: a,
		ctx: ctx,
		blockVolumeGroupSnapshotId: blockVolumeGroupSnapshotId,
	}
}

// Execute executes the request
//  @return VolumeGroupSnapshotResp
func (a *BlockVolumeGroupSnapshotsAPIService) UpdateBlockVolumeGroupSnapshotExecute(r ApiUpdateBlockVolumeGroupSnapshotRequest) (*VolumeGroupSnapshotResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VolumeGroupSnapshotResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockVolumeGroupSnapshotsAPIService.UpdateBlockVolumeGroupSnapshot")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/block-volume-group-snapshots/{block_volume_group_snapshot_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"block_volume_group_snapshot_id"+"}", url.PathEscape(parameterValueToString(r.blockVolumeGroupSnapshotId, "blockVolumeGroupSnapshotId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Xms-Auth-Token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenInQuery"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
