/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DfsQuotasResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsQuotasResp{}

// DfsQuotasResp struct for DfsQuotasResp
type DfsQuotasResp struct {
	// dfs quota records
	DfsQuotas []DfsQuotaRecord `json:"dfs_quotas,omitempty"`
}

// NewDfsQuotasResp instantiates a new DfsQuotasResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsQuotasResp() *DfsQuotasResp {
	this := DfsQuotasResp{}
	return &this
}

// NewDfsQuotasRespWithDefaults instantiates a new DfsQuotasResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsQuotasRespWithDefaults() *DfsQuotasResp {
	this := DfsQuotasResp{}
	return &this
}

// GetDfsQuotas returns the DfsQuotas field value if set, zero value otherwise.
func (o *DfsQuotasResp) GetDfsQuotas() []DfsQuotaRecord {
	if o == nil || IsNil(o.DfsQuotas) {
		var ret []DfsQuotaRecord
		return ret
	}
	return o.DfsQuotas
}

// GetDfsQuotasOk returns a tuple with the DfsQuotas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsQuotasResp) GetDfsQuotasOk() ([]DfsQuotaRecord, bool) {
	if o == nil || IsNil(o.DfsQuotas) {
		return nil, false
	}
	return o.DfsQuotas, true
}

// HasDfsQuotas returns a boolean if a field has been set.
func (o *DfsQuotasResp) HasDfsQuotas() bool {
	if o != nil && !IsNil(o.DfsQuotas) {
		return true
	}

	return false
}

// SetDfsQuotas gets a reference to the given []DfsQuotaRecord and assigns it to the DfsQuotas field.
func (o *DfsQuotasResp) SetDfsQuotas(v []DfsQuotaRecord) {
	o.DfsQuotas = v
}

func (o DfsQuotasResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsQuotasResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DfsQuotas) {
		toSerialize["dfs_quotas"] = o.DfsQuotas
	}
	return toSerialize, nil
}

type NullableDfsQuotasResp struct {
	value *DfsQuotasResp
	isSet bool
}

func (v NullableDfsQuotasResp) Get() *DfsQuotasResp {
	return v.value
}

func (v *NullableDfsQuotasResp) Set(val *DfsQuotasResp) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsQuotasResp) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsQuotasResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsQuotasResp(val *DfsQuotasResp) *NullableDfsQuotasResp {
	return &NullableDfsQuotasResp{value: val, isSet: true}
}

func (v NullableDfsQuotasResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsQuotasResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


