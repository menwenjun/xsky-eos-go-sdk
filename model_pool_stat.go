/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the PoolStat type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PoolStat{}

// PoolStat PoolStat contains pool stats data
type PoolStat struct {
	ActualKbyte *int64 `json:"actual_kbyte,omitempty"`
	// actual_kbyte*(1-reserved_data_percent)
	AvailableActualKbyte *float64 `json:"available_actual_kbyte,omitempty"`
	ClientReadBandwidthKbyte *float64 `json:"client_read_bandwidth_kbyte,omitempty"`
	ClientReadIoSizeKbyte *float64 `json:"client_read_io_size_kbyte,omitempty"`
	ClientReadIops *float64 `json:"client_read_iops,omitempty"`
	ClientReadLatencyUs *float64 `json:"client_read_latency_us,omitempty"`
	ClientWriteBandwidthKbyte *float64 `json:"client_write_bandwidth_kbyte,omitempty"`
	ClientWriteIoSizeKbyte *float64 `json:"client_write_io_size_kbyte,omitempty"`
	ClientWriteIops *float64 `json:"client_write_iops,omitempty"`
	ClientWriteLatencyUs *float64 `json:"client_write_latency_us,omitempty"`
	CompressRatio *float64 `json:"compress_ratio,omitempty"`
	CompressedKbyte *float64 `json:"compressed_kbyte,omitempty"`
	Create *time.Time `json:"create,omitempty"`
	CreatingNum *int64 `json:"creating_num,omitempty"`
	DataKbyte *int64 `json:"data_kbyte,omitempty"`
	DegradedNum *int64 `json:"degraded_num,omitempty"`
	DegradedPercent *float64 `json:"degraded_percent,omitempty"`
	ErrorKbyte *int64 `json:"error_kbyte,omitempty"`
	FlushReadBandwidthKbyte *float64 `json:"flush_read_bandwidth_kbyte,omitempty"`
	FlushReadIoSizeKbyte *float64 `json:"flush_read_io_size_kbyte,omitempty"`
	FlushReadIops *float64 `json:"flush_read_iops,omitempty"`
	FlushReadLatencyUs *float64 `json:"flush_read_latency_us,omitempty"`
	FlushWriteBandwidthKbyte *float64 `json:"flush_write_bandwidth_kbyte,omitempty"`
	FlushWriteIoSizeKbyte *float64 `json:"flush_write_io_size_kbyte,omitempty"`
	FlushWriteIops *float64 `json:"flush_write_iops,omitempty"`
	FlushWriteLatencyUs *float64 `json:"flush_write_latency_us,omitempty"`
	GarbageRatio *float64 `json:"garbage_ratio,omitempty"`
	GcReadBandwidthKbyte *float64 `json:"gc_read_bandwidth_kbyte,omitempty"`
	GcReadIoSizeKbyte *float64 `json:"gc_read_io_size_kbyte,omitempty"`
	GcReadIops *float64 `json:"gc_read_iops,omitempty"`
	GcReadLatencyUs *float64 `json:"gc_read_latency_us,omitempty"`
	GcRemoveBandwidthKbyte *float64 `json:"gc_remove_bandwidth_kbyte,omitempty"`
	GcRemoveIoSizeKbyte *float64 `json:"gc_remove_io_size_kbyte,omitempty"`
	GcRemoveIops *float64 `json:"gc_remove_iops,omitempty"`
	GcWriteBandwidthKbyte *float64 `json:"gc_write_bandwidth_kbyte,omitempty"`
	GcWriteIoSizeKbyte *float64 `json:"gc_write_io_size_kbyte,omitempty"`
	GcWriteIops *float64 `json:"gc_write_iops,omitempty"`
	GcWriteLatencyUs *float64 `json:"gc_write_latency_us,omitempty"`
	HealthyNum *int64 `json:"healthy_num,omitempty"`
	HealthyPercent *float64 `json:"healthy_percent,omitempty"`
	MaxAvailKbyte *int64 `json:"max_avail_kbyte,omitempty"`
	// garbage size, for tier pool
	MinGarbageKbyte *int64 `json:"min_garbage_kbyte,omitempty"`
	OmapTotalKbyte *float64 `json:"omap_total_kbyte,omitempty"`
	OmapUsedKbyte *float64 `json:"omap_used_kbyte,omitempty"`
	OmapUsedPercent *float64 `json:"omap_used_percent,omitempty"`
	OsdCapacityUnbalance *bool `json:"osd_capacity_unbalance,omitempty"`
	PoolCapacityUsage *int64 `json:"pool_capacity_usage,omitempty"`
	ReadBandwidthKbyte *float64 `json:"read_bandwidth_kbyte,omitempty"`
	ReadCacheHitRate *float64 `json:"read_cache_hit_rate,omitempty"`
	ReadCacheKbyte *float64 `json:"read_cache_kbyte,omitempty"`
	ReadCachePercent *float64 `json:"read_cache_percent,omitempty"`
	ReadIoSizeKbyte *float64 `json:"read_io_size_kbyte,omitempty"`
	ReadIops *float64 `json:"read_iops,omitempty"`
	ReadLatencyUs *float64 `json:"read_latency_us,omitempty"`
	RecoveryBandwidthKbyte *float64 `json:"recovery_bandwidth_kbyte,omitempty"`
	RecoveryIops *float64 `json:"recovery_iops,omitempty"`
	RecoveryNum *int64 `json:"recovery_num,omitempty"`
	RecoveryPercent *float64 `json:"recovery_percent,omitempty"`
	RecoveryRemainSecond *int64 `json:"recovery_remain_second,omitempty"`
	RemoveBandwidthKbyte *float64 `json:"remove_bandwidth_kbyte,omitempty"`
	RemoveIops *float64 `json:"remove_iops,omitempty"`
	ReservedDataKbyte *float64 `json:"reserved_data_kbyte,omitempty"`
	ReservedDataPercent *float64 `json:"reserved_data_percent,omitempty"`
	ReservedUsedKbyte *float64 `json:"reserved_used_kbyte,omitempty"`
	RmwBandwidthKbyte *float64 `json:"rmw_bandwidth_kbyte,omitempty"`
	RmwIops *float64 `json:"rmw_iops,omitempty"`
	SnapKbyte *int64 `json:"snap_kbyte,omitempty"`
	TotalBandwidthKbyte *float64 `json:"total_bandwidth_kbyte,omitempty"`
	TotalCacheKbyte *float64 `json:"total_cache_kbyte,omitempty"`
	TotalIops *float64 `json:"total_iops,omitempty"`
	TotalKbyte *int64 `json:"total_kbyte,omitempty"`
	UnavailableNum *int64 `json:"unavailable_num,omitempty"`
	UnavailablePercent *float64 `json:"unavailable_percent,omitempty"`
	UnusedDataKbyte *float64 `json:"unused_data_kbyte,omitempty"`
	UsedKbyte *int64 `json:"used_kbyte,omitempty"`
	UsedPercent *float64 `json:"used_percent,omitempty"`
	// tier pool stat
	WaterLevel *float64 `json:"water_level,omitempty"`
	WriteBandwidthKbyte *float64 `json:"write_bandwidth_kbyte,omitempty"`
	WriteCacheKbyte *float64 `json:"write_cache_kbyte,omitempty"`
	WriteCacheMergeRate *float64 `json:"write_cache_merge_rate,omitempty"`
	WriteCachePercent *float64 `json:"write_cache_percent,omitempty"`
	WriteIoSizeKbyte *float64 `json:"write_io_size_kbyte,omitempty"`
	WriteIops *float64 `json:"write_iops,omitempty"`
	WriteLatencyUs *float64 `json:"write_latency_us,omitempty"`
}

// NewPoolStat instantiates a new PoolStat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPoolStat() *PoolStat {
	this := PoolStat{}
	return &this
}

// NewPoolStatWithDefaults instantiates a new PoolStat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPoolStatWithDefaults() *PoolStat {
	this := PoolStat{}
	return &this
}

// GetActualKbyte returns the ActualKbyte field value if set, zero value otherwise.
func (o *PoolStat) GetActualKbyte() int64 {
	if o == nil || IsNil(o.ActualKbyte) {
		var ret int64
		return ret
	}
	return *o.ActualKbyte
}

// GetActualKbyteOk returns a tuple with the ActualKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetActualKbyteOk() (*int64, bool) {
	if o == nil || IsNil(o.ActualKbyte) {
		return nil, false
	}
	return o.ActualKbyte, true
}

// HasActualKbyte returns a boolean if a field has been set.
func (o *PoolStat) HasActualKbyte() bool {
	if o != nil && !IsNil(o.ActualKbyte) {
		return true
	}

	return false
}

// SetActualKbyte gets a reference to the given int64 and assigns it to the ActualKbyte field.
func (o *PoolStat) SetActualKbyte(v int64) {
	o.ActualKbyte = &v
}

// GetAvailableActualKbyte returns the AvailableActualKbyte field value if set, zero value otherwise.
func (o *PoolStat) GetAvailableActualKbyte() float64 {
	if o == nil || IsNil(o.AvailableActualKbyte) {
		var ret float64
		return ret
	}
	return *o.AvailableActualKbyte
}

// GetAvailableActualKbyteOk returns a tuple with the AvailableActualKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetAvailableActualKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.AvailableActualKbyte) {
		return nil, false
	}
	return o.AvailableActualKbyte, true
}

// HasAvailableActualKbyte returns a boolean if a field has been set.
func (o *PoolStat) HasAvailableActualKbyte() bool {
	if o != nil && !IsNil(o.AvailableActualKbyte) {
		return true
	}

	return false
}

// SetAvailableActualKbyte gets a reference to the given float64 and assigns it to the AvailableActualKbyte field.
func (o *PoolStat) SetAvailableActualKbyte(v float64) {
	o.AvailableActualKbyte = &v
}

// GetClientReadBandwidthKbyte returns the ClientReadBandwidthKbyte field value if set, zero value otherwise.
func (o *PoolStat) GetClientReadBandwidthKbyte() float64 {
	if o == nil || IsNil(o.ClientReadBandwidthKbyte) {
		var ret float64
		return ret
	}
	return *o.ClientReadBandwidthKbyte
}

// GetClientReadBandwidthKbyteOk returns a tuple with the ClientReadBandwidthKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetClientReadBandwidthKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.ClientReadBandwidthKbyte) {
		return nil, false
	}
	return o.ClientReadBandwidthKbyte, true
}

// HasClientReadBandwidthKbyte returns a boolean if a field has been set.
func (o *PoolStat) HasClientReadBandwidthKbyte() bool {
	if o != nil && !IsNil(o.ClientReadBandwidthKbyte) {
		return true
	}

	return false
}

// SetClientReadBandwidthKbyte gets a reference to the given float64 and assigns it to the ClientReadBandwidthKbyte field.
func (o *PoolStat) SetClientReadBandwidthKbyte(v float64) {
	o.ClientReadBandwidthKbyte = &v
}

// GetClientReadIoSizeKbyte returns the ClientReadIoSizeKbyte field value if set, zero value otherwise.
func (o *PoolStat) GetClientReadIoSizeKbyte() float64 {
	if o == nil || IsNil(o.ClientReadIoSizeKbyte) {
		var ret float64
		return ret
	}
	return *o.ClientReadIoSizeKbyte
}

// GetClientReadIoSizeKbyteOk returns a tuple with the ClientReadIoSizeKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetClientReadIoSizeKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.ClientReadIoSizeKbyte) {
		return nil, false
	}
	return o.ClientReadIoSizeKbyte, true
}

// HasClientReadIoSizeKbyte returns a boolean if a field has been set.
func (o *PoolStat) HasClientReadIoSizeKbyte() bool {
	if o != nil && !IsNil(o.ClientReadIoSizeKbyte) {
		return true
	}

	return false
}

// SetClientReadIoSizeKbyte gets a reference to the given float64 and assigns it to the ClientReadIoSizeKbyte field.
func (o *PoolStat) SetClientReadIoSizeKbyte(v float64) {
	o.ClientReadIoSizeKbyte = &v
}

// GetClientReadIops returns the ClientReadIops field value if set, zero value otherwise.
func (o *PoolStat) GetClientReadIops() float64 {
	if o == nil || IsNil(o.ClientReadIops) {
		var ret float64
		return ret
	}
	return *o.ClientReadIops
}

// GetClientReadIopsOk returns a tuple with the ClientReadIops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetClientReadIopsOk() (*float64, bool) {
	if o == nil || IsNil(o.ClientReadIops) {
		return nil, false
	}
	return o.ClientReadIops, true
}

// HasClientReadIops returns a boolean if a field has been set.
func (o *PoolStat) HasClientReadIops() bool {
	if o != nil && !IsNil(o.ClientReadIops) {
		return true
	}

	return false
}

// SetClientReadIops gets a reference to the given float64 and assigns it to the ClientReadIops field.
func (o *PoolStat) SetClientReadIops(v float64) {
	o.ClientReadIops = &v
}

// GetClientReadLatencyUs returns the ClientReadLatencyUs field value if set, zero value otherwise.
func (o *PoolStat) GetClientReadLatencyUs() float64 {
	if o == nil || IsNil(o.ClientReadLatencyUs) {
		var ret float64
		return ret
	}
	return *o.ClientReadLatencyUs
}

// GetClientReadLatencyUsOk returns a tuple with the ClientReadLatencyUs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetClientReadLatencyUsOk() (*float64, bool) {
	if o == nil || IsNil(o.ClientReadLatencyUs) {
		return nil, false
	}
	return o.ClientReadLatencyUs, true
}

// HasClientReadLatencyUs returns a boolean if a field has been set.
func (o *PoolStat) HasClientReadLatencyUs() bool {
	if o != nil && !IsNil(o.ClientReadLatencyUs) {
		return true
	}

	return false
}

// SetClientReadLatencyUs gets a reference to the given float64 and assigns it to the ClientReadLatencyUs field.
func (o *PoolStat) SetClientReadLatencyUs(v float64) {
	o.ClientReadLatencyUs = &v
}

// GetClientWriteBandwidthKbyte returns the ClientWriteBandwidthKbyte field value if set, zero value otherwise.
func (o *PoolStat) GetClientWriteBandwidthKbyte() float64 {
	if o == nil || IsNil(o.ClientWriteBandwidthKbyte) {
		var ret float64
		return ret
	}
	return *o.ClientWriteBandwidthKbyte
}

// GetClientWriteBandwidthKbyteOk returns a tuple with the ClientWriteBandwidthKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetClientWriteBandwidthKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.ClientWriteBandwidthKbyte) {
		return nil, false
	}
	return o.ClientWriteBandwidthKbyte, true
}

// HasClientWriteBandwidthKbyte returns a boolean if a field has been set.
func (o *PoolStat) HasClientWriteBandwidthKbyte() bool {
	if o != nil && !IsNil(o.ClientWriteBandwidthKbyte) {
		return true
	}

	return false
}

// SetClientWriteBandwidthKbyte gets a reference to the given float64 and assigns it to the ClientWriteBandwidthKbyte field.
func (o *PoolStat) SetClientWriteBandwidthKbyte(v float64) {
	o.ClientWriteBandwidthKbyte = &v
}

// GetClientWriteIoSizeKbyte returns the ClientWriteIoSizeKbyte field value if set, zero value otherwise.
func (o *PoolStat) GetClientWriteIoSizeKbyte() float64 {
	if o == nil || IsNil(o.ClientWriteIoSizeKbyte) {
		var ret float64
		return ret
	}
	return *o.ClientWriteIoSizeKbyte
}

// GetClientWriteIoSizeKbyteOk returns a tuple with the ClientWriteIoSizeKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetClientWriteIoSizeKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.ClientWriteIoSizeKbyte) {
		return nil, false
	}
	return o.ClientWriteIoSizeKbyte, true
}

// HasClientWriteIoSizeKbyte returns a boolean if a field has been set.
func (o *PoolStat) HasClientWriteIoSizeKbyte() bool {
	if o != nil && !IsNil(o.ClientWriteIoSizeKbyte) {
		return true
	}

	return false
}

// SetClientWriteIoSizeKbyte gets a reference to the given float64 and assigns it to the ClientWriteIoSizeKbyte field.
func (o *PoolStat) SetClientWriteIoSizeKbyte(v float64) {
	o.ClientWriteIoSizeKbyte = &v
}

// GetClientWriteIops returns the ClientWriteIops field value if set, zero value otherwise.
func (o *PoolStat) GetClientWriteIops() float64 {
	if o == nil || IsNil(o.ClientWriteIops) {
		var ret float64
		return ret
	}
	return *o.ClientWriteIops
}

// GetClientWriteIopsOk returns a tuple with the ClientWriteIops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetClientWriteIopsOk() (*float64, bool) {
	if o == nil || IsNil(o.ClientWriteIops) {
		return nil, false
	}
	return o.ClientWriteIops, true
}

// HasClientWriteIops returns a boolean if a field has been set.
func (o *PoolStat) HasClientWriteIops() bool {
	if o != nil && !IsNil(o.ClientWriteIops) {
		return true
	}

	return false
}

// SetClientWriteIops gets a reference to the given float64 and assigns it to the ClientWriteIops field.
func (o *PoolStat) SetClientWriteIops(v float64) {
	o.ClientWriteIops = &v
}

// GetClientWriteLatencyUs returns the ClientWriteLatencyUs field value if set, zero value otherwise.
func (o *PoolStat) GetClientWriteLatencyUs() float64 {
	if o == nil || IsNil(o.ClientWriteLatencyUs) {
		var ret float64
		return ret
	}
	return *o.ClientWriteLatencyUs
}

// GetClientWriteLatencyUsOk returns a tuple with the ClientWriteLatencyUs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetClientWriteLatencyUsOk() (*float64, bool) {
	if o == nil || IsNil(o.ClientWriteLatencyUs) {
		return nil, false
	}
	return o.ClientWriteLatencyUs, true
}

// HasClientWriteLatencyUs returns a boolean if a field has been set.
func (o *PoolStat) HasClientWriteLatencyUs() bool {
	if o != nil && !IsNil(o.ClientWriteLatencyUs) {
		return true
	}

	return false
}

// SetClientWriteLatencyUs gets a reference to the given float64 and assigns it to the ClientWriteLatencyUs field.
func (o *PoolStat) SetClientWriteLatencyUs(v float64) {
	o.ClientWriteLatencyUs = &v
}

// GetCompressRatio returns the CompressRatio field value if set, zero value otherwise.
func (o *PoolStat) GetCompressRatio() float64 {
	if o == nil || IsNil(o.CompressRatio) {
		var ret float64
		return ret
	}
	return *o.CompressRatio
}

// GetCompressRatioOk returns a tuple with the CompressRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetCompressRatioOk() (*float64, bool) {
	if o == nil || IsNil(o.CompressRatio) {
		return nil, false
	}
	return o.CompressRatio, true
}

// HasCompressRatio returns a boolean if a field has been set.
func (o *PoolStat) HasCompressRatio() bool {
	if o != nil && !IsNil(o.CompressRatio) {
		return true
	}

	return false
}

// SetCompressRatio gets a reference to the given float64 and assigns it to the CompressRatio field.
func (o *PoolStat) SetCompressRatio(v float64) {
	o.CompressRatio = &v
}

// GetCompressedKbyte returns the CompressedKbyte field value if set, zero value otherwise.
func (o *PoolStat) GetCompressedKbyte() float64 {
	if o == nil || IsNil(o.CompressedKbyte) {
		var ret float64
		return ret
	}
	return *o.CompressedKbyte
}

// GetCompressedKbyteOk returns a tuple with the CompressedKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetCompressedKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.CompressedKbyte) {
		return nil, false
	}
	return o.CompressedKbyte, true
}

// HasCompressedKbyte returns a boolean if a field has been set.
func (o *PoolStat) HasCompressedKbyte() bool {
	if o != nil && !IsNil(o.CompressedKbyte) {
		return true
	}

	return false
}

// SetCompressedKbyte gets a reference to the given float64 and assigns it to the CompressedKbyte field.
func (o *PoolStat) SetCompressedKbyte(v float64) {
	o.CompressedKbyte = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *PoolStat) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *PoolStat) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *PoolStat) SetCreate(v time.Time) {
	o.Create = &v
}

// GetCreatingNum returns the CreatingNum field value if set, zero value otherwise.
func (o *PoolStat) GetCreatingNum() int64 {
	if o == nil || IsNil(o.CreatingNum) {
		var ret int64
		return ret
	}
	return *o.CreatingNum
}

// GetCreatingNumOk returns a tuple with the CreatingNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetCreatingNumOk() (*int64, bool) {
	if o == nil || IsNil(o.CreatingNum) {
		return nil, false
	}
	return o.CreatingNum, true
}

// HasCreatingNum returns a boolean if a field has been set.
func (o *PoolStat) HasCreatingNum() bool {
	if o != nil && !IsNil(o.CreatingNum) {
		return true
	}

	return false
}

// SetCreatingNum gets a reference to the given int64 and assigns it to the CreatingNum field.
func (o *PoolStat) SetCreatingNum(v int64) {
	o.CreatingNum = &v
}

// GetDataKbyte returns the DataKbyte field value if set, zero value otherwise.
func (o *PoolStat) GetDataKbyte() int64 {
	if o == nil || IsNil(o.DataKbyte) {
		var ret int64
		return ret
	}
	return *o.DataKbyte
}

// GetDataKbyteOk returns a tuple with the DataKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetDataKbyteOk() (*int64, bool) {
	if o == nil || IsNil(o.DataKbyte) {
		return nil, false
	}
	return o.DataKbyte, true
}

// HasDataKbyte returns a boolean if a field has been set.
func (o *PoolStat) HasDataKbyte() bool {
	if o != nil && !IsNil(o.DataKbyte) {
		return true
	}

	return false
}

// SetDataKbyte gets a reference to the given int64 and assigns it to the DataKbyte field.
func (o *PoolStat) SetDataKbyte(v int64) {
	o.DataKbyte = &v
}

// GetDegradedNum returns the DegradedNum field value if set, zero value otherwise.
func (o *PoolStat) GetDegradedNum() int64 {
	if o == nil || IsNil(o.DegradedNum) {
		var ret int64
		return ret
	}
	return *o.DegradedNum
}

// GetDegradedNumOk returns a tuple with the DegradedNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetDegradedNumOk() (*int64, bool) {
	if o == nil || IsNil(o.DegradedNum) {
		return nil, false
	}
	return o.DegradedNum, true
}

// HasDegradedNum returns a boolean if a field has been set.
func (o *PoolStat) HasDegradedNum() bool {
	if o != nil && !IsNil(o.DegradedNum) {
		return true
	}

	return false
}

// SetDegradedNum gets a reference to the given int64 and assigns it to the DegradedNum field.
func (o *PoolStat) SetDegradedNum(v int64) {
	o.DegradedNum = &v
}

// GetDegradedPercent returns the DegradedPercent field value if set, zero value otherwise.
func (o *PoolStat) GetDegradedPercent() float64 {
	if o == nil || IsNil(o.DegradedPercent) {
		var ret float64
		return ret
	}
	return *o.DegradedPercent
}

// GetDegradedPercentOk returns a tuple with the DegradedPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetDegradedPercentOk() (*float64, bool) {
	if o == nil || IsNil(o.DegradedPercent) {
		return nil, false
	}
	return o.DegradedPercent, true
}

// HasDegradedPercent returns a boolean if a field has been set.
func (o *PoolStat) HasDegradedPercent() bool {
	if o != nil && !IsNil(o.DegradedPercent) {
		return true
	}

	return false
}

// SetDegradedPercent gets a reference to the given float64 and assigns it to the DegradedPercent field.
func (o *PoolStat) SetDegradedPercent(v float64) {
	o.DegradedPercent = &v
}

// GetErrorKbyte returns the ErrorKbyte field value if set, zero value otherwise.
func (o *PoolStat) GetErrorKbyte() int64 {
	if o == nil || IsNil(o.ErrorKbyte) {
		var ret int64
		return ret
	}
	return *o.ErrorKbyte
}

// GetErrorKbyteOk returns a tuple with the ErrorKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetErrorKbyteOk() (*int64, bool) {
	if o == nil || IsNil(o.ErrorKbyte) {
		return nil, false
	}
	return o.ErrorKbyte, true
}

// HasErrorKbyte returns a boolean if a field has been set.
func (o *PoolStat) HasErrorKbyte() bool {
	if o != nil && !IsNil(o.ErrorKbyte) {
		return true
	}

	return false
}

// SetErrorKbyte gets a reference to the given int64 and assigns it to the ErrorKbyte field.
func (o *PoolStat) SetErrorKbyte(v int64) {
	o.ErrorKbyte = &v
}

// GetFlushReadBandwidthKbyte returns the FlushReadBandwidthKbyte field value if set, zero value otherwise.
func (o *PoolStat) GetFlushReadBandwidthKbyte() float64 {
	if o == nil || IsNil(o.FlushReadBandwidthKbyte) {
		var ret float64
		return ret
	}
	return *o.FlushReadBandwidthKbyte
}

// GetFlushReadBandwidthKbyteOk returns a tuple with the FlushReadBandwidthKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetFlushReadBandwidthKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.FlushReadBandwidthKbyte) {
		return nil, false
	}
	return o.FlushReadBandwidthKbyte, true
}

// HasFlushReadBandwidthKbyte returns a boolean if a field has been set.
func (o *PoolStat) HasFlushReadBandwidthKbyte() bool {
	if o != nil && !IsNil(o.FlushReadBandwidthKbyte) {
		return true
	}

	return false
}

// SetFlushReadBandwidthKbyte gets a reference to the given float64 and assigns it to the FlushReadBandwidthKbyte field.
func (o *PoolStat) SetFlushReadBandwidthKbyte(v float64) {
	o.FlushReadBandwidthKbyte = &v
}

// GetFlushReadIoSizeKbyte returns the FlushReadIoSizeKbyte field value if set, zero value otherwise.
func (o *PoolStat) GetFlushReadIoSizeKbyte() float64 {
	if o == nil || IsNil(o.FlushReadIoSizeKbyte) {
		var ret float64
		return ret
	}
	return *o.FlushReadIoSizeKbyte
}

// GetFlushReadIoSizeKbyteOk returns a tuple with the FlushReadIoSizeKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetFlushReadIoSizeKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.FlushReadIoSizeKbyte) {
		return nil, false
	}
	return o.FlushReadIoSizeKbyte, true
}

// HasFlushReadIoSizeKbyte returns a boolean if a field has been set.
func (o *PoolStat) HasFlushReadIoSizeKbyte() bool {
	if o != nil && !IsNil(o.FlushReadIoSizeKbyte) {
		return true
	}

	return false
}

// SetFlushReadIoSizeKbyte gets a reference to the given float64 and assigns it to the FlushReadIoSizeKbyte field.
func (o *PoolStat) SetFlushReadIoSizeKbyte(v float64) {
	o.FlushReadIoSizeKbyte = &v
}

// GetFlushReadIops returns the FlushReadIops field value if set, zero value otherwise.
func (o *PoolStat) GetFlushReadIops() float64 {
	if o == nil || IsNil(o.FlushReadIops) {
		var ret float64
		return ret
	}
	return *o.FlushReadIops
}

// GetFlushReadIopsOk returns a tuple with the FlushReadIops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetFlushReadIopsOk() (*float64, bool) {
	if o == nil || IsNil(o.FlushReadIops) {
		return nil, false
	}
	return o.FlushReadIops, true
}

// HasFlushReadIops returns a boolean if a field has been set.
func (o *PoolStat) HasFlushReadIops() bool {
	if o != nil && !IsNil(o.FlushReadIops) {
		return true
	}

	return false
}

// SetFlushReadIops gets a reference to the given float64 and assigns it to the FlushReadIops field.
func (o *PoolStat) SetFlushReadIops(v float64) {
	o.FlushReadIops = &v
}

// GetFlushReadLatencyUs returns the FlushReadLatencyUs field value if set, zero value otherwise.
func (o *PoolStat) GetFlushReadLatencyUs() float64 {
	if o == nil || IsNil(o.FlushReadLatencyUs) {
		var ret float64
		return ret
	}
	return *o.FlushReadLatencyUs
}

// GetFlushReadLatencyUsOk returns a tuple with the FlushReadLatencyUs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetFlushReadLatencyUsOk() (*float64, bool) {
	if o == nil || IsNil(o.FlushReadLatencyUs) {
		return nil, false
	}
	return o.FlushReadLatencyUs, true
}

// HasFlushReadLatencyUs returns a boolean if a field has been set.
func (o *PoolStat) HasFlushReadLatencyUs() bool {
	if o != nil && !IsNil(o.FlushReadLatencyUs) {
		return true
	}

	return false
}

// SetFlushReadLatencyUs gets a reference to the given float64 and assigns it to the FlushReadLatencyUs field.
func (o *PoolStat) SetFlushReadLatencyUs(v float64) {
	o.FlushReadLatencyUs = &v
}

// GetFlushWriteBandwidthKbyte returns the FlushWriteBandwidthKbyte field value if set, zero value otherwise.
func (o *PoolStat) GetFlushWriteBandwidthKbyte() float64 {
	if o == nil || IsNil(o.FlushWriteBandwidthKbyte) {
		var ret float64
		return ret
	}
	return *o.FlushWriteBandwidthKbyte
}

// GetFlushWriteBandwidthKbyteOk returns a tuple with the FlushWriteBandwidthKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetFlushWriteBandwidthKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.FlushWriteBandwidthKbyte) {
		return nil, false
	}
	return o.FlushWriteBandwidthKbyte, true
}

// HasFlushWriteBandwidthKbyte returns a boolean if a field has been set.
func (o *PoolStat) HasFlushWriteBandwidthKbyte() bool {
	if o != nil && !IsNil(o.FlushWriteBandwidthKbyte) {
		return true
	}

	return false
}

// SetFlushWriteBandwidthKbyte gets a reference to the given float64 and assigns it to the FlushWriteBandwidthKbyte field.
func (o *PoolStat) SetFlushWriteBandwidthKbyte(v float64) {
	o.FlushWriteBandwidthKbyte = &v
}

// GetFlushWriteIoSizeKbyte returns the FlushWriteIoSizeKbyte field value if set, zero value otherwise.
func (o *PoolStat) GetFlushWriteIoSizeKbyte() float64 {
	if o == nil || IsNil(o.FlushWriteIoSizeKbyte) {
		var ret float64
		return ret
	}
	return *o.FlushWriteIoSizeKbyte
}

// GetFlushWriteIoSizeKbyteOk returns a tuple with the FlushWriteIoSizeKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetFlushWriteIoSizeKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.FlushWriteIoSizeKbyte) {
		return nil, false
	}
	return o.FlushWriteIoSizeKbyte, true
}

// HasFlushWriteIoSizeKbyte returns a boolean if a field has been set.
func (o *PoolStat) HasFlushWriteIoSizeKbyte() bool {
	if o != nil && !IsNil(o.FlushWriteIoSizeKbyte) {
		return true
	}

	return false
}

// SetFlushWriteIoSizeKbyte gets a reference to the given float64 and assigns it to the FlushWriteIoSizeKbyte field.
func (o *PoolStat) SetFlushWriteIoSizeKbyte(v float64) {
	o.FlushWriteIoSizeKbyte = &v
}

// GetFlushWriteIops returns the FlushWriteIops field value if set, zero value otherwise.
func (o *PoolStat) GetFlushWriteIops() float64 {
	if o == nil || IsNil(o.FlushWriteIops) {
		var ret float64
		return ret
	}
	return *o.FlushWriteIops
}

// GetFlushWriteIopsOk returns a tuple with the FlushWriteIops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetFlushWriteIopsOk() (*float64, bool) {
	if o == nil || IsNil(o.FlushWriteIops) {
		return nil, false
	}
	return o.FlushWriteIops, true
}

// HasFlushWriteIops returns a boolean if a field has been set.
func (o *PoolStat) HasFlushWriteIops() bool {
	if o != nil && !IsNil(o.FlushWriteIops) {
		return true
	}

	return false
}

// SetFlushWriteIops gets a reference to the given float64 and assigns it to the FlushWriteIops field.
func (o *PoolStat) SetFlushWriteIops(v float64) {
	o.FlushWriteIops = &v
}

// GetFlushWriteLatencyUs returns the FlushWriteLatencyUs field value if set, zero value otherwise.
func (o *PoolStat) GetFlushWriteLatencyUs() float64 {
	if o == nil || IsNil(o.FlushWriteLatencyUs) {
		var ret float64
		return ret
	}
	return *o.FlushWriteLatencyUs
}

// GetFlushWriteLatencyUsOk returns a tuple with the FlushWriteLatencyUs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetFlushWriteLatencyUsOk() (*float64, bool) {
	if o == nil || IsNil(o.FlushWriteLatencyUs) {
		return nil, false
	}
	return o.FlushWriteLatencyUs, true
}

// HasFlushWriteLatencyUs returns a boolean if a field has been set.
func (o *PoolStat) HasFlushWriteLatencyUs() bool {
	if o != nil && !IsNil(o.FlushWriteLatencyUs) {
		return true
	}

	return false
}

// SetFlushWriteLatencyUs gets a reference to the given float64 and assigns it to the FlushWriteLatencyUs field.
func (o *PoolStat) SetFlushWriteLatencyUs(v float64) {
	o.FlushWriteLatencyUs = &v
}

// GetGarbageRatio returns the GarbageRatio field value if set, zero value otherwise.
func (o *PoolStat) GetGarbageRatio() float64 {
	if o == nil || IsNil(o.GarbageRatio) {
		var ret float64
		return ret
	}
	return *o.GarbageRatio
}

// GetGarbageRatioOk returns a tuple with the GarbageRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetGarbageRatioOk() (*float64, bool) {
	if o == nil || IsNil(o.GarbageRatio) {
		return nil, false
	}
	return o.GarbageRatio, true
}

// HasGarbageRatio returns a boolean if a field has been set.
func (o *PoolStat) HasGarbageRatio() bool {
	if o != nil && !IsNil(o.GarbageRatio) {
		return true
	}

	return false
}

// SetGarbageRatio gets a reference to the given float64 and assigns it to the GarbageRatio field.
func (o *PoolStat) SetGarbageRatio(v float64) {
	o.GarbageRatio = &v
}

// GetGcReadBandwidthKbyte returns the GcReadBandwidthKbyte field value if set, zero value otherwise.
func (o *PoolStat) GetGcReadBandwidthKbyte() float64 {
	if o == nil || IsNil(o.GcReadBandwidthKbyte) {
		var ret float64
		return ret
	}
	return *o.GcReadBandwidthKbyte
}

// GetGcReadBandwidthKbyteOk returns a tuple with the GcReadBandwidthKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetGcReadBandwidthKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.GcReadBandwidthKbyte) {
		return nil, false
	}
	return o.GcReadBandwidthKbyte, true
}

// HasGcReadBandwidthKbyte returns a boolean if a field has been set.
func (o *PoolStat) HasGcReadBandwidthKbyte() bool {
	if o != nil && !IsNil(o.GcReadBandwidthKbyte) {
		return true
	}

	return false
}

// SetGcReadBandwidthKbyte gets a reference to the given float64 and assigns it to the GcReadBandwidthKbyte field.
func (o *PoolStat) SetGcReadBandwidthKbyte(v float64) {
	o.GcReadBandwidthKbyte = &v
}

// GetGcReadIoSizeKbyte returns the GcReadIoSizeKbyte field value if set, zero value otherwise.
func (o *PoolStat) GetGcReadIoSizeKbyte() float64 {
	if o == nil || IsNil(o.GcReadIoSizeKbyte) {
		var ret float64
		return ret
	}
	return *o.GcReadIoSizeKbyte
}

// GetGcReadIoSizeKbyteOk returns a tuple with the GcReadIoSizeKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetGcReadIoSizeKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.GcReadIoSizeKbyte) {
		return nil, false
	}
	return o.GcReadIoSizeKbyte, true
}

// HasGcReadIoSizeKbyte returns a boolean if a field has been set.
func (o *PoolStat) HasGcReadIoSizeKbyte() bool {
	if o != nil && !IsNil(o.GcReadIoSizeKbyte) {
		return true
	}

	return false
}

// SetGcReadIoSizeKbyte gets a reference to the given float64 and assigns it to the GcReadIoSizeKbyte field.
func (o *PoolStat) SetGcReadIoSizeKbyte(v float64) {
	o.GcReadIoSizeKbyte = &v
}

// GetGcReadIops returns the GcReadIops field value if set, zero value otherwise.
func (o *PoolStat) GetGcReadIops() float64 {
	if o == nil || IsNil(o.GcReadIops) {
		var ret float64
		return ret
	}
	return *o.GcReadIops
}

// GetGcReadIopsOk returns a tuple with the GcReadIops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetGcReadIopsOk() (*float64, bool) {
	if o == nil || IsNil(o.GcReadIops) {
		return nil, false
	}
	return o.GcReadIops, true
}

// HasGcReadIops returns a boolean if a field has been set.
func (o *PoolStat) HasGcReadIops() bool {
	if o != nil && !IsNil(o.GcReadIops) {
		return true
	}

	return false
}

// SetGcReadIops gets a reference to the given float64 and assigns it to the GcReadIops field.
func (o *PoolStat) SetGcReadIops(v float64) {
	o.GcReadIops = &v
}

// GetGcReadLatencyUs returns the GcReadLatencyUs field value if set, zero value otherwise.
func (o *PoolStat) GetGcReadLatencyUs() float64 {
	if o == nil || IsNil(o.GcReadLatencyUs) {
		var ret float64
		return ret
	}
	return *o.GcReadLatencyUs
}

// GetGcReadLatencyUsOk returns a tuple with the GcReadLatencyUs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetGcReadLatencyUsOk() (*float64, bool) {
	if o == nil || IsNil(o.GcReadLatencyUs) {
		return nil, false
	}
	return o.GcReadLatencyUs, true
}

// HasGcReadLatencyUs returns a boolean if a field has been set.
func (o *PoolStat) HasGcReadLatencyUs() bool {
	if o != nil && !IsNil(o.GcReadLatencyUs) {
		return true
	}

	return false
}

// SetGcReadLatencyUs gets a reference to the given float64 and assigns it to the GcReadLatencyUs field.
func (o *PoolStat) SetGcReadLatencyUs(v float64) {
	o.GcReadLatencyUs = &v
}

// GetGcRemoveBandwidthKbyte returns the GcRemoveBandwidthKbyte field value if set, zero value otherwise.
func (o *PoolStat) GetGcRemoveBandwidthKbyte() float64 {
	if o == nil || IsNil(o.GcRemoveBandwidthKbyte) {
		var ret float64
		return ret
	}
	return *o.GcRemoveBandwidthKbyte
}

// GetGcRemoveBandwidthKbyteOk returns a tuple with the GcRemoveBandwidthKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetGcRemoveBandwidthKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.GcRemoveBandwidthKbyte) {
		return nil, false
	}
	return o.GcRemoveBandwidthKbyte, true
}

// HasGcRemoveBandwidthKbyte returns a boolean if a field has been set.
func (o *PoolStat) HasGcRemoveBandwidthKbyte() bool {
	if o != nil && !IsNil(o.GcRemoveBandwidthKbyte) {
		return true
	}

	return false
}

// SetGcRemoveBandwidthKbyte gets a reference to the given float64 and assigns it to the GcRemoveBandwidthKbyte field.
func (o *PoolStat) SetGcRemoveBandwidthKbyte(v float64) {
	o.GcRemoveBandwidthKbyte = &v
}

// GetGcRemoveIoSizeKbyte returns the GcRemoveIoSizeKbyte field value if set, zero value otherwise.
func (o *PoolStat) GetGcRemoveIoSizeKbyte() float64 {
	if o == nil || IsNil(o.GcRemoveIoSizeKbyte) {
		var ret float64
		return ret
	}
	return *o.GcRemoveIoSizeKbyte
}

// GetGcRemoveIoSizeKbyteOk returns a tuple with the GcRemoveIoSizeKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetGcRemoveIoSizeKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.GcRemoveIoSizeKbyte) {
		return nil, false
	}
	return o.GcRemoveIoSizeKbyte, true
}

// HasGcRemoveIoSizeKbyte returns a boolean if a field has been set.
func (o *PoolStat) HasGcRemoveIoSizeKbyte() bool {
	if o != nil && !IsNil(o.GcRemoveIoSizeKbyte) {
		return true
	}

	return false
}

// SetGcRemoveIoSizeKbyte gets a reference to the given float64 and assigns it to the GcRemoveIoSizeKbyte field.
func (o *PoolStat) SetGcRemoveIoSizeKbyte(v float64) {
	o.GcRemoveIoSizeKbyte = &v
}

// GetGcRemoveIops returns the GcRemoveIops field value if set, zero value otherwise.
func (o *PoolStat) GetGcRemoveIops() float64 {
	if o == nil || IsNil(o.GcRemoveIops) {
		var ret float64
		return ret
	}
	return *o.GcRemoveIops
}

// GetGcRemoveIopsOk returns a tuple with the GcRemoveIops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetGcRemoveIopsOk() (*float64, bool) {
	if o == nil || IsNil(o.GcRemoveIops) {
		return nil, false
	}
	return o.GcRemoveIops, true
}

// HasGcRemoveIops returns a boolean if a field has been set.
func (o *PoolStat) HasGcRemoveIops() bool {
	if o != nil && !IsNil(o.GcRemoveIops) {
		return true
	}

	return false
}

// SetGcRemoveIops gets a reference to the given float64 and assigns it to the GcRemoveIops field.
func (o *PoolStat) SetGcRemoveIops(v float64) {
	o.GcRemoveIops = &v
}

// GetGcWriteBandwidthKbyte returns the GcWriteBandwidthKbyte field value if set, zero value otherwise.
func (o *PoolStat) GetGcWriteBandwidthKbyte() float64 {
	if o == nil || IsNil(o.GcWriteBandwidthKbyte) {
		var ret float64
		return ret
	}
	return *o.GcWriteBandwidthKbyte
}

// GetGcWriteBandwidthKbyteOk returns a tuple with the GcWriteBandwidthKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetGcWriteBandwidthKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.GcWriteBandwidthKbyte) {
		return nil, false
	}
	return o.GcWriteBandwidthKbyte, true
}

// HasGcWriteBandwidthKbyte returns a boolean if a field has been set.
func (o *PoolStat) HasGcWriteBandwidthKbyte() bool {
	if o != nil && !IsNil(o.GcWriteBandwidthKbyte) {
		return true
	}

	return false
}

// SetGcWriteBandwidthKbyte gets a reference to the given float64 and assigns it to the GcWriteBandwidthKbyte field.
func (o *PoolStat) SetGcWriteBandwidthKbyte(v float64) {
	o.GcWriteBandwidthKbyte = &v
}

// GetGcWriteIoSizeKbyte returns the GcWriteIoSizeKbyte field value if set, zero value otherwise.
func (o *PoolStat) GetGcWriteIoSizeKbyte() float64 {
	if o == nil || IsNil(o.GcWriteIoSizeKbyte) {
		var ret float64
		return ret
	}
	return *o.GcWriteIoSizeKbyte
}

// GetGcWriteIoSizeKbyteOk returns a tuple with the GcWriteIoSizeKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetGcWriteIoSizeKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.GcWriteIoSizeKbyte) {
		return nil, false
	}
	return o.GcWriteIoSizeKbyte, true
}

// HasGcWriteIoSizeKbyte returns a boolean if a field has been set.
func (o *PoolStat) HasGcWriteIoSizeKbyte() bool {
	if o != nil && !IsNil(o.GcWriteIoSizeKbyte) {
		return true
	}

	return false
}

// SetGcWriteIoSizeKbyte gets a reference to the given float64 and assigns it to the GcWriteIoSizeKbyte field.
func (o *PoolStat) SetGcWriteIoSizeKbyte(v float64) {
	o.GcWriteIoSizeKbyte = &v
}

// GetGcWriteIops returns the GcWriteIops field value if set, zero value otherwise.
func (o *PoolStat) GetGcWriteIops() float64 {
	if o == nil || IsNil(o.GcWriteIops) {
		var ret float64
		return ret
	}
	return *o.GcWriteIops
}

// GetGcWriteIopsOk returns a tuple with the GcWriteIops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetGcWriteIopsOk() (*float64, bool) {
	if o == nil || IsNil(o.GcWriteIops) {
		return nil, false
	}
	return o.GcWriteIops, true
}

// HasGcWriteIops returns a boolean if a field has been set.
func (o *PoolStat) HasGcWriteIops() bool {
	if o != nil && !IsNil(o.GcWriteIops) {
		return true
	}

	return false
}

// SetGcWriteIops gets a reference to the given float64 and assigns it to the GcWriteIops field.
func (o *PoolStat) SetGcWriteIops(v float64) {
	o.GcWriteIops = &v
}

// GetGcWriteLatencyUs returns the GcWriteLatencyUs field value if set, zero value otherwise.
func (o *PoolStat) GetGcWriteLatencyUs() float64 {
	if o == nil || IsNil(o.GcWriteLatencyUs) {
		var ret float64
		return ret
	}
	return *o.GcWriteLatencyUs
}

// GetGcWriteLatencyUsOk returns a tuple with the GcWriteLatencyUs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetGcWriteLatencyUsOk() (*float64, bool) {
	if o == nil || IsNil(o.GcWriteLatencyUs) {
		return nil, false
	}
	return o.GcWriteLatencyUs, true
}

// HasGcWriteLatencyUs returns a boolean if a field has been set.
func (o *PoolStat) HasGcWriteLatencyUs() bool {
	if o != nil && !IsNil(o.GcWriteLatencyUs) {
		return true
	}

	return false
}

// SetGcWriteLatencyUs gets a reference to the given float64 and assigns it to the GcWriteLatencyUs field.
func (o *PoolStat) SetGcWriteLatencyUs(v float64) {
	o.GcWriteLatencyUs = &v
}

// GetHealthyNum returns the HealthyNum field value if set, zero value otherwise.
func (o *PoolStat) GetHealthyNum() int64 {
	if o == nil || IsNil(o.HealthyNum) {
		var ret int64
		return ret
	}
	return *o.HealthyNum
}

// GetHealthyNumOk returns a tuple with the HealthyNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetHealthyNumOk() (*int64, bool) {
	if o == nil || IsNil(o.HealthyNum) {
		return nil, false
	}
	return o.HealthyNum, true
}

// HasHealthyNum returns a boolean if a field has been set.
func (o *PoolStat) HasHealthyNum() bool {
	if o != nil && !IsNil(o.HealthyNum) {
		return true
	}

	return false
}

// SetHealthyNum gets a reference to the given int64 and assigns it to the HealthyNum field.
func (o *PoolStat) SetHealthyNum(v int64) {
	o.HealthyNum = &v
}

// GetHealthyPercent returns the HealthyPercent field value if set, zero value otherwise.
func (o *PoolStat) GetHealthyPercent() float64 {
	if o == nil || IsNil(o.HealthyPercent) {
		var ret float64
		return ret
	}
	return *o.HealthyPercent
}

// GetHealthyPercentOk returns a tuple with the HealthyPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetHealthyPercentOk() (*float64, bool) {
	if o == nil || IsNil(o.HealthyPercent) {
		return nil, false
	}
	return o.HealthyPercent, true
}

// HasHealthyPercent returns a boolean if a field has been set.
func (o *PoolStat) HasHealthyPercent() bool {
	if o != nil && !IsNil(o.HealthyPercent) {
		return true
	}

	return false
}

// SetHealthyPercent gets a reference to the given float64 and assigns it to the HealthyPercent field.
func (o *PoolStat) SetHealthyPercent(v float64) {
	o.HealthyPercent = &v
}

// GetMaxAvailKbyte returns the MaxAvailKbyte field value if set, zero value otherwise.
func (o *PoolStat) GetMaxAvailKbyte() int64 {
	if o == nil || IsNil(o.MaxAvailKbyte) {
		var ret int64
		return ret
	}
	return *o.MaxAvailKbyte
}

// GetMaxAvailKbyteOk returns a tuple with the MaxAvailKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetMaxAvailKbyteOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxAvailKbyte) {
		return nil, false
	}
	return o.MaxAvailKbyte, true
}

// HasMaxAvailKbyte returns a boolean if a field has been set.
func (o *PoolStat) HasMaxAvailKbyte() bool {
	if o != nil && !IsNil(o.MaxAvailKbyte) {
		return true
	}

	return false
}

// SetMaxAvailKbyte gets a reference to the given int64 and assigns it to the MaxAvailKbyte field.
func (o *PoolStat) SetMaxAvailKbyte(v int64) {
	o.MaxAvailKbyte = &v
}

// GetMinGarbageKbyte returns the MinGarbageKbyte field value if set, zero value otherwise.
func (o *PoolStat) GetMinGarbageKbyte() int64 {
	if o == nil || IsNil(o.MinGarbageKbyte) {
		var ret int64
		return ret
	}
	return *o.MinGarbageKbyte
}

// GetMinGarbageKbyteOk returns a tuple with the MinGarbageKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetMinGarbageKbyteOk() (*int64, bool) {
	if o == nil || IsNil(o.MinGarbageKbyte) {
		return nil, false
	}
	return o.MinGarbageKbyte, true
}

// HasMinGarbageKbyte returns a boolean if a field has been set.
func (o *PoolStat) HasMinGarbageKbyte() bool {
	if o != nil && !IsNil(o.MinGarbageKbyte) {
		return true
	}

	return false
}

// SetMinGarbageKbyte gets a reference to the given int64 and assigns it to the MinGarbageKbyte field.
func (o *PoolStat) SetMinGarbageKbyte(v int64) {
	o.MinGarbageKbyte = &v
}

// GetOmapTotalKbyte returns the OmapTotalKbyte field value if set, zero value otherwise.
func (o *PoolStat) GetOmapTotalKbyte() float64 {
	if o == nil || IsNil(o.OmapTotalKbyte) {
		var ret float64
		return ret
	}
	return *o.OmapTotalKbyte
}

// GetOmapTotalKbyteOk returns a tuple with the OmapTotalKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetOmapTotalKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.OmapTotalKbyte) {
		return nil, false
	}
	return o.OmapTotalKbyte, true
}

// HasOmapTotalKbyte returns a boolean if a field has been set.
func (o *PoolStat) HasOmapTotalKbyte() bool {
	if o != nil && !IsNil(o.OmapTotalKbyte) {
		return true
	}

	return false
}

// SetOmapTotalKbyte gets a reference to the given float64 and assigns it to the OmapTotalKbyte field.
func (o *PoolStat) SetOmapTotalKbyte(v float64) {
	o.OmapTotalKbyte = &v
}

// GetOmapUsedKbyte returns the OmapUsedKbyte field value if set, zero value otherwise.
func (o *PoolStat) GetOmapUsedKbyte() float64 {
	if o == nil || IsNil(o.OmapUsedKbyte) {
		var ret float64
		return ret
	}
	return *o.OmapUsedKbyte
}

// GetOmapUsedKbyteOk returns a tuple with the OmapUsedKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetOmapUsedKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.OmapUsedKbyte) {
		return nil, false
	}
	return o.OmapUsedKbyte, true
}

// HasOmapUsedKbyte returns a boolean if a field has been set.
func (o *PoolStat) HasOmapUsedKbyte() bool {
	if o != nil && !IsNil(o.OmapUsedKbyte) {
		return true
	}

	return false
}

// SetOmapUsedKbyte gets a reference to the given float64 and assigns it to the OmapUsedKbyte field.
func (o *PoolStat) SetOmapUsedKbyte(v float64) {
	o.OmapUsedKbyte = &v
}

// GetOmapUsedPercent returns the OmapUsedPercent field value if set, zero value otherwise.
func (o *PoolStat) GetOmapUsedPercent() float64 {
	if o == nil || IsNil(o.OmapUsedPercent) {
		var ret float64
		return ret
	}
	return *o.OmapUsedPercent
}

// GetOmapUsedPercentOk returns a tuple with the OmapUsedPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetOmapUsedPercentOk() (*float64, bool) {
	if o == nil || IsNil(o.OmapUsedPercent) {
		return nil, false
	}
	return o.OmapUsedPercent, true
}

// HasOmapUsedPercent returns a boolean if a field has been set.
func (o *PoolStat) HasOmapUsedPercent() bool {
	if o != nil && !IsNil(o.OmapUsedPercent) {
		return true
	}

	return false
}

// SetOmapUsedPercent gets a reference to the given float64 and assigns it to the OmapUsedPercent field.
func (o *PoolStat) SetOmapUsedPercent(v float64) {
	o.OmapUsedPercent = &v
}

// GetOsdCapacityUnbalance returns the OsdCapacityUnbalance field value if set, zero value otherwise.
func (o *PoolStat) GetOsdCapacityUnbalance() bool {
	if o == nil || IsNil(o.OsdCapacityUnbalance) {
		var ret bool
		return ret
	}
	return *o.OsdCapacityUnbalance
}

// GetOsdCapacityUnbalanceOk returns a tuple with the OsdCapacityUnbalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetOsdCapacityUnbalanceOk() (*bool, bool) {
	if o == nil || IsNil(o.OsdCapacityUnbalance) {
		return nil, false
	}
	return o.OsdCapacityUnbalance, true
}

// HasOsdCapacityUnbalance returns a boolean if a field has been set.
func (o *PoolStat) HasOsdCapacityUnbalance() bool {
	if o != nil && !IsNil(o.OsdCapacityUnbalance) {
		return true
	}

	return false
}

// SetOsdCapacityUnbalance gets a reference to the given bool and assigns it to the OsdCapacityUnbalance field.
func (o *PoolStat) SetOsdCapacityUnbalance(v bool) {
	o.OsdCapacityUnbalance = &v
}

// GetPoolCapacityUsage returns the PoolCapacityUsage field value if set, zero value otherwise.
func (o *PoolStat) GetPoolCapacityUsage() int64 {
	if o == nil || IsNil(o.PoolCapacityUsage) {
		var ret int64
		return ret
	}
	return *o.PoolCapacityUsage
}

// GetPoolCapacityUsageOk returns a tuple with the PoolCapacityUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetPoolCapacityUsageOk() (*int64, bool) {
	if o == nil || IsNil(o.PoolCapacityUsage) {
		return nil, false
	}
	return o.PoolCapacityUsage, true
}

// HasPoolCapacityUsage returns a boolean if a field has been set.
func (o *PoolStat) HasPoolCapacityUsage() bool {
	if o != nil && !IsNil(o.PoolCapacityUsage) {
		return true
	}

	return false
}

// SetPoolCapacityUsage gets a reference to the given int64 and assigns it to the PoolCapacityUsage field.
func (o *PoolStat) SetPoolCapacityUsage(v int64) {
	o.PoolCapacityUsage = &v
}

// GetReadBandwidthKbyte returns the ReadBandwidthKbyte field value if set, zero value otherwise.
func (o *PoolStat) GetReadBandwidthKbyte() float64 {
	if o == nil || IsNil(o.ReadBandwidthKbyte) {
		var ret float64
		return ret
	}
	return *o.ReadBandwidthKbyte
}

// GetReadBandwidthKbyteOk returns a tuple with the ReadBandwidthKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetReadBandwidthKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.ReadBandwidthKbyte) {
		return nil, false
	}
	return o.ReadBandwidthKbyte, true
}

// HasReadBandwidthKbyte returns a boolean if a field has been set.
func (o *PoolStat) HasReadBandwidthKbyte() bool {
	if o != nil && !IsNil(o.ReadBandwidthKbyte) {
		return true
	}

	return false
}

// SetReadBandwidthKbyte gets a reference to the given float64 and assigns it to the ReadBandwidthKbyte field.
func (o *PoolStat) SetReadBandwidthKbyte(v float64) {
	o.ReadBandwidthKbyte = &v
}

// GetReadCacheHitRate returns the ReadCacheHitRate field value if set, zero value otherwise.
func (o *PoolStat) GetReadCacheHitRate() float64 {
	if o == nil || IsNil(o.ReadCacheHitRate) {
		var ret float64
		return ret
	}
	return *o.ReadCacheHitRate
}

// GetReadCacheHitRateOk returns a tuple with the ReadCacheHitRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetReadCacheHitRateOk() (*float64, bool) {
	if o == nil || IsNil(o.ReadCacheHitRate) {
		return nil, false
	}
	return o.ReadCacheHitRate, true
}

// HasReadCacheHitRate returns a boolean if a field has been set.
func (o *PoolStat) HasReadCacheHitRate() bool {
	if o != nil && !IsNil(o.ReadCacheHitRate) {
		return true
	}

	return false
}

// SetReadCacheHitRate gets a reference to the given float64 and assigns it to the ReadCacheHitRate field.
func (o *PoolStat) SetReadCacheHitRate(v float64) {
	o.ReadCacheHitRate = &v
}

// GetReadCacheKbyte returns the ReadCacheKbyte field value if set, zero value otherwise.
func (o *PoolStat) GetReadCacheKbyte() float64 {
	if o == nil || IsNil(o.ReadCacheKbyte) {
		var ret float64
		return ret
	}
	return *o.ReadCacheKbyte
}

// GetReadCacheKbyteOk returns a tuple with the ReadCacheKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetReadCacheKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.ReadCacheKbyte) {
		return nil, false
	}
	return o.ReadCacheKbyte, true
}

// HasReadCacheKbyte returns a boolean if a field has been set.
func (o *PoolStat) HasReadCacheKbyte() bool {
	if o != nil && !IsNil(o.ReadCacheKbyte) {
		return true
	}

	return false
}

// SetReadCacheKbyte gets a reference to the given float64 and assigns it to the ReadCacheKbyte field.
func (o *PoolStat) SetReadCacheKbyte(v float64) {
	o.ReadCacheKbyte = &v
}

// GetReadCachePercent returns the ReadCachePercent field value if set, zero value otherwise.
func (o *PoolStat) GetReadCachePercent() float64 {
	if o == nil || IsNil(o.ReadCachePercent) {
		var ret float64
		return ret
	}
	return *o.ReadCachePercent
}

// GetReadCachePercentOk returns a tuple with the ReadCachePercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetReadCachePercentOk() (*float64, bool) {
	if o == nil || IsNil(o.ReadCachePercent) {
		return nil, false
	}
	return o.ReadCachePercent, true
}

// HasReadCachePercent returns a boolean if a field has been set.
func (o *PoolStat) HasReadCachePercent() bool {
	if o != nil && !IsNil(o.ReadCachePercent) {
		return true
	}

	return false
}

// SetReadCachePercent gets a reference to the given float64 and assigns it to the ReadCachePercent field.
func (o *PoolStat) SetReadCachePercent(v float64) {
	o.ReadCachePercent = &v
}

// GetReadIoSizeKbyte returns the ReadIoSizeKbyte field value if set, zero value otherwise.
func (o *PoolStat) GetReadIoSizeKbyte() float64 {
	if o == nil || IsNil(o.ReadIoSizeKbyte) {
		var ret float64
		return ret
	}
	return *o.ReadIoSizeKbyte
}

// GetReadIoSizeKbyteOk returns a tuple with the ReadIoSizeKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetReadIoSizeKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.ReadIoSizeKbyte) {
		return nil, false
	}
	return o.ReadIoSizeKbyte, true
}

// HasReadIoSizeKbyte returns a boolean if a field has been set.
func (o *PoolStat) HasReadIoSizeKbyte() bool {
	if o != nil && !IsNil(o.ReadIoSizeKbyte) {
		return true
	}

	return false
}

// SetReadIoSizeKbyte gets a reference to the given float64 and assigns it to the ReadIoSizeKbyte field.
func (o *PoolStat) SetReadIoSizeKbyte(v float64) {
	o.ReadIoSizeKbyte = &v
}

// GetReadIops returns the ReadIops field value if set, zero value otherwise.
func (o *PoolStat) GetReadIops() float64 {
	if o == nil || IsNil(o.ReadIops) {
		var ret float64
		return ret
	}
	return *o.ReadIops
}

// GetReadIopsOk returns a tuple with the ReadIops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetReadIopsOk() (*float64, bool) {
	if o == nil || IsNil(o.ReadIops) {
		return nil, false
	}
	return o.ReadIops, true
}

// HasReadIops returns a boolean if a field has been set.
func (o *PoolStat) HasReadIops() bool {
	if o != nil && !IsNil(o.ReadIops) {
		return true
	}

	return false
}

// SetReadIops gets a reference to the given float64 and assigns it to the ReadIops field.
func (o *PoolStat) SetReadIops(v float64) {
	o.ReadIops = &v
}

// GetReadLatencyUs returns the ReadLatencyUs field value if set, zero value otherwise.
func (o *PoolStat) GetReadLatencyUs() float64 {
	if o == nil || IsNil(o.ReadLatencyUs) {
		var ret float64
		return ret
	}
	return *o.ReadLatencyUs
}

// GetReadLatencyUsOk returns a tuple with the ReadLatencyUs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetReadLatencyUsOk() (*float64, bool) {
	if o == nil || IsNil(o.ReadLatencyUs) {
		return nil, false
	}
	return o.ReadLatencyUs, true
}

// HasReadLatencyUs returns a boolean if a field has been set.
func (o *PoolStat) HasReadLatencyUs() bool {
	if o != nil && !IsNil(o.ReadLatencyUs) {
		return true
	}

	return false
}

// SetReadLatencyUs gets a reference to the given float64 and assigns it to the ReadLatencyUs field.
func (o *PoolStat) SetReadLatencyUs(v float64) {
	o.ReadLatencyUs = &v
}

// GetRecoveryBandwidthKbyte returns the RecoveryBandwidthKbyte field value if set, zero value otherwise.
func (o *PoolStat) GetRecoveryBandwidthKbyte() float64 {
	if o == nil || IsNil(o.RecoveryBandwidthKbyte) {
		var ret float64
		return ret
	}
	return *o.RecoveryBandwidthKbyte
}

// GetRecoveryBandwidthKbyteOk returns a tuple with the RecoveryBandwidthKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetRecoveryBandwidthKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.RecoveryBandwidthKbyte) {
		return nil, false
	}
	return o.RecoveryBandwidthKbyte, true
}

// HasRecoveryBandwidthKbyte returns a boolean if a field has been set.
func (o *PoolStat) HasRecoveryBandwidthKbyte() bool {
	if o != nil && !IsNil(o.RecoveryBandwidthKbyte) {
		return true
	}

	return false
}

// SetRecoveryBandwidthKbyte gets a reference to the given float64 and assigns it to the RecoveryBandwidthKbyte field.
func (o *PoolStat) SetRecoveryBandwidthKbyte(v float64) {
	o.RecoveryBandwidthKbyte = &v
}

// GetRecoveryIops returns the RecoveryIops field value if set, zero value otherwise.
func (o *PoolStat) GetRecoveryIops() float64 {
	if o == nil || IsNil(o.RecoveryIops) {
		var ret float64
		return ret
	}
	return *o.RecoveryIops
}

// GetRecoveryIopsOk returns a tuple with the RecoveryIops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetRecoveryIopsOk() (*float64, bool) {
	if o == nil || IsNil(o.RecoveryIops) {
		return nil, false
	}
	return o.RecoveryIops, true
}

// HasRecoveryIops returns a boolean if a field has been set.
func (o *PoolStat) HasRecoveryIops() bool {
	if o != nil && !IsNil(o.RecoveryIops) {
		return true
	}

	return false
}

// SetRecoveryIops gets a reference to the given float64 and assigns it to the RecoveryIops field.
func (o *PoolStat) SetRecoveryIops(v float64) {
	o.RecoveryIops = &v
}

// GetRecoveryNum returns the RecoveryNum field value if set, zero value otherwise.
func (o *PoolStat) GetRecoveryNum() int64 {
	if o == nil || IsNil(o.RecoveryNum) {
		var ret int64
		return ret
	}
	return *o.RecoveryNum
}

// GetRecoveryNumOk returns a tuple with the RecoveryNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetRecoveryNumOk() (*int64, bool) {
	if o == nil || IsNil(o.RecoveryNum) {
		return nil, false
	}
	return o.RecoveryNum, true
}

// HasRecoveryNum returns a boolean if a field has been set.
func (o *PoolStat) HasRecoveryNum() bool {
	if o != nil && !IsNil(o.RecoveryNum) {
		return true
	}

	return false
}

// SetRecoveryNum gets a reference to the given int64 and assigns it to the RecoveryNum field.
func (o *PoolStat) SetRecoveryNum(v int64) {
	o.RecoveryNum = &v
}

// GetRecoveryPercent returns the RecoveryPercent field value if set, zero value otherwise.
func (o *PoolStat) GetRecoveryPercent() float64 {
	if o == nil || IsNil(o.RecoveryPercent) {
		var ret float64
		return ret
	}
	return *o.RecoveryPercent
}

// GetRecoveryPercentOk returns a tuple with the RecoveryPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetRecoveryPercentOk() (*float64, bool) {
	if o == nil || IsNil(o.RecoveryPercent) {
		return nil, false
	}
	return o.RecoveryPercent, true
}

// HasRecoveryPercent returns a boolean if a field has been set.
func (o *PoolStat) HasRecoveryPercent() bool {
	if o != nil && !IsNil(o.RecoveryPercent) {
		return true
	}

	return false
}

// SetRecoveryPercent gets a reference to the given float64 and assigns it to the RecoveryPercent field.
func (o *PoolStat) SetRecoveryPercent(v float64) {
	o.RecoveryPercent = &v
}

// GetRecoveryRemainSecond returns the RecoveryRemainSecond field value if set, zero value otherwise.
func (o *PoolStat) GetRecoveryRemainSecond() int64 {
	if o == nil || IsNil(o.RecoveryRemainSecond) {
		var ret int64
		return ret
	}
	return *o.RecoveryRemainSecond
}

// GetRecoveryRemainSecondOk returns a tuple with the RecoveryRemainSecond field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetRecoveryRemainSecondOk() (*int64, bool) {
	if o == nil || IsNil(o.RecoveryRemainSecond) {
		return nil, false
	}
	return o.RecoveryRemainSecond, true
}

// HasRecoveryRemainSecond returns a boolean if a field has been set.
func (o *PoolStat) HasRecoveryRemainSecond() bool {
	if o != nil && !IsNil(o.RecoveryRemainSecond) {
		return true
	}

	return false
}

// SetRecoveryRemainSecond gets a reference to the given int64 and assigns it to the RecoveryRemainSecond field.
func (o *PoolStat) SetRecoveryRemainSecond(v int64) {
	o.RecoveryRemainSecond = &v
}

// GetRemoveBandwidthKbyte returns the RemoveBandwidthKbyte field value if set, zero value otherwise.
func (o *PoolStat) GetRemoveBandwidthKbyte() float64 {
	if o == nil || IsNil(o.RemoveBandwidthKbyte) {
		var ret float64
		return ret
	}
	return *o.RemoveBandwidthKbyte
}

// GetRemoveBandwidthKbyteOk returns a tuple with the RemoveBandwidthKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetRemoveBandwidthKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.RemoveBandwidthKbyte) {
		return nil, false
	}
	return o.RemoveBandwidthKbyte, true
}

// HasRemoveBandwidthKbyte returns a boolean if a field has been set.
func (o *PoolStat) HasRemoveBandwidthKbyte() bool {
	if o != nil && !IsNil(o.RemoveBandwidthKbyte) {
		return true
	}

	return false
}

// SetRemoveBandwidthKbyte gets a reference to the given float64 and assigns it to the RemoveBandwidthKbyte field.
func (o *PoolStat) SetRemoveBandwidthKbyte(v float64) {
	o.RemoveBandwidthKbyte = &v
}

// GetRemoveIops returns the RemoveIops field value if set, zero value otherwise.
func (o *PoolStat) GetRemoveIops() float64 {
	if o == nil || IsNil(o.RemoveIops) {
		var ret float64
		return ret
	}
	return *o.RemoveIops
}

// GetRemoveIopsOk returns a tuple with the RemoveIops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetRemoveIopsOk() (*float64, bool) {
	if o == nil || IsNil(o.RemoveIops) {
		return nil, false
	}
	return o.RemoveIops, true
}

// HasRemoveIops returns a boolean if a field has been set.
func (o *PoolStat) HasRemoveIops() bool {
	if o != nil && !IsNil(o.RemoveIops) {
		return true
	}

	return false
}

// SetRemoveIops gets a reference to the given float64 and assigns it to the RemoveIops field.
func (o *PoolStat) SetRemoveIops(v float64) {
	o.RemoveIops = &v
}

// GetReservedDataKbyte returns the ReservedDataKbyte field value if set, zero value otherwise.
func (o *PoolStat) GetReservedDataKbyte() float64 {
	if o == nil || IsNil(o.ReservedDataKbyte) {
		var ret float64
		return ret
	}
	return *o.ReservedDataKbyte
}

// GetReservedDataKbyteOk returns a tuple with the ReservedDataKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetReservedDataKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.ReservedDataKbyte) {
		return nil, false
	}
	return o.ReservedDataKbyte, true
}

// HasReservedDataKbyte returns a boolean if a field has been set.
func (o *PoolStat) HasReservedDataKbyte() bool {
	if o != nil && !IsNil(o.ReservedDataKbyte) {
		return true
	}

	return false
}

// SetReservedDataKbyte gets a reference to the given float64 and assigns it to the ReservedDataKbyte field.
func (o *PoolStat) SetReservedDataKbyte(v float64) {
	o.ReservedDataKbyte = &v
}

// GetReservedDataPercent returns the ReservedDataPercent field value if set, zero value otherwise.
func (o *PoolStat) GetReservedDataPercent() float64 {
	if o == nil || IsNil(o.ReservedDataPercent) {
		var ret float64
		return ret
	}
	return *o.ReservedDataPercent
}

// GetReservedDataPercentOk returns a tuple with the ReservedDataPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetReservedDataPercentOk() (*float64, bool) {
	if o == nil || IsNil(o.ReservedDataPercent) {
		return nil, false
	}
	return o.ReservedDataPercent, true
}

// HasReservedDataPercent returns a boolean if a field has been set.
func (o *PoolStat) HasReservedDataPercent() bool {
	if o != nil && !IsNil(o.ReservedDataPercent) {
		return true
	}

	return false
}

// SetReservedDataPercent gets a reference to the given float64 and assigns it to the ReservedDataPercent field.
func (o *PoolStat) SetReservedDataPercent(v float64) {
	o.ReservedDataPercent = &v
}

// GetReservedUsedKbyte returns the ReservedUsedKbyte field value if set, zero value otherwise.
func (o *PoolStat) GetReservedUsedKbyte() float64 {
	if o == nil || IsNil(o.ReservedUsedKbyte) {
		var ret float64
		return ret
	}
	return *o.ReservedUsedKbyte
}

// GetReservedUsedKbyteOk returns a tuple with the ReservedUsedKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetReservedUsedKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.ReservedUsedKbyte) {
		return nil, false
	}
	return o.ReservedUsedKbyte, true
}

// HasReservedUsedKbyte returns a boolean if a field has been set.
func (o *PoolStat) HasReservedUsedKbyte() bool {
	if o != nil && !IsNil(o.ReservedUsedKbyte) {
		return true
	}

	return false
}

// SetReservedUsedKbyte gets a reference to the given float64 and assigns it to the ReservedUsedKbyte field.
func (o *PoolStat) SetReservedUsedKbyte(v float64) {
	o.ReservedUsedKbyte = &v
}

// GetRmwBandwidthKbyte returns the RmwBandwidthKbyte field value if set, zero value otherwise.
func (o *PoolStat) GetRmwBandwidthKbyte() float64 {
	if o == nil || IsNil(o.RmwBandwidthKbyte) {
		var ret float64
		return ret
	}
	return *o.RmwBandwidthKbyte
}

// GetRmwBandwidthKbyteOk returns a tuple with the RmwBandwidthKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetRmwBandwidthKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.RmwBandwidthKbyte) {
		return nil, false
	}
	return o.RmwBandwidthKbyte, true
}

// HasRmwBandwidthKbyte returns a boolean if a field has been set.
func (o *PoolStat) HasRmwBandwidthKbyte() bool {
	if o != nil && !IsNil(o.RmwBandwidthKbyte) {
		return true
	}

	return false
}

// SetRmwBandwidthKbyte gets a reference to the given float64 and assigns it to the RmwBandwidthKbyte field.
func (o *PoolStat) SetRmwBandwidthKbyte(v float64) {
	o.RmwBandwidthKbyte = &v
}

// GetRmwIops returns the RmwIops field value if set, zero value otherwise.
func (o *PoolStat) GetRmwIops() float64 {
	if o == nil || IsNil(o.RmwIops) {
		var ret float64
		return ret
	}
	return *o.RmwIops
}

// GetRmwIopsOk returns a tuple with the RmwIops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetRmwIopsOk() (*float64, bool) {
	if o == nil || IsNil(o.RmwIops) {
		return nil, false
	}
	return o.RmwIops, true
}

// HasRmwIops returns a boolean if a field has been set.
func (o *PoolStat) HasRmwIops() bool {
	if o != nil && !IsNil(o.RmwIops) {
		return true
	}

	return false
}

// SetRmwIops gets a reference to the given float64 and assigns it to the RmwIops field.
func (o *PoolStat) SetRmwIops(v float64) {
	o.RmwIops = &v
}

// GetSnapKbyte returns the SnapKbyte field value if set, zero value otherwise.
func (o *PoolStat) GetSnapKbyte() int64 {
	if o == nil || IsNil(o.SnapKbyte) {
		var ret int64
		return ret
	}
	return *o.SnapKbyte
}

// GetSnapKbyteOk returns a tuple with the SnapKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetSnapKbyteOk() (*int64, bool) {
	if o == nil || IsNil(o.SnapKbyte) {
		return nil, false
	}
	return o.SnapKbyte, true
}

// HasSnapKbyte returns a boolean if a field has been set.
func (o *PoolStat) HasSnapKbyte() bool {
	if o != nil && !IsNil(o.SnapKbyte) {
		return true
	}

	return false
}

// SetSnapKbyte gets a reference to the given int64 and assigns it to the SnapKbyte field.
func (o *PoolStat) SetSnapKbyte(v int64) {
	o.SnapKbyte = &v
}

// GetTotalBandwidthKbyte returns the TotalBandwidthKbyte field value if set, zero value otherwise.
func (o *PoolStat) GetTotalBandwidthKbyte() float64 {
	if o == nil || IsNil(o.TotalBandwidthKbyte) {
		var ret float64
		return ret
	}
	return *o.TotalBandwidthKbyte
}

// GetTotalBandwidthKbyteOk returns a tuple with the TotalBandwidthKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetTotalBandwidthKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.TotalBandwidthKbyte) {
		return nil, false
	}
	return o.TotalBandwidthKbyte, true
}

// HasTotalBandwidthKbyte returns a boolean if a field has been set.
func (o *PoolStat) HasTotalBandwidthKbyte() bool {
	if o != nil && !IsNil(o.TotalBandwidthKbyte) {
		return true
	}

	return false
}

// SetTotalBandwidthKbyte gets a reference to the given float64 and assigns it to the TotalBandwidthKbyte field.
func (o *PoolStat) SetTotalBandwidthKbyte(v float64) {
	o.TotalBandwidthKbyte = &v
}

// GetTotalCacheKbyte returns the TotalCacheKbyte field value if set, zero value otherwise.
func (o *PoolStat) GetTotalCacheKbyte() float64 {
	if o == nil || IsNil(o.TotalCacheKbyte) {
		var ret float64
		return ret
	}
	return *o.TotalCacheKbyte
}

// GetTotalCacheKbyteOk returns a tuple with the TotalCacheKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetTotalCacheKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.TotalCacheKbyte) {
		return nil, false
	}
	return o.TotalCacheKbyte, true
}

// HasTotalCacheKbyte returns a boolean if a field has been set.
func (o *PoolStat) HasTotalCacheKbyte() bool {
	if o != nil && !IsNil(o.TotalCacheKbyte) {
		return true
	}

	return false
}

// SetTotalCacheKbyte gets a reference to the given float64 and assigns it to the TotalCacheKbyte field.
func (o *PoolStat) SetTotalCacheKbyte(v float64) {
	o.TotalCacheKbyte = &v
}

// GetTotalIops returns the TotalIops field value if set, zero value otherwise.
func (o *PoolStat) GetTotalIops() float64 {
	if o == nil || IsNil(o.TotalIops) {
		var ret float64
		return ret
	}
	return *o.TotalIops
}

// GetTotalIopsOk returns a tuple with the TotalIops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetTotalIopsOk() (*float64, bool) {
	if o == nil || IsNil(o.TotalIops) {
		return nil, false
	}
	return o.TotalIops, true
}

// HasTotalIops returns a boolean if a field has been set.
func (o *PoolStat) HasTotalIops() bool {
	if o != nil && !IsNil(o.TotalIops) {
		return true
	}

	return false
}

// SetTotalIops gets a reference to the given float64 and assigns it to the TotalIops field.
func (o *PoolStat) SetTotalIops(v float64) {
	o.TotalIops = &v
}

// GetTotalKbyte returns the TotalKbyte field value if set, zero value otherwise.
func (o *PoolStat) GetTotalKbyte() int64 {
	if o == nil || IsNil(o.TotalKbyte) {
		var ret int64
		return ret
	}
	return *o.TotalKbyte
}

// GetTotalKbyteOk returns a tuple with the TotalKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetTotalKbyteOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalKbyte) {
		return nil, false
	}
	return o.TotalKbyte, true
}

// HasTotalKbyte returns a boolean if a field has been set.
func (o *PoolStat) HasTotalKbyte() bool {
	if o != nil && !IsNil(o.TotalKbyte) {
		return true
	}

	return false
}

// SetTotalKbyte gets a reference to the given int64 and assigns it to the TotalKbyte field.
func (o *PoolStat) SetTotalKbyte(v int64) {
	o.TotalKbyte = &v
}

// GetUnavailableNum returns the UnavailableNum field value if set, zero value otherwise.
func (o *PoolStat) GetUnavailableNum() int64 {
	if o == nil || IsNil(o.UnavailableNum) {
		var ret int64
		return ret
	}
	return *o.UnavailableNum
}

// GetUnavailableNumOk returns a tuple with the UnavailableNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetUnavailableNumOk() (*int64, bool) {
	if o == nil || IsNil(o.UnavailableNum) {
		return nil, false
	}
	return o.UnavailableNum, true
}

// HasUnavailableNum returns a boolean if a field has been set.
func (o *PoolStat) HasUnavailableNum() bool {
	if o != nil && !IsNil(o.UnavailableNum) {
		return true
	}

	return false
}

// SetUnavailableNum gets a reference to the given int64 and assigns it to the UnavailableNum field.
func (o *PoolStat) SetUnavailableNum(v int64) {
	o.UnavailableNum = &v
}

// GetUnavailablePercent returns the UnavailablePercent field value if set, zero value otherwise.
func (o *PoolStat) GetUnavailablePercent() float64 {
	if o == nil || IsNil(o.UnavailablePercent) {
		var ret float64
		return ret
	}
	return *o.UnavailablePercent
}

// GetUnavailablePercentOk returns a tuple with the UnavailablePercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetUnavailablePercentOk() (*float64, bool) {
	if o == nil || IsNil(o.UnavailablePercent) {
		return nil, false
	}
	return o.UnavailablePercent, true
}

// HasUnavailablePercent returns a boolean if a field has been set.
func (o *PoolStat) HasUnavailablePercent() bool {
	if o != nil && !IsNil(o.UnavailablePercent) {
		return true
	}

	return false
}

// SetUnavailablePercent gets a reference to the given float64 and assigns it to the UnavailablePercent field.
func (o *PoolStat) SetUnavailablePercent(v float64) {
	o.UnavailablePercent = &v
}

// GetUnusedDataKbyte returns the UnusedDataKbyte field value if set, zero value otherwise.
func (o *PoolStat) GetUnusedDataKbyte() float64 {
	if o == nil || IsNil(o.UnusedDataKbyte) {
		var ret float64
		return ret
	}
	return *o.UnusedDataKbyte
}

// GetUnusedDataKbyteOk returns a tuple with the UnusedDataKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetUnusedDataKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.UnusedDataKbyte) {
		return nil, false
	}
	return o.UnusedDataKbyte, true
}

// HasUnusedDataKbyte returns a boolean if a field has been set.
func (o *PoolStat) HasUnusedDataKbyte() bool {
	if o != nil && !IsNil(o.UnusedDataKbyte) {
		return true
	}

	return false
}

// SetUnusedDataKbyte gets a reference to the given float64 and assigns it to the UnusedDataKbyte field.
func (o *PoolStat) SetUnusedDataKbyte(v float64) {
	o.UnusedDataKbyte = &v
}

// GetUsedKbyte returns the UsedKbyte field value if set, zero value otherwise.
func (o *PoolStat) GetUsedKbyte() int64 {
	if o == nil || IsNil(o.UsedKbyte) {
		var ret int64
		return ret
	}
	return *o.UsedKbyte
}

// GetUsedKbyteOk returns a tuple with the UsedKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetUsedKbyteOk() (*int64, bool) {
	if o == nil || IsNil(o.UsedKbyte) {
		return nil, false
	}
	return o.UsedKbyte, true
}

// HasUsedKbyte returns a boolean if a field has been set.
func (o *PoolStat) HasUsedKbyte() bool {
	if o != nil && !IsNil(o.UsedKbyte) {
		return true
	}

	return false
}

// SetUsedKbyte gets a reference to the given int64 and assigns it to the UsedKbyte field.
func (o *PoolStat) SetUsedKbyte(v int64) {
	o.UsedKbyte = &v
}

// GetUsedPercent returns the UsedPercent field value if set, zero value otherwise.
func (o *PoolStat) GetUsedPercent() float64 {
	if o == nil || IsNil(o.UsedPercent) {
		var ret float64
		return ret
	}
	return *o.UsedPercent
}

// GetUsedPercentOk returns a tuple with the UsedPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetUsedPercentOk() (*float64, bool) {
	if o == nil || IsNil(o.UsedPercent) {
		return nil, false
	}
	return o.UsedPercent, true
}

// HasUsedPercent returns a boolean if a field has been set.
func (o *PoolStat) HasUsedPercent() bool {
	if o != nil && !IsNil(o.UsedPercent) {
		return true
	}

	return false
}

// SetUsedPercent gets a reference to the given float64 and assigns it to the UsedPercent field.
func (o *PoolStat) SetUsedPercent(v float64) {
	o.UsedPercent = &v
}

// GetWaterLevel returns the WaterLevel field value if set, zero value otherwise.
func (o *PoolStat) GetWaterLevel() float64 {
	if o == nil || IsNil(o.WaterLevel) {
		var ret float64
		return ret
	}
	return *o.WaterLevel
}

// GetWaterLevelOk returns a tuple with the WaterLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetWaterLevelOk() (*float64, bool) {
	if o == nil || IsNil(o.WaterLevel) {
		return nil, false
	}
	return o.WaterLevel, true
}

// HasWaterLevel returns a boolean if a field has been set.
func (o *PoolStat) HasWaterLevel() bool {
	if o != nil && !IsNil(o.WaterLevel) {
		return true
	}

	return false
}

// SetWaterLevel gets a reference to the given float64 and assigns it to the WaterLevel field.
func (o *PoolStat) SetWaterLevel(v float64) {
	o.WaterLevel = &v
}

// GetWriteBandwidthKbyte returns the WriteBandwidthKbyte field value if set, zero value otherwise.
func (o *PoolStat) GetWriteBandwidthKbyte() float64 {
	if o == nil || IsNil(o.WriteBandwidthKbyte) {
		var ret float64
		return ret
	}
	return *o.WriteBandwidthKbyte
}

// GetWriteBandwidthKbyteOk returns a tuple with the WriteBandwidthKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetWriteBandwidthKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.WriteBandwidthKbyte) {
		return nil, false
	}
	return o.WriteBandwidthKbyte, true
}

// HasWriteBandwidthKbyte returns a boolean if a field has been set.
func (o *PoolStat) HasWriteBandwidthKbyte() bool {
	if o != nil && !IsNil(o.WriteBandwidthKbyte) {
		return true
	}

	return false
}

// SetWriteBandwidthKbyte gets a reference to the given float64 and assigns it to the WriteBandwidthKbyte field.
func (o *PoolStat) SetWriteBandwidthKbyte(v float64) {
	o.WriteBandwidthKbyte = &v
}

// GetWriteCacheKbyte returns the WriteCacheKbyte field value if set, zero value otherwise.
func (o *PoolStat) GetWriteCacheKbyte() float64 {
	if o == nil || IsNil(o.WriteCacheKbyte) {
		var ret float64
		return ret
	}
	return *o.WriteCacheKbyte
}

// GetWriteCacheKbyteOk returns a tuple with the WriteCacheKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetWriteCacheKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.WriteCacheKbyte) {
		return nil, false
	}
	return o.WriteCacheKbyte, true
}

// HasWriteCacheKbyte returns a boolean if a field has been set.
func (o *PoolStat) HasWriteCacheKbyte() bool {
	if o != nil && !IsNil(o.WriteCacheKbyte) {
		return true
	}

	return false
}

// SetWriteCacheKbyte gets a reference to the given float64 and assigns it to the WriteCacheKbyte field.
func (o *PoolStat) SetWriteCacheKbyte(v float64) {
	o.WriteCacheKbyte = &v
}

// GetWriteCacheMergeRate returns the WriteCacheMergeRate field value if set, zero value otherwise.
func (o *PoolStat) GetWriteCacheMergeRate() float64 {
	if o == nil || IsNil(o.WriteCacheMergeRate) {
		var ret float64
		return ret
	}
	return *o.WriteCacheMergeRate
}

// GetWriteCacheMergeRateOk returns a tuple with the WriteCacheMergeRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetWriteCacheMergeRateOk() (*float64, bool) {
	if o == nil || IsNil(o.WriteCacheMergeRate) {
		return nil, false
	}
	return o.WriteCacheMergeRate, true
}

// HasWriteCacheMergeRate returns a boolean if a field has been set.
func (o *PoolStat) HasWriteCacheMergeRate() bool {
	if o != nil && !IsNil(o.WriteCacheMergeRate) {
		return true
	}

	return false
}

// SetWriteCacheMergeRate gets a reference to the given float64 and assigns it to the WriteCacheMergeRate field.
func (o *PoolStat) SetWriteCacheMergeRate(v float64) {
	o.WriteCacheMergeRate = &v
}

// GetWriteCachePercent returns the WriteCachePercent field value if set, zero value otherwise.
func (o *PoolStat) GetWriteCachePercent() float64 {
	if o == nil || IsNil(o.WriteCachePercent) {
		var ret float64
		return ret
	}
	return *o.WriteCachePercent
}

// GetWriteCachePercentOk returns a tuple with the WriteCachePercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetWriteCachePercentOk() (*float64, bool) {
	if o == nil || IsNil(o.WriteCachePercent) {
		return nil, false
	}
	return o.WriteCachePercent, true
}

// HasWriteCachePercent returns a boolean if a field has been set.
func (o *PoolStat) HasWriteCachePercent() bool {
	if o != nil && !IsNil(o.WriteCachePercent) {
		return true
	}

	return false
}

// SetWriteCachePercent gets a reference to the given float64 and assigns it to the WriteCachePercent field.
func (o *PoolStat) SetWriteCachePercent(v float64) {
	o.WriteCachePercent = &v
}

// GetWriteIoSizeKbyte returns the WriteIoSizeKbyte field value if set, zero value otherwise.
func (o *PoolStat) GetWriteIoSizeKbyte() float64 {
	if o == nil || IsNil(o.WriteIoSizeKbyte) {
		var ret float64
		return ret
	}
	return *o.WriteIoSizeKbyte
}

// GetWriteIoSizeKbyteOk returns a tuple with the WriteIoSizeKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetWriteIoSizeKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.WriteIoSizeKbyte) {
		return nil, false
	}
	return o.WriteIoSizeKbyte, true
}

// HasWriteIoSizeKbyte returns a boolean if a field has been set.
func (o *PoolStat) HasWriteIoSizeKbyte() bool {
	if o != nil && !IsNil(o.WriteIoSizeKbyte) {
		return true
	}

	return false
}

// SetWriteIoSizeKbyte gets a reference to the given float64 and assigns it to the WriteIoSizeKbyte field.
func (o *PoolStat) SetWriteIoSizeKbyte(v float64) {
	o.WriteIoSizeKbyte = &v
}

// GetWriteIops returns the WriteIops field value if set, zero value otherwise.
func (o *PoolStat) GetWriteIops() float64 {
	if o == nil || IsNil(o.WriteIops) {
		var ret float64
		return ret
	}
	return *o.WriteIops
}

// GetWriteIopsOk returns a tuple with the WriteIops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetWriteIopsOk() (*float64, bool) {
	if o == nil || IsNil(o.WriteIops) {
		return nil, false
	}
	return o.WriteIops, true
}

// HasWriteIops returns a boolean if a field has been set.
func (o *PoolStat) HasWriteIops() bool {
	if o != nil && !IsNil(o.WriteIops) {
		return true
	}

	return false
}

// SetWriteIops gets a reference to the given float64 and assigns it to the WriteIops field.
func (o *PoolStat) SetWriteIops(v float64) {
	o.WriteIops = &v
}

// GetWriteLatencyUs returns the WriteLatencyUs field value if set, zero value otherwise.
func (o *PoolStat) GetWriteLatencyUs() float64 {
	if o == nil || IsNil(o.WriteLatencyUs) {
		var ret float64
		return ret
	}
	return *o.WriteLatencyUs
}

// GetWriteLatencyUsOk returns a tuple with the WriteLatencyUs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolStat) GetWriteLatencyUsOk() (*float64, bool) {
	if o == nil || IsNil(o.WriteLatencyUs) {
		return nil, false
	}
	return o.WriteLatencyUs, true
}

// HasWriteLatencyUs returns a boolean if a field has been set.
func (o *PoolStat) HasWriteLatencyUs() bool {
	if o != nil && !IsNil(o.WriteLatencyUs) {
		return true
	}

	return false
}

// SetWriteLatencyUs gets a reference to the given float64 and assigns it to the WriteLatencyUs field.
func (o *PoolStat) SetWriteLatencyUs(v float64) {
	o.WriteLatencyUs = &v
}

func (o PoolStat) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PoolStat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActualKbyte) {
		toSerialize["actual_kbyte"] = o.ActualKbyte
	}
	if !IsNil(o.AvailableActualKbyte) {
		toSerialize["available_actual_kbyte"] = o.AvailableActualKbyte
	}
	if !IsNil(o.ClientReadBandwidthKbyte) {
		toSerialize["client_read_bandwidth_kbyte"] = o.ClientReadBandwidthKbyte
	}
	if !IsNil(o.ClientReadIoSizeKbyte) {
		toSerialize["client_read_io_size_kbyte"] = o.ClientReadIoSizeKbyte
	}
	if !IsNil(o.ClientReadIops) {
		toSerialize["client_read_iops"] = o.ClientReadIops
	}
	if !IsNil(o.ClientReadLatencyUs) {
		toSerialize["client_read_latency_us"] = o.ClientReadLatencyUs
	}
	if !IsNil(o.ClientWriteBandwidthKbyte) {
		toSerialize["client_write_bandwidth_kbyte"] = o.ClientWriteBandwidthKbyte
	}
	if !IsNil(o.ClientWriteIoSizeKbyte) {
		toSerialize["client_write_io_size_kbyte"] = o.ClientWriteIoSizeKbyte
	}
	if !IsNil(o.ClientWriteIops) {
		toSerialize["client_write_iops"] = o.ClientWriteIops
	}
	if !IsNil(o.ClientWriteLatencyUs) {
		toSerialize["client_write_latency_us"] = o.ClientWriteLatencyUs
	}
	if !IsNil(o.CompressRatio) {
		toSerialize["compress_ratio"] = o.CompressRatio
	}
	if !IsNil(o.CompressedKbyte) {
		toSerialize["compressed_kbyte"] = o.CompressedKbyte
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.CreatingNum) {
		toSerialize["creating_num"] = o.CreatingNum
	}
	if !IsNil(o.DataKbyte) {
		toSerialize["data_kbyte"] = o.DataKbyte
	}
	if !IsNil(o.DegradedNum) {
		toSerialize["degraded_num"] = o.DegradedNum
	}
	if !IsNil(o.DegradedPercent) {
		toSerialize["degraded_percent"] = o.DegradedPercent
	}
	if !IsNil(o.ErrorKbyte) {
		toSerialize["error_kbyte"] = o.ErrorKbyte
	}
	if !IsNil(o.FlushReadBandwidthKbyte) {
		toSerialize["flush_read_bandwidth_kbyte"] = o.FlushReadBandwidthKbyte
	}
	if !IsNil(o.FlushReadIoSizeKbyte) {
		toSerialize["flush_read_io_size_kbyte"] = o.FlushReadIoSizeKbyte
	}
	if !IsNil(o.FlushReadIops) {
		toSerialize["flush_read_iops"] = o.FlushReadIops
	}
	if !IsNil(o.FlushReadLatencyUs) {
		toSerialize["flush_read_latency_us"] = o.FlushReadLatencyUs
	}
	if !IsNil(o.FlushWriteBandwidthKbyte) {
		toSerialize["flush_write_bandwidth_kbyte"] = o.FlushWriteBandwidthKbyte
	}
	if !IsNil(o.FlushWriteIoSizeKbyte) {
		toSerialize["flush_write_io_size_kbyte"] = o.FlushWriteIoSizeKbyte
	}
	if !IsNil(o.FlushWriteIops) {
		toSerialize["flush_write_iops"] = o.FlushWriteIops
	}
	if !IsNil(o.FlushWriteLatencyUs) {
		toSerialize["flush_write_latency_us"] = o.FlushWriteLatencyUs
	}
	if !IsNil(o.GarbageRatio) {
		toSerialize["garbage_ratio"] = o.GarbageRatio
	}
	if !IsNil(o.GcReadBandwidthKbyte) {
		toSerialize["gc_read_bandwidth_kbyte"] = o.GcReadBandwidthKbyte
	}
	if !IsNil(o.GcReadIoSizeKbyte) {
		toSerialize["gc_read_io_size_kbyte"] = o.GcReadIoSizeKbyte
	}
	if !IsNil(o.GcReadIops) {
		toSerialize["gc_read_iops"] = o.GcReadIops
	}
	if !IsNil(o.GcReadLatencyUs) {
		toSerialize["gc_read_latency_us"] = o.GcReadLatencyUs
	}
	if !IsNil(o.GcRemoveBandwidthKbyte) {
		toSerialize["gc_remove_bandwidth_kbyte"] = o.GcRemoveBandwidthKbyte
	}
	if !IsNil(o.GcRemoveIoSizeKbyte) {
		toSerialize["gc_remove_io_size_kbyte"] = o.GcRemoveIoSizeKbyte
	}
	if !IsNil(o.GcRemoveIops) {
		toSerialize["gc_remove_iops"] = o.GcRemoveIops
	}
	if !IsNil(o.GcWriteBandwidthKbyte) {
		toSerialize["gc_write_bandwidth_kbyte"] = o.GcWriteBandwidthKbyte
	}
	if !IsNil(o.GcWriteIoSizeKbyte) {
		toSerialize["gc_write_io_size_kbyte"] = o.GcWriteIoSizeKbyte
	}
	if !IsNil(o.GcWriteIops) {
		toSerialize["gc_write_iops"] = o.GcWriteIops
	}
	if !IsNil(o.GcWriteLatencyUs) {
		toSerialize["gc_write_latency_us"] = o.GcWriteLatencyUs
	}
	if !IsNil(o.HealthyNum) {
		toSerialize["healthy_num"] = o.HealthyNum
	}
	if !IsNil(o.HealthyPercent) {
		toSerialize["healthy_percent"] = o.HealthyPercent
	}
	if !IsNil(o.MaxAvailKbyte) {
		toSerialize["max_avail_kbyte"] = o.MaxAvailKbyte
	}
	if !IsNil(o.MinGarbageKbyte) {
		toSerialize["min_garbage_kbyte"] = o.MinGarbageKbyte
	}
	if !IsNil(o.OmapTotalKbyte) {
		toSerialize["omap_total_kbyte"] = o.OmapTotalKbyte
	}
	if !IsNil(o.OmapUsedKbyte) {
		toSerialize["omap_used_kbyte"] = o.OmapUsedKbyte
	}
	if !IsNil(o.OmapUsedPercent) {
		toSerialize["omap_used_percent"] = o.OmapUsedPercent
	}
	if !IsNil(o.OsdCapacityUnbalance) {
		toSerialize["osd_capacity_unbalance"] = o.OsdCapacityUnbalance
	}
	if !IsNil(o.PoolCapacityUsage) {
		toSerialize["pool_capacity_usage"] = o.PoolCapacityUsage
	}
	if !IsNil(o.ReadBandwidthKbyte) {
		toSerialize["read_bandwidth_kbyte"] = o.ReadBandwidthKbyte
	}
	if !IsNil(o.ReadCacheHitRate) {
		toSerialize["read_cache_hit_rate"] = o.ReadCacheHitRate
	}
	if !IsNil(o.ReadCacheKbyte) {
		toSerialize["read_cache_kbyte"] = o.ReadCacheKbyte
	}
	if !IsNil(o.ReadCachePercent) {
		toSerialize["read_cache_percent"] = o.ReadCachePercent
	}
	if !IsNil(o.ReadIoSizeKbyte) {
		toSerialize["read_io_size_kbyte"] = o.ReadIoSizeKbyte
	}
	if !IsNil(o.ReadIops) {
		toSerialize["read_iops"] = o.ReadIops
	}
	if !IsNil(o.ReadLatencyUs) {
		toSerialize["read_latency_us"] = o.ReadLatencyUs
	}
	if !IsNil(o.RecoveryBandwidthKbyte) {
		toSerialize["recovery_bandwidth_kbyte"] = o.RecoveryBandwidthKbyte
	}
	if !IsNil(o.RecoveryIops) {
		toSerialize["recovery_iops"] = o.RecoveryIops
	}
	if !IsNil(o.RecoveryNum) {
		toSerialize["recovery_num"] = o.RecoveryNum
	}
	if !IsNil(o.RecoveryPercent) {
		toSerialize["recovery_percent"] = o.RecoveryPercent
	}
	if !IsNil(o.RecoveryRemainSecond) {
		toSerialize["recovery_remain_second"] = o.RecoveryRemainSecond
	}
	if !IsNil(o.RemoveBandwidthKbyte) {
		toSerialize["remove_bandwidth_kbyte"] = o.RemoveBandwidthKbyte
	}
	if !IsNil(o.RemoveIops) {
		toSerialize["remove_iops"] = o.RemoveIops
	}
	if !IsNil(o.ReservedDataKbyte) {
		toSerialize["reserved_data_kbyte"] = o.ReservedDataKbyte
	}
	if !IsNil(o.ReservedDataPercent) {
		toSerialize["reserved_data_percent"] = o.ReservedDataPercent
	}
	if !IsNil(o.ReservedUsedKbyte) {
		toSerialize["reserved_used_kbyte"] = o.ReservedUsedKbyte
	}
	if !IsNil(o.RmwBandwidthKbyte) {
		toSerialize["rmw_bandwidth_kbyte"] = o.RmwBandwidthKbyte
	}
	if !IsNil(o.RmwIops) {
		toSerialize["rmw_iops"] = o.RmwIops
	}
	if !IsNil(o.SnapKbyte) {
		toSerialize["snap_kbyte"] = o.SnapKbyte
	}
	if !IsNil(o.TotalBandwidthKbyte) {
		toSerialize["total_bandwidth_kbyte"] = o.TotalBandwidthKbyte
	}
	if !IsNil(o.TotalCacheKbyte) {
		toSerialize["total_cache_kbyte"] = o.TotalCacheKbyte
	}
	if !IsNil(o.TotalIops) {
		toSerialize["total_iops"] = o.TotalIops
	}
	if !IsNil(o.TotalKbyte) {
		toSerialize["total_kbyte"] = o.TotalKbyte
	}
	if !IsNil(o.UnavailableNum) {
		toSerialize["unavailable_num"] = o.UnavailableNum
	}
	if !IsNil(o.UnavailablePercent) {
		toSerialize["unavailable_percent"] = o.UnavailablePercent
	}
	if !IsNil(o.UnusedDataKbyte) {
		toSerialize["unused_data_kbyte"] = o.UnusedDataKbyte
	}
	if !IsNil(o.UsedKbyte) {
		toSerialize["used_kbyte"] = o.UsedKbyte
	}
	if !IsNil(o.UsedPercent) {
		toSerialize["used_percent"] = o.UsedPercent
	}
	if !IsNil(o.WaterLevel) {
		toSerialize["water_level"] = o.WaterLevel
	}
	if !IsNil(o.WriteBandwidthKbyte) {
		toSerialize["write_bandwidth_kbyte"] = o.WriteBandwidthKbyte
	}
	if !IsNil(o.WriteCacheKbyte) {
		toSerialize["write_cache_kbyte"] = o.WriteCacheKbyte
	}
	if !IsNil(o.WriteCacheMergeRate) {
		toSerialize["write_cache_merge_rate"] = o.WriteCacheMergeRate
	}
	if !IsNil(o.WriteCachePercent) {
		toSerialize["write_cache_percent"] = o.WriteCachePercent
	}
	if !IsNil(o.WriteIoSizeKbyte) {
		toSerialize["write_io_size_kbyte"] = o.WriteIoSizeKbyte
	}
	if !IsNil(o.WriteIops) {
		toSerialize["write_iops"] = o.WriteIops
	}
	if !IsNil(o.WriteLatencyUs) {
		toSerialize["write_latency_us"] = o.WriteLatencyUs
	}
	return toSerialize, nil
}

type NullablePoolStat struct {
	value *PoolStat
	isSet bool
}

func (v NullablePoolStat) Get() *PoolStat {
	return v.value
}

func (v *NullablePoolStat) Set(val *PoolStat) {
	v.value = val
	v.isSet = true
}

func (v NullablePoolStat) IsSet() bool {
	return v.isSet
}

func (v *NullablePoolStat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePoolStat(val *PoolStat) *NullablePoolStat {
	return &NullablePoolStat{value: val, isSet: true}
}

func (v NullablePoolStat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePoolStat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


