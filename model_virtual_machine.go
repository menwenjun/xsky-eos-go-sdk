/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the VirtualMachine type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VirtualMachine{}

// VirtualMachine VirtualMachine defines libvirt VM
type VirtualMachine struct {
	ActionStatus *string `json:"action_status,omitempty"`
	Cluster *ClusterNestview `json:"cluster,omitempty"`
	Create *time.Time `json:"create,omitempty"`
	CustomCpu *int64 `json:"custom_cpu,omitempty"`
	Disks []VMDisk `json:"disks,omitempty"`
	Flavor *VMFlavorNestview `json:"flavor,omitempty"`
	Host *HostNestview `json:"host,omitempty"`
	Id *int64 `json:"id,omitempty"`
	Image *VMImageNestview `json:"image,omitempty"`
	Name *string `json:"name,omitempty"`
	Nics []VMNetworkInterface `json:"nics,omitempty"`
	RootVolume *VolumeNestview `json:"root_volume,omitempty"`
	Status *string `json:"status,omitempty"`
	Update *time.Time `json:"update,omitempty"`
	Uuid *string `json:"uuid,omitempty"`
	VmStatus *string `json:"vm_status,omitempty"`
}

// NewVirtualMachine instantiates a new VirtualMachine object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualMachine() *VirtualMachine {
	this := VirtualMachine{}
	return &this
}

// NewVirtualMachineWithDefaults instantiates a new VirtualMachine object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualMachineWithDefaults() *VirtualMachine {
	this := VirtualMachine{}
	return &this
}

// GetActionStatus returns the ActionStatus field value if set, zero value otherwise.
func (o *VirtualMachine) GetActionStatus() string {
	if o == nil || IsNil(o.ActionStatus) {
		var ret string
		return ret
	}
	return *o.ActionStatus
}

// GetActionStatusOk returns a tuple with the ActionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualMachine) GetActionStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ActionStatus) {
		return nil, false
	}
	return o.ActionStatus, true
}

// HasActionStatus returns a boolean if a field has been set.
func (o *VirtualMachine) HasActionStatus() bool {
	if o != nil && !IsNil(o.ActionStatus) {
		return true
	}

	return false
}

// SetActionStatus gets a reference to the given string and assigns it to the ActionStatus field.
func (o *VirtualMachine) SetActionStatus(v string) {
	o.ActionStatus = &v
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *VirtualMachine) GetCluster() ClusterNestview {
	if o == nil || IsNil(o.Cluster) {
		var ret ClusterNestview
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualMachine) GetClusterOk() (*ClusterNestview, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *VirtualMachine) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given ClusterNestview and assigns it to the Cluster field.
func (o *VirtualMachine) SetCluster(v ClusterNestview) {
	o.Cluster = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *VirtualMachine) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualMachine) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *VirtualMachine) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *VirtualMachine) SetCreate(v time.Time) {
	o.Create = &v
}

// GetCustomCpu returns the CustomCpu field value if set, zero value otherwise.
func (o *VirtualMachine) GetCustomCpu() int64 {
	if o == nil || IsNil(o.CustomCpu) {
		var ret int64
		return ret
	}
	return *o.CustomCpu
}

// GetCustomCpuOk returns a tuple with the CustomCpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualMachine) GetCustomCpuOk() (*int64, bool) {
	if o == nil || IsNil(o.CustomCpu) {
		return nil, false
	}
	return o.CustomCpu, true
}

// HasCustomCpu returns a boolean if a field has been set.
func (o *VirtualMachine) HasCustomCpu() bool {
	if o != nil && !IsNil(o.CustomCpu) {
		return true
	}

	return false
}

// SetCustomCpu gets a reference to the given int64 and assigns it to the CustomCpu field.
func (o *VirtualMachine) SetCustomCpu(v int64) {
	o.CustomCpu = &v
}

// GetDisks returns the Disks field value if set, zero value otherwise.
func (o *VirtualMachine) GetDisks() []VMDisk {
	if o == nil || IsNil(o.Disks) {
		var ret []VMDisk
		return ret
	}
	return o.Disks
}

// GetDisksOk returns a tuple with the Disks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualMachine) GetDisksOk() ([]VMDisk, bool) {
	if o == nil || IsNil(o.Disks) {
		return nil, false
	}
	return o.Disks, true
}

// HasDisks returns a boolean if a field has been set.
func (o *VirtualMachine) HasDisks() bool {
	if o != nil && !IsNil(o.Disks) {
		return true
	}

	return false
}

// SetDisks gets a reference to the given []VMDisk and assigns it to the Disks field.
func (o *VirtualMachine) SetDisks(v []VMDisk) {
	o.Disks = v
}

// GetFlavor returns the Flavor field value if set, zero value otherwise.
func (o *VirtualMachine) GetFlavor() VMFlavorNestview {
	if o == nil || IsNil(o.Flavor) {
		var ret VMFlavorNestview
		return ret
	}
	return *o.Flavor
}

// GetFlavorOk returns a tuple with the Flavor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualMachine) GetFlavorOk() (*VMFlavorNestview, bool) {
	if o == nil || IsNil(o.Flavor) {
		return nil, false
	}
	return o.Flavor, true
}

// HasFlavor returns a boolean if a field has been set.
func (o *VirtualMachine) HasFlavor() bool {
	if o != nil && !IsNil(o.Flavor) {
		return true
	}

	return false
}

// SetFlavor gets a reference to the given VMFlavorNestview and assigns it to the Flavor field.
func (o *VirtualMachine) SetFlavor(v VMFlavorNestview) {
	o.Flavor = &v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *VirtualMachine) GetHost() HostNestview {
	if o == nil || IsNil(o.Host) {
		var ret HostNestview
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualMachine) GetHostOk() (*HostNestview, bool) {
	if o == nil || IsNil(o.Host) {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *VirtualMachine) HasHost() bool {
	if o != nil && !IsNil(o.Host) {
		return true
	}

	return false
}

// SetHost gets a reference to the given HostNestview and assigns it to the Host field.
func (o *VirtualMachine) SetHost(v HostNestview) {
	o.Host = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *VirtualMachine) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualMachine) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *VirtualMachine) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *VirtualMachine) SetId(v int64) {
	o.Id = &v
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *VirtualMachine) GetImage() VMImageNestview {
	if o == nil || IsNil(o.Image) {
		var ret VMImageNestview
		return ret
	}
	return *o.Image
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualMachine) GetImageOk() (*VMImageNestview, bool) {
	if o == nil || IsNil(o.Image) {
		return nil, false
	}
	return o.Image, true
}

// HasImage returns a boolean if a field has been set.
func (o *VirtualMachine) HasImage() bool {
	if o != nil && !IsNil(o.Image) {
		return true
	}

	return false
}

// SetImage gets a reference to the given VMImageNestview and assigns it to the Image field.
func (o *VirtualMachine) SetImage(v VMImageNestview) {
	o.Image = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VirtualMachine) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualMachine) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VirtualMachine) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VirtualMachine) SetName(v string) {
	o.Name = &v
}

// GetNics returns the Nics field value if set, zero value otherwise.
func (o *VirtualMachine) GetNics() []VMNetworkInterface {
	if o == nil || IsNil(o.Nics) {
		var ret []VMNetworkInterface
		return ret
	}
	return o.Nics
}

// GetNicsOk returns a tuple with the Nics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualMachine) GetNicsOk() ([]VMNetworkInterface, bool) {
	if o == nil || IsNil(o.Nics) {
		return nil, false
	}
	return o.Nics, true
}

// HasNics returns a boolean if a field has been set.
func (o *VirtualMachine) HasNics() bool {
	if o != nil && !IsNil(o.Nics) {
		return true
	}

	return false
}

// SetNics gets a reference to the given []VMNetworkInterface and assigns it to the Nics field.
func (o *VirtualMachine) SetNics(v []VMNetworkInterface) {
	o.Nics = v
}

// GetRootVolume returns the RootVolume field value if set, zero value otherwise.
func (o *VirtualMachine) GetRootVolume() VolumeNestview {
	if o == nil || IsNil(o.RootVolume) {
		var ret VolumeNestview
		return ret
	}
	return *o.RootVolume
}

// GetRootVolumeOk returns a tuple with the RootVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualMachine) GetRootVolumeOk() (*VolumeNestview, bool) {
	if o == nil || IsNil(o.RootVolume) {
		return nil, false
	}
	return o.RootVolume, true
}

// HasRootVolume returns a boolean if a field has been set.
func (o *VirtualMachine) HasRootVolume() bool {
	if o != nil && !IsNil(o.RootVolume) {
		return true
	}

	return false
}

// SetRootVolume gets a reference to the given VolumeNestview and assigns it to the RootVolume field.
func (o *VirtualMachine) SetRootVolume(v VolumeNestview) {
	o.RootVolume = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *VirtualMachine) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualMachine) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *VirtualMachine) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *VirtualMachine) SetStatus(v string) {
	o.Status = &v
}

// GetUpdate returns the Update field value if set, zero value otherwise.
func (o *VirtualMachine) GetUpdate() time.Time {
	if o == nil || IsNil(o.Update) {
		var ret time.Time
		return ret
	}
	return *o.Update
}

// GetUpdateOk returns a tuple with the Update field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualMachine) GetUpdateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Update) {
		return nil, false
	}
	return o.Update, true
}

// HasUpdate returns a boolean if a field has been set.
func (o *VirtualMachine) HasUpdate() bool {
	if o != nil && !IsNil(o.Update) {
		return true
	}

	return false
}

// SetUpdate gets a reference to the given time.Time and assigns it to the Update field.
func (o *VirtualMachine) SetUpdate(v time.Time) {
	o.Update = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *VirtualMachine) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualMachine) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *VirtualMachine) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *VirtualMachine) SetUuid(v string) {
	o.Uuid = &v
}

// GetVmStatus returns the VmStatus field value if set, zero value otherwise.
func (o *VirtualMachine) GetVmStatus() string {
	if o == nil || IsNil(o.VmStatus) {
		var ret string
		return ret
	}
	return *o.VmStatus
}

// GetVmStatusOk returns a tuple with the VmStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualMachine) GetVmStatusOk() (*string, bool) {
	if o == nil || IsNil(o.VmStatus) {
		return nil, false
	}
	return o.VmStatus, true
}

// HasVmStatus returns a boolean if a field has been set.
func (o *VirtualMachine) HasVmStatus() bool {
	if o != nil && !IsNil(o.VmStatus) {
		return true
	}

	return false
}

// SetVmStatus gets a reference to the given string and assigns it to the VmStatus field.
func (o *VirtualMachine) SetVmStatus(v string) {
	o.VmStatus = &v
}

func (o VirtualMachine) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VirtualMachine) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActionStatus) {
		toSerialize["action_status"] = o.ActionStatus
	}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.CustomCpu) {
		toSerialize["custom_cpu"] = o.CustomCpu
	}
	if !IsNil(o.Disks) {
		toSerialize["disks"] = o.Disks
	}
	if !IsNil(o.Flavor) {
		toSerialize["flavor"] = o.Flavor
	}
	if !IsNil(o.Host) {
		toSerialize["host"] = o.Host
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Image) {
		toSerialize["image"] = o.Image
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Nics) {
		toSerialize["nics"] = o.Nics
	}
	if !IsNil(o.RootVolume) {
		toSerialize["root_volume"] = o.RootVolume
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Update) {
		toSerialize["update"] = o.Update
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.VmStatus) {
		toSerialize["vm_status"] = o.VmStatus
	}
	return toSerialize, nil
}

type NullableVirtualMachine struct {
	value *VirtualMachine
	isSet bool
}

func (v NullableVirtualMachine) Get() *VirtualMachine {
	return v.value
}

func (v *NullableVirtualMachine) Set(val *VirtualMachine) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualMachine) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualMachine) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualMachine(val *VirtualMachine) *NullableVirtualMachine {
	return &NullableVirtualMachine{value: val, isSet: true}
}

func (v NullableVirtualMachine) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualMachine) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


