/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the SSLCertificate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SSLCertificate{}

// SSLCertificate SSLCertificate ssl certificate model
type SSLCertificate struct {
	// created time of certificate
	Create *time.Time `json:"create,omitempty"`
	// certificate description
	Description *string `json:"description,omitempty"`
	// domain
	Domain *string `json:"domain,omitempty"`
	// enabled or not
	Enabled *bool `json:"enabled,omitempty"`
	// redirect http request to https
	ForceHttps *bool `json:"force_https,omitempty"`
	// apply to all s3 load balancer groups
	GlobalApply *bool `json:"global_apply,omitempty"`
	// certificate id
	Id *int64 `json:"id,omitempty"`
	// issuer info
	Issuer map[string]interface{} `json:"issuer,omitempty"`
	// certificate name
	Name *string `json:"name,omitempty"`
	// validity is not after the time
	NotAfter *time.Time `json:"not_after,omitempty"`
	// validity is not before the time
	NotBefore *time.Time `json:"not_before,omitempty"`
	// permitted dns domains
	PermittedDnsDomains []map[string]interface{} `json:"permitted_dns_domains,omitempty"`
	// public key algorithm
	PublicKeyAlgorithm *string `json:"public_key_algorithm,omitempty"`
	// public certificate
	RawCertificate *string `json:"raw_certificate,omitempty"`
	// s3 load balancer groups
	S3LoadBalancerGroups []S3LoadBalancerGroupNestview `json:"s3_load_balancer_groups,omitempty"`
	// signature algorithm
	SignatureAlgorithm *string `json:"signature_algorithm,omitempty"`
	Status *string `json:"status,omitempty"`
	// subject info
	Subject map[string]interface{} `json:"subject,omitempty"`
	// applied type: admin, s3, dfs_s3
	Type *string `json:"type,omitempty"`
	// updated time of certificate
	Update *time.Time `json:"update,omitempty"`
	// certificate version
	Version *int64 `json:"version,omitempty"`
}

// NewSSLCertificate instantiates a new SSLCertificate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSSLCertificate() *SSLCertificate {
	this := SSLCertificate{}
	return &this
}

// NewSSLCertificateWithDefaults instantiates a new SSLCertificate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSSLCertificateWithDefaults() *SSLCertificate {
	this := SSLCertificate{}
	return &this
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *SSLCertificate) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLCertificate) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *SSLCertificate) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *SSLCertificate) SetCreate(v time.Time) {
	o.Create = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SSLCertificate) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLCertificate) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SSLCertificate) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SSLCertificate) SetDescription(v string) {
	o.Description = &v
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *SSLCertificate) GetDomain() string {
	if o == nil || IsNil(o.Domain) {
		var ret string
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLCertificate) GetDomainOk() (*string, bool) {
	if o == nil || IsNil(o.Domain) {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *SSLCertificate) HasDomain() bool {
	if o != nil && !IsNil(o.Domain) {
		return true
	}

	return false
}

// SetDomain gets a reference to the given string and assigns it to the Domain field.
func (o *SSLCertificate) SetDomain(v string) {
	o.Domain = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *SSLCertificate) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLCertificate) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *SSLCertificate) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *SSLCertificate) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetForceHttps returns the ForceHttps field value if set, zero value otherwise.
func (o *SSLCertificate) GetForceHttps() bool {
	if o == nil || IsNil(o.ForceHttps) {
		var ret bool
		return ret
	}
	return *o.ForceHttps
}

// GetForceHttpsOk returns a tuple with the ForceHttps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLCertificate) GetForceHttpsOk() (*bool, bool) {
	if o == nil || IsNil(o.ForceHttps) {
		return nil, false
	}
	return o.ForceHttps, true
}

// HasForceHttps returns a boolean if a field has been set.
func (o *SSLCertificate) HasForceHttps() bool {
	if o != nil && !IsNil(o.ForceHttps) {
		return true
	}

	return false
}

// SetForceHttps gets a reference to the given bool and assigns it to the ForceHttps field.
func (o *SSLCertificate) SetForceHttps(v bool) {
	o.ForceHttps = &v
}

// GetGlobalApply returns the GlobalApply field value if set, zero value otherwise.
func (o *SSLCertificate) GetGlobalApply() bool {
	if o == nil || IsNil(o.GlobalApply) {
		var ret bool
		return ret
	}
	return *o.GlobalApply
}

// GetGlobalApplyOk returns a tuple with the GlobalApply field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLCertificate) GetGlobalApplyOk() (*bool, bool) {
	if o == nil || IsNil(o.GlobalApply) {
		return nil, false
	}
	return o.GlobalApply, true
}

// HasGlobalApply returns a boolean if a field has been set.
func (o *SSLCertificate) HasGlobalApply() bool {
	if o != nil && !IsNil(o.GlobalApply) {
		return true
	}

	return false
}

// SetGlobalApply gets a reference to the given bool and assigns it to the GlobalApply field.
func (o *SSLCertificate) SetGlobalApply(v bool) {
	o.GlobalApply = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SSLCertificate) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLCertificate) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SSLCertificate) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *SSLCertificate) SetId(v int64) {
	o.Id = &v
}

// GetIssuer returns the Issuer field value if set, zero value otherwise.
func (o *SSLCertificate) GetIssuer() map[string]interface{} {
	if o == nil || IsNil(o.Issuer) {
		var ret map[string]interface{}
		return ret
	}
	return o.Issuer
}

// GetIssuerOk returns a tuple with the Issuer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLCertificate) GetIssuerOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Issuer) {
		return map[string]interface{}{}, false
	}
	return o.Issuer, true
}

// HasIssuer returns a boolean if a field has been set.
func (o *SSLCertificate) HasIssuer() bool {
	if o != nil && !IsNil(o.Issuer) {
		return true
	}

	return false
}

// SetIssuer gets a reference to the given map[string]interface{} and assigns it to the Issuer field.
func (o *SSLCertificate) SetIssuer(v map[string]interface{}) {
	o.Issuer = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SSLCertificate) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLCertificate) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SSLCertificate) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SSLCertificate) SetName(v string) {
	o.Name = &v
}

// GetNotAfter returns the NotAfter field value if set, zero value otherwise.
func (o *SSLCertificate) GetNotAfter() time.Time {
	if o == nil || IsNil(o.NotAfter) {
		var ret time.Time
		return ret
	}
	return *o.NotAfter
}

// GetNotAfterOk returns a tuple with the NotAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLCertificate) GetNotAfterOk() (*time.Time, bool) {
	if o == nil || IsNil(o.NotAfter) {
		return nil, false
	}
	return o.NotAfter, true
}

// HasNotAfter returns a boolean if a field has been set.
func (o *SSLCertificate) HasNotAfter() bool {
	if o != nil && !IsNil(o.NotAfter) {
		return true
	}

	return false
}

// SetNotAfter gets a reference to the given time.Time and assigns it to the NotAfter field.
func (o *SSLCertificate) SetNotAfter(v time.Time) {
	o.NotAfter = &v
}

// GetNotBefore returns the NotBefore field value if set, zero value otherwise.
func (o *SSLCertificate) GetNotBefore() time.Time {
	if o == nil || IsNil(o.NotBefore) {
		var ret time.Time
		return ret
	}
	return *o.NotBefore
}

// GetNotBeforeOk returns a tuple with the NotBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLCertificate) GetNotBeforeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.NotBefore) {
		return nil, false
	}
	return o.NotBefore, true
}

// HasNotBefore returns a boolean if a field has been set.
func (o *SSLCertificate) HasNotBefore() bool {
	if o != nil && !IsNil(o.NotBefore) {
		return true
	}

	return false
}

// SetNotBefore gets a reference to the given time.Time and assigns it to the NotBefore field.
func (o *SSLCertificate) SetNotBefore(v time.Time) {
	o.NotBefore = &v
}

// GetPermittedDnsDomains returns the PermittedDnsDomains field value if set, zero value otherwise.
func (o *SSLCertificate) GetPermittedDnsDomains() []map[string]interface{} {
	if o == nil || IsNil(o.PermittedDnsDomains) {
		var ret []map[string]interface{}
		return ret
	}
	return o.PermittedDnsDomains
}

// GetPermittedDnsDomainsOk returns a tuple with the PermittedDnsDomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLCertificate) GetPermittedDnsDomainsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.PermittedDnsDomains) {
		return nil, false
	}
	return o.PermittedDnsDomains, true
}

// HasPermittedDnsDomains returns a boolean if a field has been set.
func (o *SSLCertificate) HasPermittedDnsDomains() bool {
	if o != nil && !IsNil(o.PermittedDnsDomains) {
		return true
	}

	return false
}

// SetPermittedDnsDomains gets a reference to the given []map[string]interface{} and assigns it to the PermittedDnsDomains field.
func (o *SSLCertificate) SetPermittedDnsDomains(v []map[string]interface{}) {
	o.PermittedDnsDomains = v
}

// GetPublicKeyAlgorithm returns the PublicKeyAlgorithm field value if set, zero value otherwise.
func (o *SSLCertificate) GetPublicKeyAlgorithm() string {
	if o == nil || IsNil(o.PublicKeyAlgorithm) {
		var ret string
		return ret
	}
	return *o.PublicKeyAlgorithm
}

// GetPublicKeyAlgorithmOk returns a tuple with the PublicKeyAlgorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLCertificate) GetPublicKeyAlgorithmOk() (*string, bool) {
	if o == nil || IsNil(o.PublicKeyAlgorithm) {
		return nil, false
	}
	return o.PublicKeyAlgorithm, true
}

// HasPublicKeyAlgorithm returns a boolean if a field has been set.
func (o *SSLCertificate) HasPublicKeyAlgorithm() bool {
	if o != nil && !IsNil(o.PublicKeyAlgorithm) {
		return true
	}

	return false
}

// SetPublicKeyAlgorithm gets a reference to the given string and assigns it to the PublicKeyAlgorithm field.
func (o *SSLCertificate) SetPublicKeyAlgorithm(v string) {
	o.PublicKeyAlgorithm = &v
}

// GetRawCertificate returns the RawCertificate field value if set, zero value otherwise.
func (o *SSLCertificate) GetRawCertificate() string {
	if o == nil || IsNil(o.RawCertificate) {
		var ret string
		return ret
	}
	return *o.RawCertificate
}

// GetRawCertificateOk returns a tuple with the RawCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLCertificate) GetRawCertificateOk() (*string, bool) {
	if o == nil || IsNil(o.RawCertificate) {
		return nil, false
	}
	return o.RawCertificate, true
}

// HasRawCertificate returns a boolean if a field has been set.
func (o *SSLCertificate) HasRawCertificate() bool {
	if o != nil && !IsNil(o.RawCertificate) {
		return true
	}

	return false
}

// SetRawCertificate gets a reference to the given string and assigns it to the RawCertificate field.
func (o *SSLCertificate) SetRawCertificate(v string) {
	o.RawCertificate = &v
}

// GetS3LoadBalancerGroups returns the S3LoadBalancerGroups field value if set, zero value otherwise.
func (o *SSLCertificate) GetS3LoadBalancerGroups() []S3LoadBalancerGroupNestview {
	if o == nil || IsNil(o.S3LoadBalancerGroups) {
		var ret []S3LoadBalancerGroupNestview
		return ret
	}
	return o.S3LoadBalancerGroups
}

// GetS3LoadBalancerGroupsOk returns a tuple with the S3LoadBalancerGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLCertificate) GetS3LoadBalancerGroupsOk() ([]S3LoadBalancerGroupNestview, bool) {
	if o == nil || IsNil(o.S3LoadBalancerGroups) {
		return nil, false
	}
	return o.S3LoadBalancerGroups, true
}

// HasS3LoadBalancerGroups returns a boolean if a field has been set.
func (o *SSLCertificate) HasS3LoadBalancerGroups() bool {
	if o != nil && !IsNil(o.S3LoadBalancerGroups) {
		return true
	}

	return false
}

// SetS3LoadBalancerGroups gets a reference to the given []S3LoadBalancerGroupNestview and assigns it to the S3LoadBalancerGroups field.
func (o *SSLCertificate) SetS3LoadBalancerGroups(v []S3LoadBalancerGroupNestview) {
	o.S3LoadBalancerGroups = v
}

// GetSignatureAlgorithm returns the SignatureAlgorithm field value if set, zero value otherwise.
func (o *SSLCertificate) GetSignatureAlgorithm() string {
	if o == nil || IsNil(o.SignatureAlgorithm) {
		var ret string
		return ret
	}
	return *o.SignatureAlgorithm
}

// GetSignatureAlgorithmOk returns a tuple with the SignatureAlgorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLCertificate) GetSignatureAlgorithmOk() (*string, bool) {
	if o == nil || IsNil(o.SignatureAlgorithm) {
		return nil, false
	}
	return o.SignatureAlgorithm, true
}

// HasSignatureAlgorithm returns a boolean if a field has been set.
func (o *SSLCertificate) HasSignatureAlgorithm() bool {
	if o != nil && !IsNil(o.SignatureAlgorithm) {
		return true
	}

	return false
}

// SetSignatureAlgorithm gets a reference to the given string and assigns it to the SignatureAlgorithm field.
func (o *SSLCertificate) SetSignatureAlgorithm(v string) {
	o.SignatureAlgorithm = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SSLCertificate) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLCertificate) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SSLCertificate) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *SSLCertificate) SetStatus(v string) {
	o.Status = &v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *SSLCertificate) GetSubject() map[string]interface{} {
	if o == nil || IsNil(o.Subject) {
		var ret map[string]interface{}
		return ret
	}
	return o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLCertificate) GetSubjectOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Subject) {
		return map[string]interface{}{}, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *SSLCertificate) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given map[string]interface{} and assigns it to the Subject field.
func (o *SSLCertificate) SetSubject(v map[string]interface{}) {
	o.Subject = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SSLCertificate) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLCertificate) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SSLCertificate) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SSLCertificate) SetType(v string) {
	o.Type = &v
}

// GetUpdate returns the Update field value if set, zero value otherwise.
func (o *SSLCertificate) GetUpdate() time.Time {
	if o == nil || IsNil(o.Update) {
		var ret time.Time
		return ret
	}
	return *o.Update
}

// GetUpdateOk returns a tuple with the Update field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLCertificate) GetUpdateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Update) {
		return nil, false
	}
	return o.Update, true
}

// HasUpdate returns a boolean if a field has been set.
func (o *SSLCertificate) HasUpdate() bool {
	if o != nil && !IsNil(o.Update) {
		return true
	}

	return false
}

// SetUpdate gets a reference to the given time.Time and assigns it to the Update field.
func (o *SSLCertificate) SetUpdate(v time.Time) {
	o.Update = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *SSLCertificate) GetVersion() int64 {
	if o == nil || IsNil(o.Version) {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLCertificate) GetVersionOk() (*int64, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *SSLCertificate) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *SSLCertificate) SetVersion(v int64) {
	o.Version = &v
}

func (o SSLCertificate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SSLCertificate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Domain) {
		toSerialize["domain"] = o.Domain
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.ForceHttps) {
		toSerialize["force_https"] = o.ForceHttps
	}
	if !IsNil(o.GlobalApply) {
		toSerialize["global_apply"] = o.GlobalApply
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Issuer) {
		toSerialize["issuer"] = o.Issuer
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NotAfter) {
		toSerialize["not_after"] = o.NotAfter
	}
	if !IsNil(o.NotBefore) {
		toSerialize["not_before"] = o.NotBefore
	}
	if !IsNil(o.PermittedDnsDomains) {
		toSerialize["permitted_dns_domains"] = o.PermittedDnsDomains
	}
	if !IsNil(o.PublicKeyAlgorithm) {
		toSerialize["public_key_algorithm"] = o.PublicKeyAlgorithm
	}
	if !IsNil(o.RawCertificate) {
		toSerialize["raw_certificate"] = o.RawCertificate
	}
	if !IsNil(o.S3LoadBalancerGroups) {
		toSerialize["s3_load_balancer_groups"] = o.S3LoadBalancerGroups
	}
	if !IsNil(o.SignatureAlgorithm) {
		toSerialize["signature_algorithm"] = o.SignatureAlgorithm
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Update) {
		toSerialize["update"] = o.Update
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableSSLCertificate struct {
	value *SSLCertificate
	isSet bool
}

func (v NullableSSLCertificate) Get() *SSLCertificate {
	return v.value
}

func (v *NullableSSLCertificate) Set(val *SSLCertificate) {
	v.value = val
	v.isSet = true
}

func (v NullableSSLCertificate) IsSet() bool {
	return v.isSet
}

func (v *NullableSSLCertificate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSSLCertificate(val *SSLCertificate) *NullableSSLCertificate {
	return &NullableSSLCertificate{value: val, isSet: true}
}

func (v NullableSSLCertificate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSSLCertificate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


