/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the HostValidatorResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HostValidatorResp{}

// HostValidatorResp struct for HostValidatorResp
type HostValidatorResp struct {
	HostValidator *HostValidator `json:"host_validator,omitempty"`
}

// NewHostValidatorResp instantiates a new HostValidatorResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHostValidatorResp() *HostValidatorResp {
	this := HostValidatorResp{}
	return &this
}

// NewHostValidatorRespWithDefaults instantiates a new HostValidatorResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHostValidatorRespWithDefaults() *HostValidatorResp {
	this := HostValidatorResp{}
	return &this
}

// GetHostValidator returns the HostValidator field value if set, zero value otherwise.
func (o *HostValidatorResp) GetHostValidator() HostValidator {
	if o == nil || IsNil(o.HostValidator) {
		var ret HostValidator
		return ret
	}
	return *o.HostValidator
}

// GetHostValidatorOk returns a tuple with the HostValidator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostValidatorResp) GetHostValidatorOk() (*HostValidator, bool) {
	if o == nil || IsNil(o.HostValidator) {
		return nil, false
	}
	return o.HostValidator, true
}

// HasHostValidator returns a boolean if a field has been set.
func (o *HostValidatorResp) HasHostValidator() bool {
	if o != nil && !IsNil(o.HostValidator) {
		return true
	}

	return false
}

// SetHostValidator gets a reference to the given HostValidator and assigns it to the HostValidator field.
func (o *HostValidatorResp) SetHostValidator(v HostValidator) {
	o.HostValidator = &v
}

func (o HostValidatorResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HostValidatorResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HostValidator) {
		toSerialize["host_validator"] = o.HostValidator
	}
	return toSerialize, nil
}

type NullableHostValidatorResp struct {
	value *HostValidatorResp
	isSet bool
}

func (v NullableHostValidatorResp) Get() *HostValidatorResp {
	return v.value
}

func (v *NullableHostValidatorResp) Set(val *HostValidatorResp) {
	v.value = val
	v.isSet = true
}

func (v NullableHostValidatorResp) IsSet() bool {
	return v.isSet
}

func (v *NullableHostValidatorResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHostValidatorResp(val *HostValidatorResp) *NullableHostValidatorResp {
	return &NullableHostValidatorResp{value: val, isSet: true}
}

func (v NullableHostValidatorResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHostValidatorResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


