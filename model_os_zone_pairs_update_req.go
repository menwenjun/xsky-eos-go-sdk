/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OSZonePairsUpdateReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OSZonePairsUpdateReq{}

// OSZonePairsUpdateReq struct for OSZonePairsUpdateReq
type OSZonePairsUpdateReq struct {
	OsZone *OSZonePairsUpdateReqZone `json:"os_zone,omitempty"`
}

// NewOSZonePairsUpdateReq instantiates a new OSZonePairsUpdateReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOSZonePairsUpdateReq() *OSZonePairsUpdateReq {
	this := OSZonePairsUpdateReq{}
	return &this
}

// NewOSZonePairsUpdateReqWithDefaults instantiates a new OSZonePairsUpdateReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOSZonePairsUpdateReqWithDefaults() *OSZonePairsUpdateReq {
	this := OSZonePairsUpdateReq{}
	return &this
}

// GetOsZone returns the OsZone field value if set, zero value otherwise.
func (o *OSZonePairsUpdateReq) GetOsZone() OSZonePairsUpdateReqZone {
	if o == nil || IsNil(o.OsZone) {
		var ret OSZonePairsUpdateReqZone
		return ret
	}
	return *o.OsZone
}

// GetOsZoneOk returns a tuple with the OsZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSZonePairsUpdateReq) GetOsZoneOk() (*OSZonePairsUpdateReqZone, bool) {
	if o == nil || IsNil(o.OsZone) {
		return nil, false
	}
	return o.OsZone, true
}

// HasOsZone returns a boolean if a field has been set.
func (o *OSZonePairsUpdateReq) HasOsZone() bool {
	if o != nil && !IsNil(o.OsZone) {
		return true
	}

	return false
}

// SetOsZone gets a reference to the given OSZonePairsUpdateReqZone and assigns it to the OsZone field.
func (o *OSZonePairsUpdateReq) SetOsZone(v OSZonePairsUpdateReqZone) {
	o.OsZone = &v
}

func (o OSZonePairsUpdateReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OSZonePairsUpdateReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OsZone) {
		toSerialize["os_zone"] = o.OsZone
	}
	return toSerialize, nil
}

type NullableOSZonePairsUpdateReq struct {
	value *OSZonePairsUpdateReq
	isSet bool
}

func (v NullableOSZonePairsUpdateReq) Get() *OSZonePairsUpdateReq {
	return v.value
}

func (v *NullableOSZonePairsUpdateReq) Set(val *OSZonePairsUpdateReq) {
	v.value = val
	v.isSet = true
}

func (v NullableOSZonePairsUpdateReq) IsSet() bool {
	return v.isSet
}

func (v *NullableOSZonePairsUpdateReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOSZonePairsUpdateReq(val *OSZonePairsUpdateReq) *NullableOSZonePairsUpdateReq {
	return &NullableOSZonePairsUpdateReq{value: val, isSet: true}
}

func (v NullableOSZonePairsUpdateReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOSZonePairsUpdateReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


