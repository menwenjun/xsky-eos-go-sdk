/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DfsQuotaStatusCount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DfsQuotaStatusCount{}

// DfsQuotaStatusCount DfsQuotaStatusCount defines dfs quota status count
type DfsQuotaStatusCount struct {
	Active *int64 `json:"active,omitempty"`
	BuildingError *int64 `json:"building_error,omitempty"`
	DeletingError *int64 `json:"deleting_error,omitempty"`
	Error *int64 `json:"error,omitempty"`
	ExceedSoft *int64 `json:"exceed_soft,omitempty"`
	ExceedSuggestion *int64 `json:"exceed_suggestion,omitempty"`
	WriteInhibit *int64 `json:"write_inhibit,omitempty"`
}

// NewDfsQuotaStatusCount instantiates a new DfsQuotaStatusCount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfsQuotaStatusCount() *DfsQuotaStatusCount {
	this := DfsQuotaStatusCount{}
	return &this
}

// NewDfsQuotaStatusCountWithDefaults instantiates a new DfsQuotaStatusCount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfsQuotaStatusCountWithDefaults() *DfsQuotaStatusCount {
	this := DfsQuotaStatusCount{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *DfsQuotaStatusCount) GetActive() int64 {
	if o == nil || IsNil(o.Active) {
		var ret int64
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsQuotaStatusCount) GetActiveOk() (*int64, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *DfsQuotaStatusCount) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given int64 and assigns it to the Active field.
func (o *DfsQuotaStatusCount) SetActive(v int64) {
	o.Active = &v
}

// GetBuildingError returns the BuildingError field value if set, zero value otherwise.
func (o *DfsQuotaStatusCount) GetBuildingError() int64 {
	if o == nil || IsNil(o.BuildingError) {
		var ret int64
		return ret
	}
	return *o.BuildingError
}

// GetBuildingErrorOk returns a tuple with the BuildingError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsQuotaStatusCount) GetBuildingErrorOk() (*int64, bool) {
	if o == nil || IsNil(o.BuildingError) {
		return nil, false
	}
	return o.BuildingError, true
}

// HasBuildingError returns a boolean if a field has been set.
func (o *DfsQuotaStatusCount) HasBuildingError() bool {
	if o != nil && !IsNil(o.BuildingError) {
		return true
	}

	return false
}

// SetBuildingError gets a reference to the given int64 and assigns it to the BuildingError field.
func (o *DfsQuotaStatusCount) SetBuildingError(v int64) {
	o.BuildingError = &v
}

// GetDeletingError returns the DeletingError field value if set, zero value otherwise.
func (o *DfsQuotaStatusCount) GetDeletingError() int64 {
	if o == nil || IsNil(o.DeletingError) {
		var ret int64
		return ret
	}
	return *o.DeletingError
}

// GetDeletingErrorOk returns a tuple with the DeletingError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsQuotaStatusCount) GetDeletingErrorOk() (*int64, bool) {
	if o == nil || IsNil(o.DeletingError) {
		return nil, false
	}
	return o.DeletingError, true
}

// HasDeletingError returns a boolean if a field has been set.
func (o *DfsQuotaStatusCount) HasDeletingError() bool {
	if o != nil && !IsNil(o.DeletingError) {
		return true
	}

	return false
}

// SetDeletingError gets a reference to the given int64 and assigns it to the DeletingError field.
func (o *DfsQuotaStatusCount) SetDeletingError(v int64) {
	o.DeletingError = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *DfsQuotaStatusCount) GetError() int64 {
	if o == nil || IsNil(o.Error) {
		var ret int64
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsQuotaStatusCount) GetErrorOk() (*int64, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *DfsQuotaStatusCount) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given int64 and assigns it to the Error field.
func (o *DfsQuotaStatusCount) SetError(v int64) {
	o.Error = &v
}

// GetExceedSoft returns the ExceedSoft field value if set, zero value otherwise.
func (o *DfsQuotaStatusCount) GetExceedSoft() int64 {
	if o == nil || IsNil(o.ExceedSoft) {
		var ret int64
		return ret
	}
	return *o.ExceedSoft
}

// GetExceedSoftOk returns a tuple with the ExceedSoft field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsQuotaStatusCount) GetExceedSoftOk() (*int64, bool) {
	if o == nil || IsNil(o.ExceedSoft) {
		return nil, false
	}
	return o.ExceedSoft, true
}

// HasExceedSoft returns a boolean if a field has been set.
func (o *DfsQuotaStatusCount) HasExceedSoft() bool {
	if o != nil && !IsNil(o.ExceedSoft) {
		return true
	}

	return false
}

// SetExceedSoft gets a reference to the given int64 and assigns it to the ExceedSoft field.
func (o *DfsQuotaStatusCount) SetExceedSoft(v int64) {
	o.ExceedSoft = &v
}

// GetExceedSuggestion returns the ExceedSuggestion field value if set, zero value otherwise.
func (o *DfsQuotaStatusCount) GetExceedSuggestion() int64 {
	if o == nil || IsNil(o.ExceedSuggestion) {
		var ret int64
		return ret
	}
	return *o.ExceedSuggestion
}

// GetExceedSuggestionOk returns a tuple with the ExceedSuggestion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsQuotaStatusCount) GetExceedSuggestionOk() (*int64, bool) {
	if o == nil || IsNil(o.ExceedSuggestion) {
		return nil, false
	}
	return o.ExceedSuggestion, true
}

// HasExceedSuggestion returns a boolean if a field has been set.
func (o *DfsQuotaStatusCount) HasExceedSuggestion() bool {
	if o != nil && !IsNil(o.ExceedSuggestion) {
		return true
	}

	return false
}

// SetExceedSuggestion gets a reference to the given int64 and assigns it to the ExceedSuggestion field.
func (o *DfsQuotaStatusCount) SetExceedSuggestion(v int64) {
	o.ExceedSuggestion = &v
}

// GetWriteInhibit returns the WriteInhibit field value if set, zero value otherwise.
func (o *DfsQuotaStatusCount) GetWriteInhibit() int64 {
	if o == nil || IsNil(o.WriteInhibit) {
		var ret int64
		return ret
	}
	return *o.WriteInhibit
}

// GetWriteInhibitOk returns a tuple with the WriteInhibit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DfsQuotaStatusCount) GetWriteInhibitOk() (*int64, bool) {
	if o == nil || IsNil(o.WriteInhibit) {
		return nil, false
	}
	return o.WriteInhibit, true
}

// HasWriteInhibit returns a boolean if a field has been set.
func (o *DfsQuotaStatusCount) HasWriteInhibit() bool {
	if o != nil && !IsNil(o.WriteInhibit) {
		return true
	}

	return false
}

// SetWriteInhibit gets a reference to the given int64 and assigns it to the WriteInhibit field.
func (o *DfsQuotaStatusCount) SetWriteInhibit(v int64) {
	o.WriteInhibit = &v
}

func (o DfsQuotaStatusCount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DfsQuotaStatusCount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.BuildingError) {
		toSerialize["building_error"] = o.BuildingError
	}
	if !IsNil(o.DeletingError) {
		toSerialize["deleting_error"] = o.DeletingError
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.ExceedSoft) {
		toSerialize["exceed_soft"] = o.ExceedSoft
	}
	if !IsNil(o.ExceedSuggestion) {
		toSerialize["exceed_suggestion"] = o.ExceedSuggestion
	}
	if !IsNil(o.WriteInhibit) {
		toSerialize["write_inhibit"] = o.WriteInhibit
	}
	return toSerialize, nil
}

type NullableDfsQuotaStatusCount struct {
	value *DfsQuotaStatusCount
	isSet bool
}

func (v NullableDfsQuotaStatusCount) Get() *DfsQuotaStatusCount {
	return v.value
}

func (v *NullableDfsQuotaStatusCount) Set(val *DfsQuotaStatusCount) {
	v.value = val
	v.isSet = true
}

func (v NullableDfsQuotaStatusCount) IsSet() bool {
	return v.isSet
}

func (v *NullableDfsQuotaStatusCount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfsQuotaStatusCount(val *DfsQuotaStatusCount) *NullableDfsQuotaStatusCount {
	return &NullableDfsQuotaStatusCount{value: val, isSet: true}
}

func (v NullableDfsQuotaStatusCount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfsQuotaStatusCount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


