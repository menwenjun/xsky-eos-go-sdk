/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DNSZoneResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DNSZoneResp{}

// DNSZoneResp struct for DNSZoneResp
type DNSZoneResp struct {
	DnsZone *DNSZone `json:"dns_zone,omitempty"`
}

// NewDNSZoneResp instantiates a new DNSZoneResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDNSZoneResp() *DNSZoneResp {
	this := DNSZoneResp{}
	return &this
}

// NewDNSZoneRespWithDefaults instantiates a new DNSZoneResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDNSZoneRespWithDefaults() *DNSZoneResp {
	this := DNSZoneResp{}
	return &this
}

// GetDnsZone returns the DnsZone field value if set, zero value otherwise.
func (o *DNSZoneResp) GetDnsZone() DNSZone {
	if o == nil || IsNil(o.DnsZone) {
		var ret DNSZone
		return ret
	}
	return *o.DnsZone
}

// GetDnsZoneOk returns a tuple with the DnsZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSZoneResp) GetDnsZoneOk() (*DNSZone, bool) {
	if o == nil || IsNil(o.DnsZone) {
		return nil, false
	}
	return o.DnsZone, true
}

// HasDnsZone returns a boolean if a field has been set.
func (o *DNSZoneResp) HasDnsZone() bool {
	if o != nil && !IsNil(o.DnsZone) {
		return true
	}

	return false
}

// SetDnsZone gets a reference to the given DNSZone and assigns it to the DnsZone field.
func (o *DNSZoneResp) SetDnsZone(v DNSZone) {
	o.DnsZone = &v
}

func (o DNSZoneResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DNSZoneResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DnsZone) {
		toSerialize["dns_zone"] = o.DnsZone
	}
	return toSerialize, nil
}

type NullableDNSZoneResp struct {
	value *DNSZoneResp
	isSet bool
}

func (v NullableDNSZoneResp) Get() *DNSZoneResp {
	return v.value
}

func (v *NullableDNSZoneResp) Set(val *DNSZoneResp) {
	v.value = val
	v.isSet = true
}

func (v NullableDNSZoneResp) IsSet() bool {
	return v.isSet
}

func (v *NullableDNSZoneResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDNSZoneResp(val *DNSZoneResp) *NullableDNSZoneResp {
	return &NullableDNSZoneResp{value: val, isSet: true}
}

func (v NullableDNSZoneResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDNSZoneResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


