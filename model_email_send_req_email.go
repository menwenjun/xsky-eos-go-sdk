/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EmailSendReqEmail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailSendReqEmail{}

// EmailSendReqEmail struct for EmailSendReqEmail
type EmailSendReqEmail struct {
	Body string `json:"body"`
	// content type, 'text/plain' or 'text/html'
	ContentType *string `json:"content_type,omitempty"`
	To []string `json:"to"`
}

type _EmailSendReqEmail EmailSendReqEmail

// NewEmailSendReqEmail instantiates a new EmailSendReqEmail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailSendReqEmail(body string, to []string) *EmailSendReqEmail {
	this := EmailSendReqEmail{}
	this.Body = body
	this.To = to
	return &this
}

// NewEmailSendReqEmailWithDefaults instantiates a new EmailSendReqEmail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailSendReqEmailWithDefaults() *EmailSendReqEmail {
	this := EmailSendReqEmail{}
	return &this
}

// GetBody returns the Body field value
func (o *EmailSendReqEmail) GetBody() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Body
}

// GetBodyOk returns a tuple with the Body field value
// and a boolean to check if the value has been set.
func (o *EmailSendReqEmail) GetBodyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Body, true
}

// SetBody sets field value
func (o *EmailSendReqEmail) SetBody(v string) {
	o.Body = v
}

// GetContentType returns the ContentType field value if set, zero value otherwise.
func (o *EmailSendReqEmail) GetContentType() string {
	if o == nil || IsNil(o.ContentType) {
		var ret string
		return ret
	}
	return *o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailSendReqEmail) GetContentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ContentType) {
		return nil, false
	}
	return o.ContentType, true
}

// HasContentType returns a boolean if a field has been set.
func (o *EmailSendReqEmail) HasContentType() bool {
	if o != nil && !IsNil(o.ContentType) {
		return true
	}

	return false
}

// SetContentType gets a reference to the given string and assigns it to the ContentType field.
func (o *EmailSendReqEmail) SetContentType(v string) {
	o.ContentType = &v
}

// GetTo returns the To field value
func (o *EmailSendReqEmail) GetTo() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *EmailSendReqEmail) GetToOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.To, true
}

// SetTo sets field value
func (o *EmailSendReqEmail) SetTo(v []string) {
	o.To = v
}

func (o EmailSendReqEmail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailSendReqEmail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["body"] = o.Body
	if !IsNil(o.ContentType) {
		toSerialize["content_type"] = o.ContentType
	}
	toSerialize["to"] = o.To
	return toSerialize, nil
}

func (o *EmailSendReqEmail) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"body",
		"to",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEmailSendReqEmail := _EmailSendReqEmail{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEmailSendReqEmail)

	if err != nil {
		return err
	}

	*o = EmailSendReqEmail(varEmailSendReqEmail)

	return err
}

type NullableEmailSendReqEmail struct {
	value *EmailSendReqEmail
	isSet bool
}

func (v NullableEmailSendReqEmail) Get() *EmailSendReqEmail {
	return v.value
}

func (v *NullableEmailSendReqEmail) Set(val *EmailSendReqEmail) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailSendReqEmail) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailSendReqEmail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailSendReqEmail(val *EmailSendReqEmail) *NullableEmailSendReqEmail {
	return &NullableEmailSendReqEmail{value: val, isSet: true}
}

func (v NullableEmailSendReqEmail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailSendReqEmail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


