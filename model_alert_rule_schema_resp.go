/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AlertRuleSchemaResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlertRuleSchemaResp{}

// AlertRuleSchemaResp struct for AlertRuleSchemaResp
type AlertRuleSchemaResp struct {
	// rule schemas
	RuleSchemaMap map[string]AlertRuleSchema `json:"rule_schema_map"`
	// trigger modes
	TriggerModes []string `json:"trigger_modes"`
}

type _AlertRuleSchemaResp AlertRuleSchemaResp

// NewAlertRuleSchemaResp instantiates a new AlertRuleSchemaResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertRuleSchemaResp(ruleSchemaMap map[string]AlertRuleSchema, triggerModes []string) *AlertRuleSchemaResp {
	this := AlertRuleSchemaResp{}
	this.RuleSchemaMap = ruleSchemaMap
	this.TriggerModes = triggerModes
	return &this
}

// NewAlertRuleSchemaRespWithDefaults instantiates a new AlertRuleSchemaResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertRuleSchemaRespWithDefaults() *AlertRuleSchemaResp {
	this := AlertRuleSchemaResp{}
	return &this
}

// GetRuleSchemaMap returns the RuleSchemaMap field value
func (o *AlertRuleSchemaResp) GetRuleSchemaMap() map[string]AlertRuleSchema {
	if o == nil {
		var ret map[string]AlertRuleSchema
		return ret
	}

	return o.RuleSchemaMap
}

// GetRuleSchemaMapOk returns a tuple with the RuleSchemaMap field value
// and a boolean to check if the value has been set.
func (o *AlertRuleSchemaResp) GetRuleSchemaMapOk() (*map[string]AlertRuleSchema, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RuleSchemaMap, true
}

// SetRuleSchemaMap sets field value
func (o *AlertRuleSchemaResp) SetRuleSchemaMap(v map[string]AlertRuleSchema) {
	o.RuleSchemaMap = v
}

// GetTriggerModes returns the TriggerModes field value
func (o *AlertRuleSchemaResp) GetTriggerModes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.TriggerModes
}

// GetTriggerModesOk returns a tuple with the TriggerModes field value
// and a boolean to check if the value has been set.
func (o *AlertRuleSchemaResp) GetTriggerModesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TriggerModes, true
}

// SetTriggerModes sets field value
func (o *AlertRuleSchemaResp) SetTriggerModes(v []string) {
	o.TriggerModes = v
}

func (o AlertRuleSchemaResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlertRuleSchemaResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["rule_schema_map"] = o.RuleSchemaMap
	toSerialize["trigger_modes"] = o.TriggerModes
	return toSerialize, nil
}

func (o *AlertRuleSchemaResp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"rule_schema_map",
		"trigger_modes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAlertRuleSchemaResp := _AlertRuleSchemaResp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAlertRuleSchemaResp)

	if err != nil {
		return err
	}

	*o = AlertRuleSchemaResp(varAlertRuleSchemaResp)

	return err
}

type NullableAlertRuleSchemaResp struct {
	value *AlertRuleSchemaResp
	isSet bool
}

func (v NullableAlertRuleSchemaResp) Get() *AlertRuleSchemaResp {
	return v.value
}

func (v *NullableAlertRuleSchemaResp) Set(val *AlertRuleSchemaResp) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertRuleSchemaResp) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertRuleSchemaResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertRuleSchemaResp(val *AlertRuleSchemaResp) *NullableAlertRuleSchemaResp {
	return &NullableAlertRuleSchemaResp{value: val, isSet: true}
}

func (v NullableAlertRuleSchemaResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertRuleSchemaResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


