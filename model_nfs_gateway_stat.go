/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the NFSGatewayStat type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NFSGatewayStat{}

// NFSGatewayStat NFSGatewayStat defines nfs gateway stat
type NFSGatewayStat struct {
	AllRequests *int64 `json:"all_requests,omitempty"`
	CompactBandwidthKbyte *float64 `json:"compact_bandwidth_kbyte,omitempty"`
	CompactOps *float64 `json:"compact_ops,omitempty"`
	CpuUtil *float64 `json:"cpu_util,omitempty"`
	Create *time.Time `json:"create,omitempty"`
	DeleteLatencyUs *float64 `json:"delete_latency_us,omitempty"`
	DeleteOps *float64 `json:"delete_ops,omitempty"`
	DownBandwidthKbyte *float64 `json:"down_bandwidth_kbyte,omitempty"`
	DownFirstByteLatencyUs *float64 `json:"down_first_byte_latency_us,omitempty"`
	DownLatencyUs *float64 `json:"down_latency_us,omitempty"`
	DownOps *float64 `json:"down_ops,omitempty"`
	ListLatencyUs *float64 `json:"list_latency_us,omitempty"`
	ListOps *float64 `json:"list_ops,omitempty"`
	MemUsagePercent *float64 `json:"mem_usage_percent,omitempty"`
	MergeSpeed *int64 `json:"merge_speed,omitempty"`
	ReplicationBandwidthKbyte *float64 `json:"replication_bandwidth_kbyte,omitempty"`
	ReplicationOps *float64 `json:"replication_ops,omitempty"`
	Requests *int64 `json:"requests,omitempty"`
	SyncDownBandwidthKbyte *float64 `json:"sync_down_bandwidth_kbyte,omitempty"`
	SyncDownLastByteLatencyUs *float64 `json:"sync_down_last_byte_latency_us,omitempty"`
	SyncDownLatencyUs *float64 `json:"sync_down_latency_us,omitempty"`
	SyncDownOps *float64 `json:"sync_down_ops,omitempty"`
	SyncUpBandwidthKbyte *float64 `json:"sync_up_bandwidth_kbyte,omitempty"`
	SyncUpLatencyUs *float64 `json:"sync_up_latency_us,omitempty"`
	SyncUpOps *float64 `json:"sync_up_ops,omitempty"`
	UpBandwidthKbyte *float64 `json:"up_bandwidth_kbyte,omitempty"`
	UpLastByteLatencyUs *float64 `json:"up_last_byte_latency_us,omitempty"`
	UpLatencyUs *float64 `json:"up_latency_us,omitempty"`
	UpOps *float64 `json:"up_ops,omitempty"`
}

// NewNFSGatewayStat instantiates a new NFSGatewayStat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNFSGatewayStat() *NFSGatewayStat {
	this := NFSGatewayStat{}
	return &this
}

// NewNFSGatewayStatWithDefaults instantiates a new NFSGatewayStat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNFSGatewayStatWithDefaults() *NFSGatewayStat {
	this := NFSGatewayStat{}
	return &this
}

// GetAllRequests returns the AllRequests field value if set, zero value otherwise.
func (o *NFSGatewayStat) GetAllRequests() int64 {
	if o == nil || IsNil(o.AllRequests) {
		var ret int64
		return ret
	}
	return *o.AllRequests
}

// GetAllRequestsOk returns a tuple with the AllRequests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFSGatewayStat) GetAllRequestsOk() (*int64, bool) {
	if o == nil || IsNil(o.AllRequests) {
		return nil, false
	}
	return o.AllRequests, true
}

// HasAllRequests returns a boolean if a field has been set.
func (o *NFSGatewayStat) HasAllRequests() bool {
	if o != nil && !IsNil(o.AllRequests) {
		return true
	}

	return false
}

// SetAllRequests gets a reference to the given int64 and assigns it to the AllRequests field.
func (o *NFSGatewayStat) SetAllRequests(v int64) {
	o.AllRequests = &v
}

// GetCompactBandwidthKbyte returns the CompactBandwidthKbyte field value if set, zero value otherwise.
func (o *NFSGatewayStat) GetCompactBandwidthKbyte() float64 {
	if o == nil || IsNil(o.CompactBandwidthKbyte) {
		var ret float64
		return ret
	}
	return *o.CompactBandwidthKbyte
}

// GetCompactBandwidthKbyteOk returns a tuple with the CompactBandwidthKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFSGatewayStat) GetCompactBandwidthKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.CompactBandwidthKbyte) {
		return nil, false
	}
	return o.CompactBandwidthKbyte, true
}

// HasCompactBandwidthKbyte returns a boolean if a field has been set.
func (o *NFSGatewayStat) HasCompactBandwidthKbyte() bool {
	if o != nil && !IsNil(o.CompactBandwidthKbyte) {
		return true
	}

	return false
}

// SetCompactBandwidthKbyte gets a reference to the given float64 and assigns it to the CompactBandwidthKbyte field.
func (o *NFSGatewayStat) SetCompactBandwidthKbyte(v float64) {
	o.CompactBandwidthKbyte = &v
}

// GetCompactOps returns the CompactOps field value if set, zero value otherwise.
func (o *NFSGatewayStat) GetCompactOps() float64 {
	if o == nil || IsNil(o.CompactOps) {
		var ret float64
		return ret
	}
	return *o.CompactOps
}

// GetCompactOpsOk returns a tuple with the CompactOps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFSGatewayStat) GetCompactOpsOk() (*float64, bool) {
	if o == nil || IsNil(o.CompactOps) {
		return nil, false
	}
	return o.CompactOps, true
}

// HasCompactOps returns a boolean if a field has been set.
func (o *NFSGatewayStat) HasCompactOps() bool {
	if o != nil && !IsNil(o.CompactOps) {
		return true
	}

	return false
}

// SetCompactOps gets a reference to the given float64 and assigns it to the CompactOps field.
func (o *NFSGatewayStat) SetCompactOps(v float64) {
	o.CompactOps = &v
}

// GetCpuUtil returns the CpuUtil field value if set, zero value otherwise.
func (o *NFSGatewayStat) GetCpuUtil() float64 {
	if o == nil || IsNil(o.CpuUtil) {
		var ret float64
		return ret
	}
	return *o.CpuUtil
}

// GetCpuUtilOk returns a tuple with the CpuUtil field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFSGatewayStat) GetCpuUtilOk() (*float64, bool) {
	if o == nil || IsNil(o.CpuUtil) {
		return nil, false
	}
	return o.CpuUtil, true
}

// HasCpuUtil returns a boolean if a field has been set.
func (o *NFSGatewayStat) HasCpuUtil() bool {
	if o != nil && !IsNil(o.CpuUtil) {
		return true
	}

	return false
}

// SetCpuUtil gets a reference to the given float64 and assigns it to the CpuUtil field.
func (o *NFSGatewayStat) SetCpuUtil(v float64) {
	o.CpuUtil = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *NFSGatewayStat) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFSGatewayStat) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *NFSGatewayStat) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *NFSGatewayStat) SetCreate(v time.Time) {
	o.Create = &v
}

// GetDeleteLatencyUs returns the DeleteLatencyUs field value if set, zero value otherwise.
func (o *NFSGatewayStat) GetDeleteLatencyUs() float64 {
	if o == nil || IsNil(o.DeleteLatencyUs) {
		var ret float64
		return ret
	}
	return *o.DeleteLatencyUs
}

// GetDeleteLatencyUsOk returns a tuple with the DeleteLatencyUs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFSGatewayStat) GetDeleteLatencyUsOk() (*float64, bool) {
	if o == nil || IsNil(o.DeleteLatencyUs) {
		return nil, false
	}
	return o.DeleteLatencyUs, true
}

// HasDeleteLatencyUs returns a boolean if a field has been set.
func (o *NFSGatewayStat) HasDeleteLatencyUs() bool {
	if o != nil && !IsNil(o.DeleteLatencyUs) {
		return true
	}

	return false
}

// SetDeleteLatencyUs gets a reference to the given float64 and assigns it to the DeleteLatencyUs field.
func (o *NFSGatewayStat) SetDeleteLatencyUs(v float64) {
	o.DeleteLatencyUs = &v
}

// GetDeleteOps returns the DeleteOps field value if set, zero value otherwise.
func (o *NFSGatewayStat) GetDeleteOps() float64 {
	if o == nil || IsNil(o.DeleteOps) {
		var ret float64
		return ret
	}
	return *o.DeleteOps
}

// GetDeleteOpsOk returns a tuple with the DeleteOps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFSGatewayStat) GetDeleteOpsOk() (*float64, bool) {
	if o == nil || IsNil(o.DeleteOps) {
		return nil, false
	}
	return o.DeleteOps, true
}

// HasDeleteOps returns a boolean if a field has been set.
func (o *NFSGatewayStat) HasDeleteOps() bool {
	if o != nil && !IsNil(o.DeleteOps) {
		return true
	}

	return false
}

// SetDeleteOps gets a reference to the given float64 and assigns it to the DeleteOps field.
func (o *NFSGatewayStat) SetDeleteOps(v float64) {
	o.DeleteOps = &v
}

// GetDownBandwidthKbyte returns the DownBandwidthKbyte field value if set, zero value otherwise.
func (o *NFSGatewayStat) GetDownBandwidthKbyte() float64 {
	if o == nil || IsNil(o.DownBandwidthKbyte) {
		var ret float64
		return ret
	}
	return *o.DownBandwidthKbyte
}

// GetDownBandwidthKbyteOk returns a tuple with the DownBandwidthKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFSGatewayStat) GetDownBandwidthKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.DownBandwidthKbyte) {
		return nil, false
	}
	return o.DownBandwidthKbyte, true
}

// HasDownBandwidthKbyte returns a boolean if a field has been set.
func (o *NFSGatewayStat) HasDownBandwidthKbyte() bool {
	if o != nil && !IsNil(o.DownBandwidthKbyte) {
		return true
	}

	return false
}

// SetDownBandwidthKbyte gets a reference to the given float64 and assigns it to the DownBandwidthKbyte field.
func (o *NFSGatewayStat) SetDownBandwidthKbyte(v float64) {
	o.DownBandwidthKbyte = &v
}

// GetDownFirstByteLatencyUs returns the DownFirstByteLatencyUs field value if set, zero value otherwise.
func (o *NFSGatewayStat) GetDownFirstByteLatencyUs() float64 {
	if o == nil || IsNil(o.DownFirstByteLatencyUs) {
		var ret float64
		return ret
	}
	return *o.DownFirstByteLatencyUs
}

// GetDownFirstByteLatencyUsOk returns a tuple with the DownFirstByteLatencyUs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFSGatewayStat) GetDownFirstByteLatencyUsOk() (*float64, bool) {
	if o == nil || IsNil(o.DownFirstByteLatencyUs) {
		return nil, false
	}
	return o.DownFirstByteLatencyUs, true
}

// HasDownFirstByteLatencyUs returns a boolean if a field has been set.
func (o *NFSGatewayStat) HasDownFirstByteLatencyUs() bool {
	if o != nil && !IsNil(o.DownFirstByteLatencyUs) {
		return true
	}

	return false
}

// SetDownFirstByteLatencyUs gets a reference to the given float64 and assigns it to the DownFirstByteLatencyUs field.
func (o *NFSGatewayStat) SetDownFirstByteLatencyUs(v float64) {
	o.DownFirstByteLatencyUs = &v
}

// GetDownLatencyUs returns the DownLatencyUs field value if set, zero value otherwise.
func (o *NFSGatewayStat) GetDownLatencyUs() float64 {
	if o == nil || IsNil(o.DownLatencyUs) {
		var ret float64
		return ret
	}
	return *o.DownLatencyUs
}

// GetDownLatencyUsOk returns a tuple with the DownLatencyUs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFSGatewayStat) GetDownLatencyUsOk() (*float64, bool) {
	if o == nil || IsNil(o.DownLatencyUs) {
		return nil, false
	}
	return o.DownLatencyUs, true
}

// HasDownLatencyUs returns a boolean if a field has been set.
func (o *NFSGatewayStat) HasDownLatencyUs() bool {
	if o != nil && !IsNil(o.DownLatencyUs) {
		return true
	}

	return false
}

// SetDownLatencyUs gets a reference to the given float64 and assigns it to the DownLatencyUs field.
func (o *NFSGatewayStat) SetDownLatencyUs(v float64) {
	o.DownLatencyUs = &v
}

// GetDownOps returns the DownOps field value if set, zero value otherwise.
func (o *NFSGatewayStat) GetDownOps() float64 {
	if o == nil || IsNil(o.DownOps) {
		var ret float64
		return ret
	}
	return *o.DownOps
}

// GetDownOpsOk returns a tuple with the DownOps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFSGatewayStat) GetDownOpsOk() (*float64, bool) {
	if o == nil || IsNil(o.DownOps) {
		return nil, false
	}
	return o.DownOps, true
}

// HasDownOps returns a boolean if a field has been set.
func (o *NFSGatewayStat) HasDownOps() bool {
	if o != nil && !IsNil(o.DownOps) {
		return true
	}

	return false
}

// SetDownOps gets a reference to the given float64 and assigns it to the DownOps field.
func (o *NFSGatewayStat) SetDownOps(v float64) {
	o.DownOps = &v
}

// GetListLatencyUs returns the ListLatencyUs field value if set, zero value otherwise.
func (o *NFSGatewayStat) GetListLatencyUs() float64 {
	if o == nil || IsNil(o.ListLatencyUs) {
		var ret float64
		return ret
	}
	return *o.ListLatencyUs
}

// GetListLatencyUsOk returns a tuple with the ListLatencyUs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFSGatewayStat) GetListLatencyUsOk() (*float64, bool) {
	if o == nil || IsNil(o.ListLatencyUs) {
		return nil, false
	}
	return o.ListLatencyUs, true
}

// HasListLatencyUs returns a boolean if a field has been set.
func (o *NFSGatewayStat) HasListLatencyUs() bool {
	if o != nil && !IsNil(o.ListLatencyUs) {
		return true
	}

	return false
}

// SetListLatencyUs gets a reference to the given float64 and assigns it to the ListLatencyUs field.
func (o *NFSGatewayStat) SetListLatencyUs(v float64) {
	o.ListLatencyUs = &v
}

// GetListOps returns the ListOps field value if set, zero value otherwise.
func (o *NFSGatewayStat) GetListOps() float64 {
	if o == nil || IsNil(o.ListOps) {
		var ret float64
		return ret
	}
	return *o.ListOps
}

// GetListOpsOk returns a tuple with the ListOps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFSGatewayStat) GetListOpsOk() (*float64, bool) {
	if o == nil || IsNil(o.ListOps) {
		return nil, false
	}
	return o.ListOps, true
}

// HasListOps returns a boolean if a field has been set.
func (o *NFSGatewayStat) HasListOps() bool {
	if o != nil && !IsNil(o.ListOps) {
		return true
	}

	return false
}

// SetListOps gets a reference to the given float64 and assigns it to the ListOps field.
func (o *NFSGatewayStat) SetListOps(v float64) {
	o.ListOps = &v
}

// GetMemUsagePercent returns the MemUsagePercent field value if set, zero value otherwise.
func (o *NFSGatewayStat) GetMemUsagePercent() float64 {
	if o == nil || IsNil(o.MemUsagePercent) {
		var ret float64
		return ret
	}
	return *o.MemUsagePercent
}

// GetMemUsagePercentOk returns a tuple with the MemUsagePercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFSGatewayStat) GetMemUsagePercentOk() (*float64, bool) {
	if o == nil || IsNil(o.MemUsagePercent) {
		return nil, false
	}
	return o.MemUsagePercent, true
}

// HasMemUsagePercent returns a boolean if a field has been set.
func (o *NFSGatewayStat) HasMemUsagePercent() bool {
	if o != nil && !IsNil(o.MemUsagePercent) {
		return true
	}

	return false
}

// SetMemUsagePercent gets a reference to the given float64 and assigns it to the MemUsagePercent field.
func (o *NFSGatewayStat) SetMemUsagePercent(v float64) {
	o.MemUsagePercent = &v
}

// GetMergeSpeed returns the MergeSpeed field value if set, zero value otherwise.
func (o *NFSGatewayStat) GetMergeSpeed() int64 {
	if o == nil || IsNil(o.MergeSpeed) {
		var ret int64
		return ret
	}
	return *o.MergeSpeed
}

// GetMergeSpeedOk returns a tuple with the MergeSpeed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFSGatewayStat) GetMergeSpeedOk() (*int64, bool) {
	if o == nil || IsNil(o.MergeSpeed) {
		return nil, false
	}
	return o.MergeSpeed, true
}

// HasMergeSpeed returns a boolean if a field has been set.
func (o *NFSGatewayStat) HasMergeSpeed() bool {
	if o != nil && !IsNil(o.MergeSpeed) {
		return true
	}

	return false
}

// SetMergeSpeed gets a reference to the given int64 and assigns it to the MergeSpeed field.
func (o *NFSGatewayStat) SetMergeSpeed(v int64) {
	o.MergeSpeed = &v
}

// GetReplicationBandwidthKbyte returns the ReplicationBandwidthKbyte field value if set, zero value otherwise.
func (o *NFSGatewayStat) GetReplicationBandwidthKbyte() float64 {
	if o == nil || IsNil(o.ReplicationBandwidthKbyte) {
		var ret float64
		return ret
	}
	return *o.ReplicationBandwidthKbyte
}

// GetReplicationBandwidthKbyteOk returns a tuple with the ReplicationBandwidthKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFSGatewayStat) GetReplicationBandwidthKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.ReplicationBandwidthKbyte) {
		return nil, false
	}
	return o.ReplicationBandwidthKbyte, true
}

// HasReplicationBandwidthKbyte returns a boolean if a field has been set.
func (o *NFSGatewayStat) HasReplicationBandwidthKbyte() bool {
	if o != nil && !IsNil(o.ReplicationBandwidthKbyte) {
		return true
	}

	return false
}

// SetReplicationBandwidthKbyte gets a reference to the given float64 and assigns it to the ReplicationBandwidthKbyte field.
func (o *NFSGatewayStat) SetReplicationBandwidthKbyte(v float64) {
	o.ReplicationBandwidthKbyte = &v
}

// GetReplicationOps returns the ReplicationOps field value if set, zero value otherwise.
func (o *NFSGatewayStat) GetReplicationOps() float64 {
	if o == nil || IsNil(o.ReplicationOps) {
		var ret float64
		return ret
	}
	return *o.ReplicationOps
}

// GetReplicationOpsOk returns a tuple with the ReplicationOps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFSGatewayStat) GetReplicationOpsOk() (*float64, bool) {
	if o == nil || IsNil(o.ReplicationOps) {
		return nil, false
	}
	return o.ReplicationOps, true
}

// HasReplicationOps returns a boolean if a field has been set.
func (o *NFSGatewayStat) HasReplicationOps() bool {
	if o != nil && !IsNil(o.ReplicationOps) {
		return true
	}

	return false
}

// SetReplicationOps gets a reference to the given float64 and assigns it to the ReplicationOps field.
func (o *NFSGatewayStat) SetReplicationOps(v float64) {
	o.ReplicationOps = &v
}

// GetRequests returns the Requests field value if set, zero value otherwise.
func (o *NFSGatewayStat) GetRequests() int64 {
	if o == nil || IsNil(o.Requests) {
		var ret int64
		return ret
	}
	return *o.Requests
}

// GetRequestsOk returns a tuple with the Requests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFSGatewayStat) GetRequestsOk() (*int64, bool) {
	if o == nil || IsNil(o.Requests) {
		return nil, false
	}
	return o.Requests, true
}

// HasRequests returns a boolean if a field has been set.
func (o *NFSGatewayStat) HasRequests() bool {
	if o != nil && !IsNil(o.Requests) {
		return true
	}

	return false
}

// SetRequests gets a reference to the given int64 and assigns it to the Requests field.
func (o *NFSGatewayStat) SetRequests(v int64) {
	o.Requests = &v
}

// GetSyncDownBandwidthKbyte returns the SyncDownBandwidthKbyte field value if set, zero value otherwise.
func (o *NFSGatewayStat) GetSyncDownBandwidthKbyte() float64 {
	if o == nil || IsNil(o.SyncDownBandwidthKbyte) {
		var ret float64
		return ret
	}
	return *o.SyncDownBandwidthKbyte
}

// GetSyncDownBandwidthKbyteOk returns a tuple with the SyncDownBandwidthKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFSGatewayStat) GetSyncDownBandwidthKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.SyncDownBandwidthKbyte) {
		return nil, false
	}
	return o.SyncDownBandwidthKbyte, true
}

// HasSyncDownBandwidthKbyte returns a boolean if a field has been set.
func (o *NFSGatewayStat) HasSyncDownBandwidthKbyte() bool {
	if o != nil && !IsNil(o.SyncDownBandwidthKbyte) {
		return true
	}

	return false
}

// SetSyncDownBandwidthKbyte gets a reference to the given float64 and assigns it to the SyncDownBandwidthKbyte field.
func (o *NFSGatewayStat) SetSyncDownBandwidthKbyte(v float64) {
	o.SyncDownBandwidthKbyte = &v
}

// GetSyncDownLastByteLatencyUs returns the SyncDownLastByteLatencyUs field value if set, zero value otherwise.
func (o *NFSGatewayStat) GetSyncDownLastByteLatencyUs() float64 {
	if o == nil || IsNil(o.SyncDownLastByteLatencyUs) {
		var ret float64
		return ret
	}
	return *o.SyncDownLastByteLatencyUs
}

// GetSyncDownLastByteLatencyUsOk returns a tuple with the SyncDownLastByteLatencyUs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFSGatewayStat) GetSyncDownLastByteLatencyUsOk() (*float64, bool) {
	if o == nil || IsNil(o.SyncDownLastByteLatencyUs) {
		return nil, false
	}
	return o.SyncDownLastByteLatencyUs, true
}

// HasSyncDownLastByteLatencyUs returns a boolean if a field has been set.
func (o *NFSGatewayStat) HasSyncDownLastByteLatencyUs() bool {
	if o != nil && !IsNil(o.SyncDownLastByteLatencyUs) {
		return true
	}

	return false
}

// SetSyncDownLastByteLatencyUs gets a reference to the given float64 and assigns it to the SyncDownLastByteLatencyUs field.
func (o *NFSGatewayStat) SetSyncDownLastByteLatencyUs(v float64) {
	o.SyncDownLastByteLatencyUs = &v
}

// GetSyncDownLatencyUs returns the SyncDownLatencyUs field value if set, zero value otherwise.
func (o *NFSGatewayStat) GetSyncDownLatencyUs() float64 {
	if o == nil || IsNil(o.SyncDownLatencyUs) {
		var ret float64
		return ret
	}
	return *o.SyncDownLatencyUs
}

// GetSyncDownLatencyUsOk returns a tuple with the SyncDownLatencyUs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFSGatewayStat) GetSyncDownLatencyUsOk() (*float64, bool) {
	if o == nil || IsNil(o.SyncDownLatencyUs) {
		return nil, false
	}
	return o.SyncDownLatencyUs, true
}

// HasSyncDownLatencyUs returns a boolean if a field has been set.
func (o *NFSGatewayStat) HasSyncDownLatencyUs() bool {
	if o != nil && !IsNil(o.SyncDownLatencyUs) {
		return true
	}

	return false
}

// SetSyncDownLatencyUs gets a reference to the given float64 and assigns it to the SyncDownLatencyUs field.
func (o *NFSGatewayStat) SetSyncDownLatencyUs(v float64) {
	o.SyncDownLatencyUs = &v
}

// GetSyncDownOps returns the SyncDownOps field value if set, zero value otherwise.
func (o *NFSGatewayStat) GetSyncDownOps() float64 {
	if o == nil || IsNil(o.SyncDownOps) {
		var ret float64
		return ret
	}
	return *o.SyncDownOps
}

// GetSyncDownOpsOk returns a tuple with the SyncDownOps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFSGatewayStat) GetSyncDownOpsOk() (*float64, bool) {
	if o == nil || IsNil(o.SyncDownOps) {
		return nil, false
	}
	return o.SyncDownOps, true
}

// HasSyncDownOps returns a boolean if a field has been set.
func (o *NFSGatewayStat) HasSyncDownOps() bool {
	if o != nil && !IsNil(o.SyncDownOps) {
		return true
	}

	return false
}

// SetSyncDownOps gets a reference to the given float64 and assigns it to the SyncDownOps field.
func (o *NFSGatewayStat) SetSyncDownOps(v float64) {
	o.SyncDownOps = &v
}

// GetSyncUpBandwidthKbyte returns the SyncUpBandwidthKbyte field value if set, zero value otherwise.
func (o *NFSGatewayStat) GetSyncUpBandwidthKbyte() float64 {
	if o == nil || IsNil(o.SyncUpBandwidthKbyte) {
		var ret float64
		return ret
	}
	return *o.SyncUpBandwidthKbyte
}

// GetSyncUpBandwidthKbyteOk returns a tuple with the SyncUpBandwidthKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFSGatewayStat) GetSyncUpBandwidthKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.SyncUpBandwidthKbyte) {
		return nil, false
	}
	return o.SyncUpBandwidthKbyte, true
}

// HasSyncUpBandwidthKbyte returns a boolean if a field has been set.
func (o *NFSGatewayStat) HasSyncUpBandwidthKbyte() bool {
	if o != nil && !IsNil(o.SyncUpBandwidthKbyte) {
		return true
	}

	return false
}

// SetSyncUpBandwidthKbyte gets a reference to the given float64 and assigns it to the SyncUpBandwidthKbyte field.
func (o *NFSGatewayStat) SetSyncUpBandwidthKbyte(v float64) {
	o.SyncUpBandwidthKbyte = &v
}

// GetSyncUpLatencyUs returns the SyncUpLatencyUs field value if set, zero value otherwise.
func (o *NFSGatewayStat) GetSyncUpLatencyUs() float64 {
	if o == nil || IsNil(o.SyncUpLatencyUs) {
		var ret float64
		return ret
	}
	return *o.SyncUpLatencyUs
}

// GetSyncUpLatencyUsOk returns a tuple with the SyncUpLatencyUs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFSGatewayStat) GetSyncUpLatencyUsOk() (*float64, bool) {
	if o == nil || IsNil(o.SyncUpLatencyUs) {
		return nil, false
	}
	return o.SyncUpLatencyUs, true
}

// HasSyncUpLatencyUs returns a boolean if a field has been set.
func (o *NFSGatewayStat) HasSyncUpLatencyUs() bool {
	if o != nil && !IsNil(o.SyncUpLatencyUs) {
		return true
	}

	return false
}

// SetSyncUpLatencyUs gets a reference to the given float64 and assigns it to the SyncUpLatencyUs field.
func (o *NFSGatewayStat) SetSyncUpLatencyUs(v float64) {
	o.SyncUpLatencyUs = &v
}

// GetSyncUpOps returns the SyncUpOps field value if set, zero value otherwise.
func (o *NFSGatewayStat) GetSyncUpOps() float64 {
	if o == nil || IsNil(o.SyncUpOps) {
		var ret float64
		return ret
	}
	return *o.SyncUpOps
}

// GetSyncUpOpsOk returns a tuple with the SyncUpOps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFSGatewayStat) GetSyncUpOpsOk() (*float64, bool) {
	if o == nil || IsNil(o.SyncUpOps) {
		return nil, false
	}
	return o.SyncUpOps, true
}

// HasSyncUpOps returns a boolean if a field has been set.
func (o *NFSGatewayStat) HasSyncUpOps() bool {
	if o != nil && !IsNil(o.SyncUpOps) {
		return true
	}

	return false
}

// SetSyncUpOps gets a reference to the given float64 and assigns it to the SyncUpOps field.
func (o *NFSGatewayStat) SetSyncUpOps(v float64) {
	o.SyncUpOps = &v
}

// GetUpBandwidthKbyte returns the UpBandwidthKbyte field value if set, zero value otherwise.
func (o *NFSGatewayStat) GetUpBandwidthKbyte() float64 {
	if o == nil || IsNil(o.UpBandwidthKbyte) {
		var ret float64
		return ret
	}
	return *o.UpBandwidthKbyte
}

// GetUpBandwidthKbyteOk returns a tuple with the UpBandwidthKbyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFSGatewayStat) GetUpBandwidthKbyteOk() (*float64, bool) {
	if o == nil || IsNil(o.UpBandwidthKbyte) {
		return nil, false
	}
	return o.UpBandwidthKbyte, true
}

// HasUpBandwidthKbyte returns a boolean if a field has been set.
func (o *NFSGatewayStat) HasUpBandwidthKbyte() bool {
	if o != nil && !IsNil(o.UpBandwidthKbyte) {
		return true
	}

	return false
}

// SetUpBandwidthKbyte gets a reference to the given float64 and assigns it to the UpBandwidthKbyte field.
func (o *NFSGatewayStat) SetUpBandwidthKbyte(v float64) {
	o.UpBandwidthKbyte = &v
}

// GetUpLastByteLatencyUs returns the UpLastByteLatencyUs field value if set, zero value otherwise.
func (o *NFSGatewayStat) GetUpLastByteLatencyUs() float64 {
	if o == nil || IsNil(o.UpLastByteLatencyUs) {
		var ret float64
		return ret
	}
	return *o.UpLastByteLatencyUs
}

// GetUpLastByteLatencyUsOk returns a tuple with the UpLastByteLatencyUs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFSGatewayStat) GetUpLastByteLatencyUsOk() (*float64, bool) {
	if o == nil || IsNil(o.UpLastByteLatencyUs) {
		return nil, false
	}
	return o.UpLastByteLatencyUs, true
}

// HasUpLastByteLatencyUs returns a boolean if a field has been set.
func (o *NFSGatewayStat) HasUpLastByteLatencyUs() bool {
	if o != nil && !IsNil(o.UpLastByteLatencyUs) {
		return true
	}

	return false
}

// SetUpLastByteLatencyUs gets a reference to the given float64 and assigns it to the UpLastByteLatencyUs field.
func (o *NFSGatewayStat) SetUpLastByteLatencyUs(v float64) {
	o.UpLastByteLatencyUs = &v
}

// GetUpLatencyUs returns the UpLatencyUs field value if set, zero value otherwise.
func (o *NFSGatewayStat) GetUpLatencyUs() float64 {
	if o == nil || IsNil(o.UpLatencyUs) {
		var ret float64
		return ret
	}
	return *o.UpLatencyUs
}

// GetUpLatencyUsOk returns a tuple with the UpLatencyUs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFSGatewayStat) GetUpLatencyUsOk() (*float64, bool) {
	if o == nil || IsNil(o.UpLatencyUs) {
		return nil, false
	}
	return o.UpLatencyUs, true
}

// HasUpLatencyUs returns a boolean if a field has been set.
func (o *NFSGatewayStat) HasUpLatencyUs() bool {
	if o != nil && !IsNil(o.UpLatencyUs) {
		return true
	}

	return false
}

// SetUpLatencyUs gets a reference to the given float64 and assigns it to the UpLatencyUs field.
func (o *NFSGatewayStat) SetUpLatencyUs(v float64) {
	o.UpLatencyUs = &v
}

// GetUpOps returns the UpOps field value if set, zero value otherwise.
func (o *NFSGatewayStat) GetUpOps() float64 {
	if o == nil || IsNil(o.UpOps) {
		var ret float64
		return ret
	}
	return *o.UpOps
}

// GetUpOpsOk returns a tuple with the UpOps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFSGatewayStat) GetUpOpsOk() (*float64, bool) {
	if o == nil || IsNil(o.UpOps) {
		return nil, false
	}
	return o.UpOps, true
}

// HasUpOps returns a boolean if a field has been set.
func (o *NFSGatewayStat) HasUpOps() bool {
	if o != nil && !IsNil(o.UpOps) {
		return true
	}

	return false
}

// SetUpOps gets a reference to the given float64 and assigns it to the UpOps field.
func (o *NFSGatewayStat) SetUpOps(v float64) {
	o.UpOps = &v
}

func (o NFSGatewayStat) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NFSGatewayStat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllRequests) {
		toSerialize["all_requests"] = o.AllRequests
	}
	if !IsNil(o.CompactBandwidthKbyte) {
		toSerialize["compact_bandwidth_kbyte"] = o.CompactBandwidthKbyte
	}
	if !IsNil(o.CompactOps) {
		toSerialize["compact_ops"] = o.CompactOps
	}
	if !IsNil(o.CpuUtil) {
		toSerialize["cpu_util"] = o.CpuUtil
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.DeleteLatencyUs) {
		toSerialize["delete_latency_us"] = o.DeleteLatencyUs
	}
	if !IsNil(o.DeleteOps) {
		toSerialize["delete_ops"] = o.DeleteOps
	}
	if !IsNil(o.DownBandwidthKbyte) {
		toSerialize["down_bandwidth_kbyte"] = o.DownBandwidthKbyte
	}
	if !IsNil(o.DownFirstByteLatencyUs) {
		toSerialize["down_first_byte_latency_us"] = o.DownFirstByteLatencyUs
	}
	if !IsNil(o.DownLatencyUs) {
		toSerialize["down_latency_us"] = o.DownLatencyUs
	}
	if !IsNil(o.DownOps) {
		toSerialize["down_ops"] = o.DownOps
	}
	if !IsNil(o.ListLatencyUs) {
		toSerialize["list_latency_us"] = o.ListLatencyUs
	}
	if !IsNil(o.ListOps) {
		toSerialize["list_ops"] = o.ListOps
	}
	if !IsNil(o.MemUsagePercent) {
		toSerialize["mem_usage_percent"] = o.MemUsagePercent
	}
	if !IsNil(o.MergeSpeed) {
		toSerialize["merge_speed"] = o.MergeSpeed
	}
	if !IsNil(o.ReplicationBandwidthKbyte) {
		toSerialize["replication_bandwidth_kbyte"] = o.ReplicationBandwidthKbyte
	}
	if !IsNil(o.ReplicationOps) {
		toSerialize["replication_ops"] = o.ReplicationOps
	}
	if !IsNil(o.Requests) {
		toSerialize["requests"] = o.Requests
	}
	if !IsNil(o.SyncDownBandwidthKbyte) {
		toSerialize["sync_down_bandwidth_kbyte"] = o.SyncDownBandwidthKbyte
	}
	if !IsNil(o.SyncDownLastByteLatencyUs) {
		toSerialize["sync_down_last_byte_latency_us"] = o.SyncDownLastByteLatencyUs
	}
	if !IsNil(o.SyncDownLatencyUs) {
		toSerialize["sync_down_latency_us"] = o.SyncDownLatencyUs
	}
	if !IsNil(o.SyncDownOps) {
		toSerialize["sync_down_ops"] = o.SyncDownOps
	}
	if !IsNil(o.SyncUpBandwidthKbyte) {
		toSerialize["sync_up_bandwidth_kbyte"] = o.SyncUpBandwidthKbyte
	}
	if !IsNil(o.SyncUpLatencyUs) {
		toSerialize["sync_up_latency_us"] = o.SyncUpLatencyUs
	}
	if !IsNil(o.SyncUpOps) {
		toSerialize["sync_up_ops"] = o.SyncUpOps
	}
	if !IsNil(o.UpBandwidthKbyte) {
		toSerialize["up_bandwidth_kbyte"] = o.UpBandwidthKbyte
	}
	if !IsNil(o.UpLastByteLatencyUs) {
		toSerialize["up_last_byte_latency_us"] = o.UpLastByteLatencyUs
	}
	if !IsNil(o.UpLatencyUs) {
		toSerialize["up_latency_us"] = o.UpLatencyUs
	}
	if !IsNil(o.UpOps) {
		toSerialize["up_ops"] = o.UpOps
	}
	return toSerialize, nil
}

type NullableNFSGatewayStat struct {
	value *NFSGatewayStat
	isSet bool
}

func (v NullableNFSGatewayStat) Get() *NFSGatewayStat {
	return v.value
}

func (v *NullableNFSGatewayStat) Set(val *NFSGatewayStat) {
	v.value = val
	v.isSet = true
}

func (v NullableNFSGatewayStat) IsSet() bool {
	return v.isSet
}

func (v *NullableNFSGatewayStat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNFSGatewayStat(val *NFSGatewayStat) *NullableNFSGatewayStat {
	return &NullableNFSGatewayStat{value: val, isSet: true}
}

func (v NullableNFSGatewayStat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNFSGatewayStat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


