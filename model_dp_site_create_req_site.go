/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DpSiteCreateReqSite type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DpSiteCreateReqSite{}

// DpSiteCreateReqSite struct for DpSiteCreateReqSite
type DpSiteCreateReqSite struct {
	// site address
	Address *string `json:"address,omitempty"`
	Config DpSiteConfig `json:"config"`
	// crypto key
	CryptoKeyId *int64 `json:"crypto_key_id,omitempty"`
	// site name
	Name string `json:"name"`
	// platform of site
	Platform string `json:"platform"`
	// protection type
	ProtectionType string `json:"protection_type"`
	// remote cluster
	RemoteClusterId *int64 `json:"remote_cluster_id,omitempty"`
	// service of site
	Service string `json:"service"`
}

type _DpSiteCreateReqSite DpSiteCreateReqSite

// NewDpSiteCreateReqSite instantiates a new DpSiteCreateReqSite object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDpSiteCreateReqSite(config DpSiteConfig, name string, platform string, protectionType string, service string) *DpSiteCreateReqSite {
	this := DpSiteCreateReqSite{}
	this.Config = config
	this.Name = name
	this.Platform = platform
	this.ProtectionType = protectionType
	this.Service = service
	return &this
}

// NewDpSiteCreateReqSiteWithDefaults instantiates a new DpSiteCreateReqSite object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDpSiteCreateReqSiteWithDefaults() *DpSiteCreateReqSite {
	this := DpSiteCreateReqSite{}
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *DpSiteCreateReqSite) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpSiteCreateReqSite) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *DpSiteCreateReqSite) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *DpSiteCreateReqSite) SetAddress(v string) {
	o.Address = &v
}

// GetConfig returns the Config field value
func (o *DpSiteCreateReqSite) GetConfig() DpSiteConfig {
	if o == nil {
		var ret DpSiteConfig
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *DpSiteCreateReqSite) GetConfigOk() (*DpSiteConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Config, true
}

// SetConfig sets field value
func (o *DpSiteCreateReqSite) SetConfig(v DpSiteConfig) {
	o.Config = v
}

// GetCryptoKeyId returns the CryptoKeyId field value if set, zero value otherwise.
func (o *DpSiteCreateReqSite) GetCryptoKeyId() int64 {
	if o == nil || IsNil(o.CryptoKeyId) {
		var ret int64
		return ret
	}
	return *o.CryptoKeyId
}

// GetCryptoKeyIdOk returns a tuple with the CryptoKeyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpSiteCreateReqSite) GetCryptoKeyIdOk() (*int64, bool) {
	if o == nil || IsNil(o.CryptoKeyId) {
		return nil, false
	}
	return o.CryptoKeyId, true
}

// HasCryptoKeyId returns a boolean if a field has been set.
func (o *DpSiteCreateReqSite) HasCryptoKeyId() bool {
	if o != nil && !IsNil(o.CryptoKeyId) {
		return true
	}

	return false
}

// SetCryptoKeyId gets a reference to the given int64 and assigns it to the CryptoKeyId field.
func (o *DpSiteCreateReqSite) SetCryptoKeyId(v int64) {
	o.CryptoKeyId = &v
}

// GetName returns the Name field value
func (o *DpSiteCreateReqSite) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DpSiteCreateReqSite) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DpSiteCreateReqSite) SetName(v string) {
	o.Name = v
}

// GetPlatform returns the Platform field value
func (o *DpSiteCreateReqSite) GetPlatform() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Platform
}

// GetPlatformOk returns a tuple with the Platform field value
// and a boolean to check if the value has been set.
func (o *DpSiteCreateReqSite) GetPlatformOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Platform, true
}

// SetPlatform sets field value
func (o *DpSiteCreateReqSite) SetPlatform(v string) {
	o.Platform = v
}

// GetProtectionType returns the ProtectionType field value
func (o *DpSiteCreateReqSite) GetProtectionType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProtectionType
}

// GetProtectionTypeOk returns a tuple with the ProtectionType field value
// and a boolean to check if the value has been set.
func (o *DpSiteCreateReqSite) GetProtectionTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProtectionType, true
}

// SetProtectionType sets field value
func (o *DpSiteCreateReqSite) SetProtectionType(v string) {
	o.ProtectionType = v
}

// GetRemoteClusterId returns the RemoteClusterId field value if set, zero value otherwise.
func (o *DpSiteCreateReqSite) GetRemoteClusterId() int64 {
	if o == nil || IsNil(o.RemoteClusterId) {
		var ret int64
		return ret
	}
	return *o.RemoteClusterId
}

// GetRemoteClusterIdOk returns a tuple with the RemoteClusterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DpSiteCreateReqSite) GetRemoteClusterIdOk() (*int64, bool) {
	if o == nil || IsNil(o.RemoteClusterId) {
		return nil, false
	}
	return o.RemoteClusterId, true
}

// HasRemoteClusterId returns a boolean if a field has been set.
func (o *DpSiteCreateReqSite) HasRemoteClusterId() bool {
	if o != nil && !IsNil(o.RemoteClusterId) {
		return true
	}

	return false
}

// SetRemoteClusterId gets a reference to the given int64 and assigns it to the RemoteClusterId field.
func (o *DpSiteCreateReqSite) SetRemoteClusterId(v int64) {
	o.RemoteClusterId = &v
}

// GetService returns the Service field value
func (o *DpSiteCreateReqSite) GetService() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Service
}

// GetServiceOk returns a tuple with the Service field value
// and a boolean to check if the value has been set.
func (o *DpSiteCreateReqSite) GetServiceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Service, true
}

// SetService sets field value
func (o *DpSiteCreateReqSite) SetService(v string) {
	o.Service = v
}

func (o DpSiteCreateReqSite) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DpSiteCreateReqSite) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	toSerialize["config"] = o.Config
	if !IsNil(o.CryptoKeyId) {
		toSerialize["crypto_key_id"] = o.CryptoKeyId
	}
	toSerialize["name"] = o.Name
	toSerialize["platform"] = o.Platform
	toSerialize["protection_type"] = o.ProtectionType
	if !IsNil(o.RemoteClusterId) {
		toSerialize["remote_cluster_id"] = o.RemoteClusterId
	}
	toSerialize["service"] = o.Service
	return toSerialize, nil
}

func (o *DpSiteCreateReqSite) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"config",
		"name",
		"platform",
		"protection_type",
		"service",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDpSiteCreateReqSite := _DpSiteCreateReqSite{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDpSiteCreateReqSite)

	if err != nil {
		return err
	}

	*o = DpSiteCreateReqSite(varDpSiteCreateReqSite)

	return err
}

type NullableDpSiteCreateReqSite struct {
	value *DpSiteCreateReqSite
	isSet bool
}

func (v NullableDpSiteCreateReqSite) Get() *DpSiteCreateReqSite {
	return v.value
}

func (v *NullableDpSiteCreateReqSite) Set(val *DpSiteCreateReqSite) {
	v.value = val
	v.isSet = true
}

func (v NullableDpSiteCreateReqSite) IsSet() bool {
	return v.isSet
}

func (v *NullableDpSiteCreateReqSite) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDpSiteCreateReqSite(val *DpSiteCreateReqSite) *NullableDpSiteCreateReqSite {
	return &NullableDpSiteCreateReqSite{value: val, isSet: true}
}

func (v NullableDpSiteCreateReqSite) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDpSiteCreateReqSite) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


