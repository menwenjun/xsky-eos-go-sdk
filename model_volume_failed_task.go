/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the VolumeFailedTask type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VolumeFailedTask{}

// VolumeFailedTask VolumeFailedTask defines volume failed task
type VolumeFailedTask struct {
	Abort *float64 `json:"abort,omitempty"`
	Busy *float64 `json:"busy,omitempty"`
	CheckCond *float64 `json:"check_cond,omitempty"`
	ResvConflict *float64 `json:"resv_conflict,omitempty"`
}

// NewVolumeFailedTask instantiates a new VolumeFailedTask object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumeFailedTask() *VolumeFailedTask {
	this := VolumeFailedTask{}
	return &this
}

// NewVolumeFailedTaskWithDefaults instantiates a new VolumeFailedTask object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeFailedTaskWithDefaults() *VolumeFailedTask {
	this := VolumeFailedTask{}
	return &this
}

// GetAbort returns the Abort field value if set, zero value otherwise.
func (o *VolumeFailedTask) GetAbort() float64 {
	if o == nil || IsNil(o.Abort) {
		var ret float64
		return ret
	}
	return *o.Abort
}

// GetAbortOk returns a tuple with the Abort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeFailedTask) GetAbortOk() (*float64, bool) {
	if o == nil || IsNil(o.Abort) {
		return nil, false
	}
	return o.Abort, true
}

// HasAbort returns a boolean if a field has been set.
func (o *VolumeFailedTask) HasAbort() bool {
	if o != nil && !IsNil(o.Abort) {
		return true
	}

	return false
}

// SetAbort gets a reference to the given float64 and assigns it to the Abort field.
func (o *VolumeFailedTask) SetAbort(v float64) {
	o.Abort = &v
}

// GetBusy returns the Busy field value if set, zero value otherwise.
func (o *VolumeFailedTask) GetBusy() float64 {
	if o == nil || IsNil(o.Busy) {
		var ret float64
		return ret
	}
	return *o.Busy
}

// GetBusyOk returns a tuple with the Busy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeFailedTask) GetBusyOk() (*float64, bool) {
	if o == nil || IsNil(o.Busy) {
		return nil, false
	}
	return o.Busy, true
}

// HasBusy returns a boolean if a field has been set.
func (o *VolumeFailedTask) HasBusy() bool {
	if o != nil && !IsNil(o.Busy) {
		return true
	}

	return false
}

// SetBusy gets a reference to the given float64 and assigns it to the Busy field.
func (o *VolumeFailedTask) SetBusy(v float64) {
	o.Busy = &v
}

// GetCheckCond returns the CheckCond field value if set, zero value otherwise.
func (o *VolumeFailedTask) GetCheckCond() float64 {
	if o == nil || IsNil(o.CheckCond) {
		var ret float64
		return ret
	}
	return *o.CheckCond
}

// GetCheckCondOk returns a tuple with the CheckCond field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeFailedTask) GetCheckCondOk() (*float64, bool) {
	if o == nil || IsNil(o.CheckCond) {
		return nil, false
	}
	return o.CheckCond, true
}

// HasCheckCond returns a boolean if a field has been set.
func (o *VolumeFailedTask) HasCheckCond() bool {
	if o != nil && !IsNil(o.CheckCond) {
		return true
	}

	return false
}

// SetCheckCond gets a reference to the given float64 and assigns it to the CheckCond field.
func (o *VolumeFailedTask) SetCheckCond(v float64) {
	o.CheckCond = &v
}

// GetResvConflict returns the ResvConflict field value if set, zero value otherwise.
func (o *VolumeFailedTask) GetResvConflict() float64 {
	if o == nil || IsNil(o.ResvConflict) {
		var ret float64
		return ret
	}
	return *o.ResvConflict
}

// GetResvConflictOk returns a tuple with the ResvConflict field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeFailedTask) GetResvConflictOk() (*float64, bool) {
	if o == nil || IsNil(o.ResvConflict) {
		return nil, false
	}
	return o.ResvConflict, true
}

// HasResvConflict returns a boolean if a field has been set.
func (o *VolumeFailedTask) HasResvConflict() bool {
	if o != nil && !IsNil(o.ResvConflict) {
		return true
	}

	return false
}

// SetResvConflict gets a reference to the given float64 and assigns it to the ResvConflict field.
func (o *VolumeFailedTask) SetResvConflict(v float64) {
	o.ResvConflict = &v
}

func (o VolumeFailedTask) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VolumeFailedTask) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Abort) {
		toSerialize["abort"] = o.Abort
	}
	if !IsNil(o.Busy) {
		toSerialize["busy"] = o.Busy
	}
	if !IsNil(o.CheckCond) {
		toSerialize["check_cond"] = o.CheckCond
	}
	if !IsNil(o.ResvConflict) {
		toSerialize["resv_conflict"] = o.ResvConflict
	}
	return toSerialize, nil
}

type NullableVolumeFailedTask struct {
	value *VolumeFailedTask
	isSet bool
}

func (v NullableVolumeFailedTask) Get() *VolumeFailedTask {
	return v.value
}

func (v *NullableVolumeFailedTask) Set(val *VolumeFailedTask) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeFailedTask) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeFailedTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeFailedTask(val *VolumeFailedTask) *NullableVolumeFailedTask {
	return &NullableVolumeFailedTask{value: val, isSet: true}
}

func (v NullableVolumeFailedTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeFailedTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


