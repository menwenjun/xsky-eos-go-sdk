/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RegionsResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegionsResp{}

// RegionsResp struct for RegionsResp
type RegionsResp struct {
	Regions []Region `json:"regions,omitempty"`
}

// NewRegionsResp instantiates a new RegionsResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegionsResp() *RegionsResp {
	this := RegionsResp{}
	return &this
}

// NewRegionsRespWithDefaults instantiates a new RegionsResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegionsRespWithDefaults() *RegionsResp {
	this := RegionsResp{}
	return &this
}

// GetRegions returns the Regions field value if set, zero value otherwise.
func (o *RegionsResp) GetRegions() []Region {
	if o == nil || IsNil(o.Regions) {
		var ret []Region
		return ret
	}
	return o.Regions
}

// GetRegionsOk returns a tuple with the Regions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionsResp) GetRegionsOk() ([]Region, bool) {
	if o == nil || IsNil(o.Regions) {
		return nil, false
	}
	return o.Regions, true
}

// HasRegions returns a boolean if a field has been set.
func (o *RegionsResp) HasRegions() bool {
	if o != nil && !IsNil(o.Regions) {
		return true
	}

	return false
}

// SetRegions gets a reference to the given []Region and assigns it to the Regions field.
func (o *RegionsResp) SetRegions(v []Region) {
	o.Regions = v
}

func (o RegionsResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegionsResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Regions) {
		toSerialize["regions"] = o.Regions
	}
	return toSerialize, nil
}

type NullableRegionsResp struct {
	value *RegionsResp
	isSet bool
}

func (v NullableRegionsResp) Get() *RegionsResp {
	return v.value
}

func (v *NullableRegionsResp) Set(val *RegionsResp) {
	v.value = val
	v.isSet = true
}

func (v NullableRegionsResp) IsSet() bool {
	return v.isSet
}

func (v *NullableRegionsResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegionsResp(val *RegionsResp) *NullableRegionsResp {
	return &NullableRegionsResp{value: val, isSet: true}
}

func (v NullableRegionsResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegionsResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


