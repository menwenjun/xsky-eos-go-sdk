/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FCPortNestview type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FCPortNestview{}

// FCPortNestview struct for FCPortNestview
type FCPortNestview struct {
	Id *int64 `json:"id,omitempty"`
	PciAddress *string `json:"pci_address,omitempty"`
}

// NewFCPortNestview instantiates a new FCPortNestview object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFCPortNestview() *FCPortNestview {
	this := FCPortNestview{}
	return &this
}

// NewFCPortNestviewWithDefaults instantiates a new FCPortNestview object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFCPortNestviewWithDefaults() *FCPortNestview {
	this := FCPortNestview{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FCPortNestview) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FCPortNestview) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FCPortNestview) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *FCPortNestview) SetId(v int64) {
	o.Id = &v
}

// GetPciAddress returns the PciAddress field value if set, zero value otherwise.
func (o *FCPortNestview) GetPciAddress() string {
	if o == nil || IsNil(o.PciAddress) {
		var ret string
		return ret
	}
	return *o.PciAddress
}

// GetPciAddressOk returns a tuple with the PciAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FCPortNestview) GetPciAddressOk() (*string, bool) {
	if o == nil || IsNil(o.PciAddress) {
		return nil, false
	}
	return o.PciAddress, true
}

// HasPciAddress returns a boolean if a field has been set.
func (o *FCPortNestview) HasPciAddress() bool {
	if o != nil && !IsNil(o.PciAddress) {
		return true
	}

	return false
}

// SetPciAddress gets a reference to the given string and assigns it to the PciAddress field.
func (o *FCPortNestview) SetPciAddress(v string) {
	o.PciAddress = &v
}

func (o FCPortNestview) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FCPortNestview) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.PciAddress) {
		toSerialize["pci_address"] = o.PciAddress
	}
	return toSerialize, nil
}

type NullableFCPortNestview struct {
	value *FCPortNestview
	isSet bool
}

func (v NullableFCPortNestview) Get() *FCPortNestview {
	return v.value
}

func (v *NullableFCPortNestview) Set(val *FCPortNestview) {
	v.value = val
	v.isSet = true
}

func (v NullableFCPortNestview) IsSet() bool {
	return v.isSet
}

func (v *NullableFCPortNestview) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFCPortNestview(val *FCPortNestview) *NullableFCPortNestview {
	return &NullableFCPortNestview{value: val, isSet: true}
}

func (v NullableFCPortNestview) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFCPortNestview) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


