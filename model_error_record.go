/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the ErrorRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrorRecord{}

// ErrorRecord ErrorRecord defines the error record attributes. +X:model:generate=RUL
type ErrorRecord struct {
	ActionLog *ActionLogNestview `json:"action_log,omitempty"`
	Alert *AlertNestview `json:"alert,omitempty"`
	AlertInfo *AlertInfoNestview `json:"alert_info,omitempty"`
	Code *string `json:"code,omitempty"`
	Create *time.Time `json:"create,omitempty"`
	Details *string `json:"details,omitempty"`
	ExtraData map[string]interface{} `json:"extra_data,omitempty"`
	Host *HostNestview `json:"host,omitempty"`
	Id *int64 `json:"id,omitempty"`
	Message *string `json:"message,omitempty"`
}

// NewErrorRecord instantiates a new ErrorRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorRecord() *ErrorRecord {
	this := ErrorRecord{}
	return &this
}

// NewErrorRecordWithDefaults instantiates a new ErrorRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorRecordWithDefaults() *ErrorRecord {
	this := ErrorRecord{}
	return &this
}

// GetActionLog returns the ActionLog field value if set, zero value otherwise.
func (o *ErrorRecord) GetActionLog() ActionLogNestview {
	if o == nil || IsNil(o.ActionLog) {
		var ret ActionLogNestview
		return ret
	}
	return *o.ActionLog
}

// GetActionLogOk returns a tuple with the ActionLog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorRecord) GetActionLogOk() (*ActionLogNestview, bool) {
	if o == nil || IsNil(o.ActionLog) {
		return nil, false
	}
	return o.ActionLog, true
}

// HasActionLog returns a boolean if a field has been set.
func (o *ErrorRecord) HasActionLog() bool {
	if o != nil && !IsNil(o.ActionLog) {
		return true
	}

	return false
}

// SetActionLog gets a reference to the given ActionLogNestview and assigns it to the ActionLog field.
func (o *ErrorRecord) SetActionLog(v ActionLogNestview) {
	o.ActionLog = &v
}

// GetAlert returns the Alert field value if set, zero value otherwise.
func (o *ErrorRecord) GetAlert() AlertNestview {
	if o == nil || IsNil(o.Alert) {
		var ret AlertNestview
		return ret
	}
	return *o.Alert
}

// GetAlertOk returns a tuple with the Alert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorRecord) GetAlertOk() (*AlertNestview, bool) {
	if o == nil || IsNil(o.Alert) {
		return nil, false
	}
	return o.Alert, true
}

// HasAlert returns a boolean if a field has been set.
func (o *ErrorRecord) HasAlert() bool {
	if o != nil && !IsNil(o.Alert) {
		return true
	}

	return false
}

// SetAlert gets a reference to the given AlertNestview and assigns it to the Alert field.
func (o *ErrorRecord) SetAlert(v AlertNestview) {
	o.Alert = &v
}

// GetAlertInfo returns the AlertInfo field value if set, zero value otherwise.
func (o *ErrorRecord) GetAlertInfo() AlertInfoNestview {
	if o == nil || IsNil(o.AlertInfo) {
		var ret AlertInfoNestview
		return ret
	}
	return *o.AlertInfo
}

// GetAlertInfoOk returns a tuple with the AlertInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorRecord) GetAlertInfoOk() (*AlertInfoNestview, bool) {
	if o == nil || IsNil(o.AlertInfo) {
		return nil, false
	}
	return o.AlertInfo, true
}

// HasAlertInfo returns a boolean if a field has been set.
func (o *ErrorRecord) HasAlertInfo() bool {
	if o != nil && !IsNil(o.AlertInfo) {
		return true
	}

	return false
}

// SetAlertInfo gets a reference to the given AlertInfoNestview and assigns it to the AlertInfo field.
func (o *ErrorRecord) SetAlertInfo(v AlertInfoNestview) {
	o.AlertInfo = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ErrorRecord) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorRecord) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *ErrorRecord) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *ErrorRecord) SetCode(v string) {
	o.Code = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *ErrorRecord) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorRecord) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *ErrorRecord) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *ErrorRecord) SetCreate(v time.Time) {
	o.Create = &v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *ErrorRecord) GetDetails() string {
	if o == nil || IsNil(o.Details) {
		var ret string
		return ret
	}
	return *o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorRecord) GetDetailsOk() (*string, bool) {
	if o == nil || IsNil(o.Details) {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *ErrorRecord) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given string and assigns it to the Details field.
func (o *ErrorRecord) SetDetails(v string) {
	o.Details = &v
}

// GetExtraData returns the ExtraData field value if set, zero value otherwise.
func (o *ErrorRecord) GetExtraData() map[string]interface{} {
	if o == nil || IsNil(o.ExtraData) {
		var ret map[string]interface{}
		return ret
	}
	return o.ExtraData
}

// GetExtraDataOk returns a tuple with the ExtraData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorRecord) GetExtraDataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExtraData) {
		return map[string]interface{}{}, false
	}
	return o.ExtraData, true
}

// HasExtraData returns a boolean if a field has been set.
func (o *ErrorRecord) HasExtraData() bool {
	if o != nil && !IsNil(o.ExtraData) {
		return true
	}

	return false
}

// SetExtraData gets a reference to the given map[string]interface{} and assigns it to the ExtraData field.
func (o *ErrorRecord) SetExtraData(v map[string]interface{}) {
	o.ExtraData = v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *ErrorRecord) GetHost() HostNestview {
	if o == nil || IsNil(o.Host) {
		var ret HostNestview
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorRecord) GetHostOk() (*HostNestview, bool) {
	if o == nil || IsNil(o.Host) {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *ErrorRecord) HasHost() bool {
	if o != nil && !IsNil(o.Host) {
		return true
	}

	return false
}

// SetHost gets a reference to the given HostNestview and assigns it to the Host field.
func (o *ErrorRecord) SetHost(v HostNestview) {
	o.Host = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ErrorRecord) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorRecord) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ErrorRecord) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *ErrorRecord) SetId(v int64) {
	o.Id = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ErrorRecord) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorRecord) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ErrorRecord) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ErrorRecord) SetMessage(v string) {
	o.Message = &v
}

func (o ErrorRecord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrorRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActionLog) {
		toSerialize["action_log"] = o.ActionLog
	}
	if !IsNil(o.Alert) {
		toSerialize["alert"] = o.Alert
	}
	if !IsNil(o.AlertInfo) {
		toSerialize["alert_info"] = o.AlertInfo
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.Details) {
		toSerialize["details"] = o.Details
	}
	if !IsNil(o.ExtraData) {
		toSerialize["extra_data"] = o.ExtraData
	}
	if !IsNil(o.Host) {
		toSerialize["host"] = o.Host
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	return toSerialize, nil
}

type NullableErrorRecord struct {
	value *ErrorRecord
	isSet bool
}

func (v NullableErrorRecord) Get() *ErrorRecord {
	return v.value
}

func (v *NullableErrorRecord) Set(val *ErrorRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorRecord(val *ErrorRecord) *NullableErrorRecord {
	return &NullableErrorRecord{value: val, isSet: true}
}

func (v NullableErrorRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


