/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PoolGCPolicyPlan type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PoolGCPolicyPlan{}

// PoolGCPolicyPlan PoolGCPolicyPlan defines request and response for tier pool gc qos policy plan
type PoolGCPolicyPlan struct {
	GcPolicyPlans []GcPlan `json:"gc_policy_plans"`
}

type _PoolGCPolicyPlan PoolGCPolicyPlan

// NewPoolGCPolicyPlan instantiates a new PoolGCPolicyPlan object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPoolGCPolicyPlan(gcPolicyPlans []GcPlan) *PoolGCPolicyPlan {
	this := PoolGCPolicyPlan{}
	this.GcPolicyPlans = gcPolicyPlans
	return &this
}

// NewPoolGCPolicyPlanWithDefaults instantiates a new PoolGCPolicyPlan object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPoolGCPolicyPlanWithDefaults() *PoolGCPolicyPlan {
	this := PoolGCPolicyPlan{}
	return &this
}

// GetGcPolicyPlans returns the GcPolicyPlans field value
func (o *PoolGCPolicyPlan) GetGcPolicyPlans() []GcPlan {
	if o == nil {
		var ret []GcPlan
		return ret
	}

	return o.GcPolicyPlans
}

// GetGcPolicyPlansOk returns a tuple with the GcPolicyPlans field value
// and a boolean to check if the value has been set.
func (o *PoolGCPolicyPlan) GetGcPolicyPlansOk() ([]GcPlan, bool) {
	if o == nil {
		return nil, false
	}
	return o.GcPolicyPlans, true
}

// SetGcPolicyPlans sets field value
func (o *PoolGCPolicyPlan) SetGcPolicyPlans(v []GcPlan) {
	o.GcPolicyPlans = v
}

func (o PoolGCPolicyPlan) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PoolGCPolicyPlan) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["gc_policy_plans"] = o.GcPolicyPlans
	return toSerialize, nil
}

func (o *PoolGCPolicyPlan) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"gc_policy_plans",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPoolGCPolicyPlan := _PoolGCPolicyPlan{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPoolGCPolicyPlan)

	if err != nil {
		return err
	}

	*o = PoolGCPolicyPlan(varPoolGCPolicyPlan)

	return err
}

type NullablePoolGCPolicyPlan struct {
	value *PoolGCPolicyPlan
	isSet bool
}

func (v NullablePoolGCPolicyPlan) Get() *PoolGCPolicyPlan {
	return v.value
}

func (v *NullablePoolGCPolicyPlan) Set(val *PoolGCPolicyPlan) {
	v.value = val
	v.isSet = true
}

func (v NullablePoolGCPolicyPlan) IsSet() bool {
	return v.isSet
}

func (v *NullablePoolGCPolicyPlan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePoolGCPolicyPlan(val *PoolGCPolicyPlan) *NullablePoolGCPolicyPlan {
	return &NullablePoolGCPolicyPlan{value: val, isSet: true}
}

func (v NullablePoolGCPolicyPlan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePoolGCPolicyPlan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


