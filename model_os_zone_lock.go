/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the OSZoneLock type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OSZoneLock{}

// OSZoneLock OSZoneLock defines model of os zone lock. +X:model:generate; +X:benchmark:
type OSZoneLock struct {
	Cluster *ClusterNestview `json:"cluster,omitempty"`
	Create *time.Time `json:"create,omitempty"`
	ExpiredTime *time.Time `json:"expired_time,omitempty"`
	Key *string `json:"key,omitempty"`
	ResourceType *string `json:"resource_type,omitempty"`
	Update *time.Time `json:"update,omitempty"`
	Uuid *string `json:"uuid,omitempty"`
	Value *string `json:"value,omitempty"`
}

// NewOSZoneLock instantiates a new OSZoneLock object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOSZoneLock() *OSZoneLock {
	this := OSZoneLock{}
	return &this
}

// NewOSZoneLockWithDefaults instantiates a new OSZoneLock object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOSZoneLockWithDefaults() *OSZoneLock {
	this := OSZoneLock{}
	return &this
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *OSZoneLock) GetCluster() ClusterNestview {
	if o == nil || IsNil(o.Cluster) {
		var ret ClusterNestview
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSZoneLock) GetClusterOk() (*ClusterNestview, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *OSZoneLock) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given ClusterNestview and assigns it to the Cluster field.
func (o *OSZoneLock) SetCluster(v ClusterNestview) {
	o.Cluster = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *OSZoneLock) GetCreate() time.Time {
	if o == nil || IsNil(o.Create) {
		var ret time.Time
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSZoneLock) GetCreateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *OSZoneLock) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given time.Time and assigns it to the Create field.
func (o *OSZoneLock) SetCreate(v time.Time) {
	o.Create = &v
}

// GetExpiredTime returns the ExpiredTime field value if set, zero value otherwise.
func (o *OSZoneLock) GetExpiredTime() time.Time {
	if o == nil || IsNil(o.ExpiredTime) {
		var ret time.Time
		return ret
	}
	return *o.ExpiredTime
}

// GetExpiredTimeOk returns a tuple with the ExpiredTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSZoneLock) GetExpiredTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpiredTime) {
		return nil, false
	}
	return o.ExpiredTime, true
}

// HasExpiredTime returns a boolean if a field has been set.
func (o *OSZoneLock) HasExpiredTime() bool {
	if o != nil && !IsNil(o.ExpiredTime) {
		return true
	}

	return false
}

// SetExpiredTime gets a reference to the given time.Time and assigns it to the ExpiredTime field.
func (o *OSZoneLock) SetExpiredTime(v time.Time) {
	o.ExpiredTime = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *OSZoneLock) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSZoneLock) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *OSZoneLock) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *OSZoneLock) SetKey(v string) {
	o.Key = &v
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *OSZoneLock) GetResourceType() string {
	if o == nil || IsNil(o.ResourceType) {
		var ret string
		return ret
	}
	return *o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSZoneLock) GetResourceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceType) {
		return nil, false
	}
	return o.ResourceType, true
}

// HasResourceType returns a boolean if a field has been set.
func (o *OSZoneLock) HasResourceType() bool {
	if o != nil && !IsNil(o.ResourceType) {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given string and assigns it to the ResourceType field.
func (o *OSZoneLock) SetResourceType(v string) {
	o.ResourceType = &v
}

// GetUpdate returns the Update field value if set, zero value otherwise.
func (o *OSZoneLock) GetUpdate() time.Time {
	if o == nil || IsNil(o.Update) {
		var ret time.Time
		return ret
	}
	return *o.Update
}

// GetUpdateOk returns a tuple with the Update field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSZoneLock) GetUpdateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Update) {
		return nil, false
	}
	return o.Update, true
}

// HasUpdate returns a boolean if a field has been set.
func (o *OSZoneLock) HasUpdate() bool {
	if o != nil && !IsNil(o.Update) {
		return true
	}

	return false
}

// SetUpdate gets a reference to the given time.Time and assigns it to the Update field.
func (o *OSZoneLock) SetUpdate(v time.Time) {
	o.Update = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *OSZoneLock) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSZoneLock) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *OSZoneLock) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *OSZoneLock) SetUuid(v string) {
	o.Uuid = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *OSZoneLock) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSZoneLock) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *OSZoneLock) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *OSZoneLock) SetValue(v string) {
	o.Value = &v
}

func (o OSZoneLock) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OSZoneLock) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.ExpiredTime) {
		toSerialize["expired_time"] = o.ExpiredTime
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.ResourceType) {
		toSerialize["resource_type"] = o.ResourceType
	}
	if !IsNil(o.Update) {
		toSerialize["update"] = o.Update
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableOSZoneLock struct {
	value *OSZoneLock
	isSet bool
}

func (v NullableOSZoneLock) Get() *OSZoneLock {
	return v.value
}

func (v *NullableOSZoneLock) Set(val *OSZoneLock) {
	v.value = val
	v.isSet = true
}

func (v NullableOSZoneLock) IsSet() bool {
	return v.isSet
}

func (v *NullableOSZoneLock) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOSZoneLock(val *OSZoneLock) *NullableOSZoneLock {
	return &NullableOSZoneLock{value: val, isSet: true}
}

func (v NullableOSZoneLock) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOSZoneLock) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


