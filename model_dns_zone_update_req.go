/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DNSZoneUpdateReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DNSZoneUpdateReq{}

// DNSZoneUpdateReq struct for DNSZoneUpdateReq
type DNSZoneUpdateReq struct {
	DnsZone *DNSZoneUpdateReqZone `json:"dns_zone,omitempty"`
}

// NewDNSZoneUpdateReq instantiates a new DNSZoneUpdateReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDNSZoneUpdateReq() *DNSZoneUpdateReq {
	this := DNSZoneUpdateReq{}
	return &this
}

// NewDNSZoneUpdateReqWithDefaults instantiates a new DNSZoneUpdateReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDNSZoneUpdateReqWithDefaults() *DNSZoneUpdateReq {
	this := DNSZoneUpdateReq{}
	return &this
}

// GetDnsZone returns the DnsZone field value if set, zero value otherwise.
func (o *DNSZoneUpdateReq) GetDnsZone() DNSZoneUpdateReqZone {
	if o == nil || IsNil(o.DnsZone) {
		var ret DNSZoneUpdateReqZone
		return ret
	}
	return *o.DnsZone
}

// GetDnsZoneOk returns a tuple with the DnsZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSZoneUpdateReq) GetDnsZoneOk() (*DNSZoneUpdateReqZone, bool) {
	if o == nil || IsNil(o.DnsZone) {
		return nil, false
	}
	return o.DnsZone, true
}

// HasDnsZone returns a boolean if a field has been set.
func (o *DNSZoneUpdateReq) HasDnsZone() bool {
	if o != nil && !IsNil(o.DnsZone) {
		return true
	}

	return false
}

// SetDnsZone gets a reference to the given DNSZoneUpdateReqZone and assigns it to the DnsZone field.
func (o *DNSZoneUpdateReq) SetDnsZone(v DNSZoneUpdateReqZone) {
	o.DnsZone = &v
}

func (o DNSZoneUpdateReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DNSZoneUpdateReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DnsZone) {
		toSerialize["dns_zone"] = o.DnsZone
	}
	return toSerialize, nil
}

type NullableDNSZoneUpdateReq struct {
	value *DNSZoneUpdateReq
	isSet bool
}

func (v NullableDNSZoneUpdateReq) Get() *DNSZoneUpdateReq {
	return v.value
}

func (v *NullableDNSZoneUpdateReq) Set(val *DNSZoneUpdateReq) {
	v.value = val
	v.isSet = true
}

func (v NullableDNSZoneUpdateReq) IsSet() bool {
	return v.isSet
}

func (v *NullableDNSZoneUpdateReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDNSZoneUpdateReq(val *DNSZoneUpdateReq) *NullableDNSZoneUpdateReq {
	return &NullableDNSZoneUpdateReq{value: val, isSet: true}
}

func (v NullableDNSZoneUpdateReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDNSZoneUpdateReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


