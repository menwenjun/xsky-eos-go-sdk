/*
XMS API

XMS is the controller of distributed storage system

API version: XSCALEROS_6.4.000.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SSLCertificatesResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SSLCertificatesResp{}

// SSLCertificatesResp struct for SSLCertificatesResp
type SSLCertificatesResp struct {
	// ssl certificates
	SslCertificates []SSLCertificate `json:"ssl_certificates"`
}

type _SSLCertificatesResp SSLCertificatesResp

// NewSSLCertificatesResp instantiates a new SSLCertificatesResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSSLCertificatesResp(sslCertificates []SSLCertificate) *SSLCertificatesResp {
	this := SSLCertificatesResp{}
	this.SslCertificates = sslCertificates
	return &this
}

// NewSSLCertificatesRespWithDefaults instantiates a new SSLCertificatesResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSSLCertificatesRespWithDefaults() *SSLCertificatesResp {
	this := SSLCertificatesResp{}
	return &this
}

// GetSslCertificates returns the SslCertificates field value
func (o *SSLCertificatesResp) GetSslCertificates() []SSLCertificate {
	if o == nil {
		var ret []SSLCertificate
		return ret
	}

	return o.SslCertificates
}

// GetSslCertificatesOk returns a tuple with the SslCertificates field value
// and a boolean to check if the value has been set.
func (o *SSLCertificatesResp) GetSslCertificatesOk() ([]SSLCertificate, bool) {
	if o == nil {
		return nil, false
	}
	return o.SslCertificates, true
}

// SetSslCertificates sets field value
func (o *SSLCertificatesResp) SetSslCertificates(v []SSLCertificate) {
	o.SslCertificates = v
}

func (o SSLCertificatesResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SSLCertificatesResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ssl_certificates"] = o.SslCertificates
	return toSerialize, nil
}

func (o *SSLCertificatesResp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ssl_certificates",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSSLCertificatesResp := _SSLCertificatesResp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSSLCertificatesResp)

	if err != nil {
		return err
	}

	*o = SSLCertificatesResp(varSSLCertificatesResp)

	return err
}

type NullableSSLCertificatesResp struct {
	value *SSLCertificatesResp
	isSet bool
}

func (v NullableSSLCertificatesResp) Get() *SSLCertificatesResp {
	return v.value
}

func (v *NullableSSLCertificatesResp) Set(val *SSLCertificatesResp) {
	v.value = val
	v.isSet = true
}

func (v NullableSSLCertificatesResp) IsSet() bool {
	return v.isSet
}

func (v *NullableSSLCertificatesResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSSLCertificatesResp(val *SSLCertificatesResp) *NullableSSLCertificatesResp {
	return &NullableSSLCertificatesResp{value: val, isSet: true}
}

func (v NullableSSLCertificatesResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSSLCertificatesResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


